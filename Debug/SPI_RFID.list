
SPI_RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a038  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800a1d8  0800a1d8  0001a1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a688  0800a688  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a688  0800a688  0001a688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a690  0800a690  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a690  0800a690  0001a690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a694  0800a694  0001a694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d00  2000007c  0800a714  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d7c  0800a714  00024d7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021ebc  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004084  00000000  00000000  00041f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00045ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001730  00000000  00000000  00047888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ce0  00000000  00000000  00048fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a958  00000000  00000000  00061c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bea9  00000000  00000000  0007c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118499  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ca8  00000000  00000000  001184ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a1c0 	.word	0x0800a1c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	0800a1c0 	.word	0x0800a1c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <delay_us>:
DHT_DataTypeDef DHT_Data;

extern TIM_HandleTypeDef htim10;

void delay_us(uint32_t us)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCounter(&htim10, 0);
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <delay_us+0x34>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2200      	movs	r2, #0
 8000586:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim10);
 8000588:	4808      	ldr	r0, [pc, #32]	; (80005ac <delay_us+0x34>)
 800058a:	f003 f9a3 	bl	80038d4 <HAL_TIM_Base_Start>
	while(__HAL_TIM_GetCounter(&htim10) < us);
 800058e:	bf00      	nop
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <delay_us+0x34>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f9      	bhi.n	8000590 <delay_us+0x18>
	HAL_TIM_Base_Stop(&htim10);
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <delay_us+0x34>)
 800059e:	f003 f9f3 	bl	8003988 <HAL_TIM_Base_Stop>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20004a94 	.word	0x20004a94

080005b0 <Set_Pin_Output>:

//volatile float Temperature = 0;
//volatile float Humidity = 0;

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80005cc:	887b      	ldrh	r3, [r7, #2]
 80005ce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4619      	mov	r1, r3
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f001 ffd4 	bl	8002590 <HAL_GPIO_Init>
}
 80005e8:	bf00      	nop
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800060c:	887b      	ldrh	r3, [r7, #2]
 800060e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000614:	2301      	movs	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	4619      	mov	r1, r3
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f001 ffb4 	bl	8002590 <HAL_GPIO_Init>
}
 8000628:	bf00      	nop
 800062a:	3720      	adds	r7, #32
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <DHT11_Start>:

void DHT11_Start(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_PORT, DHT11_PIN);
 8000634:	2101      	movs	r1, #1
 8000636:	480c      	ldr	r0, [pc, #48]	; (8000668 <DHT11_Start+0x38>)
 8000638:	f7ff ffba 	bl	80005b0 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2101      	movs	r1, #1
 8000640:	4809      	ldr	r0, [pc, #36]	; (8000668 <DHT11_Start+0x38>)
 8000642:	f002 f941 	bl	80028c8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000646:	2014      	movs	r0, #20
 8000648:	f001 fe0a 	bl	8002260 <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2101      	movs	r1, #1
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <DHT11_Start+0x38>)
 8000652:	f002 f939 	bl	80028c8 <HAL_GPIO_WritePin>
	delay_us(20);
 8000656:	2014      	movs	r0, #20
 8000658:	f7ff ff8e 	bl	8000578 <delay_us>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);
 800065c:	2101      	movs	r1, #1
 800065e:	4802      	ldr	r0, [pc, #8]	; (8000668 <DHT11_Start+0x38>)
 8000660:	f7ff ffc6 	bl	80005f0 <Set_Pin_Input>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40020400 	.word	0x40020400

0800066c <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	71fb      	strb	r3, [r7, #7]
	delay_us(40);
 8000676:	2028      	movs	r0, #40	; 0x28
 8000678:	f7ff ff7e 	bl	8000578 <delay_us>
	if(!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 800067c:	2101      	movs	r1, #1
 800067e:	4811      	ldr	r0, [pc, #68]	; (80006c4 <DHT11_Check_Response+0x58>)
 8000680:	f002 f90a 	bl	8002898 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d10e      	bne.n	80006a8 <DHT11_Check_Response+0x3c>
	{
		delay_us(80);
 800068a:	2050      	movs	r0, #80	; 0x50
 800068c:	f7ff ff74 	bl	8000578 <delay_us>
		if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000690:	2101      	movs	r1, #1
 8000692:	480c      	ldr	r0, [pc, #48]	; (80006c4 <DHT11_Check_Response+0x58>)
 8000694:	f002 f900 	bl	8002898 <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d002      	beq.n	80006a4 <DHT11_Check_Response+0x38>
		{
			Response = 1;
 800069e:	2301      	movs	r3, #1
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	e001      	b.n	80006a8 <DHT11_Check_Response+0x3c>
		}
		else
		{
			Response = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	71fb      	strb	r3, [r7, #7]
		}
	}
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));
 80006a8:	bf00      	nop
 80006aa:	2101      	movs	r1, #1
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <DHT11_Check_Response+0x58>)
 80006ae:	f002 f8f3 	bl	8002898 <HAL_GPIO_ReadPin>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1f8      	bne.n	80006aa <DHT11_Check_Response+0x3e>

	return Response;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40020400 	.word	0x40020400

080006c8 <DHT11_Read>:

uint8_t DHT11_Read(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(j=0; j<8; j++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	71bb      	strb	r3, [r7, #6]
 80006d2:	e037      	b.n	8000744 <DHT11_Read+0x7c>
	{
		while(!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)));
 80006d4:	bf00      	nop
 80006d6:	2101      	movs	r1, #1
 80006d8:	481e      	ldr	r0, [pc, #120]	; (8000754 <DHT11_Read+0x8c>)
 80006da:	f002 f8dd 	bl	8002898 <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d0f8      	beq.n	80006d6 <DHT11_Read+0xe>
		delay_us(40);
 80006e4:	2028      	movs	r0, #40	; 0x28
 80006e6:	f7ff ff47 	bl	8000578 <delay_us>
		if(!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 80006ea:	2101      	movs	r1, #1
 80006ec:	4819      	ldr	r0, [pc, #100]	; (8000754 <DHT11_Read+0x8c>)
 80006ee:	f002 f8d3 	bl	8002898 <HAL_GPIO_ReadPin>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d10e      	bne.n	8000716 <DHT11_Read+0x4e>
		{
			i &= ~(1<<(7-j));			// write 0
 80006f8:	79bb      	ldrb	r3, [r7, #6]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2201      	movs	r2, #1
 8000700:	fa02 f303 	lsl.w	r3, r2, r3
 8000704:	b25b      	sxtb	r3, r3
 8000706:	43db      	mvns	r3, r3
 8000708:	b25a      	sxtb	r2, r3
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	4013      	ands	r3, r2
 8000710:	b25b      	sxtb	r3, r3
 8000712:	71fb      	strb	r3, [r7, #7]
 8000714:	e013      	b.n	800073e <DHT11_Read+0x76>
		}
		else
		{
			i |= (1<<(7-j));			// if the pin is high, write 1
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	f1c3 0307 	rsb	r3, r3, #7
 800071c:	2201      	movs	r2, #1
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	b25a      	sxtb	r2, r3
 8000724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000728:	4313      	orrs	r3, r2
 800072a:	b25b      	sxtb	r3, r3
 800072c:	71fb      	strb	r3, [r7, #7]
			while((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)));		// wait for the pin to go low
 800072e:	bf00      	nop
 8000730:	2101      	movs	r1, #1
 8000732:	4808      	ldr	r0, [pc, #32]	; (8000754 <DHT11_Read+0x8c>)
 8000734:	f002 f8b0 	bl	8002898 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1f8      	bne.n	8000730 <DHT11_Read+0x68>
	for(j=0; j<8; j++)
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	3301      	adds	r3, #1
 8000742:	71bb      	strb	r3, [r7, #6]
 8000744:	79bb      	ldrb	r3, [r7, #6]
 8000746:	2b07      	cmp	r3, #7
 8000748:	d9c4      	bls.n	80006d4 <DHT11_Read+0xc>
		}
	}
	return i;
 800074a:	79fb      	ldrb	r3, [r7, #7]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40020400 	.word	0x40020400

08000758 <DHT11_GetData>:

void DHT11_GetData(DHT_DataTypeDef *DHT_Data)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
	uint16_t SUM, RH, TEMP;

	DHT11_Start();
 8000760:	f7ff ff66 	bl	8000630 <DHT11_Start>
	if(DHT11_Check_Response())
 8000764:	f7ff ff82 	bl	800066c <DHT11_Check_Response>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d013      	beq.n	8000796 <DHT11_GetData+0x3e>
	{
		Rh_byte1 = DHT11_Read();
 800076e:	f7ff ffab 	bl	80006c8 <DHT11_Read>
 8000772:	4603      	mov	r3, r0
 8000774:	73fb      	strb	r3, [r7, #15]
		Rh_byte2 = DHT11_Read();
 8000776:	f7ff ffa7 	bl	80006c8 <DHT11_Read>
 800077a:	4603      	mov	r3, r0
 800077c:	73bb      	strb	r3, [r7, #14]
		Temp_byte1 = DHT11_Read();
 800077e:	f7ff ffa3 	bl	80006c8 <DHT11_Read>
 8000782:	4603      	mov	r3, r0
 8000784:	737b      	strb	r3, [r7, #13]
		Temp_byte2 = DHT11_Read();
 8000786:	f7ff ff9f 	bl	80006c8 <DHT11_Read>
 800078a:	4603      	mov	r3, r0
 800078c:	733b      	strb	r3, [r7, #12]
		SUM = DHT11_Read();
 800078e:	f7ff ff9b 	bl	80006c8 <DHT11_Read>
 8000792:	4603      	mov	r3, r0
 8000794:	817b      	strh	r3, [r7, #10]
	}

	if(SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000796:	897a      	ldrh	r2, [r7, #10]
 8000798:	7bf9      	ldrb	r1, [r7, #15]
 800079a:	7bbb      	ldrb	r3, [r7, #14]
 800079c:	4419      	add	r1, r3
 800079e:	7b7b      	ldrb	r3, [r7, #13]
 80007a0:	4419      	add	r1, r3
 80007a2:	7b3b      	ldrb	r3, [r7, #12]
 80007a4:	440b      	add	r3, r1
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d10f      	bne.n	80007ca <DHT11_GetData+0x72>
	{
		DHT_Data->Temperature = Temp_byte1;
 80007aa:	7b7b      	ldrb	r3, [r7, #13]
 80007ac:	ee07 3a90 	vmov	s15, r3
 80007b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	edc3 7a00 	vstr	s15, [r3]
		DHT_Data->Humidity = Rh_byte1;
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	ee07 3a90 	vmov	s15, r3
 80007c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	edc3 7a01 	vstr	s15, [r3, #4]
	}
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <spi_transfer>:
uchar MFRC522_Auth(uchar, uchar, uchar*, uchar*);
uchar MFRC522_Read(uchar, uchar*);
uchar MFRC522_Write(uchar, uchar*);
void MFRC522_Halt(void);

uint8_t spi_transfer(uint8_t byte_s) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af02      	add	r7, sp, #8
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	uint8_t rx;
	HAL_SPI_TransmitReceive(&hspi3, &byte_s, &rx, 1, 0xffffffff);
 80007de:	f107 020f 	add.w	r2, r7, #15
 80007e2:	1df9      	adds	r1, r7, #7
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2301      	movs	r3, #1
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <spi_transfer+0x28>)
 80007ee:	f002 fdb4 	bl	800335a <HAL_SPI_TransmitReceive>
	return rx;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20004b2c 	.word	0x20004b2c

08000800 <Write_MFRC522>:
	values[index] = spi_transfer(0);// Read the final byte. Send 0 to stop reading.
	cs_set(1);

} // End PCD_ReadRegister()

void Write_MFRC522(uchar addr, uchar val) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	460a      	mov	r2, r1
 800080a:	71fb      	strb	r3, [r7, #7]
 800080c:	4613      	mov	r3, r2
 800080e:	71bb      	strb	r3, [r7, #6]

	cs_clr(1);
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <Write_MFRC522+0x4c>)
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <Write_MFRC522+0x4c>)
 8000816:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800081a:	6153      	str	r3, [r2, #20]
	spi_transfer(((addr << 1) & 0x7E));
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	b2db      	uxtb	r3, r3
 8000822:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000826:	b2db      	uxtb	r3, r3
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ffd3 	bl	80007d4 <spi_transfer>
	spi_transfer(val);
 800082e:	79bb      	ldrb	r3, [r7, #6]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ffcf 	bl	80007d4 <spi_transfer>
	cs_set(1);
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <Write_MFRC522+0x4c>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	4a04      	ldr	r2, [pc, #16]	; (800084c <Write_MFRC522+0x4c>)
 800083c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000840:	6153      	str	r3, [r2, #20]

}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40020400 	.word	0x40020400

08000850 <Read_MFRC522>:

uchar Read_MFRC522(uchar addr) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]

	int value;
	cs_clr(1);
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <Read_MFRC522+0x54>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <Read_MFRC522+0x54>)
 8000860:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000864:	6153      	str	r3, [r2, #20]
	spi_transfer((((addr << 1) & 0x7E) | 0x80));
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	b25b      	sxtb	r3, r3
 800086c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000870:	b25b      	sxtb	r3, r3
 8000872:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000876:	b25b      	sxtb	r3, r3
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ffaa 	bl	80007d4 <spi_transfer>
	value = spi_transfer(0x00);
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff ffa7 	bl	80007d4 <spi_transfer>
 8000886:	4603      	mov	r3, r0
 8000888:	60fb      	str	r3, [r7, #12]
	cs_set(1);
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <Read_MFRC522+0x54>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <Read_MFRC522+0x54>)
 8000890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000894:	6153      	str	r3, [r2, #20]

	return value;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	b2db      	uxtb	r3, r3
}
 800089a:	4618      	mov	r0, r3
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40020400 	.word	0x40020400

080008a8 <MFRC522_Reset>:
 * Function Name: ResetMFRC522
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80008ac:	210f      	movs	r1, #15
 80008ae:	2001      	movs	r0, #1
 80008b0:	f7ff ffa6 	bl	8000800 <Write_MFRC522>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <MFRC522_Init>:
 * Function Name:InitMFRC522
 * Description: Initialize RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Init(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 80008bc:	f7ff fff4 	bl	80008a8 <MFRC522_Reset>

	// Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);     // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80008c0:	218d      	movs	r1, #141	; 0x8d
 80008c2:	202a      	movs	r0, #42	; 0x2a
 80008c4:	f7ff ff9c 	bl	8000800 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E); // TModeReg[3..0] + TPrescalerReg
 80008c8:	213e      	movs	r1, #62	; 0x3e
 80008ca:	202b      	movs	r0, #43	; 0x2b
 80008cc:	f7ff ff98 	bl	8000800 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80008d0:	211e      	movs	r1, #30
 80008d2:	202d      	movs	r0, #45	; 0x2d
 80008d4:	f7ff ff94 	bl	8000800 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80008d8:	2100      	movs	r1, #0
 80008da:	202c      	movs	r0, #44	; 0x2c
 80008dc:	f7ff ff90 	bl	8000800 <Write_MFRC522>
	Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 80008e0:	2140      	movs	r1, #64	; 0x40
 80008e2:	2015      	movs	r0, #21
 80008e4:	f7ff ff8c 	bl	8000800 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 80008e8:	213d      	movs	r1, #61	; 0x3d
 80008ea:	2011      	movs	r0, #17
 80008ec:	f7ff ff88 	bl	8000800 <Write_MFRC522>
	// interrupts, still playing with these
	// Write_MFRC522(CommIEnReg, 0xFF);
	// Write_MFRC522(DivlEnReg, 0xFF);

	// turn antenna on
	AntennaOn();
 80008f0:	f000 f802 	bl	80008f8 <AntennaOn>
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <AntennaOn>:
 * Function Name:AntennaOn
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	SetBitMask(TxControlReg, 0x03);
 80008fc:	2103      	movs	r1, #3
 80008fe:	2014      	movs	r0, #20
 8000900:	f000 f802 	bl	8000908 <SetBitMask>
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <SetBitMask>:
 * Function Name:SetBitMask
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	460a      	mov	r2, r1
 8000912:	71fb      	strb	r3, [r7, #7]
 8000914:	4613      	mov	r3, r2
 8000916:	71bb      	strb	r3, [r7, #6]
	uchar tmp;
	tmp = Read_MFRC522(reg);
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ff98 	bl	8000850 <Read_MFRC522>
 8000920:	4603      	mov	r3, r0
 8000922:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000924:	7bfa      	ldrb	r2, [r7, #15]
 8000926:	79bb      	ldrb	r3, [r7, #6]
 8000928:	4313      	orrs	r3, r2
 800092a:	b2da      	uxtb	r2, r3
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff65 	bl	8000800 <Write_MFRC522>
}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <MFRC522_Request>:
 *    0x0200 = Mifare_One(S70)
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType) {
 800093e:	b580      	push	{r7, lr}
 8000940:	b086      	sub	sp, #24
 8000942:	af02      	add	r7, sp, #8
 8000944:	4603      	mov	r3, r0
 8000946:	6039      	str	r1, [r7, #0]
 8000948:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits; // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);
 800094a:	2107      	movs	r1, #7
 800094c:	200d      	movs	r0, #13
 800094e:	f7ff ff57 	bl	8000800 <Write_MFRC522>
	// TxLastBists = BitFramingReg[2..0]

	TagType[0] = reqMode;
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	79fa      	ldrb	r2, [r7, #7]
 8000956:	701a      	strb	r2, [r3, #0]

	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	2201      	movs	r2, #1
 8000962:	6839      	ldr	r1, [r7, #0]
 8000964:	200c      	movs	r0, #12
 8000966:	f000 f80f 	bl	8000988 <MFRC522_ToCard>
 800096a:	4603      	mov	r3, r0
 800096c:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <MFRC522_Request+0x3c>
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	2b10      	cmp	r3, #16
 8000978:	d001      	beq.n	800097e <MFRC522_Request+0x40>
		status = MI_ERR;
 800097a:	2302      	movs	r3, #2
 800097c:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800097e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen,
		uchar *backData, uint *backLen) {
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4603      	mov	r3, r0
 8000994:	73fb      	strb	r3, [r7, #15]
 8000996:	4613      	mov	r3, r2
 8000998:	73bb      	strb	r3, [r7, #14]
	uchar status = MI_ERR;
 800099a:	2302      	movs	r3, #2
 800099c:	77fb      	strb	r3, [r7, #31]
	uchar irqEn = 0x00;
 800099e:	2300      	movs	r3, #0
 80009a0:	77bb      	strb	r3, [r7, #30]
	uchar waitIRq = 0x00;
 80009a2:	2300      	movs	r3, #0
 80009a4:	777b      	strb	r3, [r7, #29]
	uchar lastBits;
	uchar n;
	uint i;

	switch (command) {
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	2b0c      	cmp	r3, #12
 80009aa:	d006      	beq.n	80009ba <MFRC522_ToCard+0x32>
 80009ac:	2b0e      	cmp	r3, #14
 80009ae:	d109      	bne.n	80009c4 <MFRC522_ToCard+0x3c>
	case PCD_AUTHENT:     // Certification cards close
	{
		irqEn = 0x12;
 80009b0:	2312      	movs	r3, #18
 80009b2:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x10;
 80009b4:	2310      	movs	r3, #16
 80009b6:	777b      	strb	r3, [r7, #29]
		break;
 80009b8:	e005      	b.n	80009c6 <MFRC522_ToCard+0x3e>
	}
	case PCD_TRANSCEIVE:  // Transmit FIFO data
	{
		irqEn = 0x77;
 80009ba:	2377      	movs	r3, #119	; 0x77
 80009bc:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x30;
 80009be:	2330      	movs	r3, #48	; 0x30
 80009c0:	777b      	strb	r3, [r7, #29]
		break;
 80009c2:	e000      	b.n	80009c6 <MFRC522_ToCard+0x3e>
	}
	default:
		break;
 80009c4:	bf00      	nop
	}

	Write_MFRC522(CommIEnReg, irqEn | 0x80);  // Interrupt request
 80009c6:	7fbb      	ldrb	r3, [r7, #30]
 80009c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	4619      	mov	r1, r3
 80009d0:	2002      	movs	r0, #2
 80009d2:	f7ff ff15 	bl	8000800 <Write_MFRC522>
	ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 80009d6:	2180      	movs	r1, #128	; 0x80
 80009d8:	2004      	movs	r0, #4
 80009da:	f000 f8b3 	bl	8000b44 <ClearBitMask>
	SetBitMask(FIFOLevelReg, 0x80);        // FlushBuffer=1, FIFO Initialization
 80009de:	2180      	movs	r1, #128	; 0x80
 80009e0:	200a      	movs	r0, #10
 80009e2:	f7ff ff91 	bl	8000908 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE); // NO action; Cancel the current command
 80009e6:	2100      	movs	r1, #0
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff ff09 	bl	8000800 <Write_MFRC522>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
 80009f2:	e00a      	b.n	8000a0a <MFRC522_ToCard+0x82>
		Write_MFRC522(FIFODataReg, sendData[i]);
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	4413      	add	r3, r2
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	2009      	movs	r0, #9
 8000a00:	f7ff fefe 	bl	8000800 <Write_MFRC522>
	for (i = 0; i < sendLen; i++) {
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	3301      	adds	r3, #1
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	7bbb      	ldrb	r3, [r7, #14]
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d3f0      	bcc.n	80009f4 <MFRC522_ToCard+0x6c>
	}

	// Execute the command
	Write_MFRC522(CommandReg, command);
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	4619      	mov	r1, r3
 8000a16:	2001      	movs	r0, #1
 8000a18:	f7ff fef2 	bl	8000800 <Write_MFRC522>
	if (command == PCD_TRANSCEIVE) {
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	2b0c      	cmp	r3, #12
 8000a20:	d103      	bne.n	8000a2a <MFRC522_ToCard+0xa2>
		SetBitMask(BitFramingReg, 0x80); // StartSend=1,transmission of data starts  
 8000a22:	2180      	movs	r1, #128	; 0x80
 8000a24:	200d      	movs	r0, #13
 8000a26:	f7ff ff6f 	bl	8000908 <SetBitMask>
	}

	// Waiting to receive data to complete
	i = 2000;// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000a2a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a2e:	61bb      	str	r3, [r7, #24]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = Read_MFRC522(CommIrqReg);
 8000a30:	2004      	movs	r0, #4
 8000a32:	f7ff ff0d 	bl	8000850 <Read_MFRC522>
 8000a36:	4603      	mov	r3, r0
 8000a38:	773b      	strb	r3, [r7, #28]
		i--;
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	61bb      	str	r3, [r7, #24]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d00a      	beq.n	8000a5c <MFRC522_ToCard+0xd4>
 8000a46:	7f3b      	ldrb	r3, [r7, #28]
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d105      	bne.n	8000a5c <MFRC522_ToCard+0xd4>
 8000a50:	7f3a      	ldrb	r2, [r7, #28]
 8000a52:	7f7b      	ldrb	r3, [r7, #29]
 8000a54:	4013      	ands	r3, r2
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d0e9      	beq.n	8000a30 <MFRC522_ToCard+0xa8>
	ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	200d      	movs	r0, #13
 8000a60:	f000 f870 	bl	8000b44 <ClearBitMask>
	if (i != 0) {
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d05a      	beq.n	8000b20 <MFRC522_ToCard+0x198>
		if (!(Read_MFRC522(ErrorReg) & 0x1B)) // BufferOvfl Collerr CRCErr ProtecolErr
 8000a6a:	2006      	movs	r0, #6
 8000a6c:	f7ff fef0 	bl	8000850 <Read_MFRC522>
 8000a70:	4603      	mov	r3, r0
 8000a72:	f003 031b 	and.w	r3, r3, #27
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d148      	bne.n	8000b0c <MFRC522_ToCard+0x184>
		{
			status = MI_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	77fb      	strb	r3, [r7, #31]
			if (n & irqEn & 0x01) {
 8000a7e:	7f3a      	ldrb	r2, [r7, #28]
 8000a80:	7fbb      	ldrb	r3, [r7, #30]
 8000a82:	4013      	ands	r3, r2
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MFRC522_ToCard+0x10a>
				status = MI_NOTAGERR;             // ??
 8000a8e:	2301      	movs	r3, #1
 8000a90:	77fb      	strb	r3, [r7, #31]
			}

			if (command == PCD_TRANSCEIVE) {
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
 8000a94:	2b0c      	cmp	r3, #12
 8000a96:	d14a      	bne.n	8000b2e <MFRC522_ToCard+0x1a6>
				n = Read_MFRC522(FIFOLevelReg);
 8000a98:	200a      	movs	r0, #10
 8000a9a:	f7ff fed9 	bl	8000850 <Read_MFRC522>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	773b      	strb	r3, [r7, #28]
				lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000aa2:	200c      	movs	r0, #12
 8000aa4:	f7ff fed4 	bl	8000850 <Read_MFRC522>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	75fb      	strb	r3, [r7, #23]
				if (lastBits) {
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d008      	beq.n	8000ac8 <MFRC522_ToCard+0x140>
					*backLen = (n - 1) * 8 + lastBits;
 8000ab6:	7f3b      	ldrb	r3, [r7, #28]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	00da      	lsls	r2, r3, #3
 8000abc:	7dfb      	ldrb	r3, [r7, #23]
 8000abe:	4413      	add	r3, r2
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	e004      	b.n	8000ad2 <MFRC522_ToCard+0x14a>
				} else {
					*backLen = n * 8;
 8000ac8:	7f3b      	ldrb	r3, [r7, #28]
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	461a      	mov	r2, r3
 8000ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad0:	601a      	str	r2, [r3, #0]
				}

				if (n == 0) {
 8000ad2:	7f3b      	ldrb	r3, [r7, #28]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d101      	bne.n	8000adc <MFRC522_ToCard+0x154>
					n = 1;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	773b      	strb	r3, [r7, #28]
				}
				if (n > MAX_LEN) {
 8000adc:	7f3b      	ldrb	r3, [r7, #28]
 8000ade:	2b10      	cmp	r3, #16
 8000ae0:	d901      	bls.n	8000ae6 <MFRC522_ToCard+0x15e>
					n = MAX_LEN;
 8000ae2:	2310      	movs	r3, #16
 8000ae4:	773b      	strb	r3, [r7, #28]
				}

				// Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	e00a      	b.n	8000b02 <MFRC522_ToCard+0x17a>
					backData[i] = Read_MFRC522(FIFODataReg);
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	18d4      	adds	r4, r2, r3
 8000af2:	2009      	movs	r0, #9
 8000af4:	f7ff feac 	bl	8000850 <Read_MFRC522>
 8000af8:	4603      	mov	r3, r0
 8000afa:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	3301      	adds	r3, #1
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	7f3b      	ldrb	r3, [r7, #28]
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d3f0      	bcc.n	8000aec <MFRC522_ToCard+0x164>
 8000b0a:	e010      	b.n	8000b2e <MFRC522_ToCard+0x1a6>
				}
			}
		} else {
			//printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
			HAL_UART_Transmit(&huart2,
 8000b0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b10:	2236      	movs	r2, #54	; 0x36
 8000b12:	4909      	ldr	r1, [pc, #36]	; (8000b38 <MFRC522_ToCard+0x1b0>)
 8000b14:	4809      	ldr	r0, [pc, #36]	; (8000b3c <MFRC522_ToCard+0x1b4>)
 8000b16:	f003 ff20 	bl	800495a <HAL_UART_Transmit>
					(uchar*) "~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n",
					54, 5000);
			status = MI_ERR;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	77fb      	strb	r3, [r7, #31]
 8000b1e:	e006      	b.n	8000b2e <MFRC522_ToCard+0x1a6>
		}
	} else {
		//printf("~~~ request timed out\r\n");
		HAL_UART_Transmit(&huart2, (uchar*) "~~~ request timed out\r\n", 23,
 8000b20:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b24:	2217      	movs	r2, #23
 8000b26:	4906      	ldr	r1, [pc, #24]	; (8000b40 <MFRC522_ToCard+0x1b8>)
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MFRC522_ToCard+0x1b4>)
 8000b2a:	f003 ff16 	bl	800495a <HAL_UART_Transmit>
				5000);

	}

	return status;
 8000b2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3724      	adds	r7, #36	; 0x24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd90      	pop	{r4, r7, pc}
 8000b38:	0800a1d8 	.word	0x0800a1d8
 8000b3c:	20004c94 	.word	0x20004c94
 8000b40:	0800a210 	.word	0x0800a210

08000b44 <ClearBitMask>:
 * Function Name: ClearBitMask
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
 */
void ClearBitMask(uchar reg, uchar mask) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	460a      	mov	r2, r1
 8000b4e:	71fb      	strb	r3, [r7, #7]
 8000b50:	4613      	mov	r3, r2
 8000b52:	71bb      	strb	r3, [r7, #6]
	uchar tmp;
	tmp = Read_MFRC522(reg);
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fe7a 	bl	8000850 <Read_MFRC522>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000b60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	b25a      	sxtb	r2, r3
 8000b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fe42 	bl	8000800 <Write_MFRC522>
}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <MFRC522_Anticoll>:
 * Function Name: MFRC522_Anticoll
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	6078      	str	r0, [r7, #4]
	uchar status;
	uchar i;
	uchar serNumCheck = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	737b      	strb	r3, [r7, #13]
	uint unLen;

	//ClearBitMask(Status2Reg, 0x08);		//TempSensclear
	//ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000b90:	2100      	movs	r1, #0
 8000b92:	200d      	movs	r0, #13
 8000b94:	f7ff fe34 	bl	8000800 <Write_MFRC522>

	serNum[0] = PICC_ANTICOLL;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2293      	movs	r2, #147	; 0x93
 8000b9c:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	2220      	movs	r2, #32
 8000ba4:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2202      	movs	r2, #2
 8000bb0:	6879      	ldr	r1, [r7, #4]
 8000bb2:	200c      	movs	r0, #12
 8000bb4:	f7ff fee8 	bl	8000988 <MFRC522_ToCard>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d118      	bne.n	8000bf4 <MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	73bb      	strb	r3, [r7, #14]
 8000bc6:	e009      	b.n	8000bdc <MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8000bc8:	7bbb      	ldrb	r3, [r7, #14]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	781a      	ldrb	r2, [r3, #0]
 8000bd0:	7b7b      	ldrb	r3, [r7, #13]
 8000bd2:	4053      	eors	r3, r2
 8000bd4:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8000bd6:	7bbb      	ldrb	r3, [r7, #14]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	73bb      	strb	r3, [r7, #14]
 8000bdc:	7bbb      	ldrb	r3, [r7, #14]
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d9f2      	bls.n	8000bc8 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8000be2:	7bbb      	ldrb	r3, [r7, #14]
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	4413      	add	r3, r2
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	7b7a      	ldrb	r2, [r7, #13]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d001      	beq.n	8000bf4 <MFRC522_Anticoll+0x70>
			status = MI_ERR;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	73fb      	strb	r3, [r7, #15]
		}
	}

	//SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

	return status;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <MFRC522_Read>:
 * Function Name: MFRC522_Read
 * Description: Read block data
 * Input parameters: blockAddr - block address; recvData - read block data
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Read(uchar blockAddr, uchar *recvData) {
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af02      	add	r7, sp, #8
 8000c04:	4603      	mov	r3, r0
 8000c06:	6039      	str	r1, [r7, #0]
 8000c08:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint unLen;

	recvData[0] = PICC_READ;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	2230      	movs	r2, #48	; 0x30
 8000c0e:	701a      	strb	r2, [r3, #0]
	recvData[1] = blockAddr;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	3301      	adds	r3, #1
 8000c14:	79fa      	ldrb	r2, [r7, #7]
 8000c16:	701a      	strb	r2, [r3, #0]
	CalulateCRC(recvData, 2, &recvData[2]);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	3302      	adds	r3, #2
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2102      	movs	r1, #2
 8000c20:	6838      	ldr	r0, [r7, #0]
 8000c22:	f000 f818 	bl	8000c56 <CalulateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	2204      	movs	r2, #4
 8000c30:	6839      	ldr	r1, [r7, #0]
 8000c32:	200c      	movs	r0, #12
 8000c34:	f7ff fea8 	bl	8000988 <MFRC522_ToCard>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (unLen != 0x90)) {
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d102      	bne.n	8000c48 <MFRC522_Read+0x4a>
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	2b90      	cmp	r3, #144	; 0x90
 8000c46:	d001      	beq.n	8000c4c <MFRC522_Read+0x4e>
		status = MI_ERR;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <CalulateCRC>:
 * Function Name: CalulateCRC
 * Description: CRC calculation with MF522
 * Input parameters: pIndata - To read the CRC data, len - the data length, pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC(uchar *pIndata, uchar len, uchar *pOutData) {
 8000c56:	b590      	push	{r4, r7, lr}
 8000c58:	b087      	sub	sp, #28
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	460b      	mov	r3, r1
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	72fb      	strb	r3, [r7, #11]
	uchar i, n;

	ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 8000c64:	2104      	movs	r1, #4
 8000c66:	2005      	movs	r0, #5
 8000c68:	f7ff ff6c 	bl	8000b44 <ClearBitMask>
	SetBitMask(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	200a      	movs	r0, #10
 8000c70:	f7ff fe4a 	bl	8000908 <SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {
 8000c74:	2300      	movs	r3, #0
 8000c76:	75fb      	strb	r3, [r7, #23]
 8000c78:	e00a      	b.n	8000c90 <CalulateCRC+0x3a>
		Write_MFRC522(FIFODataReg, *(pIndata + i));
 8000c7a:	7dfb      	ldrb	r3, [r7, #23]
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	4619      	mov	r1, r3
 8000c84:	2009      	movs	r0, #9
 8000c86:	f7ff fdbb 	bl	8000800 <Write_MFRC522>
	for (i = 0; i < len; i++) {
 8000c8a:	7dfb      	ldrb	r3, [r7, #23]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	75fb      	strb	r3, [r7, #23]
 8000c90:	7dfa      	ldrb	r2, [r7, #23]
 8000c92:	7afb      	ldrb	r3, [r7, #11]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d3f0      	bcc.n	8000c7a <CalulateCRC+0x24>
	}
	Write_MFRC522(CommandReg, PCD_CALCCRC);
 8000c98:	2103      	movs	r1, #3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff fdb0 	bl	8000800 <Write_MFRC522>

	//Wait CRC calculation is complete
	i = 0xFF;
 8000ca0:	23ff      	movs	r3, #255	; 0xff
 8000ca2:	75fb      	strb	r3, [r7, #23]
	do {
		n = Read_MFRC522(DivIrqReg);
 8000ca4:	2005      	movs	r0, #5
 8000ca6:	f7ff fdd3 	bl	8000850 <Read_MFRC522>
 8000caa:	4603      	mov	r3, r0
 8000cac:	75bb      	strb	r3, [r7, #22]
		i--;
 8000cae:	7dfb      	ldrb	r3, [r7, #23]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	75fb      	strb	r3, [r7, #23]
	} while ((i != 0) && !(n & 0x04));			//CRCIrq = 1
 8000cb4:	7dfb      	ldrb	r3, [r7, #23]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d004      	beq.n	8000cc4 <CalulateCRC+0x6e>
 8000cba:	7dbb      	ldrb	r3, [r7, #22]
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0ef      	beq.n	8000ca4 <CalulateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = Read_MFRC522(CRCResultRegL);
 8000cc4:	2022      	movs	r0, #34	; 0x22
 8000cc6:	f7ff fdc3 	bl	8000850 <Read_MFRC522>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	701a      	strb	r2, [r3, #0]
	pOutData[1] = Read_MFRC522(CRCResultRegM);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	1c5c      	adds	r4, r3, #1
 8000cd6:	2021      	movs	r0, #33	; 0x21
 8000cd8:	f7ff fdba 	bl	8000850 <Read_MFRC522>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	7023      	strb	r3, [r4, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	371c      	adds	r7, #28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd90      	pop	{r4, r7, pc}

08000ce8 <MFRC522_SelectTag>:
 * Function Name: MFRC522_SelectTag
 * Description: election card, read the card memory capacity
 * Input parameters: serNum - Incoming card serial number
 * Return value: the successful return of card capacity
 */
uchar MFRC522_SelectTag(uchar *serNum) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	6078      	str	r0, [r7, #4]
	uint recvBits;
	uchar buffer[9];

	//ClearBitMask(Status2Reg, 0x08);			//MFCrypto1On=0

	buffer[0] = PICC_SElECTTAG;
 8000cf0:	2393      	movs	r3, #147	; 0x93
 8000cf2:	733b      	strb	r3, [r7, #12]
	buffer[1] = 0x70;
 8000cf4:	2370      	movs	r3, #112	; 0x70
 8000cf6:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < 5; i++) {
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	77fb      	strb	r3, [r7, #31]
 8000cfc:	e00d      	b.n	8000d1a <MFRC522_SelectTag+0x32>
		buffer[i + 2] = *(serNum + i);
 8000cfe:	7ffb      	ldrb	r3, [r7, #31]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	441a      	add	r2, r3
 8000d04:	7ffb      	ldrb	r3, [r7, #31]
 8000d06:	3302      	adds	r3, #2
 8000d08:	7812      	ldrb	r2, [r2, #0]
 8000d0a:	f107 0120 	add.w	r1, r7, #32
 8000d0e:	440b      	add	r3, r1
 8000d10:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 5; i++) {
 8000d14:	7ffb      	ldrb	r3, [r7, #31]
 8000d16:	3301      	adds	r3, #1
 8000d18:	77fb      	strb	r3, [r7, #31]
 8000d1a:	7ffb      	ldrb	r3, [r7, #31]
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d9ee      	bls.n	8000cfe <MFRC522_SelectTag+0x16>
	}
	CalulateCRC(buffer, 7, &buffer[7]);		//??
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	1dda      	adds	r2, r3, #7
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	2107      	movs	r1, #7
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff92 	bl	8000c56 <CalulateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 8000d32:	f107 020c 	add.w	r2, r7, #12
 8000d36:	f107 010c 	add.w	r1, r7, #12
 8000d3a:	f107 0318 	add.w	r3, r7, #24
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	4613      	mov	r3, r2
 8000d42:	2209      	movs	r2, #9
 8000d44:	200c      	movs	r0, #12
 8000d46:	f7ff fe1f 	bl	8000988 <MFRC522_ToCard>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	777b      	strb	r3, [r7, #29]

	if ((status == MI_OK) && (recvBits == 0x18)) {
 8000d4e:	7f7b      	ldrb	r3, [r7, #29]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d105      	bne.n	8000d60 <MFRC522_SelectTag+0x78>
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	2b18      	cmp	r3, #24
 8000d58:	d102      	bne.n	8000d60 <MFRC522_SelectTag+0x78>
		size = buffer[0];
 8000d5a:	7b3b      	ldrb	r3, [r7, #12]
 8000d5c:	77bb      	strb	r3, [r7, #30]
 8000d5e:	e001      	b.n	8000d64 <MFRC522_SelectTag+0x7c>
	} else {
		size = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	77bb      	strb	r3, [r7, #30]
	}

	return size;
 8000d64:	7fbb      	ldrb	r3, [r7, #30]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3720      	adds	r7, #32
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <MFRC522_Auth>:
 Sectorkey--Sector password
 serNum--Card serial number, 4-byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Auth(uchar authMode, uchar BlockAddr, uchar *Sectorkey,
		uchar *serNum) {
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b08c      	sub	sp, #48	; 0x30
 8000d72:	af02      	add	r7, sp, #8
 8000d74:	60ba      	str	r2, [r7, #8]
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	4603      	mov	r3, r0
 8000d7a:	73fb      	strb	r3, [r7, #15]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	73bb      	strb	r3, [r7, #14]
	uint recvBits;
	uchar i;
	uchar buff[12];

	//Verify the command block address + sector + password + card serial number
	buff[0] = authMode;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	753b      	strb	r3, [r7, #20]
	buff[1] = BlockAddr;
 8000d84:	7bbb      	ldrb	r3, [r7, #14]
 8000d86:	757b      	strb	r3, [r7, #21]
	for (i = 0; i < 6; i++) {
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000d8e:	e011      	b.n	8000db4 <MFRC522_Auth+0x46>
		buff[i + 2] = *(Sectorkey + i);
 8000d90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	441a      	add	r2, r3
 8000d98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	7812      	ldrb	r2, [r2, #0]
 8000da0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000da4:	440b      	add	r3, r1
 8000da6:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 6; i++) {
 8000daa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dae:	3301      	adds	r3, #1
 8000db0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000db4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000db8:	2b05      	cmp	r3, #5
 8000dba:	d9e9      	bls.n	8000d90 <MFRC522_Auth+0x22>
	}
	for (i = 0; i < 4; i++) {
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000dc2:	e011      	b.n	8000de8 <MFRC522_Auth+0x7a>
		buff[i + 8] = *(serNum + i);
 8000dc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	441a      	add	r2, r3
 8000dcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dd0:	3308      	adds	r3, #8
 8000dd2:	7812      	ldrb	r2, [r2, #0]
 8000dd4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000dd8:	440b      	add	r3, r1
 8000dda:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 4; i++) {
 8000dde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000de2:	3301      	adds	r3, #1
 8000de4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000de8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d9e9      	bls.n	8000dc4 <MFRC522_Auth+0x56>
	}
	status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 8000df0:	f107 0214 	add.w	r2, r7, #20
 8000df4:	f107 0114 	add.w	r1, r7, #20
 8000df8:	f107 0320 	add.w	r3, r7, #32
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	220c      	movs	r2, #12
 8000e02:	200e      	movs	r0, #14
 8000e04:	f7ff fdc0 	bl	8000988 <MFRC522_ToCard>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((status != MI_OK) || (!(Read_MFRC522(Status2Reg) & 0x08))) {
 8000e0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d107      	bne.n	8000e26 <MFRC522_Auth+0xb8>
 8000e16:	2008      	movs	r0, #8
 8000e18:	f7ff fd1a 	bl	8000850 <Read_MFRC522>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f003 0308 	and.w	r3, r3, #8
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d102      	bne.n	8000e2c <MFRC522_Auth+0xbe>
		status = MI_ERR;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return status;
 8000e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3728      	adds	r7, #40	; 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <MFRC522_Halt>:
 * Function Name: MFRC522_Halt
 * Description: Command card into hibernation
 * Input: None
 * Return value: None
 */
void MFRC522_Halt(void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af02      	add	r7, sp, #8
	uint unLen;
	uchar buff[4];

	buff[0] = PICC_HALT;
 8000e3e:	2350      	movs	r3, #80	; 0x50
 8000e40:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	707b      	strb	r3, [r7, #1]
	CalulateCRC(buff, 2, &buff[2]);
 8000e46:	463b      	mov	r3, r7
 8000e48:	1c9a      	adds	r2, r3, #2
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff01 	bl	8000c56 <CalulateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8000e54:	463a      	mov	r2, r7
 8000e56:	4639      	mov	r1, r7
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	2204      	movs	r2, #4
 8000e60:	200c      	movs	r0, #12
 8000e62:	f7ff fd91 	bl	8000988 <MFRC522_ToCard>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <ScanCardAndGetDataFromBlock>:
 * 		blockAddr: block number desired to Read
 * 		receivedData: pointer to Data Returned after reading
 * 		keyValue: Value of KEY_A or KEY_B
 * Return value: MI_OK or MI_ERR
 */
uint8_t ScanCardAndGetDataFromBlock(uint8_t blockAddr, uchar* receivedData, uchar* keyValue) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	73fb      	strb	r3, [r7, #15]
	uchar str[16];

	/*** 1. Start RFID Reader ***/
	MFRC522_Init();
 8000e7e:	f7ff fd1b 	bl	80008b8 <MFRC522_Init>

	/*** 2. Make request and receive Card type ***/
	if (MFRC522_Request(PICC_REQIDL, str) != MI_OK) {
 8000e82:	f107 0310 	add.w	r3, r7, #16
 8000e86:	4619      	mov	r1, r3
 8000e88:	2026      	movs	r0, #38	; 0x26
 8000e8a:	f7ff fd58 	bl	800093e <MFRC522_Request>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <ScanCardAndGetDataFromBlock+0x28>
		return MI_ERR;
 8000e94:	2302      	movs	r3, #2
 8000e96:	e04e      	b.n	8000f36 <ScanCardAndGetDataFromBlock+0xc6>
	}

	/*** 3. Anti-collision loop***/
	if (MFRC522_Anticoll(str) == MI_OK) {
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fe71 	bl	8000b84 <MFRC522_Anticoll>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d143      	bne.n	8000f30 <ScanCardAndGetDataFromBlock+0xc0>

	/*** 4. Select Card ***/
		MFRC522_SelectTag(str);
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff1b 	bl	8000ce8 <MFRC522_SelectTag>

	/*** 5. Pass authentication on every sector ***/
		// First, we try to use KeyA authentication (COMMAND CODE: 0x60 - KeyA, 0x61 - KeyB)
		if (MI_OK == MFRC522_Auth(0x60, blockAddr, keyValue, str)) {
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	7bf9      	ldrb	r1, [r7, #15]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	2060      	movs	r0, #96	; 0x60
 8000ebc:	f7ff ff57 	bl	8000d6e <MFRC522_Auth>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d111      	bne.n	8000eea <ScanCardAndGetDataFromBlock+0x7a>
				//Read Data
			if (MFRC522_Read(blockAddr, receivedData) == MI_OK) {
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fe97 	bl	8000bfe <MFRC522_Read>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <ScanCardAndGetDataFromBlock+0x6a>
				return MI_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e02d      	b.n	8000f36 <ScanCardAndGetDataFromBlock+0xc6>
			} else {
				// Print error if READ is not OK
				HAL_UART_Transmit(&huart2,
 8000eda:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ede:	221a      	movs	r2, #26
 8000ee0:	4917      	ldr	r1, [pc, #92]	; (8000f40 <ScanCardAndGetDataFromBlock+0xd0>)
 8000ee2:	4818      	ldr	r0, [pc, #96]	; (8000f44 <ScanCardAndGetDataFromBlock+0xd4>)
 8000ee4:	f003 fd39 	bl	800495a <HAL_UART_Transmit>
 8000ee8:	e022      	b.n	8000f30 <ScanCardAndGetDataFromBlock+0xc0>
						(uint8_t*) "Error: Can not read data",
						strlen("Error: Can not read data\n\r"), 5000);
			}
		}
		// Second, we try to use KeyB authentication
		else if (MI_OK == MFRC522_Auth(0x61, blockAddr, keyValue, str)) {
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	7bf9      	ldrb	r1, [r7, #15]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	2061      	movs	r0, #97	; 0x61
 8000ef4:	f7ff ff3b 	bl	8000d6e <MFRC522_Auth>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d111      	bne.n	8000f22 <ScanCardAndGetDataFromBlock+0xb2>
				// Read Data
			if (MFRC522_Read(blockAddr, receivedData) == MI_OK) {
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fe7b 	bl	8000bfe <MFRC522_Read>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <ScanCardAndGetDataFromBlock+0xa2>
				return MI_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e011      	b.n	8000f36 <ScanCardAndGetDataFromBlock+0xc6>
			} else {
				// Print error if READ is not ok
				HAL_UART_Transmit(&huart2,
 8000f12:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f16:	221a      	movs	r2, #26
 8000f18:	4909      	ldr	r1, [pc, #36]	; (8000f40 <ScanCardAndGetDataFromBlock+0xd0>)
 8000f1a:	480a      	ldr	r0, [pc, #40]	; (8000f44 <ScanCardAndGetDataFromBlock+0xd4>)
 8000f1c:	f003 fd1d 	bl	800495a <HAL_UART_Transmit>
 8000f20:	e006      	b.n	8000f30 <ScanCardAndGetDataFromBlock+0xc0>
						strlen("Error: Can not read data\n\r"), 5000);
			}
		}
		// If KeyA and KeyB authentications don't work, they must be a wrong key
		else {
			HAL_UART_Transmit(&huart2, (uchar*) "\n\rKeys are wrong.\n\r", 19,
 8000f22:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f26:	2213      	movs	r2, #19
 8000f28:	4907      	ldr	r1, [pc, #28]	; (8000f48 <ScanCardAndGetDataFromBlock+0xd8>)
 8000f2a:	4806      	ldr	r0, [pc, #24]	; (8000f44 <ScanCardAndGetDataFromBlock+0xd4>)
 8000f2c:	f003 fd15 	bl	800495a <HAL_UART_Transmit>
					5000);
		}
	}

	/*** 6. HALT ***/
	MFRC522_Halt();
 8000f30:	f7ff ff82 	bl	8000e38 <MFRC522_Halt>

	return MI_ERR;
 8000f34:	2302      	movs	r3, #2
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3720      	adds	r7, #32
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	0800a2b0 	.word	0x0800a2b0
 8000f44:	20004c94 	.word	0x20004c94
 8000f48:	0800a2dc 	.word	0x0800a2dc

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	wareHouse_1.index = 1;
 8000f50:	4b47      	ldr	r3, [pc, #284]	; (8001070 <main+0x124>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]
	wareHouse_2.index = 2;
 8000f56:	4b47      	ldr	r3, [pc, #284]	; (8001074 <main+0x128>)
 8000f58:	2202      	movs	r2, #2
 8000f5a:	601a      	str	r2, [r3, #0]
	wareHouse_3.index = 3;
 8000f5c:	4b46      	ldr	r3, [pc, #280]	; (8001078 <main+0x12c>)
 8000f5e:	2203      	movs	r2, #3
 8000f60:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f62:	f001 f93b 	bl	80021dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f66:	f000 f8d3 	bl	8001110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6a:	f000 fa89 	bl	8001480 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f6e:	f000 fa33 	bl	80013d8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000f72:	f000 f937 	bl	80011e4 <MX_SPI3_Init>
  MX_USART6_UART_Init();
 8000f76:	f000 fa59 	bl	800142c <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 8000f7a:	f000 fa03 	bl	8001384 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8000f7e:	f000 f9dd 	bl	800133c <MX_TIM10_Init>
  MX_TIM3_Init();
 8000f82:	f000 f965 	bl	8001250 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000f86:	f7ff fc97 	bl	80008b8 <MFRC522_Init>
  HAL_UART_Transmit(&huart2, (uchar*) "\n\rSerial Connected...\n\r", 23, 5000);
 8000f8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f8e:	2217      	movs	r2, #23
 8000f90:	493a      	ldr	r1, [pc, #232]	; (800107c <main+0x130>)
 8000f92:	483b      	ldr	r0, [pc, #236]	; (8001080 <main+0x134>)
 8000f94:	f003 fce1 	bl	800495a <HAL_UART_Transmit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f98:	f004 fd40 	bl	8005a1c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutex_uart2 */
  mutex_uart2Handle = osMutexNew(&mutex_uart2_attributes);
 8000f9c:	4839      	ldr	r0, [pc, #228]	; (8001084 <main+0x138>)
 8000f9e:	f004 ff1d 	bl	8005ddc <osMutexNew>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a38      	ldr	r2, [pc, #224]	; (8001088 <main+0x13c>)
 8000fa6:	6013      	str	r3, [r2, #0]

  /* creation of mutex_uart6 */
  mutex_uart6Handle = osMutexNew(&mutex_uart6_attributes);
 8000fa8:	4838      	ldr	r0, [pc, #224]	; (800108c <main+0x140>)
 8000faa:	f004 ff17 	bl	8005ddc <osMutexNew>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4a37      	ldr	r2, [pc, #220]	; (8001090 <main+0x144>)
 8000fb2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of cardID_Queue */
  cardID_QueueHandle = osMessageQueueNew (1, sizeof(WareHouse_t), &cardID_Queue_attributes);
 8000fb4:	4a37      	ldr	r2, [pc, #220]	; (8001094 <main+0x148>)
 8000fb6:	211c      	movs	r1, #28
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f005 f81d 	bl	8005ff8 <osMessageQueueNew>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4a35      	ldr	r2, [pc, #212]	; (8001098 <main+0x14c>)
 8000fc2:	6013      	str	r3, [r2, #0]

  /* creation of sensorData_Queue */
  sensorData_QueueHandle = osMessageQueueNew (3, sizeof(WareHouse_t), &sensorData_Queue_attributes);
 8000fc4:	4a35      	ldr	r2, [pc, #212]	; (800109c <main+0x150>)
 8000fc6:	211c      	movs	r1, #28
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f005 f815 	bl	8005ff8 <osMessageQueueNew>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4a33      	ldr	r2, [pc, #204]	; (80010a0 <main+0x154>)
 8000fd2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CmdParsing */
  CmdParsingHandle = osThreadNew(CmdParsing_Task, NULL, &CmdParsing_attributes);
 8000fd4:	4a33      	ldr	r2, [pc, #204]	; (80010a4 <main+0x158>)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4833      	ldr	r0, [pc, #204]	; (80010a8 <main+0x15c>)
 8000fda:	f004 fd69 	bl	8005ab0 <osThreadNew>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4a32      	ldr	r2, [pc, #200]	; (80010ac <main+0x160>)
 8000fe2:	6013      	str	r3, [r2, #0]

  /* creation of ToggleLed */
  ToggleLedHandle = osThreadNew(ToggleLed_Task, NULL, &ToggleLed_attributes);
 8000fe4:	4a32      	ldr	r2, [pc, #200]	; (80010b0 <main+0x164>)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4832      	ldr	r0, [pc, #200]	; (80010b4 <main+0x168>)
 8000fea:	f004 fd61 	bl	8005ab0 <osThreadNew>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <main+0x16c>)
 8000ff2:	6013      	str	r3, [r2, #0]

  /* creation of ScanCard */
  ScanCardHandle = osThreadNew(ScanCard_Task, NULL, &ScanCard_attributes);
 8000ff4:	4a31      	ldr	r2, [pc, #196]	; (80010bc <main+0x170>)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4831      	ldr	r0, [pc, #196]	; (80010c0 <main+0x174>)
 8000ffa:	f004 fd59 	bl	8005ab0 <osThreadNew>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a30      	ldr	r2, [pc, #192]	; (80010c4 <main+0x178>)
 8001002:	6013      	str	r3, [r2, #0]

  /* creation of SensorMeasuring */
  SensorMeasuringHandle = osThreadNew(SensorMeasuring_Task, NULL, &SensorMeasuring_attributes);
 8001004:	4a30      	ldr	r2, [pc, #192]	; (80010c8 <main+0x17c>)
 8001006:	2100      	movs	r1, #0
 8001008:	4830      	ldr	r0, [pc, #192]	; (80010cc <main+0x180>)
 800100a:	f004 fd51 	bl	8005ab0 <osThreadNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a2f      	ldr	r2, [pc, #188]	; (80010d0 <main+0x184>)
 8001012:	6013      	str	r3, [r2, #0]

  /* creation of SendCardID */
  SendCardIDHandle = osThreadNew(SendCardID_Task, NULL, &SendCardID_attributes);
 8001014:	4a2f      	ldr	r2, [pc, #188]	; (80010d4 <main+0x188>)
 8001016:	2100      	movs	r1, #0
 8001018:	482f      	ldr	r0, [pc, #188]	; (80010d8 <main+0x18c>)
 800101a:	f004 fd49 	bl	8005ab0 <osThreadNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a2e      	ldr	r2, [pc, #184]	; (80010dc <main+0x190>)
 8001022:	6013      	str	r3, [r2, #0]

  /* creation of SendSensorData */
  SendSensorDataHandle = osThreadNew(SendSensorData_Task, NULL, &SendSensorData_attributes);
 8001024:	4a2e      	ldr	r2, [pc, #184]	; (80010e0 <main+0x194>)
 8001026:	2100      	movs	r1, #0
 8001028:	482e      	ldr	r0, [pc, #184]	; (80010e4 <main+0x198>)
 800102a:	f004 fd41 	bl	8005ab0 <osThreadNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a2d      	ldr	r2, [pc, #180]	; (80010e8 <main+0x19c>)
 8001032:	6013      	str	r3, [r2, #0]

  /* creation of ServoControl */
  ServoControlHandle = osThreadNew(ServoControl_task, NULL, &ServoControl_attributes);
 8001034:	4a2d      	ldr	r2, [pc, #180]	; (80010ec <main+0x1a0>)
 8001036:	2100      	movs	r1, #0
 8001038:	482d      	ldr	r0, [pc, #180]	; (80010f0 <main+0x1a4>)
 800103a:	f004 fd39 	bl	8005ab0 <osThreadNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a2c      	ldr	r2, [pc, #176]	; (80010f4 <main+0x1a8>)
 8001042:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of scanCardAvailable */
  scanCardAvailableHandle = osEventFlagsNew(&scanCardAvailable_attributes);
 8001044:	482c      	ldr	r0, [pc, #176]	; (80010f8 <main+0x1ac>)
 8001046:	f004 fde0 	bl	8005c0a <osEventFlagsNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a2b      	ldr	r2, [pc, #172]	; (80010fc <main+0x1b0>)
 800104e:	6013      	str	r3, [r2, #0]

  /* creation of parsingCMDAvailable */
  parsingCMDAvailableHandle = osEventFlagsNew(&parsingCMDAvailable_attributes);
 8001050:	482b      	ldr	r0, [pc, #172]	; (8001100 <main+0x1b4>)
 8001052:	f004 fdda 	bl	8005c0a <osEventFlagsNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a2a      	ldr	r2, [pc, #168]	; (8001104 <main+0x1b8>)
 800105a:	6013      	str	r3, [r2, #0]

  /* creation of servoControlIsAvailable */
  servoControlIsAvailableHandle = osEventFlagsNew(&servoControlIsAvailable_attributes);
 800105c:	482a      	ldr	r0, [pc, #168]	; (8001108 <main+0x1bc>)
 800105e:	f004 fdd4 	bl	8005c0a <osEventFlagsNew>
 8001062:	4603      	mov	r3, r0
 8001064:	4a29      	ldr	r2, [pc, #164]	; (800110c <main+0x1c0>)
 8001066:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001068:	f004 fcfc 	bl	8005a64 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	while (1) {
 800106c:	e7fe      	b.n	800106c <main+0x120>
 800106e:	bf00      	nop
 8001070:	20004b84 	.word	0x20004b84
 8001074:	20004c30 	.word	0x20004c30
 8001078:	20004bf8 	.word	0x20004bf8
 800107c:	0800a424 	.word	0x0800a424
 8001080:	20004c94 	.word	0x20004c94
 8001084:	0800a58c 	.word	0x0800a58c
 8001088:	20004a90 	.word	0x20004a90
 800108c:	0800a59c 	.word	0x0800a59c
 8001090:	20004ae0 	.word	0x20004ae0
 8001094:	0800a55c 	.word	0x0800a55c
 8001098:	20004ba4 	.word	0x20004ba4
 800109c:	0800a574 	.word	0x0800a574
 80010a0:	20004adc 	.word	0x20004adc
 80010a4:	0800a460 	.word	0x0800a460
 80010a8:	080018a1 	.word	0x080018a1
 80010ac:	20004bac 	.word	0x20004bac
 80010b0:	0800a484 	.word	0x0800a484
 80010b4:	0800192d 	.word	0x0800192d
 80010b8:	20004ba0 	.word	0x20004ba0
 80010bc:	0800a4a8 	.word	0x0800a4a8
 80010c0:	0800193d 	.word	0x0800193d
 80010c4:	20004c1c 	.word	0x20004c1c
 80010c8:	0800a4cc 	.word	0x0800a4cc
 80010cc:	08001971 	.word	0x08001971
 80010d0:	20004c90 	.word	0x20004c90
 80010d4:	0800a4f0 	.word	0x0800a4f0
 80010d8:	08001a49 	.word	0x08001a49
 80010dc:	20004c14 	.word	0x20004c14
 80010e0:	0800a514 	.word	0x0800a514
 80010e4:	08001a99 	.word	0x08001a99
 80010e8:	20004c18 	.word	0x20004c18
 80010ec:	0800a538 	.word	0x0800a538
 80010f0:	08001ae9 	.word	0x08001ae9
 80010f4:	20004a8c 	.word	0x20004a8c
 80010f8:	0800a5ac 	.word	0x0800a5ac
 80010fc:	20004ba8 	.word	0x20004ba8
 8001100:	0800a5bc 	.word	0x0800a5bc
 8001104:	20004cd8 	.word	0x20004cd8
 8001108:	0800a5cc 	.word	0x0800a5cc
 800110c:	20004bf4 	.word	0x20004bf4

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b094      	sub	sp, #80	; 0x50
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	2230      	movs	r2, #48	; 0x30
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f008 fbbe 	bl	80098a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <SystemClock_Config+0xcc>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	4a27      	ldr	r2, [pc, #156]	; (80011dc <SystemClock_Config+0xcc>)
 800113e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001142:	6413      	str	r3, [r2, #64]	; 0x40
 8001144:	4b25      	ldr	r3, [pc, #148]	; (80011dc <SystemClock_Config+0xcc>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <SystemClock_Config+0xd0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <SystemClock_Config+0xd0>)
 800115a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <SystemClock_Config+0xd0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116c:	2302      	movs	r3, #2
 800116e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001170:	2301      	movs	r3, #1
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001174:	2310      	movs	r3, #16
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001178:	2302      	movs	r3, #2
 800117a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800117c:	2300      	movs	r3, #0
 800117e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001180:	2308      	movs	r3, #8
 8001182:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001184:	2354      	movs	r3, #84	; 0x54
 8001186:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001188:	2302      	movs	r3, #2
 800118a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800118c:	2304      	movs	r3, #4
 800118e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001190:	f107 0320 	add.w	r3, r7, #32
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fbb1 	bl	80028fc <HAL_RCC_OscConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011a0:	f000 fce2 	bl	8001b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a4:	230f      	movs	r3, #15
 80011a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a8:	2302      	movs	r3, #2
 80011aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	2102      	movs	r1, #2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fe12 	bl	8002dec <HAL_RCC_ClockConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011ce:	f000 fccb 	bl	8001b68 <Error_Handler>
  }
}
 80011d2:	bf00      	nop
 80011d4:	3750      	adds	r7, #80	; 0x50
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40007000 	.word	0x40007000

080011e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_SPI3_Init+0x64>)
 80011ea:	4a18      	ldr	r2, [pc, #96]	; (800124c <MX_SPI3_Init+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <MX_SPI3_Init+0x64>)
 80011f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_SPI3_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_SPI3_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_SPI3_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_SPI3_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_SPI3_Init+0x64>)
 8001210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001214:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_SPI3_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MX_SPI3_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_SPI3_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <MX_SPI3_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_SPI3_Init+0x64>)
 8001230:	220a      	movs	r2, #10
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_SPI3_Init+0x64>)
 8001236:	f002 f807 	bl	8003248 <HAL_SPI_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001240:	f000 fc92 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20004b2c 	.word	0x20004b2c
 800124c:	40003c00 	.word	0x40003c00

08001250 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08e      	sub	sp, #56	; 0x38
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
 800127c:	615a      	str	r2, [r3, #20]
 800127e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001280:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <MX_TIM3_Init+0xe4>)
 8001282:	4a2d      	ldr	r2, [pc, #180]	; (8001338 <MX_TIM3_Init+0xe8>)
 8001284:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <MX_TIM3_Init+0xe4>)
 8001288:	2253      	movs	r2, #83	; 0x53
 800128a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128c:	4b29      	ldr	r3, [pc, #164]	; (8001334 <MX_TIM3_Init+0xe4>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <MX_TIM3_Init+0xe4>)
 8001294:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001298:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <MX_TIM3_Init+0xe4>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a0:	4b24      	ldr	r3, [pc, #144]	; (8001334 <MX_TIM3_Init+0xe4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012a6:	4823      	ldr	r0, [pc, #140]	; (8001334 <MX_TIM3_Init+0xe4>)
 80012a8:	f002 fac4 	bl	8003834 <HAL_TIM_Base_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012b2:	f000 fc59 	bl	8001b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c0:	4619      	mov	r1, r3
 80012c2:	481c      	ldr	r0, [pc, #112]	; (8001334 <MX_TIM3_Init+0xe4>)
 80012c4:	f002 febe 	bl	8004044 <HAL_TIM_ConfigClockSource>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012ce:	f000 fc4b 	bl	8001b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012d2:	4818      	ldr	r0, [pc, #96]	; (8001334 <MX_TIM3_Init+0xe4>)
 80012d4:	f002 fbe2 	bl	8003a9c <HAL_TIM_PWM_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012de:	f000 fc43 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	4619      	mov	r1, r3
 80012f0:	4810      	ldr	r0, [pc, #64]	; (8001334 <MX_TIM3_Init+0xe4>)
 80012f2:	f003 fa63 	bl	80047bc <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012fc:	f000 fc34 	bl	8001b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001300:	2360      	movs	r3, #96	; 0x60
 8001302:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <MX_TIM3_Init+0xe4>)
 8001318:	f002 fdd2 	bl	8003ec0 <HAL_TIM_PWM_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001322:	f000 fc21 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001326:	4803      	ldr	r0, [pc, #12]	; (8001334 <MX_TIM3_Init+0xe4>)
 8001328:	f000 fd5c 	bl	8001de4 <HAL_TIM_MspPostInit>

}
 800132c:	bf00      	nop
 800132e:	3738      	adds	r7, #56	; 0x38
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20004ae4 	.word	0x20004ae4
 8001338:	40000400 	.word	0x40000400

0800133c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_TIM10_Init+0x40>)
 8001342:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <MX_TIM10_Init+0x44>)
 8001344:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <MX_TIM10_Init+0x40>)
 8001348:	2253      	movs	r2, #83	; 0x53
 800134a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <MX_TIM10_Init+0x40>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <MX_TIM10_Init+0x40>)
 8001354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001358:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <MX_TIM10_Init+0x40>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_TIM10_Init+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_TIM10_Init+0x40>)
 8001368:	f002 fa64 	bl	8003834 <HAL_TIM_Base_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001372:	f000 fbf9 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20004a94 	.word	0x20004a94
 8001380:	40014400 	.word	0x40014400

08001384 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_USART1_UART_Init+0x4c>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <MX_USART1_UART_Init+0x50>)
 800138c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MX_USART1_UART_Init+0x4c>)
 8001390:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001394:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_USART1_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_USART1_UART_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <MX_USART1_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_USART1_UART_Init+0x4c>)
 80013aa:	220c      	movs	r2, #12
 80013ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <MX_USART1_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_USART1_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_USART1_UART_Init+0x4c>)
 80013bc:	f003 fa80 	bl	80048c0 <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013c6:	f000 fbcf 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20004bb0 	.word	0x20004bb0
 80013d4:	40011000 	.word	0x40011000

080013d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <MX_USART2_UART_Init+0x50>)
 80013e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 8001410:	f003 fa56 	bl	80048c0 <HAL_UART_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800141a:	f000 fba5 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20004c94 	.word	0x20004c94
 8001428:	40004400 	.word	0x40004400

0800142c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_USART6_UART_Init+0x4c>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <MX_USART6_UART_Init+0x50>)
 8001434:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_USART6_UART_Init+0x4c>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_USART6_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_USART6_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_USART6_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_USART6_UART_Init+0x4c>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <MX_USART6_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_USART6_UART_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_USART6_UART_Init+0x4c>)
 8001464:	f003 fa2c 	bl	80048c0 <HAL_UART_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800146e:	f000 fb7b 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20004c4c 	.word	0x20004c4c
 800147c:	40011400 	.word	0x40011400

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b52      	ldr	r3, [pc, #328]	; (80015e4 <MX_GPIO_Init+0x164>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a51      	ldr	r2, [pc, #324]	; (80015e4 <MX_GPIO_Init+0x164>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <MX_GPIO_Init+0x164>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b4b      	ldr	r3, [pc, #300]	; (80015e4 <MX_GPIO_Init+0x164>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a4a      	ldr	r2, [pc, #296]	; (80015e4 <MX_GPIO_Init+0x164>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b48      	ldr	r3, [pc, #288]	; (80015e4 <MX_GPIO_Init+0x164>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	4b44      	ldr	r3, [pc, #272]	; (80015e4 <MX_GPIO_Init+0x164>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a43      	ldr	r2, [pc, #268]	; (80015e4 <MX_GPIO_Init+0x164>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b41      	ldr	r3, [pc, #260]	; (80015e4 <MX_GPIO_Init+0x164>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b3d      	ldr	r3, [pc, #244]	; (80015e4 <MX_GPIO_Init+0x164>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a3c      	ldr	r2, [pc, #240]	; (80015e4 <MX_GPIO_Init+0x164>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b3a      	ldr	r3, [pc, #232]	; (80015e4 <MX_GPIO_Init+0x164>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	2120      	movs	r1, #32
 800150a:	4837      	ldr	r0, [pc, #220]	; (80015e8 <MX_GPIO_Init+0x168>)
 800150c:	f001 f9dc 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_SS3_Pin|SPI_SS2_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 41c6 	mov.w	r1, #25344	; 0x6300
 8001516:	4835      	ldr	r0, [pc, #212]	; (80015ec <MX_GPIO_Init+0x16c>)
 8001518:	f001 f9d6 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_SS_GPIO_Port, SPI3_SS_Pin, GPIO_PIN_SET);
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001522:	4832      	ldr	r0, [pc, #200]	; (80015ec <MX_GPIO_Init+0x16c>)
 8001524:	f001 f9d0 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800152e:	4830      	ldr	r0, [pc, #192]	; (80015f0 <MX_GPIO_Init+0x170>)
 8001530:	f001 f9ca 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800153a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800153e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	4829      	ldr	r0, [pc, #164]	; (80015f0 <MX_GPIO_Init+0x170>)
 800154c:	f001 f820 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001550:	2320      	movs	r3, #32
 8001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	4820      	ldr	r0, [pc, #128]	; (80015e8 <MX_GPIO_Init+0x168>)
 8001568:	f001 f812 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800156c:	2301      	movs	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001574:	2301      	movs	r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4619      	mov	r1, r3
 800157e:	481b      	ldr	r0, [pc, #108]	; (80015ec <MX_GPIO_Init+0x16c>)
 8001580:	f001 f806 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_SS3_Pin SPI_SS2_Pin SPI3_SS_Pin LED_YELLOW_Pin
                           LED_GREEN_Pin */
  GPIO_InitStruct.Pin = SPI_SS3_Pin|SPI_SS2_Pin|SPI3_SS_Pin|LED_YELLOW_Pin
 8001584:	f44f 4363 	mov.w	r3, #58112	; 0xe300
 8001588:	617b      	str	r3, [r7, #20]
                          |LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158a:	2301      	movs	r3, #1
 800158c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	4813      	ldr	r0, [pc, #76]	; (80015ec <MX_GPIO_Init+0x16c>)
 800159e:	f000 fff7 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80015a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	480d      	ldr	r0, [pc, #52]	; (80015f0 <MX_GPIO_Init+0x170>)
 80015bc:	f000 ffe8 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <MX_GPIO_Init+0x168>)
 80015d6:	f000 ffdb 	bl	8002590 <HAL_GPIO_Init>

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	; 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020400 	.word	0x40020400
 80015f0:	40020800 	.word	0x40020800

080015f4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	if (huart == &huart6){
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a09      	ldr	r2, [pc, #36]	; (8001624 <HAL_UART_RxCpltCallback+0x30>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d10a      	bne.n	800161a <HAL_UART_RxCpltCallback+0x26>
		osEventFlagsSet(parsingCMDAvailableHandle, 0x00000001U);
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <HAL_UART_RxCpltCallback+0x34>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2101      	movs	r1, #1
 800160a:	4618      	mov	r0, r3
 800160c:	f004 fb3c 	bl	8005c88 <osEventFlagsSet>
		HAL_UART_Receive_IT(&huart6, (uint8_t*)receivedDataFromServer, 8);
 8001610:	2208      	movs	r2, #8
 8001612:	4906      	ldr	r1, [pc, #24]	; (800162c <HAL_UART_RxCpltCallback+0x38>)
 8001614:	4803      	ldr	r0, [pc, #12]	; (8001624 <HAL_UART_RxCpltCallback+0x30>)
 8001616:	f003 fad4 	bl	8004bc2 <HAL_UART_Receive_IT>
//			uchar temp[3];
//			sprintf((char*)temp, (const char*)"%02x ", (char)wareHouse_2.idOfScannedCard[i]);
//			HAL_UART_Transmit(&huart2, temp, 3, HAL_MAX_DELAY);
//		}
//	}
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20004c4c 	.word	0x20004c4c
 8001628:	20004cd8 	.word	0x20004cd8
 800162c:	20000098 	.word	0x20000098

08001630 <sendDataToServer>:


void sendDataToServer(volatile WareHouse_t* wareHouse, uint8_t typeOfData){
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]

	uchar dataToSend[18]={0};
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	819a      	strh	r2, [r3, #12]

	switch(typeOfData){
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	2b05      	cmp	r3, #5
 8001652:	d002      	beq.n	800165a <sendDataToServer+0x2a>
 8001654:	2b06      	cmp	r3, #6
 8001656:	d00d      	beq.n	8001674 <sendDataToServer+0x44>
 8001658:	e026      	b.n	80016a8 <sendDataToServer+0x78>
		case Sensor_DATA:
			dataToSend[0] = wareHouse->temperature;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	723b      	strb	r3, [r7, #8]
			dataToSend[1] = wareHouse->humidity;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	727b      	strb	r3, [r7, #9]
			dataToSend[17] = wareHouse->index;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	767b      	strb	r3, [r7, #25]
			break;
 8001672:	e019      	b.n	80016a8 <sendDataToServer+0x78>
		case CardID_DATA:
			for(int i = 0; i<16; i++){
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	e00e      	b.n	8001698 <sendDataToServer+0x68>
				dataToSend[i]=wareHouse->idOfScannedCard[i];
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	4413      	add	r3, r2
 8001680:	3304      	adds	r3, #4
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b2d9      	uxtb	r1, r3
 8001686:	f107 0208 	add.w	r2, r7, #8
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	4413      	add	r3, r2
 800168e:	460a      	mov	r2, r1
 8001690:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<16; i++){
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3301      	adds	r3, #1
 8001696:	61fb      	str	r3, [r7, #28]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	2b0f      	cmp	r3, #15
 800169c:	dded      	ble.n	800167a <sendDataToServer+0x4a>
			}
			dataToSend[17] = wareHouse->index;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	767b      	strb	r3, [r7, #25]
			break;
 80016a6:	bf00      	nop
	}

	dataToSend[16] = typeOfData;
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	763b      	strb	r3, [r7, #24]


	HAL_UART_Transmit(&huart6, dataToSend, 18, HAL_MAX_DELAY);
 80016ac:	f107 0108 	add.w	r1, r7, #8
 80016b0:	f04f 33ff 	mov.w	r3, #4294967295
 80016b4:	2212      	movs	r2, #18
 80016b6:	4803      	ldr	r0, [pc, #12]	; (80016c4 <sendDataToServer+0x94>)
 80016b8:	f003 f94f 	bl	800495a <HAL_UART_Transmit>

}
 80016bc:	bf00      	nop
 80016be:	3720      	adds	r7, #32
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20004c4c 	.word	0x20004c4c

080016c8 <scanCardIdHandle>:



void scanCardIdHandle(uint8_t wareHouseId){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	switch(wareHouseId){
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d002      	beq.n	80016de <scanCardIdHandle+0x16>
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d036      	beq.n	800174a <scanCardIdHandle+0x82>
		}

		osMessageQueuePut(cardID_QueueHandle, &wareHouse_2, 0U, osWaitForever);
		break;
	default:
		break;
 80016dc:	e070      	b.n	80017c0 <scanCardIdHandle+0xf8>
			if( ScanCardAndGetDataFromBlock(0, wareHouse_1.idOfScannedCard, keyA) == MI_OK){
 80016de:	4a3a      	ldr	r2, [pc, #232]	; (80017c8 <scanCardIdHandle+0x100>)
 80016e0:	493a      	ldr	r1, [pc, #232]	; (80017cc <scanCardIdHandle+0x104>)
 80016e2:	2000      	movs	r0, #0
 80016e4:	f7ff fbc4 	bl	8000e70 <ScanCardAndGetDataFromBlock>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f7      	bne.n	80016de <scanCardIdHandle+0x16>
					for(int i = 0; i<16; i++){
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e017      	b.n	8001724 <scanCardIdHandle+0x5c>
						sprintf((char*)temp, (const char*)"%02x ", (char)wareHouse_1.idOfScannedCard[i]);
 80016f4:	4a36      	ldr	r2, [pc, #216]	; (80017d0 <scanCardIdHandle+0x108>)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	4413      	add	r3, r2
 80016fa:	3304      	adds	r3, #4
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	4933      	ldr	r1, [pc, #204]	; (80017d4 <scanCardIdHandle+0x10c>)
 8001708:	4618      	mov	r0, r3
 800170a:	f008 f9a5 	bl	8009a58 <siprintf>
						HAL_UART_Transmit(&huart2, temp, 3, HAL_MAX_DELAY);
 800170e:	f107 010c 	add.w	r1, r7, #12
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	2203      	movs	r2, #3
 8001718:	482f      	ldr	r0, [pc, #188]	; (80017d8 <scanCardIdHandle+0x110>)
 800171a:	f003 f91e 	bl	800495a <HAL_UART_Transmit>
					for(int i = 0; i<16; i++){
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	2b0f      	cmp	r3, #15
 8001728:	dde4      	ble.n	80016f4 <scanCardIdHandle+0x2c>
					HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	2202      	movs	r2, #2
 8001730:	492a      	ldr	r1, [pc, #168]	; (80017dc <scanCardIdHandle+0x114>)
 8001732:	4829      	ldr	r0, [pc, #164]	; (80017d8 <scanCardIdHandle+0x110>)
 8001734:	f003 f911 	bl	800495a <HAL_UART_Transmit>
					osMessageQueuePut(cardID_QueueHandle, &wareHouse_1, 0U, osWaitForever);
 8001738:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <scanCardIdHandle+0x118>)
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	f04f 33ff 	mov.w	r3, #4294967295
 8001740:	2200      	movs	r2, #0
 8001742:	4923      	ldr	r1, [pc, #140]	; (80017d0 <scanCardIdHandle+0x108>)
 8001744:	f004 fccc 	bl	80060e0 <osMessageQueuePut>
					return;
 8001748:	e03a      	b.n	80017c0 <scanCardIdHandle+0xf8>
		cmdToSend[0] = SCAN_CARDID;
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <scanCardIdHandle+0x11c>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, cmdToSend, 8, HAL_MAX_DELAY);
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	2208      	movs	r2, #8
 8001756:	4923      	ldr	r1, [pc, #140]	; (80017e4 <scanCardIdHandle+0x11c>)
 8001758:	4823      	ldr	r0, [pc, #140]	; (80017e8 <scanCardIdHandle+0x120>)
 800175a:	f003 f8fe 	bl	800495a <HAL_UART_Transmit>
		osDelay(10);
 800175e:	200a      	movs	r0, #10
 8001760:	f004 fa38 	bl	8005bd4 <osDelay>
		HAL_UART_Receive(&huart1, wareHouse_2.idOfScannedCard, 16, HAL_MAX_DELAY);
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
 8001768:	2210      	movs	r2, #16
 800176a:	4920      	ldr	r1, [pc, #128]	; (80017ec <scanCardIdHandle+0x124>)
 800176c:	481e      	ldr	r0, [pc, #120]	; (80017e8 <scanCardIdHandle+0x120>)
 800176e:	f003 f986 	bl	8004a7e <HAL_UART_Receive>
		for(int i = 0; i<16; i++){
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	e017      	b.n	80017a8 <scanCardIdHandle+0xe0>
			sprintf((char*)temp, (const char*)"%02x ", (char)wareHouse_2.idOfScannedCard[i]);
 8001778:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <scanCardIdHandle+0x128>)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4413      	add	r3, r2
 800177e:	3304      	adds	r3, #4
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	4912      	ldr	r1, [pc, #72]	; (80017d4 <scanCardIdHandle+0x10c>)
 800178c:	4618      	mov	r0, r3
 800178e:	f008 f963 	bl	8009a58 <siprintf>
			HAL_UART_Transmit(&huart2, temp, 3, HAL_MAX_DELAY);
 8001792:	f107 0108 	add.w	r1, r7, #8
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	2203      	movs	r2, #3
 800179c:	480e      	ldr	r0, [pc, #56]	; (80017d8 <scanCardIdHandle+0x110>)
 800179e:	f003 f8dc 	bl	800495a <HAL_UART_Transmit>
		for(int i = 0; i<16; i++){
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	3301      	adds	r3, #1
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	2b0f      	cmp	r3, #15
 80017ac:	dde4      	ble.n	8001778 <scanCardIdHandle+0xb0>
		osMessageQueuePut(cardID_QueueHandle, &wareHouse_2, 0U, osWaitForever);
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <scanCardIdHandle+0x118>)
 80017b0:	6818      	ldr	r0, [r3, #0]
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	2200      	movs	r2, #0
 80017b8:	490d      	ldr	r1, [pc, #52]	; (80017f0 <scanCardIdHandle+0x128>)
 80017ba:	f004 fc91 	bl	80060e0 <osMessageQueuePut>
		break;
 80017be:	bf00      	nop
	}
}
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000000 	.word	0x20000000
 80017cc:	20004b88 	.word	0x20004b88
 80017d0:	20004b84 	.word	0x20004b84
 80017d4:	0800a43c 	.word	0x0800a43c
 80017d8:	20004c94 	.word	0x20004c94
 80017dc:	0800a444 	.word	0x0800a444
 80017e0:	20004ba4 	.word	0x20004ba4
 80017e4:	200000a0 	.word	0x200000a0
 80017e8:	20004bb0 	.word	0x20004bb0
 80017ec:	20004c34 	.word	0x20004c34
 80017f0:	20004c30 	.word	0x20004c30

080017f4 <toggleLEDHanlde>:

void toggleLEDHanlde(uint8_t wareHouseId, uint8_t ledId, uint8_t state){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	460b      	mov	r3, r1
 8001800:	71bb      	strb	r3, [r7, #6]
 8001802:	4613      	mov	r3, r2
 8001804:	717b      	strb	r3, [r7, #5]

	switch(wareHouseId){
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d002      	beq.n	8001812 <toggleLEDHanlde+0x1e>
 800180c:	2b02      	cmp	r3, #2
 800180e:	d027      	beq.n	8001860 <toggleLEDHanlde+0x6c>
			cmdToSend[0] = TOGGLE_LED;
			cmdToSend[1] =  ledId;
			cmdToSend[2] =  state;
			HAL_UART_Transmit(&huart1, cmdToSend, 8, 1000);
		default:
			break;
 8001810:	e038      	b.n	8001884 <toggleLEDHanlde+0x90>
			if(ledId == 1){
 8001812:	79bb      	ldrb	r3, [r7, #6]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d107      	bne.n	8001828 <toggleLEDHanlde+0x34>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, state);
 8001818:	797b      	ldrb	r3, [r7, #5]
 800181a:	461a      	mov	r2, r3
 800181c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001820:	481a      	ldr	r0, [pc, #104]	; (800188c <toggleLEDHanlde+0x98>)
 8001822:	f001 f851 	bl	80028c8 <HAL_GPIO_WritePin>
			break;
 8001826:	e02c      	b.n	8001882 <toggleLEDHanlde+0x8e>
			}else if(ledId == 2){
 8001828:	79bb      	ldrb	r3, [r7, #6]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d107      	bne.n	800183e <toggleLEDHanlde+0x4a>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, state);
 800182e:	797b      	ldrb	r3, [r7, #5]
 8001830:	461a      	mov	r2, r3
 8001832:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001836:	4815      	ldr	r0, [pc, #84]	; (800188c <toggleLEDHanlde+0x98>)
 8001838:	f001 f846 	bl	80028c8 <HAL_GPIO_WritePin>
			break;
 800183c:	e021      	b.n	8001882 <toggleLEDHanlde+0x8e>
			}else if(ledId == 3){
 800183e:	79bb      	ldrb	r3, [r7, #6]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d11e      	bne.n	8001882 <toggleLEDHanlde+0x8e>
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, state);
 8001844:	797b      	ldrb	r3, [r7, #5]
 8001846:	461a      	mov	r2, r3
 8001848:	f44f 7100 	mov.w	r1, #512	; 0x200
 800184c:	4810      	ldr	r0, [pc, #64]	; (8001890 <toggleLEDHanlde+0x9c>)
 800184e:	f001 f83b 	bl	80028c8 <HAL_GPIO_WritePin>
				osEventFlagsSet(servoControlIsAvailableHandle, 0x00000001U);
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <toggleLEDHanlde+0xa0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2101      	movs	r1, #1
 8001858:	4618      	mov	r0, r3
 800185a:	f004 fa15 	bl	8005c88 <osEventFlagsSet>
			break;
 800185e:	e010      	b.n	8001882 <toggleLEDHanlde+0x8e>
			cmdToSend[0] = TOGGLE_LED;
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <toggleLEDHanlde+0xa4>)
 8001862:	2202      	movs	r2, #2
 8001864:	701a      	strb	r2, [r3, #0]
			cmdToSend[1] =  ledId;
 8001866:	4a0c      	ldr	r2, [pc, #48]	; (8001898 <toggleLEDHanlde+0xa4>)
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	7053      	strb	r3, [r2, #1]
			cmdToSend[2] =  state;
 800186c:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <toggleLEDHanlde+0xa4>)
 800186e:	797b      	ldrb	r3, [r7, #5]
 8001870:	7093      	strb	r3, [r2, #2]
			HAL_UART_Transmit(&huart1, cmdToSend, 8, 1000);
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	2208      	movs	r2, #8
 8001878:	4907      	ldr	r1, [pc, #28]	; (8001898 <toggleLEDHanlde+0xa4>)
 800187a:	4808      	ldr	r0, [pc, #32]	; (800189c <toggleLEDHanlde+0xa8>)
 800187c:	f003 f86d 	bl	800495a <HAL_UART_Transmit>
			break;
 8001880:	e000      	b.n	8001884 <toggleLEDHanlde+0x90>
			break;
 8001882:	bf00      	nop
		}
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40020400 	.word	0x40020400
 8001890:	40020800 	.word	0x40020800
 8001894:	20004bf4 	.word	0x20004bf4
 8001898:	200000a0 	.word	0x200000a0
 800189c:	20004bb0 	.word	0x20004bb0

080018a0 <CmdParsing_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_CmdParsing_Task */
void CmdParsing_Task(void *argument)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  HAL_UART_Receive_IT(&huart6, (uint8_t*)receivedDataFromServer, 8);
 80018a8:	2208      	movs	r2, #8
 80018aa:	491b      	ldr	r1, [pc, #108]	; (8001918 <CmdParsing_Task+0x78>)
 80018ac:	481b      	ldr	r0, [pc, #108]	; (800191c <CmdParsing_Task+0x7c>)
 80018ae:	f003 f988 	bl	8004bc2 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
	// Wait for flag to parsing comming CMD
	osEventFlagsWait(parsingCMDAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <CmdParsing_Task+0x80>)
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	2200      	movs	r2, #0
 80018bc:	2101      	movs	r1, #1
 80018be:	f004 fa27 	bl	8005d10 <osEventFlagsWait>

	// Parsing CMD
	switch(receivedDataFromServer[0]){
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <CmdParsing_Task+0x78>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d01a      	beq.n	8001902 <CmdParsing_Task+0x62>
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	dc1e      	bgt.n	800190e <CmdParsing_Task+0x6e>
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d002      	beq.n	80018da <CmdParsing_Task+0x3a>
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d007      	beq.n	80018e8 <CmdParsing_Task+0x48>
 80018d8:	e019      	b.n	800190e <CmdParsing_Task+0x6e>
	case SCAN_CARDID:
		osEventFlagsSet(scanCardAvailableHandle, 0x00000001U);
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <CmdParsing_Task+0x84>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2101      	movs	r1, #1
 80018e0:	4618      	mov	r0, r3
 80018e2:	f004 f9d1 	bl	8005c88 <osEventFlagsSet>
		break;
 80018e6:	e012      	b.n	800190e <CmdParsing_Task+0x6e>
	case TOGGLE_LED:
		toggleLEDHanlde(receivedDataFromServer[1], receivedDataFromServer[2], receivedDataFromServer[3]);
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <CmdParsing_Task+0x78>)
 80018ea:	785b      	ldrb	r3, [r3, #1]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <CmdParsing_Task+0x78>)
 80018f0:	7892      	ldrb	r2, [r2, #2]
 80018f2:	b2d1      	uxtb	r1, r2
 80018f4:	4a08      	ldr	r2, [pc, #32]	; (8001918 <CmdParsing_Task+0x78>)
 80018f6:	78d2      	ldrb	r2, [r2, #3]
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ff7a 	bl	80017f4 <toggleLEDHanlde>
		break;
 8001900:	e005      	b.n	800190e <CmdParsing_Task+0x6e>
	case SENSOR_MEASURING:
			//dosomething
		sensorMeasuringIsEnable = receivedDataFromServer[7];
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <CmdParsing_Task+0x78>)
 8001904:	79db      	ldrb	r3, [r3, #7]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <CmdParsing_Task+0x88>)
 800190a:	701a      	strb	r2, [r3, #0]
		break;
 800190c:	bf00      	nop
	}

    osDelay(1);
 800190e:	2001      	movs	r0, #1
 8001910:	f004 f960 	bl	8005bd4 <osDelay>
	osEventFlagsWait(parsingCMDAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 8001914:	e7cd      	b.n	80018b2 <CmdParsing_Task+0x12>
 8001916:	bf00      	nop
 8001918:	20000098 	.word	0x20000098
 800191c:	20004c4c 	.word	0x20004c4c
 8001920:	20004cd8 	.word	0x20004cd8
 8001924:	20004ba8 	.word	0x20004ba8
 8001928:	20000006 	.word	0x20000006

0800192c <ToggleLed_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ToggleLed_Task */
void ToggleLed_Task(void *argument)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ToggleLed_Task */

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8001934:	2001      	movs	r0, #1
 8001936:	f004 f94d 	bl	8005bd4 <osDelay>
 800193a:	e7fb      	b.n	8001934 <ToggleLed_Task+0x8>

0800193c <ScanCard_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ScanCard_Task */
void ScanCard_Task(void *argument)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	// Wait for scan flag
	osEventFlagsWait(scanCardAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <ScanCard_Task+0x2c>)
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
 800194c:	2200      	movs	r2, #0
 800194e:	2101      	movs	r1, #1
 8001950:	f004 f9de 	bl	8005d10 <osEventFlagsWait>

	// Mutex protect for uart2 start
//	osMutexAcquire(mutex_uart2Handle, osWaitForever);

	// Scan card id in ware house (id = receivedDataFromServer[1]) and send data to queue to SendCardID_Task
	scanCardIdHandle(receivedDataFromServer[1]);
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <ScanCard_Task+0x30>)
 8001956:	785b      	ldrb	r3, [r3, #1]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff feb4 	bl	80016c8 <scanCardIdHandle>

	// Mutex protect for uart2 end
//	osMutexRelease(mutex_uart2Handle);

    osDelay(1);
 8001960:	2001      	movs	r0, #1
 8001962:	f004 f937 	bl	8005bd4 <osDelay>
	osEventFlagsWait(scanCardAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 8001966:	e7ed      	b.n	8001944 <ScanCard_Task+0x8>
 8001968:	20004ba8 	.word	0x20004ba8
 800196c:	20000098 	.word	0x20000098

08001970 <SensorMeasuring_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SensorMeasuring_Task */
void SensorMeasuring_Task(void *argument)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SensorMeasuring_Task */
  /* Infinite loop */
	HAL_TIM_Base_Start(&htim10);
 8001978:	4829      	ldr	r0, [pc, #164]	; (8001a20 <SensorMeasuring_Task+0xb0>)
 800197a:	f001 ffab 	bl	80038d4 <HAL_TIM_Base_Start>
  for(;;)
  {
	  if(sensorMeasuringIsEnable){
 800197e:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <SensorMeasuring_Task+0xb4>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d01c      	beq.n	80019c2 <SensorMeasuring_Task+0x52>
		DHT11_GetData(&DHT_Data);
 8001988:	4827      	ldr	r0, [pc, #156]	; (8001a28 <SensorMeasuring_Task+0xb8>)
 800198a:	f7fe fee5 	bl	8000758 <DHT11_GetData>
		wareHouse_1.humidity = DHT_Data.Humidity;
 800198e:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <SensorMeasuring_Task+0xb8>)
 8001990:	edd3 7a01 	vldr	s15, [r3, #4]
 8001994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001998:	ee17 2a90 	vmov	r2, s15
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <SensorMeasuring_Task+0xbc>)
 800199e:	619a      	str	r2, [r3, #24]
		wareHouse_1.temperature = DHT_Data.Temperature;
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <SensorMeasuring_Task+0xb8>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019aa:	ee17 2a90 	vmov	r2, s15
 80019ae:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <SensorMeasuring_Task+0xbc>)
 80019b0:	615a      	str	r2, [r3, #20]
		osMessageQueuePut(sensorData_QueueHandle, &wareHouse_1, NULL, osWaitForever);
 80019b2:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <SensorMeasuring_Task+0xc0>)
 80019b4:	6818      	ldr	r0, [r3, #0]
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	2200      	movs	r2, #0
 80019bc:	491b      	ldr	r1, [pc, #108]	; (8001a2c <SensorMeasuring_Task+0xbc>)
 80019be:	f004 fb8f 	bl	80060e0 <osMessageQueuePut>
	  }

	  osDelay(1000);
 80019c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019c6:	f004 f905 	bl	8005bd4 <osDelay>

	  if(sensorMeasuringIsEnable){
 80019ca:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <SensorMeasuring_Task+0xb4>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01f      	beq.n	8001a14 <SensorMeasuring_Task+0xa4>
		//Send Cmd to warehouse2 to get humidity and temperature
		cmdToSend[0] = SENSOR_MEASURING;
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <SensorMeasuring_Task+0xc4>)
 80019d6:	2203      	movs	r2, #3
 80019d8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, cmdToSend, 8, HAL_MAX_DELAY);
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
 80019de:	2208      	movs	r2, #8
 80019e0:	4914      	ldr	r1, [pc, #80]	; (8001a34 <SensorMeasuring_Task+0xc4>)
 80019e2:	4815      	ldr	r0, [pc, #84]	; (8001a38 <SensorMeasuring_Task+0xc8>)
 80019e4:	f002 ffb9 	bl	800495a <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, &wareHouse_2.humidity, 1, 1000);
 80019e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ec:	2201      	movs	r2, #1
 80019ee:	4913      	ldr	r1, [pc, #76]	; (8001a3c <SensorMeasuring_Task+0xcc>)
 80019f0:	4811      	ldr	r0, [pc, #68]	; (8001a38 <SensorMeasuring_Task+0xc8>)
 80019f2:	f003 f844 	bl	8004a7e <HAL_UART_Receive>
		HAL_UART_Receive(&huart1, &wareHouse_2.temperature, 1, 1000);
 80019f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fa:	2201      	movs	r2, #1
 80019fc:	4910      	ldr	r1, [pc, #64]	; (8001a40 <SensorMeasuring_Task+0xd0>)
 80019fe:	480e      	ldr	r0, [pc, #56]	; (8001a38 <SensorMeasuring_Task+0xc8>)
 8001a00:	f003 f83d 	bl	8004a7e <HAL_UART_Receive>
		osMessageQueuePut(sensorData_QueueHandle, &wareHouse_2, NULL, osWaitForever);
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <SensorMeasuring_Task+0xc0>)
 8001a06:	6818      	ldr	r0, [r3, #0]
 8001a08:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	490d      	ldr	r1, [pc, #52]	; (8001a44 <SensorMeasuring_Task+0xd4>)
 8001a10:	f004 fb66 	bl	80060e0 <osMessageQueuePut>
	  }
	  osDelay(1000);
 8001a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a18:	f004 f8dc 	bl	8005bd4 <osDelay>
	  if(sensorMeasuringIsEnable){
 8001a1c:	e7af      	b.n	800197e <SensorMeasuring_Task+0xe>
 8001a1e:	bf00      	nop
 8001a20:	20004a94 	.word	0x20004a94
 8001a24:	20000006 	.word	0x20000006
 8001a28:	20004a84 	.word	0x20004a84
 8001a2c:	20004b84 	.word	0x20004b84
 8001a30:	20004adc 	.word	0x20004adc
 8001a34:	200000a0 	.word	0x200000a0
 8001a38:	20004bb0 	.word	0x20004bb0
 8001a3c:	20004c48 	.word	0x20004c48
 8001a40:	20004c44 	.word	0x20004c44
 8001a44:	20004c30 	.word	0x20004c30

08001a48 <SendCardID_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SendCardID_Task */
void SendCardID_Task(void *argument)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	WareHouse_t wareHouse;
  /* Infinite loop */
  for(;;)
  {
	// wait for data from queue
	osMessageQueueGet(cardID_QueueHandle, &wareHouse, NULL, osWaitForever);
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <SendCardID_Task+0x48>)
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	f107 010c 	add.w	r1, r7, #12
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f004 fb9f 	bl	80061a0 <osMessageQueueGet>

	// Mutex protect for uart6 (connect to Esp) start
	osMutexAcquire(mutex_uart6Handle, osWaitForever);
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <SendCardID_Task+0x4c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f004 fa3c 	bl	8005ee8 <osMutexAcquire>

	// send Data to ESP8266 -> Sever
	sendDataToServer(&wareHouse, CardID_DATA);
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	2106      	movs	r1, #6
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fdda 	bl	8001630 <sendDataToServer>

	// Mutex protect for uart6 end
	osMutexRelease(mutex_uart6Handle);
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <SendCardID_Task+0x4c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f004 fa7c 	bl	8005f7e <osMutexRelease>

    osDelay(1);
 8001a86:	2001      	movs	r0, #1
 8001a88:	f004 f8a4 	bl	8005bd4 <osDelay>
	osMessageQueueGet(cardID_QueueHandle, &wareHouse, NULL, osWaitForever);
 8001a8c:	e7e0      	b.n	8001a50 <SendCardID_Task+0x8>
 8001a8e:	bf00      	nop
 8001a90:	20004ba4 	.word	0x20004ba4
 8001a94:	20004ae0 	.word	0x20004ae0

08001a98 <SendSensorData_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SendSensorData_Task */
void SendSensorData_Task(void *argument)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	// wait for data from queue
	osMessageQueueGet(sensorData_QueueHandle, &wareHouse, NULL, osWaitForever);
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <SendSensorData_Task+0x48>)
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	f107 010c 	add.w	r1, r7, #12
 8001aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aac:	2200      	movs	r2, #0
 8001aae:	f004 fb77 	bl	80061a0 <osMessageQueueGet>

	// Mutex protect for uart6 (connect to Esp) start
	osMutexAcquire(mutex_uart6Handle, osWaitForever);
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <SendSensorData_Task+0x4c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 fa14 	bl	8005ee8 <osMutexAcquire>

	// send Data to ESP8266 -> Sever
	sendDataToServer(&wareHouse, Sensor_DATA);
 8001ac0:	f107 030c 	add.w	r3, r7, #12
 8001ac4:	2105      	movs	r1, #5
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fdb2 	bl	8001630 <sendDataToServer>

	// Mutex protect for uart6 end
	osMutexRelease(mutex_uart6Handle);
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <SendSensorData_Task+0x4c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f004 fa54 	bl	8005f7e <osMutexRelease>

    osDelay(1);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f004 f87c 	bl	8005bd4 <osDelay>
	osMessageQueueGet(sensorData_QueueHandle, &wareHouse, NULL, osWaitForever);
 8001adc:	e7e0      	b.n	8001aa0 <SendSensorData_Task+0x8>
 8001ade:	bf00      	nop
 8001ae0:	20004adc 	.word	0x20004adc
 8001ae4:	20004ae0 	.word	0x20004ae0

08001ae8 <ServoControl_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ServoControl_task */
void ServoControl_task(void *argument)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ServoControl_task */
	Servo_Write(&htim3, TIM_CHANNEL_1, 90);
 8001af0:	225a      	movs	r2, #90	; 0x5a
 8001af2:	2100      	movs	r1, #0
 8001af4:	4811      	ldr	r0, [pc, #68]	; (8001b3c <ServoControl_task+0x54>)
 8001af6:	f000 f859 	bl	8001bac <Servo_Write>
	int isOpen = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	osEventFlagsWait(servoControlIsAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <ServoControl_task+0x58>)
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	2200      	movs	r2, #0
 8001b08:	2101      	movs	r1, #1
 8001b0a:	f004 f901 	bl	8005d10 <osEventFlagsWait>
	if(isOpen == 0){
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d107      	bne.n	8001b24 <ServoControl_task+0x3c>
		Servo_Write(&htim3, TIM_CHANNEL_1, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2100      	movs	r1, #0
 8001b18:	4808      	ldr	r0, [pc, #32]	; (8001b3c <ServoControl_task+0x54>)
 8001b1a:	f000 f847 	bl	8001bac <Servo_Write>
		isOpen = 1;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	e006      	b.n	8001b32 <ServoControl_task+0x4a>
	}else {
		Servo_Write(&htim3, TIM_CHANNEL_1, 90);
 8001b24:	225a      	movs	r2, #90	; 0x5a
 8001b26:	2100      	movs	r1, #0
 8001b28:	4804      	ldr	r0, [pc, #16]	; (8001b3c <ServoControl_task+0x54>)
 8001b2a:	f000 f83f 	bl	8001bac <Servo_Write>
		isOpen = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
	}

	osDelay(1);
 8001b32:	2001      	movs	r0, #1
 8001b34:	f004 f84e 	bl	8005bd4 <osDelay>
	osEventFlagsWait(servoControlIsAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 8001b38:	e7e1      	b.n	8001afe <ServoControl_task+0x16>
 8001b3a:	bf00      	nop
 8001b3c:	20004ae4 	.word	0x20004ae4
 8001b40:	20004bf4 	.word	0x20004bf4

08001b44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d101      	bne.n	8001b5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b56:	f000 fb63 	bl	8002220 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40000800 	.word	0x40000800

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6c:	b672      	cpsid	i
}
 8001b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b70:	e7fe      	b.n	8001b70 <Error_Handler+0x8>

08001b72 <Map>:

#include "servo.h"
#define MIN_PULSE_WIDTH	544
#define MAX_PULSE_WIDTH 2400
uint32_t Map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b085      	sub	sp, #20
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	69b9      	ldr	r1, [r7, #24]
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	1a8a      	subs	r2, r1, r2
 8001b8c:	fb02 f203 	mul.w	r2, r2, r3
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1acb      	subs	r3, r1, r3
 8001b96:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	4413      	add	r3, r2
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <Servo_Write>:
void Servo_Write(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t angle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af02      	add	r7, sp, #8
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
	uint32_t ccr = Map(angle, 0, 180, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
 8001bb8:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001bc2:	22b4      	movs	r2, #180	; 0xb4
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffd3 	bl	8001b72 <Map>
 8001bcc:	6178      	str	r0, [r7, #20]
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b0c      	cmp	r3, #12
 8001bd2:	d831      	bhi.n	8001c38 <Servo_Write+0x8c>
 8001bd4:	a201      	add	r2, pc, #4	; (adr r2, 8001bdc <Servo_Write+0x30>)
 8001bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bda:	bf00      	nop
 8001bdc:	08001c11 	.word	0x08001c11
 8001be0:	08001c39 	.word	0x08001c39
 8001be4:	08001c39 	.word	0x08001c39
 8001be8:	08001c39 	.word	0x08001c39
 8001bec:	08001c1b 	.word	0x08001c1b
 8001bf0:	08001c39 	.word	0x08001c39
 8001bf4:	08001c39 	.word	0x08001c39
 8001bf8:	08001c39 	.word	0x08001c39
 8001bfc:	08001c25 	.word	0x08001c25
 8001c00:	08001c39 	.word	0x08001c39
 8001c04:	08001c39 	.word	0x08001c39
 8001c08:	08001c39 	.word	0x08001c39
 8001c0c:	08001c2f 	.word	0x08001c2f
	switch(Channel)
	{
		case TIM_CHANNEL_1:
			htim->Instance->CCR1 = ccr;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001c18:	e00e      	b.n	8001c38 <Servo_Write+0x8c>
		case TIM_CHANNEL_2:
			htim->Instance->CCR2 = ccr;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001c22:	e009      	b.n	8001c38 <Servo_Write+0x8c>
		case TIM_CHANNEL_3:
			htim->Instance->CCR3 = ccr;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001c2c:	e004      	b.n	8001c38 <Servo_Write+0x8c>
		case TIM_CHANNEL_4:
			htim->Instance->CCR4 = ccr;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001c36:	bf00      	nop
	}
	HAL_TIM_PWM_Start(htim, Channel);
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f001 ff88 	bl	8003b50 <HAL_TIM_PWM_Start>
}
 8001c40:	bf00      	nop
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_MspInit+0x54>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a11      	ldr	r2, [pc, #68]	; (8001c9c <HAL_MspInit+0x54>)
 8001c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_MspInit+0x54>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_MspInit+0x54>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <HAL_MspInit+0x54>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_MspInit+0x54>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	210f      	movs	r1, #15
 8001c8a:	f06f 0001 	mvn.w	r0, #1
 8001c8e:	f000 fbc3 	bl	8002418 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a29      	ldr	r2, [pc, #164]	; (8001d64 <HAL_SPI_MspInit+0xc4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d14b      	bne.n	8001d5a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4a27      	ldr	r2, [pc, #156]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd2:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a20      	ldr	r2, [pc, #128]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_SPI_MspInit+0xc8>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB12     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d24:	2303      	movs	r3, #3
 8001d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001d28:	2307      	movs	r3, #7
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	4619      	mov	r1, r3
 8001d32:	480e      	ldr	r0, [pc, #56]	; (8001d6c <HAL_SPI_MspInit+0xcc>)
 8001d34:	f000 fc2c 	bl	8002590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d38:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d46:	2303      	movs	r3, #3
 8001d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d4a:	2306      	movs	r3, #6
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4806      	ldr	r0, [pc, #24]	; (8001d70 <HAL_SPI_MspInit+0xd0>)
 8001d56:	f000 fc1b 	bl	8002590 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d5a:	bf00      	nop
 8001d5c:	3728      	adds	r7, #40	; 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40003c00 	.word	0x40003c00
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	40020800 	.word	0x40020800

08001d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <HAL_TIM_Base_MspInit+0x64>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d10e      	bne.n	8001da4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_TIM_Base_MspInit+0x68>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <HAL_TIM_Base_MspInit+0x68>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_TIM_Base_MspInit+0x68>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001da2:	e012      	b.n	8001dca <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <HAL_TIM_Base_MspInit+0x6c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d10d      	bne.n	8001dca <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_TIM_Base_MspInit+0x68>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_TIM_Base_MspInit+0x68>)
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <HAL_TIM_Base_MspInit+0x68>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40014400 	.word	0x40014400

08001de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <HAL_TIM_MspPostInit+0x68>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d11d      	bne.n	8001e42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_TIM_MspPostInit+0x6c>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a10      	ldr	r2, [pc, #64]	; (8001e50 <HAL_TIM_MspPostInit+0x6c>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <HAL_TIM_MspPostInit+0x6c>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e22:	2340      	movs	r3, #64	; 0x40
 8001e24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4805      	ldr	r0, [pc, #20]	; (8001e54 <HAL_TIM_MspPostInit+0x70>)
 8001e3e:	f000 fba7 	bl	8002590 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e42:	bf00      	nop
 8001e44:	3720      	adds	r7, #32
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40000400 	.word	0x40000400
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020000 	.word	0x40020000

08001e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08e      	sub	sp, #56	; 0x38
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a53      	ldr	r2, [pc, #332]	; (8001fc4 <HAL_UART_MspInit+0x16c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d135      	bne.n	8001ee6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
 8001e7e:	4b52      	ldr	r3, [pc, #328]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	4a51      	ldr	r2, [pc, #324]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001e84:	f043 0310 	orr.w	r3, r3, #16
 8001e88:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8a:	4b4f      	ldr	r3, [pc, #316]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	f003 0310 	and.w	r3, r3, #16
 8001e92:	623b      	str	r3, [r7, #32]
 8001e94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	4b4b      	ldr	r3, [pc, #300]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a4a      	ldr	r2, [pc, #296]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b48      	ldr	r3, [pc, #288]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001eb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ec4:	2307      	movs	r3, #7
 8001ec6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ecc:	4619      	mov	r1, r3
 8001ece:	483f      	ldr	r0, [pc, #252]	; (8001fcc <HAL_UART_MspInit+0x174>)
 8001ed0:	f000 fb5e 	bl	8002590 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2105      	movs	r1, #5
 8001ed8:	2025      	movs	r0, #37	; 0x25
 8001eda:	f000 fa9d 	bl	8002418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ede:	2025      	movs	r0, #37	; 0x25
 8001ee0:	f000 fab6 	bl	8002450 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ee4:	e06a      	b.n	8001fbc <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a39      	ldr	r2, [pc, #228]	; (8001fd0 <HAL_UART_MspInit+0x178>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d12c      	bne.n	8001f4a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	4a33      	ldr	r2, [pc, #204]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001efe:	6413      	str	r3, [r2, #64]	; 0x40
 8001f00:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	4a2c      	ldr	r2, [pc, #176]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1c:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f28:	230c      	movs	r3, #12
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f34:	2303      	movs	r3, #3
 8001f36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f38:	2307      	movs	r3, #7
 8001f3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f40:	4619      	mov	r1, r3
 8001f42:	4822      	ldr	r0, [pc, #136]	; (8001fcc <HAL_UART_MspInit+0x174>)
 8001f44:	f000 fb24 	bl	8002590 <HAL_GPIO_Init>
}
 8001f48:	e038      	b.n	8001fbc <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a21      	ldr	r2, [pc, #132]	; (8001fd4 <HAL_UART_MspInit+0x17c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d133      	bne.n	8001fbc <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5c:	4a1a      	ldr	r2, [pc, #104]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001f5e:	f043 0320 	orr.w	r3, r3, #32
 8001f62:	6453      	str	r3, [r2, #68]	; 0x44
 8001f64:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	4a13      	ldr	r2, [pc, #76]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_UART_MspInit+0x170>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f8c:	23c0      	movs	r3, #192	; 0xc0
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <HAL_UART_MspInit+0x180>)
 8001fa8:	f000 faf2 	bl	8002590 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2105      	movs	r1, #5
 8001fb0:	2047      	movs	r0, #71	; 0x47
 8001fb2:	f000 fa31 	bl	8002418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001fb6:	2047      	movs	r0, #71	; 0x47
 8001fb8:	f000 fa4a 	bl	8002450 <HAL_NVIC_EnableIRQ>
}
 8001fbc:	bf00      	nop
 8001fbe:	3738      	adds	r7, #56	; 0x38
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	40004400 	.word	0x40004400
 8001fd4:	40011400 	.word	0x40011400
 8001fd8:	40020800 	.word	0x40020800

08001fdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	; 0x30
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	201e      	movs	r0, #30
 8001ff2:	f000 fa11 	bl	8002418 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ff6:	201e      	movs	r0, #30
 8001ff8:	f000 fa2a 	bl	8002450 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <HAL_InitTick+0xa4>)
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <HAL_InitTick+0xa4>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6413      	str	r3, [r2, #64]	; 0x40
 800200c:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <HAL_InitTick+0xa4>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002018:	f107 0210 	add.w	r2, r7, #16
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f001 f8de 	bl	80031e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002028:	f001 f8b4 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 800202c:	4603      	mov	r3, r0
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	4a13      	ldr	r2, [pc, #76]	; (8002084 <HAL_InitTick+0xa8>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	0c9b      	lsrs	r3, r3, #18
 800203c:	3b01      	subs	r3, #1
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_InitTick+0xac>)
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <HAL_InitTick+0xb0>)
 8002044:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_InitTick+0xac>)
 8002048:	f240 32e7 	movw	r2, #999	; 0x3e7
 800204c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800204e:	4a0e      	ldr	r2, [pc, #56]	; (8002088 <HAL_InitTick+0xac>)
 8002050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002052:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <HAL_InitTick+0xac>)
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_InitTick+0xac>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002060:	4809      	ldr	r0, [pc, #36]	; (8002088 <HAL_InitTick+0xac>)
 8002062:	f001 fbe7 	bl	8003834 <HAL_TIM_Base_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d104      	bne.n	8002076 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800206c:	4806      	ldr	r0, [pc, #24]	; (8002088 <HAL_InitTick+0xac>)
 800206e:	f001 fcb3 	bl	80039d8 <HAL_TIM_Base_Start_IT>
 8002072:	4603      	mov	r3, r0
 8002074:	e000      	b.n	8002078 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	3730      	adds	r7, #48	; 0x30
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40023800 	.word	0x40023800
 8002084:	431bde83 	.word	0x431bde83
 8002088:	20004ce0 	.word	0x20004ce0
 800208c:	40000800 	.word	0x40000800

08002090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <NMI_Handler+0x4>

08002096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209a:	e7fe      	b.n	800209a <HardFault_Handler+0x4>

0800209c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <MemManage_Handler+0x4>

080020a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a6:	e7fe      	b.n	80020a6 <BusFault_Handler+0x4>

080020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <UsageFault_Handler+0x4>

080020ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <TIM4_IRQHandler+0x10>)
 80020c2:	f001 fdf5 	bl	8003cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20004ce0 	.word	0x20004ce0

080020d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <USART1_IRQHandler+0x10>)
 80020d6:	f002 fda5 	bl	8004c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20004bb0 	.word	0x20004bb0

080020e4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <USART6_IRQHandler+0x10>)
 80020ea:	f002 fd9b 	bl	8004c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20004c4c 	.word	0x20004c4c

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f007 fb80 	bl	800982c <__errno>
 800212c:	4603      	mov	r3, r0
 800212e:	220c      	movs	r2, #12
 8002130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	4a05      	ldr	r2, [pc, #20]	; (800215c <_sbrk+0x64>)
 8002148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20020000 	.word	0x20020000
 8002158:	00000400 	.word	0x00000400
 800215c:	200000a8 	.word	0x200000a8
 8002160:	20004d80 	.word	0x20004d80

08002164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <SystemInit+0x20>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <SystemInit+0x20>)
 8002170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800218c:	480d      	ldr	r0, [pc, #52]	; (80021c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800218e:	490e      	ldr	r1, [pc, #56]	; (80021c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002190:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002194:	e002      	b.n	800219c <LoopCopyDataInit>

08002196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219a:	3304      	adds	r3, #4

0800219c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800219c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a0:	d3f9      	bcc.n	8002196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a2:	4a0b      	ldr	r2, [pc, #44]	; (80021d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021a4:	4c0b      	ldr	r4, [pc, #44]	; (80021d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a8:	e001      	b.n	80021ae <LoopFillZerobss>

080021aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ac:	3204      	adds	r2, #4

080021ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b0:	d3fb      	bcc.n	80021aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021b2:	f7ff ffd7 	bl	8002164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021b6:	f007 fb3f 	bl	8009838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ba:	f7fe fec7 	bl	8000f4c <main>
  bx  lr    
 80021be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80021cc:	0800a698 	.word	0x0800a698
  ldr r2, =_sbss
 80021d0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80021d4:	20004d7c 	.word	0x20004d7c

080021d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d8:	e7fe      	b.n	80021d8 <ADC_IRQHandler>
	...

080021dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021e0:	4b0e      	ldr	r3, [pc, #56]	; (800221c <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0d      	ldr	r2, [pc, #52]	; (800221c <HAL_Init+0x40>)
 80021e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	; (800221c <HAL_Init+0x40>)
 80021f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_Init+0x40>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a07      	ldr	r2, [pc, #28]	; (800221c <HAL_Init+0x40>)
 80021fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002204:	2003      	movs	r0, #3
 8002206:	f000 f8fc 	bl	8002402 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800220a:	200f      	movs	r0, #15
 800220c:	f7ff fee6 	bl	8001fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002210:	f7ff fd1a 	bl	8001c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023c00 	.word	0x40023c00

08002220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_IncTick+0x20>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_IncTick+0x24>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4413      	add	r3, r2
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_IncTick+0x24>)
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000010 	.word	0x20000010
 8002244:	20004d28 	.word	0x20004d28

08002248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return uwTick;
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_GetTick+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20004d28 	.word	0x20004d28

08002260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002268:	f7ff ffee 	bl	8002248 <HAL_GetTick>
 800226c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002278:	d005      	beq.n	8002286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <HAL_Delay+0x44>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002286:	bf00      	nop
 8002288:	f7ff ffde 	bl	8002248 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	429a      	cmp	r2, r3
 8002296:	d8f7      	bhi.n	8002288 <HAL_Delay+0x28>
  {
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000010 	.word	0x20000010

080022a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c4:	4013      	ands	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022da:	4a04      	ldr	r2, [pc, #16]	; (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	60d3      	str	r3, [r2, #12]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <__NVIC_GetPriorityGrouping+0x18>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f003 0307 	and.w	r3, r3, #7
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	2b00      	cmp	r3, #0
 800231c:	db0b      	blt.n	8002336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4907      	ldr	r1, [pc, #28]	; (8002344 <__NVIC_EnableIRQ+0x38>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2001      	movs	r0, #1
 800232e:	fa00 f202 	lsl.w	r2, r0, r2
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000e100 	.word	0xe000e100

08002348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	db0a      	blt.n	8002372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	490c      	ldr	r1, [pc, #48]	; (8002394 <__NVIC_SetPriority+0x4c>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	440b      	add	r3, r1
 800236c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002370:	e00a      	b.n	8002388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4908      	ldr	r1, [pc, #32]	; (8002398 <__NVIC_SetPriority+0x50>)
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3b04      	subs	r3, #4
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	440b      	add	r3, r1
 8002386:	761a      	strb	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f1c3 0307 	rsb	r3, r3, #7
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	bf28      	it	cs
 80023ba:	2304      	movcs	r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d902      	bls.n	80023cc <NVIC_EncodePriority+0x30>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3b03      	subs	r3, #3
 80023ca:	e000      	b.n	80023ce <NVIC_EncodePriority+0x32>
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	4313      	orrs	r3, r2
         );
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	; 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ff4c 	bl	80022a8 <__NVIC_SetPriorityGrouping>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800242a:	f7ff ff61 	bl	80022f0 <__NVIC_GetPriorityGrouping>
 800242e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	68b9      	ldr	r1, [r7, #8]
 8002434:	6978      	ldr	r0, [r7, #20]
 8002436:	f7ff ffb1 	bl	800239c <NVIC_EncodePriority>
 800243a:	4602      	mov	r2, r0
 800243c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff80 	bl	8002348 <__NVIC_SetPriority>
}
 8002448:	bf00      	nop
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ff54 	bl	800230c <__NVIC_EnableIRQ>
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800247a:	f7ff fee5 	bl	8002248 <HAL_GetTick>
 800247e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d008      	beq.n	800249e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e052      	b.n	8002544 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0216 	bic.w	r2, r2, #22
 80024ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695a      	ldr	r2, [r3, #20]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d103      	bne.n	80024ce <HAL_DMA_Abort+0x62>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d007      	beq.n	80024de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0208 	bic.w	r2, r2, #8
 80024dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0201 	bic.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ee:	e013      	b.n	8002518 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024f0:	f7ff feaa 	bl	8002248 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b05      	cmp	r3, #5
 80024fc:	d90c      	bls.n	8002518 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2220      	movs	r2, #32
 8002502:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2203      	movs	r2, #3
 8002508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e015      	b.n	8002544 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1e4      	bne.n	80024f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252a:	223f      	movs	r2, #63	; 0x3f
 800252c:	409a      	lsls	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d004      	beq.n	800256a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2280      	movs	r2, #128	; 0x80
 8002564:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e00c      	b.n	8002584 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2205      	movs	r2, #5
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0201 	bic.w	r2, r2, #1
 8002580:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	; 0x24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
 80025aa:	e159      	b.n	8002860 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025ac:	2201      	movs	r2, #1
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	f040 8148 	bne.w	800285a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d005      	beq.n	80025e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d130      	bne.n	8002644 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	2203      	movs	r2, #3
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002618:	2201      	movs	r2, #1
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 0201 	and.w	r2, r3, #1
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b03      	cmp	r3, #3
 800264e:	d017      	beq.n	8002680 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	2203      	movs	r2, #3
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d123      	bne.n	80026d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	08da      	lsrs	r2, r3, #3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3208      	adds	r2, #8
 8002694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	220f      	movs	r2, #15
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	08da      	lsrs	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3208      	adds	r2, #8
 80026ce:	69b9      	ldr	r1, [r7, #24]
 80026d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	2203      	movs	r2, #3
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0203 	and.w	r2, r3, #3
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80a2 	beq.w	800285a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	4b57      	ldr	r3, [pc, #348]	; (8002878 <HAL_GPIO_Init+0x2e8>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	4a56      	ldr	r2, [pc, #344]	; (8002878 <HAL_GPIO_Init+0x2e8>)
 8002720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002724:	6453      	str	r3, [r2, #68]	; 0x44
 8002726:	4b54      	ldr	r3, [pc, #336]	; (8002878 <HAL_GPIO_Init+0x2e8>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002732:	4a52      	ldr	r2, [pc, #328]	; (800287c <HAL_GPIO_Init+0x2ec>)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	089b      	lsrs	r3, r3, #2
 8002738:	3302      	adds	r3, #2
 800273a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	220f      	movs	r2, #15
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a49      	ldr	r2, [pc, #292]	; (8002880 <HAL_GPIO_Init+0x2f0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d019      	beq.n	8002792 <HAL_GPIO_Init+0x202>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a48      	ldr	r2, [pc, #288]	; (8002884 <HAL_GPIO_Init+0x2f4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_GPIO_Init+0x1fe>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a47      	ldr	r2, [pc, #284]	; (8002888 <HAL_GPIO_Init+0x2f8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00d      	beq.n	800278a <HAL_GPIO_Init+0x1fa>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a46      	ldr	r2, [pc, #280]	; (800288c <HAL_GPIO_Init+0x2fc>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d007      	beq.n	8002786 <HAL_GPIO_Init+0x1f6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a45      	ldr	r2, [pc, #276]	; (8002890 <HAL_GPIO_Init+0x300>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <HAL_GPIO_Init+0x1f2>
 800277e:	2304      	movs	r3, #4
 8002780:	e008      	b.n	8002794 <HAL_GPIO_Init+0x204>
 8002782:	2307      	movs	r3, #7
 8002784:	e006      	b.n	8002794 <HAL_GPIO_Init+0x204>
 8002786:	2303      	movs	r3, #3
 8002788:	e004      	b.n	8002794 <HAL_GPIO_Init+0x204>
 800278a:	2302      	movs	r3, #2
 800278c:	e002      	b.n	8002794 <HAL_GPIO_Init+0x204>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_GPIO_Init+0x204>
 8002792:	2300      	movs	r3, #0
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	f002 0203 	and.w	r2, r2, #3
 800279a:	0092      	lsls	r2, r2, #2
 800279c:	4093      	lsls	r3, r2
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027a4:	4935      	ldr	r1, [pc, #212]	; (800287c <HAL_GPIO_Init+0x2ec>)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	3302      	adds	r3, #2
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b2:	4b38      	ldr	r3, [pc, #224]	; (8002894 <HAL_GPIO_Init+0x304>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d6:	4a2f      	ldr	r2, [pc, #188]	; (8002894 <HAL_GPIO_Init+0x304>)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027dc:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <HAL_GPIO_Init+0x304>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002800:	4a24      	ldr	r2, [pc, #144]	; (8002894 <HAL_GPIO_Init+0x304>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002806:	4b23      	ldr	r3, [pc, #140]	; (8002894 <HAL_GPIO_Init+0x304>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800282a:	4a1a      	ldr	r2, [pc, #104]	; (8002894 <HAL_GPIO_Init+0x304>)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002830:	4b18      	ldr	r3, [pc, #96]	; (8002894 <HAL_GPIO_Init+0x304>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002854:	4a0f      	ldr	r2, [pc, #60]	; (8002894 <HAL_GPIO_Init+0x304>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3301      	adds	r3, #1
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	2b0f      	cmp	r3, #15
 8002864:	f67f aea2 	bls.w	80025ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3724      	adds	r7, #36	; 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	40013800 	.word	0x40013800
 8002880:	40020000 	.word	0x40020000
 8002884:	40020400 	.word	0x40020400
 8002888:	40020800 	.word	0x40020800
 800288c:	40020c00 	.word	0x40020c00
 8002890:	40021000 	.word	0x40021000
 8002894:	40013c00 	.word	0x40013c00

08002898 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	887b      	ldrh	r3, [r7, #2]
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028b0:	2301      	movs	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	e001      	b.n	80028ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	807b      	strh	r3, [r7, #2]
 80028d4:	4613      	mov	r3, r2
 80028d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028d8:	787b      	ldrb	r3, [r7, #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028de:	887a      	ldrh	r2, [r7, #2]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028e4:	e003      	b.n	80028ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028e6:	887b      	ldrh	r3, [r7, #2]
 80028e8:	041a      	lsls	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	619a      	str	r2, [r3, #24]
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e264      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d075      	beq.n	8002a06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800291a:	4ba3      	ldr	r3, [pc, #652]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b04      	cmp	r3, #4
 8002924:	d00c      	beq.n	8002940 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002926:	4ba0      	ldr	r3, [pc, #640]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800292e:	2b08      	cmp	r3, #8
 8002930:	d112      	bne.n	8002958 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002932:	4b9d      	ldr	r3, [pc, #628]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800293e:	d10b      	bne.n	8002958 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	4b99      	ldr	r3, [pc, #612]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d05b      	beq.n	8002a04 <HAL_RCC_OscConfig+0x108>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d157      	bne.n	8002a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e23f      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002960:	d106      	bne.n	8002970 <HAL_RCC_OscConfig+0x74>
 8002962:	4b91      	ldr	r3, [pc, #580]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a90      	ldr	r2, [pc, #576]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e01d      	b.n	80029ac <HAL_RCC_OscConfig+0xb0>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0x98>
 800297a:	4b8b      	ldr	r3, [pc, #556]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a8a      	ldr	r2, [pc, #552]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b88      	ldr	r3, [pc, #544]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a87      	ldr	r2, [pc, #540]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0xb0>
 8002994:	4b84      	ldr	r3, [pc, #528]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a83      	ldr	r2, [pc, #524]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 800299a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b81      	ldr	r3, [pc, #516]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a80      	ldr	r2, [pc, #512]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 80029a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d013      	beq.n	80029dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7ff fc48 	bl	8002248 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029bc:	f7ff fc44 	bl	8002248 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e204      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b76      	ldr	r3, [pc, #472]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0xc0>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7ff fc34 	bl	8002248 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e4:	f7ff fc30 	bl	8002248 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e1f0      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	4b6c      	ldr	r3, [pc, #432]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0xe8>
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d063      	beq.n	8002ada <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a12:	4b65      	ldr	r3, [pc, #404]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a1e:	4b62      	ldr	r3, [pc, #392]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d11c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2a:	4b5f      	ldr	r3, [pc, #380]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d116      	bne.n	8002a64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a36:	4b5c      	ldr	r3, [pc, #368]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_RCC_OscConfig+0x152>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e1c4      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4e:	4b56      	ldr	r3, [pc, #344]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4952      	ldr	r1, [pc, #328]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a62:	e03a      	b.n	8002ada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d020      	beq.n	8002aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a6c:	4b4f      	ldr	r3, [pc, #316]	; (8002bac <HAL_RCC_OscConfig+0x2b0>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7ff fbe9 	bl	8002248 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a7a:	f7ff fbe5 	bl	8002248 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e1a5      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8c:	4b46      	ldr	r3, [pc, #280]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a98:	4b43      	ldr	r3, [pc, #268]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4940      	ldr	r1, [pc, #256]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	600b      	str	r3, [r1, #0]
 8002aac:	e015      	b.n	8002ada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aae:	4b3f      	ldr	r3, [pc, #252]	; (8002bac <HAL_RCC_OscConfig+0x2b0>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7ff fbc8 	bl	8002248 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002abc:	f7ff fbc4 	bl	8002248 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e184      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ace:	4b36      	ldr	r3, [pc, #216]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d030      	beq.n	8002b48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d016      	beq.n	8002b1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aee:	4b30      	ldr	r3, [pc, #192]	; (8002bb0 <HAL_RCC_OscConfig+0x2b4>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af4:	f7ff fba8 	bl	8002248 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002afc:	f7ff fba4 	bl	8002248 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e164      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0x200>
 8002b1a:	e015      	b.n	8002b48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b1c:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_RCC_OscConfig+0x2b4>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b22:	f7ff fb91 	bl	8002248 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b2a:	f7ff fb8d 	bl	8002248 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e14d      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f0      	bne.n	8002b2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80a0 	beq.w	8002c96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b56:	2300      	movs	r3, #0
 8002b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10f      	bne.n	8002b86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b74:	6413      	str	r3, [r2, #64]	; 0x40
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b82:	2301      	movs	r3, #1
 8002b84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_OscConfig+0x2b8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d121      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <HAL_RCC_OscConfig+0x2b8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a07      	ldr	r2, [pc, #28]	; (8002bb4 <HAL_RCC_OscConfig+0x2b8>)
 8002b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9e:	f7ff fb53 	bl	8002248 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	e011      	b.n	8002bca <HAL_RCC_OscConfig+0x2ce>
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	42470000 	.word	0x42470000
 8002bb0:	42470e80 	.word	0x42470e80
 8002bb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb8:	f7ff fb46 	bl	8002248 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e106      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bca:	4b85      	ldr	r3, [pc, #532]	; (8002de0 <HAL_RCC_OscConfig+0x4e4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d106      	bne.n	8002bec <HAL_RCC_OscConfig+0x2f0>
 8002bde:	4b81      	ldr	r3, [pc, #516]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	4a80      	ldr	r2, [pc, #512]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bea:	e01c      	b.n	8002c26 <HAL_RCC_OscConfig+0x32a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b05      	cmp	r3, #5
 8002bf2:	d10c      	bne.n	8002c0e <HAL_RCC_OscConfig+0x312>
 8002bf4:	4b7b      	ldr	r3, [pc, #492]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	4a7a      	ldr	r2, [pc, #488]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002bfa:	f043 0304 	orr.w	r3, r3, #4
 8002bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002c00:	4b78      	ldr	r3, [pc, #480]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	4a77      	ldr	r2, [pc, #476]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0c:	e00b      	b.n	8002c26 <HAL_RCC_OscConfig+0x32a>
 8002c0e:	4b75      	ldr	r3, [pc, #468]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	4a74      	ldr	r2, [pc, #464]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002c14:	f023 0301 	bic.w	r3, r3, #1
 8002c18:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1a:	4b72      	ldr	r3, [pc, #456]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	4a71      	ldr	r2, [pc, #452]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002c20:	f023 0304 	bic.w	r3, r3, #4
 8002c24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d015      	beq.n	8002c5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2e:	f7ff fb0b 	bl	8002248 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f7ff fb07 	bl	8002248 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e0c5      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4c:	4b65      	ldr	r3, [pc, #404]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0ee      	beq.n	8002c36 <HAL_RCC_OscConfig+0x33a>
 8002c58:	e014      	b.n	8002c84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5a:	f7ff faf5 	bl	8002248 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c60:	e00a      	b.n	8002c78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c62:	f7ff faf1 	bl	8002248 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e0af      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c78:	4b5a      	ldr	r3, [pc, #360]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1ee      	bne.n	8002c62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d105      	bne.n	8002c96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8a:	4b56      	ldr	r3, [pc, #344]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a55      	ldr	r2, [pc, #340]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 809b 	beq.w	8002dd6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ca0:	4b50      	ldr	r3, [pc, #320]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 030c 	and.w	r3, r3, #12
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d05c      	beq.n	8002d66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d141      	bne.n	8002d38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb4:	4b4c      	ldr	r3, [pc, #304]	; (8002de8 <HAL_RCC_OscConfig+0x4ec>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cba:	f7ff fac5 	bl	8002248 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc2:	f7ff fac1 	bl	8002248 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e081      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd4:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f0      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69da      	ldr	r2, [r3, #28]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	019b      	lsls	r3, r3, #6
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	085b      	lsrs	r3, r3, #1
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	041b      	lsls	r3, r3, #16
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	061b      	lsls	r3, r3, #24
 8002d04:	4937      	ldr	r1, [pc, #220]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d0a:	4b37      	ldr	r3, [pc, #220]	; (8002de8 <HAL_RCC_OscConfig+0x4ec>)
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7ff fa9a 	bl	8002248 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d18:	f7ff fa96 	bl	8002248 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e056      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2a:	4b2e      	ldr	r3, [pc, #184]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x41c>
 8002d36:	e04e      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d38:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <HAL_RCC_OscConfig+0x4ec>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3e:	f7ff fa83 	bl	8002248 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d46:	f7ff fa7f 	bl	8002248 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e03f      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d58:	4b22      	ldr	r3, [pc, #136]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <HAL_RCC_OscConfig+0x44a>
 8002d64:	e037      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e032      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d72:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <HAL_RCC_OscConfig+0x4e8>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d028      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d121      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d11a      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002da2:	4013      	ands	r3, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002da8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d111      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	085b      	lsrs	r3, r3, #1
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d001      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40007000 	.word	0x40007000
 8002de4:	40023800 	.word	0x40023800
 8002de8:	42470060 	.word	0x42470060

08002dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0cc      	b.n	8002f9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e00:	4b68      	ldr	r3, [pc, #416]	; (8002fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d90c      	bls.n	8002e28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0e:	4b65      	ldr	r3, [pc, #404]	; (8002fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	4b63      	ldr	r3, [pc, #396]	; (8002fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0b8      	b.n	8002f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d020      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e40:	4b59      	ldr	r3, [pc, #356]	; (8002fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	4a58      	ldr	r2, [pc, #352]	; (8002fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e58:	4b53      	ldr	r3, [pc, #332]	; (8002fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	4a52      	ldr	r2, [pc, #328]	; (8002fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e64:	4b50      	ldr	r3, [pc, #320]	; (8002fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	494d      	ldr	r1, [pc, #308]	; (8002fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d044      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d107      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8a:	4b47      	ldr	r3, [pc, #284]	; (8002fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d119      	bne.n	8002eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e07f      	b.n	8002f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d003      	beq.n	8002eaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d107      	bne.n	8002eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eaa:	4b3f      	ldr	r3, [pc, #252]	; (8002fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d109      	bne.n	8002eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e06f      	b.n	8002f9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eba:	4b3b      	ldr	r3, [pc, #236]	; (8002fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e067      	b.n	8002f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eca:	4b37      	ldr	r3, [pc, #220]	; (8002fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f023 0203 	bic.w	r2, r3, #3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	4934      	ldr	r1, [pc, #208]	; (8002fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002edc:	f7ff f9b4 	bl	8002248 <HAL_GetTick>
 8002ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee4:	f7ff f9b0 	bl	8002248 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e04f      	b.n	8002f9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	4b2b      	ldr	r3, [pc, #172]	; (8002fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 020c 	and.w	r2, r3, #12
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d1eb      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d20c      	bcs.n	8002f34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b22      	ldr	r3, [pc, #136]	; (8002fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f22:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d001      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e032      	b.n	8002f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f40:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	4916      	ldr	r1, [pc, #88]	; (8002fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d009      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	490e      	ldr	r1, [pc, #56]	; (8002fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f72:	f000 f821 	bl	8002fb8 <HAL_RCC_GetSysClockFreq>
 8002f76:	4602      	mov	r2, r0
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	490a      	ldr	r1, [pc, #40]	; (8002fac <HAL_RCC_ClockConfig+0x1c0>)
 8002f84:	5ccb      	ldrb	r3, [r1, r3]
 8002f86:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8a:	4a09      	ldr	r2, [pc, #36]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff f822 	bl	8001fdc <HAL_InitTick>

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40023c00 	.word	0x40023c00
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	0800a5dc 	.word	0x0800a5dc
 8002fb0:	20000008 	.word	0x20000008
 8002fb4:	2000000c 	.word	0x2000000c

08002fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	607b      	str	r3, [r7, #4]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fd0:	4b67      	ldr	r3, [pc, #412]	; (8003170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d00d      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	f200 80bd 	bhi.w	800315c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0x34>
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d003      	beq.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fea:	e0b7      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fec:	4b61      	ldr	r3, [pc, #388]	; (8003174 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fee:	60bb      	str	r3, [r7, #8]
       break;
 8002ff0:	e0b7      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ff2:	4b61      	ldr	r3, [pc, #388]	; (8003178 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ff4:	60bb      	str	r3, [r7, #8]
      break;
 8002ff6:	e0b4      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ff8:	4b5d      	ldr	r3, [pc, #372]	; (8003170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003000:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003002:	4b5b      	ldr	r3, [pc, #364]	; (8003170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d04d      	beq.n	80030aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800300e:	4b58      	ldr	r3, [pc, #352]	; (8003170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	099b      	lsrs	r3, r3, #6
 8003014:	461a      	mov	r2, r3
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800301e:	f04f 0100 	mov.w	r1, #0
 8003022:	ea02 0800 	and.w	r8, r2, r0
 8003026:	ea03 0901 	and.w	r9, r3, r1
 800302a:	4640      	mov	r0, r8
 800302c:	4649      	mov	r1, r9
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	014b      	lsls	r3, r1, #5
 8003038:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800303c:	0142      	lsls	r2, r0, #5
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	ebb0 0008 	subs.w	r0, r0, r8
 8003046:	eb61 0109 	sbc.w	r1, r1, r9
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	018b      	lsls	r3, r1, #6
 8003054:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003058:	0182      	lsls	r2, r0, #6
 800305a:	1a12      	subs	r2, r2, r0
 800305c:	eb63 0301 	sbc.w	r3, r3, r1
 8003060:	f04f 0000 	mov.w	r0, #0
 8003064:	f04f 0100 	mov.w	r1, #0
 8003068:	00d9      	lsls	r1, r3, #3
 800306a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800306e:	00d0      	lsls	r0, r2, #3
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	eb12 0208 	adds.w	r2, r2, r8
 8003078:	eb43 0309 	adc.w	r3, r3, r9
 800307c:	f04f 0000 	mov.w	r0, #0
 8003080:	f04f 0100 	mov.w	r1, #0
 8003084:	0259      	lsls	r1, r3, #9
 8003086:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800308a:	0250      	lsls	r0, r2, #9
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4610      	mov	r0, r2
 8003092:	4619      	mov	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	461a      	mov	r2, r3
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	f7fd f8f0 	bl	8000280 <__aeabi_uldivmod>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4613      	mov	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	e04a      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030aa:	4b31      	ldr	r3, [pc, #196]	; (8003170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	099b      	lsrs	r3, r3, #6
 80030b0:	461a      	mov	r2, r3
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030ba:	f04f 0100 	mov.w	r1, #0
 80030be:	ea02 0400 	and.w	r4, r2, r0
 80030c2:	ea03 0501 	and.w	r5, r3, r1
 80030c6:	4620      	mov	r0, r4
 80030c8:	4629      	mov	r1, r5
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	014b      	lsls	r3, r1, #5
 80030d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030d8:	0142      	lsls	r2, r0, #5
 80030da:	4610      	mov	r0, r2
 80030dc:	4619      	mov	r1, r3
 80030de:	1b00      	subs	r0, r0, r4
 80030e0:	eb61 0105 	sbc.w	r1, r1, r5
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	018b      	lsls	r3, r1, #6
 80030ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030f2:	0182      	lsls	r2, r0, #6
 80030f4:	1a12      	subs	r2, r2, r0
 80030f6:	eb63 0301 	sbc.w	r3, r3, r1
 80030fa:	f04f 0000 	mov.w	r0, #0
 80030fe:	f04f 0100 	mov.w	r1, #0
 8003102:	00d9      	lsls	r1, r3, #3
 8003104:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003108:	00d0      	lsls	r0, r2, #3
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	1912      	adds	r2, r2, r4
 8003110:	eb45 0303 	adc.w	r3, r5, r3
 8003114:	f04f 0000 	mov.w	r0, #0
 8003118:	f04f 0100 	mov.w	r1, #0
 800311c:	0299      	lsls	r1, r3, #10
 800311e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003122:	0290      	lsls	r0, r2, #10
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	461a      	mov	r2, r3
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	f7fd f8a4 	bl	8000280 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4613      	mov	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	0c1b      	lsrs	r3, r3, #16
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	3301      	adds	r3, #1
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	60bb      	str	r3, [r7, #8]
      break;
 800315a:	e002      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800315e:	60bb      	str	r3, [r7, #8]
      break;
 8003160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003162:	68bb      	ldr	r3, [r7, #8]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	00f42400 	.word	0x00f42400
 8003178:	007a1200 	.word	0x007a1200

0800317c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003180:	4b03      	ldr	r3, [pc, #12]	; (8003190 <HAL_RCC_GetHCLKFreq+0x14>)
 8003182:	681b      	ldr	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000008 	.word	0x20000008

08003194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003198:	f7ff fff0 	bl	800317c <HAL_RCC_GetHCLKFreq>
 800319c:	4602      	mov	r2, r0
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	0a9b      	lsrs	r3, r3, #10
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	4903      	ldr	r1, [pc, #12]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031aa:	5ccb      	ldrb	r3, [r1, r3]
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40023800 	.word	0x40023800
 80031b8:	0800a5ec 	.word	0x0800a5ec

080031bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031c0:	f7ff ffdc 	bl	800317c <HAL_RCC_GetHCLKFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	0b5b      	lsrs	r3, r3, #13
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4903      	ldr	r1, [pc, #12]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d2:	5ccb      	ldrb	r3, [r1, r3]
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40023800 	.word	0x40023800
 80031e0:	0800a5ec 	.word	0x0800a5ec

080031e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	220f      	movs	r2, #15
 80031f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_RCC_GetClockConfig+0x5c>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0203 	and.w	r2, r3, #3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <HAL_RCC_GetClockConfig+0x5c>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <HAL_RCC_GetClockConfig+0x5c>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003218:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_RCC_GetClockConfig+0x5c>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	08db      	lsrs	r3, r3, #3
 800321e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <HAL_RCC_GetClockConfig+0x60>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0207 	and.w	r2, r3, #7
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	601a      	str	r2, [r3, #0]
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800
 8003244:	40023c00 	.word	0x40023c00

08003248 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e07b      	b.n	8003352 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	2b00      	cmp	r3, #0
 8003260:	d108      	bne.n	8003274 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800326a:	d009      	beq.n	8003280 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	61da      	str	r2, [r3, #28]
 8003272:	e005      	b.n	8003280 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fe fd00 	bl	8001ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003304:	ea42 0103 	orr.w	r1, r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	f003 0104 	and.w	r1, r3, #4
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	f003 0210 	and.w	r2, r3, #16
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003340:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b08c      	sub	sp, #48	; 0x30
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003368:	2301      	movs	r3, #1
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_SPI_TransmitReceive+0x26>
 800337c:	2302      	movs	r3, #2
 800337e:	e18a      	b.n	8003696 <HAL_SPI_TransmitReceive+0x33c>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003388:	f7fe ff5e 	bl	8002248 <HAL_GetTick>
 800338c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003394:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800339e:	887b      	ldrh	r3, [r7, #2]
 80033a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d00f      	beq.n	80033ca <HAL_SPI_TransmitReceive+0x70>
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033b0:	d107      	bne.n	80033c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <HAL_SPI_TransmitReceive+0x68>
 80033ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d003      	beq.n	80033ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
 80033c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033c8:	e15b      	b.n	8003682 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_SPI_TransmitReceive+0x82>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_SPI_TransmitReceive+0x82>
 80033d6:	887b      	ldrh	r3, [r7, #2]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d103      	bne.n	80033e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033e2:	e14e      	b.n	8003682 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d003      	beq.n	80033f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2205      	movs	r2, #5
 80033f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	887a      	ldrh	r2, [r7, #2]
 800340e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	887a      	ldrh	r2, [r7, #2]
 800341a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	887a      	ldrh	r2, [r7, #2]
 8003420:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003438:	2b40      	cmp	r3, #64	; 0x40
 800343a:	d007      	beq.n	800344c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800344a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003454:	d178      	bne.n	8003548 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <HAL_SPI_TransmitReceive+0x10a>
 800345e:	8b7b      	ldrh	r3, [r7, #26]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d166      	bne.n	8003532 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	881a      	ldrh	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	1c9a      	adds	r2, r3, #2
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003488:	e053      	b.n	8003532 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b02      	cmp	r3, #2
 8003496:	d11b      	bne.n	80034d0 <HAL_SPI_TransmitReceive+0x176>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d016      	beq.n	80034d0 <HAL_SPI_TransmitReceive+0x176>
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d113      	bne.n	80034d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	881a      	ldrh	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	1c9a      	adds	r2, r3, #2
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d119      	bne.n	8003512 <HAL_SPI_TransmitReceive+0x1b8>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d014      	beq.n	8003512 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	b292      	uxth	r2, r2
 80034f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	1c9a      	adds	r2, r3, #2
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800350e:	2301      	movs	r3, #1
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003512:	f7fe fe99 	bl	8002248 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800351e:	429a      	cmp	r2, r3
 8003520:	d807      	bhi.n	8003532 <HAL_SPI_TransmitReceive+0x1d8>
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d003      	beq.n	8003532 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003530:	e0a7      	b.n	8003682 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1a6      	bne.n	800348a <HAL_SPI_TransmitReceive+0x130>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1a1      	bne.n	800348a <HAL_SPI_TransmitReceive+0x130>
 8003546:	e07c      	b.n	8003642 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_SPI_TransmitReceive+0x1fc>
 8003550:	8b7b      	ldrh	r3, [r7, #26]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d16b      	bne.n	800362e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	7812      	ldrb	r2, [r2, #0]
 8003562:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800357c:	e057      	b.n	800362e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b02      	cmp	r3, #2
 800358a:	d11c      	bne.n	80035c6 <HAL_SPI_TransmitReceive+0x26c>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d017      	beq.n	80035c6 <HAL_SPI_TransmitReceive+0x26c>
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	2b01      	cmp	r3, #1
 800359a:	d114      	bne.n	80035c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	330c      	adds	r3, #12
 80035a6:	7812      	ldrb	r2, [r2, #0]
 80035a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d119      	bne.n	8003608 <HAL_SPI_TransmitReceive+0x2ae>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d014      	beq.n	8003608 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003604:	2301      	movs	r3, #1
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003608:	f7fe fe1e 	bl	8002248 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003614:	429a      	cmp	r2, r3
 8003616:	d803      	bhi.n	8003620 <HAL_SPI_TransmitReceive+0x2c6>
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d102      	bne.n	8003626 <HAL_SPI_TransmitReceive+0x2cc>
 8003620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003622:	2b00      	cmp	r3, #0
 8003624:	d103      	bne.n	800362e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800362c:	e029      	b.n	8003682 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1a2      	bne.n	800357e <HAL_SPI_TransmitReceive+0x224>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d19d      	bne.n	800357e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003644:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f8b2 	bl	80037b0 <SPI_EndRxTxTransaction>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d006      	beq.n	8003660 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800365e:	e010      	b.n	8003682 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	e000      	b.n	8003682 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003680:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003692:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003696:	4618      	mov	r0, r3
 8003698:	3730      	adds	r7, #48	; 0x30
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	4613      	mov	r3, r2
 80036ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036b0:	f7fe fdca 	bl	8002248 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	4413      	add	r3, r2
 80036be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036c0:	f7fe fdc2 	bl	8002248 <HAL_GetTick>
 80036c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036c6:	4b39      	ldr	r3, [pc, #228]	; (80037ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	015b      	lsls	r3, r3, #5
 80036cc:	0d1b      	lsrs	r3, r3, #20
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	fb02 f303 	mul.w	r3, r2, r3
 80036d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036d6:	e054      	b.n	8003782 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d050      	beq.n	8003782 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036e0:	f7fe fdb2 	bl	8002248 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d902      	bls.n	80036f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d13d      	bne.n	8003772 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003704:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800370e:	d111      	bne.n	8003734 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003718:	d004      	beq.n	8003724 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003722:	d107      	bne.n	8003734 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003732:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373c:	d10f      	bne.n	800375e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800375c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e017      	b.n	80037a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	3b01      	subs	r3, #1
 8003780:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4013      	ands	r3, r2
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	429a      	cmp	r2, r3
 8003790:	bf0c      	ite	eq
 8003792:	2301      	moveq	r3, #1
 8003794:	2300      	movne	r3, #0
 8003796:	b2db      	uxtb	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	429a      	cmp	r2, r3
 800379e:	d19b      	bne.n	80036d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20000008 	.word	0x20000008

080037b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80037bc:	4b1b      	ldr	r3, [pc, #108]	; (800382c <SPI_EndRxTxTransaction+0x7c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1b      	ldr	r2, [pc, #108]	; (8003830 <SPI_EndRxTxTransaction+0x80>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	0d5b      	lsrs	r3, r3, #21
 80037c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037cc:	fb02 f303 	mul.w	r3, r2, r3
 80037d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037da:	d112      	bne.n	8003802 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2200      	movs	r2, #0
 80037e4:	2180      	movs	r1, #128	; 0x80
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f7ff ff5a 	bl	80036a0 <SPI_WaitFlagStateUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d016      	beq.n	8003820 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	f043 0220 	orr.w	r2, r3, #32
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e00f      	b.n	8003822 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	3b01      	subs	r3, #1
 800380c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003818:	2b80      	cmp	r3, #128	; 0x80
 800381a:	d0f2      	beq.n	8003802 <SPI_EndRxTxTransaction+0x52>
 800381c:	e000      	b.n	8003820 <SPI_EndRxTxTransaction+0x70>
        break;
 800381e:	bf00      	nop
  }

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000008 	.word	0x20000008
 8003830:	165e9f81 	.word	0x165e9f81

08003834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e041      	b.n	80038ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fe fa8a 	bl	8001d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3304      	adds	r3, #4
 8003870:	4619      	mov	r1, r3
 8003872:	4610      	mov	r0, r2
 8003874:	f000 fcd6 	bl	8004224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d001      	beq.n	80038ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e03c      	b.n	8003966 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1e      	ldr	r2, [pc, #120]	; (8003974 <HAL_TIM_Base_Start+0xa0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d018      	beq.n	8003930 <HAL_TIM_Base_Start+0x5c>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003906:	d013      	beq.n	8003930 <HAL_TIM_Base_Start+0x5c>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1a      	ldr	r2, [pc, #104]	; (8003978 <HAL_TIM_Base_Start+0xa4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00e      	beq.n	8003930 <HAL_TIM_Base_Start+0x5c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a19      	ldr	r2, [pc, #100]	; (800397c <HAL_TIM_Base_Start+0xa8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d009      	beq.n	8003930 <HAL_TIM_Base_Start+0x5c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a17      	ldr	r2, [pc, #92]	; (8003980 <HAL_TIM_Base_Start+0xac>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <HAL_TIM_Base_Start+0x5c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a16      	ldr	r2, [pc, #88]	; (8003984 <HAL_TIM_Base_Start+0xb0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d111      	bne.n	8003954 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b06      	cmp	r3, #6
 8003940:	d010      	beq.n	8003964 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0201 	orr.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003952:	e007      	b.n	8003964 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40010000 	.word	0x40010000
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800
 8003980:	40000c00 	.word	0x40000c00
 8003984:	40014000 	.word	0x40014000

08003988 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6a1a      	ldr	r2, [r3, #32]
 8003996:	f241 1311 	movw	r3, #4369	; 0x1111
 800399a:	4013      	ands	r3, r2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10f      	bne.n	80039c0 <HAL_TIM_Base_Stop+0x38>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6a1a      	ldr	r2, [r3, #32]
 80039a6:	f240 4344 	movw	r3, #1092	; 0x444
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d107      	bne.n	80039c0 <HAL_TIM_Base_Stop+0x38>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0201 	bic.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d001      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e044      	b.n	8003a7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1e      	ldr	r2, [pc, #120]	; (8003a88 <HAL_TIM_Base_Start_IT+0xb0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d018      	beq.n	8003a44 <HAL_TIM_Base_Start_IT+0x6c>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1a:	d013      	beq.n	8003a44 <HAL_TIM_Base_Start_IT+0x6c>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1a      	ldr	r2, [pc, #104]	; (8003a8c <HAL_TIM_Base_Start_IT+0xb4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00e      	beq.n	8003a44 <HAL_TIM_Base_Start_IT+0x6c>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a19      	ldr	r2, [pc, #100]	; (8003a90 <HAL_TIM_Base_Start_IT+0xb8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <HAL_TIM_Base_Start_IT+0x6c>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a17      	ldr	r2, [pc, #92]	; (8003a94 <HAL_TIM_Base_Start_IT+0xbc>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d004      	beq.n	8003a44 <HAL_TIM_Base_Start_IT+0x6c>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a16      	ldr	r2, [pc, #88]	; (8003a98 <HAL_TIM_Base_Start_IT+0xc0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d111      	bne.n	8003a68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b06      	cmp	r3, #6
 8003a54:	d010      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a66:	e007      	b.n	8003a78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40000800 	.word	0x40000800
 8003a94:	40000c00 	.word	0x40000c00
 8003a98:	40014000 	.word	0x40014000

08003a9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e041      	b.n	8003b32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f839 	bl	8003b3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4610      	mov	r0, r2
 8003adc:	f000 fba2 	bl	8004224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d109      	bne.n	8003b74 <HAL_TIM_PWM_Start+0x24>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	e022      	b.n	8003bba <HAL_TIM_PWM_Start+0x6a>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d109      	bne.n	8003b8e <HAL_TIM_PWM_Start+0x3e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	bf14      	ite	ne
 8003b86:	2301      	movne	r3, #1
 8003b88:	2300      	moveq	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	e015      	b.n	8003bba <HAL_TIM_PWM_Start+0x6a>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d109      	bne.n	8003ba8 <HAL_TIM_PWM_Start+0x58>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	e008      	b.n	8003bba <HAL_TIM_PWM_Start+0x6a>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	bf14      	ite	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	2300      	moveq	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e068      	b.n	8003c94 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d104      	bne.n	8003bd2 <HAL_TIM_PWM_Start+0x82>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd0:	e013      	b.n	8003bfa <HAL_TIM_PWM_Start+0xaa>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d104      	bne.n	8003be2 <HAL_TIM_PWM_Start+0x92>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be0:	e00b      	b.n	8003bfa <HAL_TIM_PWM_Start+0xaa>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d104      	bne.n	8003bf2 <HAL_TIM_PWM_Start+0xa2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf0:	e003      	b.n	8003bfa <HAL_TIM_PWM_Start+0xaa>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	6839      	ldr	r1, [r7, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fdb4 	bl	8004770 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a23      	ldr	r2, [pc, #140]	; (8003c9c <HAL_TIM_PWM_Start+0x14c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d107      	bne.n	8003c22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1d      	ldr	r2, [pc, #116]	; (8003c9c <HAL_TIM_PWM_Start+0x14c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d018      	beq.n	8003c5e <HAL_TIM_PWM_Start+0x10e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c34:	d013      	beq.n	8003c5e <HAL_TIM_PWM_Start+0x10e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a19      	ldr	r2, [pc, #100]	; (8003ca0 <HAL_TIM_PWM_Start+0x150>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00e      	beq.n	8003c5e <HAL_TIM_PWM_Start+0x10e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a17      	ldr	r2, [pc, #92]	; (8003ca4 <HAL_TIM_PWM_Start+0x154>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d009      	beq.n	8003c5e <HAL_TIM_PWM_Start+0x10e>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a16      	ldr	r2, [pc, #88]	; (8003ca8 <HAL_TIM_PWM_Start+0x158>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d004      	beq.n	8003c5e <HAL_TIM_PWM_Start+0x10e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a14      	ldr	r2, [pc, #80]	; (8003cac <HAL_TIM_PWM_Start+0x15c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d111      	bne.n	8003c82 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b06      	cmp	r3, #6
 8003c6e:	d010      	beq.n	8003c92 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c80:	e007      	b.n	8003c92 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0201 	orr.w	r2, r2, #1
 8003c90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40010000 	.word	0x40010000
 8003ca0:	40000400 	.word	0x40000400
 8003ca4:	40000800 	.word	0x40000800
 8003ca8:	40000c00 	.word	0x40000c00
 8003cac:	40014000 	.word	0x40014000

08003cb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d122      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d11b      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0202 	mvn.w	r2, #2
 8003cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fa77 	bl	80041e6 <HAL_TIM_IC_CaptureCallback>
 8003cf8:	e005      	b.n	8003d06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 fa69 	bl	80041d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 fa7a 	bl	80041fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d122      	bne.n	8003d60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d11b      	bne.n	8003d60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0204 	mvn.w	r2, #4
 8003d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2202      	movs	r2, #2
 8003d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fa4d 	bl	80041e6 <HAL_TIM_IC_CaptureCallback>
 8003d4c:	e005      	b.n	8003d5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fa3f 	bl	80041d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fa50 	bl	80041fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d122      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d11b      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0208 	mvn.w	r2, #8
 8003d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2204      	movs	r2, #4
 8003d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fa23 	bl	80041e6 <HAL_TIM_IC_CaptureCallback>
 8003da0:	e005      	b.n	8003dae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fa15 	bl	80041d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fa26 	bl	80041fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d122      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b10      	cmp	r3, #16
 8003dce:	d11b      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0210 	mvn.w	r2, #16
 8003dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2208      	movs	r2, #8
 8003dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f9f9 	bl	80041e6 <HAL_TIM_IC_CaptureCallback>
 8003df4:	e005      	b.n	8003e02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f9eb 	bl	80041d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f9fc 	bl	80041fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d10e      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0201 	mvn.w	r2, #1
 8003e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd fe88 	bl	8001b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3e:	2b80      	cmp	r3, #128	; 0x80
 8003e40:	d10e      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4c:	2b80      	cmp	r3, #128	; 0x80
 8003e4e:	d107      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fd26 	bl	80048ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	2b40      	cmp	r3, #64	; 0x40
 8003e6c:	d10e      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d107      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f9c1 	bl	800420e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d10e      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d107      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0220 	mvn.w	r2, #32
 8003eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fcf0 	bl	8004898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e0ae      	b.n	800403c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b0c      	cmp	r3, #12
 8003eea:	f200 809f 	bhi.w	800402c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003eee:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f29 	.word	0x08003f29
 8003ef8:	0800402d 	.word	0x0800402d
 8003efc:	0800402d 	.word	0x0800402d
 8003f00:	0800402d 	.word	0x0800402d
 8003f04:	08003f69 	.word	0x08003f69
 8003f08:	0800402d 	.word	0x0800402d
 8003f0c:	0800402d 	.word	0x0800402d
 8003f10:	0800402d 	.word	0x0800402d
 8003f14:	08003fab 	.word	0x08003fab
 8003f18:	0800402d 	.word	0x0800402d
 8003f1c:	0800402d 	.word	0x0800402d
 8003f20:	0800402d 	.word	0x0800402d
 8003f24:	08003feb 	.word	0x08003feb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 f9f8 	bl	8004324 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0208 	orr.w	r2, r2, #8
 8003f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699a      	ldr	r2, [r3, #24]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0204 	bic.w	r2, r2, #4
 8003f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6999      	ldr	r1, [r3, #24]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	619a      	str	r2, [r3, #24]
      break;
 8003f66:	e064      	b.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fa3e 	bl	80043f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699a      	ldr	r2, [r3, #24]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6999      	ldr	r1, [r3, #24]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	021a      	lsls	r2, r3, #8
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	619a      	str	r2, [r3, #24]
      break;
 8003fa8:	e043      	b.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fa89 	bl	80044c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69da      	ldr	r2, [r3, #28]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0208 	orr.w	r2, r2, #8
 8003fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0204 	bic.w	r2, r2, #4
 8003fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69d9      	ldr	r1, [r3, #28]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	61da      	str	r2, [r3, #28]
      break;
 8003fe8:	e023      	b.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fad3 	bl	800459c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69da      	ldr	r2, [r3, #28]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69d9      	ldr	r1, [r3, #28]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	021a      	lsls	r2, r3, #8
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	61da      	str	r2, [r3, #28]
      break;
 800402a:	e002      	b.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	75fb      	strb	r3, [r7, #23]
      break;
 8004030:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800403a:	7dfb      	ldrb	r3, [r7, #23]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_TIM_ConfigClockSource+0x1c>
 800405c:	2302      	movs	r3, #2
 800405e:	e0b4      	b.n	80041ca <HAL_TIM_ConfigClockSource+0x186>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800407e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004086:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004098:	d03e      	beq.n	8004118 <HAL_TIM_ConfigClockSource+0xd4>
 800409a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409e:	f200 8087 	bhi.w	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a6:	f000 8086 	beq.w	80041b6 <HAL_TIM_ConfigClockSource+0x172>
 80040aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ae:	d87f      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040b0:	2b70      	cmp	r3, #112	; 0x70
 80040b2:	d01a      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0xa6>
 80040b4:	2b70      	cmp	r3, #112	; 0x70
 80040b6:	d87b      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040b8:	2b60      	cmp	r3, #96	; 0x60
 80040ba:	d050      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x11a>
 80040bc:	2b60      	cmp	r3, #96	; 0x60
 80040be:	d877      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040c0:	2b50      	cmp	r3, #80	; 0x50
 80040c2:	d03c      	beq.n	800413e <HAL_TIM_ConfigClockSource+0xfa>
 80040c4:	2b50      	cmp	r3, #80	; 0x50
 80040c6:	d873      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	d058      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x13a>
 80040cc:	2b40      	cmp	r3, #64	; 0x40
 80040ce:	d86f      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040d0:	2b30      	cmp	r3, #48	; 0x30
 80040d2:	d064      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x15a>
 80040d4:	2b30      	cmp	r3, #48	; 0x30
 80040d6:	d86b      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d060      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x15a>
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d867      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d05c      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x15a>
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d05a      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x15a>
 80040e8:	e062      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6899      	ldr	r1, [r3, #8]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f000 fb19 	bl	8004730 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800410c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	609a      	str	r2, [r3, #8]
      break;
 8004116:	e04f      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6899      	ldr	r1, [r3, #8]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f000 fb02 	bl	8004730 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800413a:	609a      	str	r2, [r3, #8]
      break;
 800413c:	e03c      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6859      	ldr	r1, [r3, #4]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	461a      	mov	r2, r3
 800414c:	f000 fa76 	bl	800463c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2150      	movs	r1, #80	; 0x50
 8004156:	4618      	mov	r0, r3
 8004158:	f000 facf 	bl	80046fa <TIM_ITRx_SetConfig>
      break;
 800415c:	e02c      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6859      	ldr	r1, [r3, #4]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	461a      	mov	r2, r3
 800416c:	f000 fa95 	bl	800469a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2160      	movs	r1, #96	; 0x60
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fabf 	bl	80046fa <TIM_ITRx_SetConfig>
      break;
 800417c:	e01c      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6859      	ldr	r1, [r3, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	461a      	mov	r2, r3
 800418c:	f000 fa56 	bl	800463c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2140      	movs	r1, #64	; 0x40
 8004196:	4618      	mov	r0, r3
 8004198:	f000 faaf 	bl	80046fa <TIM_ITRx_SetConfig>
      break;
 800419c:	e00c      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f000 faa6 	bl	80046fa <TIM_ITRx_SetConfig>
      break;
 80041ae:	e003      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
      break;
 80041b4:	e000      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a34      	ldr	r2, [pc, #208]	; (8004308 <TIM_Base_SetConfig+0xe4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00f      	beq.n	800425c <TIM_Base_SetConfig+0x38>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004242:	d00b      	beq.n	800425c <TIM_Base_SetConfig+0x38>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a31      	ldr	r2, [pc, #196]	; (800430c <TIM_Base_SetConfig+0xe8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d007      	beq.n	800425c <TIM_Base_SetConfig+0x38>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a30      	ldr	r2, [pc, #192]	; (8004310 <TIM_Base_SetConfig+0xec>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d003      	beq.n	800425c <TIM_Base_SetConfig+0x38>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a2f      	ldr	r2, [pc, #188]	; (8004314 <TIM_Base_SetConfig+0xf0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d108      	bne.n	800426e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a25      	ldr	r2, [pc, #148]	; (8004308 <TIM_Base_SetConfig+0xe4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d01b      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427c:	d017      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a22      	ldr	r2, [pc, #136]	; (800430c <TIM_Base_SetConfig+0xe8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a21      	ldr	r2, [pc, #132]	; (8004310 <TIM_Base_SetConfig+0xec>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00f      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a20      	ldr	r2, [pc, #128]	; (8004314 <TIM_Base_SetConfig+0xf0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00b      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a1f      	ldr	r2, [pc, #124]	; (8004318 <TIM_Base_SetConfig+0xf4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d007      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a1e      	ldr	r2, [pc, #120]	; (800431c <TIM_Base_SetConfig+0xf8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d003      	beq.n	80042ae <TIM_Base_SetConfig+0x8a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a1d      	ldr	r2, [pc, #116]	; (8004320 <TIM_Base_SetConfig+0xfc>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d108      	bne.n	80042c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a08      	ldr	r2, [pc, #32]	; (8004308 <TIM_Base_SetConfig+0xe4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d103      	bne.n	80042f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	615a      	str	r2, [r3, #20]
}
 80042fa:	bf00      	nop
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40010000 	.word	0x40010000
 800430c:	40000400 	.word	0x40000400
 8004310:	40000800 	.word	0x40000800
 8004314:	40000c00 	.word	0x40000c00
 8004318:	40014000 	.word	0x40014000
 800431c:	40014400 	.word	0x40014400
 8004320:	40014800 	.word	0x40014800

08004324 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f023 0201 	bic.w	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f023 0302 	bic.w	r3, r3, #2
 800436c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a1c      	ldr	r2, [pc, #112]	; (80043ec <TIM_OC1_SetConfig+0xc8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d10c      	bne.n	800439a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f023 0308 	bic.w	r3, r3, #8
 8004386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f023 0304 	bic.w	r3, r3, #4
 8004398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a13      	ldr	r2, [pc, #76]	; (80043ec <TIM_OC1_SetConfig+0xc8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d111      	bne.n	80043c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	621a      	str	r2, [r3, #32]
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	40010000 	.word	0x40010000

080043f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f023 0210 	bic.w	r2, r3, #16
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800441e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f023 0320 	bic.w	r3, r3, #32
 800443a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4313      	orrs	r3, r2
 8004446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a1e      	ldr	r2, [pc, #120]	; (80044c4 <TIM_OC2_SetConfig+0xd4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d10d      	bne.n	800446c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800446a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a15      	ldr	r2, [pc, #84]	; (80044c4 <TIM_OC2_SetConfig+0xd4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d113      	bne.n	800449c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800447a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40010000 	.word	0x40010000

080044c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0303 	bic.w	r3, r3, #3
 80044fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a1d      	ldr	r2, [pc, #116]	; (8004598 <TIM_OC3_SetConfig+0xd0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d10d      	bne.n	8004542 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800452c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a14      	ldr	r2, [pc, #80]	; (8004598 <TIM_OC3_SetConfig+0xd0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d113      	bne.n	8004572 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	621a      	str	r2, [r3, #32]
}
 800458c:	bf00      	nop
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	40010000 	.word	0x40010000

0800459c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	021b      	lsls	r3, r3, #8
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	031b      	lsls	r3, r3, #12
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a10      	ldr	r2, [pc, #64]	; (8004638 <TIM_OC4_SetConfig+0x9c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d109      	bne.n	8004610 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004602:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	019b      	lsls	r3, r3, #6
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	621a      	str	r2, [r3, #32]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	40010000 	.word	0x40010000

0800463c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	f023 0201 	bic.w	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f023 030a 	bic.w	r3, r3, #10
 8004678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	621a      	str	r2, [r3, #32]
}
 800468e:	bf00      	nop
 8004690:	371c      	adds	r7, #28
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800469a:	b480      	push	{r7}
 800469c:	b087      	sub	sp, #28
 800469e:	af00      	add	r7, sp, #0
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f023 0210 	bic.w	r2, r3, #16
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	031b      	lsls	r3, r3, #12
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	621a      	str	r2, [r3, #32]
}
 80046ee:	bf00      	nop
 80046f0:	371c      	adds	r7, #28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b085      	sub	sp, #20
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004710:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	f043 0307 	orr.w	r3, r3, #7
 800471c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	609a      	str	r2, [r3, #8]
}
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800474a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	021a      	lsls	r2, r3, #8
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	431a      	orrs	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4313      	orrs	r3, r2
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	609a      	str	r2, [r3, #8]
}
 8004764:	bf00      	nop
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f003 031f 	and.w	r3, r3, #31
 8004782:	2201      	movs	r2, #1
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a1a      	ldr	r2, [r3, #32]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	43db      	mvns	r3, r3
 8004792:	401a      	ands	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a1a      	ldr	r2, [r3, #32]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 031f 	and.w	r3, r3, #31
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	fa01 f303 	lsl.w	r3, r1, r3
 80047a8:	431a      	orrs	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	621a      	str	r2, [r3, #32]
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e050      	b.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d018      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004820:	d013      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a18      	ldr	r2, [pc, #96]	; (8004888 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00e      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a16      	ldr	r2, [pc, #88]	; (800488c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d009      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a15      	ldr	r2, [pc, #84]	; (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a13      	ldr	r2, [pc, #76]	; (8004894 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d10c      	bne.n	8004864 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	4313      	orrs	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40010000 	.word	0x40010000
 8004888:	40000400 	.word	0x40000400
 800488c:	40000800 	.word	0x40000800
 8004890:	40000c00 	.word	0x40000c00
 8004894:	40014000 	.word	0x40014000

08004898 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e03f      	b.n	8004952 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fd fab6 	bl	8001e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2224      	movs	r2, #36	; 0x24
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fe7d 	bl	8005604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695a      	ldr	r2, [r3, #20]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b08a      	sub	sp, #40	; 0x28
 800495e:	af02      	add	r7, sp, #8
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	4613      	mov	r3, r2
 8004968:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b20      	cmp	r3, #32
 8004978:	d17c      	bne.n	8004a74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HAL_UART_Transmit+0x2c>
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e075      	b.n	8004a76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_UART_Transmit+0x3e>
 8004994:	2302      	movs	r3, #2
 8004996:	e06e      	b.n	8004a76 <HAL_UART_Transmit+0x11c>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2221      	movs	r2, #33	; 0x21
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ae:	f7fd fc4b 	bl	8002248 <HAL_GetTick>
 80049b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	88fa      	ldrh	r2, [r7, #6]
 80049b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	88fa      	ldrh	r2, [r7, #6]
 80049be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c8:	d108      	bne.n	80049dc <HAL_UART_Transmit+0x82>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d104      	bne.n	80049dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	61bb      	str	r3, [r7, #24]
 80049da:	e003      	b.n	80049e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80049ec:	e02a      	b.n	8004a44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2200      	movs	r2, #0
 80049f6:	2180      	movs	r1, #128	; 0x80
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 fbc1 	bl	8005180 <UART_WaitOnFlagUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e036      	b.n	8004a76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10b      	bne.n	8004a26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	3302      	adds	r3, #2
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	e007      	b.n	8004a36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	781a      	ldrb	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	3301      	adds	r3, #1
 8004a34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1cf      	bne.n	80049ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2200      	movs	r2, #0
 8004a56:	2140      	movs	r1, #64	; 0x40
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 fb91 	bl	8005180 <UART_WaitOnFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e006      	b.n	8004a76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	e000      	b.n	8004a76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a74:	2302      	movs	r3, #2
  }
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3720      	adds	r7, #32
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b08a      	sub	sp, #40	; 0x28
 8004a82:	af02      	add	r7, sp, #8
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	603b      	str	r3, [r7, #0]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	f040 808c 	bne.w	8004bb8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_UART_Receive+0x2e>
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e084      	b.n	8004bba <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_UART_Receive+0x40>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e07d      	b.n	8004bba <HAL_UART_Receive+0x13c>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2222      	movs	r2, #34	; 0x22
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ada:	f7fd fbb5 	bl	8002248 <HAL_GetTick>
 8004ade:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	88fa      	ldrh	r2, [r7, #6]
 8004ae4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	88fa      	ldrh	r2, [r7, #6]
 8004aea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af4:	d108      	bne.n	8004b08 <HAL_UART_Receive+0x8a>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d104      	bne.n	8004b08 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	e003      	b.n	8004b10 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004b18:	e043      	b.n	8004ba2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2200      	movs	r2, #0
 8004b22:	2120      	movs	r1, #32
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 fb2b 	bl	8005180 <UART_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e042      	b.n	8004bba <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10c      	bne.n	8004b54 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	3302      	adds	r3, #2
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	e01f      	b.n	8004b94 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5c:	d007      	beq.n	8004b6e <HAL_UART_Receive+0xf0>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <HAL_UART_Receive+0xfe>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	e008      	b.n	8004b8e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	3301      	adds	r3, #1
 8004b92:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1b6      	bne.n	8004b1a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	e000      	b.n	8004bba <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004bb8:	2302      	movs	r3, #2
  }
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3720      	adds	r7, #32
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d11d      	bne.n	8004c18 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <HAL_UART_Receive_IT+0x26>
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e016      	b.n	8004c1a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_UART_Receive_IT+0x38>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e00f      	b.n	8004c1a <HAL_UART_Receive_IT+0x58>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c08:	88fb      	ldrh	r3, [r7, #6]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 fb24 	bl	800525c <UART_Start_Receive_IT>
 8004c14:	4603      	mov	r3, r0
 8004c16:	e000      	b.n	8004c1a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c18:	2302      	movs	r3, #2
  }
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b0ba      	sub	sp, #232	; 0xe8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c5a:	f003 030f 	and.w	r3, r3, #15
 8004c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10f      	bne.n	8004c8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d009      	beq.n	8004c8a <HAL_UART_IRQHandler+0x66>
 8004c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fc03 	bl	800548e <UART_Receive_IT>
      return;
 8004c88:	e256      	b.n	8005138 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80de 	beq.w	8004e50 <HAL_UART_IRQHandler+0x22c>
 8004c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d106      	bne.n	8004cae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80d1 	beq.w	8004e50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00b      	beq.n	8004cd2 <HAL_UART_IRQHandler+0xae>
 8004cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f043 0201 	orr.w	r2, r3, #1
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <HAL_UART_IRQHandler+0xd2>
 8004cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f043 0202 	orr.w	r2, r3, #2
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00b      	beq.n	8004d1a <HAL_UART_IRQHandler+0xf6>
 8004d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f043 0204 	orr.w	r2, r3, #4
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d011      	beq.n	8004d4a <HAL_UART_IRQHandler+0x126>
 8004d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d105      	bne.n	8004d3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f043 0208 	orr.w	r2, r3, #8
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 81ed 	beq.w	800512e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_UART_IRQHandler+0x14e>
 8004d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fb8e 	bl	800548e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b40      	cmp	r3, #64	; 0x40
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d103      	bne.n	8004d9e <HAL_UART_IRQHandler+0x17a>
 8004d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d04f      	beq.n	8004e3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fa96 	bl	80052d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dae:	2b40      	cmp	r3, #64	; 0x40
 8004db0:	d141      	bne.n	8004e36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3314      	adds	r3, #20
 8004db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3314      	adds	r3, #20
 8004dda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004dde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004dea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1d9      	bne.n	8004db2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d013      	beq.n	8004e2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	4a7d      	ldr	r2, [pc, #500]	; (8005000 <HAL_UART_IRQHandler+0x3dc>)
 8004e0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fd fb9a 	bl	800254c <HAL_DMA_Abort_IT>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d016      	beq.n	8004e4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e28:	4610      	mov	r0, r2
 8004e2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2c:	e00e      	b.n	8004e4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f990 	bl	8005154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e34:	e00a      	b.n	8004e4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f98c 	bl	8005154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3c:	e006      	b.n	8004e4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f988 	bl	8005154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e4a:	e170      	b.n	800512e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4c:	bf00      	nop
    return;
 8004e4e:	e16e      	b.n	800512e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	f040 814a 	bne.w	80050ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5e:	f003 0310 	and.w	r3, r3, #16
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 8143 	beq.w	80050ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 813c 	beq.w	80050ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e76:	2300      	movs	r3, #0
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e96:	2b40      	cmp	r3, #64	; 0x40
 8004e98:	f040 80b4 	bne.w	8005004 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ea8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 8140 	beq.w	8005132 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	f080 8139 	bcs.w	8005132 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ec6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed2:	f000 8088 	beq.w	8004fe6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	330c      	adds	r3, #12
 8004edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	330c      	adds	r3, #12
 8004efe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1d9      	bne.n	8004ed6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3314      	adds	r3, #20
 8004f28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3314      	adds	r3, #20
 8004f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e1      	bne.n	8004f22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3314      	adds	r3, #20
 8004f64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3314      	adds	r3, #20
 8004f7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e3      	bne.n	8004f5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	330c      	adds	r3, #12
 8004faa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb6:	f023 0310 	bic.w	r3, r3, #16
 8004fba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004fc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fd0:	e841 2300 	strex	r3, r2, [r1]
 8004fd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1e3      	bne.n	8004fa4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fd fa43 	bl	800246c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f8b6 	bl	8005168 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ffc:	e099      	b.n	8005132 <HAL_UART_IRQHandler+0x50e>
 8004ffe:	bf00      	nop
 8005000:	08005397 	.word	0x08005397
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800500c:	b29b      	uxth	r3, r3
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 808b 	beq.w	8005136 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8086 	beq.w	8005136 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	330c      	adds	r3, #12
 8005030:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800503a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005040:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	330c      	adds	r3, #12
 800504a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800504e:	647a      	str	r2, [r7, #68]	; 0x44
 8005050:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005052:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005054:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005056:	e841 2300 	strex	r3, r2, [r1]
 800505a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800505c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1e3      	bne.n	800502a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3314      	adds	r3, #20
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	623b      	str	r3, [r7, #32]
   return(result);
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3314      	adds	r3, #20
 8005082:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005086:	633a      	str	r2, [r7, #48]	; 0x30
 8005088:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800508c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e3      	bne.n	8005062 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	330c      	adds	r3, #12
 80050ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0310 	bic.w	r3, r3, #16
 80050be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	330c      	adds	r3, #12
 80050c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80050cc:	61fa      	str	r2, [r7, #28]
 80050ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	69b9      	ldr	r1, [r7, #24]
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	617b      	str	r3, [r7, #20]
   return(result);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e3      	bne.n	80050a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f83e 	bl	8005168 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050ec:	e023      	b.n	8005136 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <HAL_UART_IRQHandler+0x4ea>
 80050fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f959 	bl	80053be <UART_Transmit_IT>
    return;
 800510c:	e014      	b.n	8005138 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800510e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00e      	beq.n	8005138 <HAL_UART_IRQHandler+0x514>
 800511a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	d008      	beq.n	8005138 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f999 	bl	800545e <UART_EndTransmit_IT>
    return;
 800512c:	e004      	b.n	8005138 <HAL_UART_IRQHandler+0x514>
    return;
 800512e:	bf00      	nop
 8005130:	e002      	b.n	8005138 <HAL_UART_IRQHandler+0x514>
      return;
 8005132:	bf00      	nop
 8005134:	e000      	b.n	8005138 <HAL_UART_IRQHandler+0x514>
      return;
 8005136:	bf00      	nop
  }
}
 8005138:	37e8      	adds	r7, #232	; 0xe8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop

08005140 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b090      	sub	sp, #64	; 0x40
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005190:	e050      	b.n	8005234 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d04c      	beq.n	8005234 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800519a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800519c:	2b00      	cmp	r3, #0
 800519e:	d007      	beq.n	80051b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80051a0:	f7fd f852 	bl	8002248 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d241      	bcs.n	8005234 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	330c      	adds	r3, #12
 80051ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051d0:	637a      	str	r2, [r7, #52]	; 0x34
 80051d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051d8:	e841 2300 	strex	r3, r2, [r1]
 80051dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1e5      	bne.n	80051b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3314      	adds	r3, #20
 80051ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	613b      	str	r3, [r7, #16]
   return(result);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f023 0301 	bic.w	r3, r3, #1
 80051fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3314      	adds	r3, #20
 8005202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005204:	623a      	str	r2, [r7, #32]
 8005206:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	69f9      	ldr	r1, [r7, #28]
 800520a:	6a3a      	ldr	r2, [r7, #32]
 800520c:	e841 2300 	strex	r3, r2, [r1]
 8005210:	61bb      	str	r3, [r7, #24]
   return(result);
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e5      	bne.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e00f      	b.n	8005254 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	4013      	ands	r3, r2
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	429a      	cmp	r2, r3
 8005242:	bf0c      	ite	eq
 8005244:	2301      	moveq	r3, #1
 8005246:	2300      	movne	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	461a      	mov	r2, r3
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	429a      	cmp	r2, r3
 8005250:	d09f      	beq.n	8005192 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3740      	adds	r7, #64	; 0x40
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	4613      	mov	r3, r2
 8005268:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	88fa      	ldrh	r2, [r7, #6]
 8005274:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	88fa      	ldrh	r2, [r7, #6]
 800527a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2222      	movs	r2, #34	; 0x22
 8005286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052a0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	695a      	ldr	r2, [r3, #20]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0201 	orr.w	r2, r2, #1
 80052b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0220 	orr.w	r2, r2, #32
 80052c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b095      	sub	sp, #84	; 0x54
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052f8:	643a      	str	r2, [r7, #64]	; 0x40
 80052fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e5      	bne.n	80052d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3314      	adds	r3, #20
 8005312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	61fb      	str	r3, [r7, #28]
   return(result);
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	64bb      	str	r3, [r7, #72]	; 0x48
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3314      	adds	r3, #20
 800532a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800532c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800532e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e5      	bne.n	800530c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	2b01      	cmp	r3, #1
 8005346:	d119      	bne.n	800537c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	60bb      	str	r3, [r7, #8]
   return(result);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f023 0310 	bic.w	r3, r3, #16
 800535e:	647b      	str	r3, [r7, #68]	; 0x44
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005368:	61ba      	str	r2, [r7, #24]
 800536a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6979      	ldr	r1, [r7, #20]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	613b      	str	r3, [r7, #16]
   return(result);
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e5      	bne.n	8005348 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	631a      	str	r2, [r3, #48]	; 0x30
}
 800538a:	bf00      	nop
 800538c:	3754      	adds	r7, #84	; 0x54
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f7ff fecf 	bl	8005154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053b6:	bf00      	nop
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053be:	b480      	push	{r7}
 80053c0:	b085      	sub	sp, #20
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b21      	cmp	r3, #33	; 0x21
 80053d0:	d13e      	bne.n	8005450 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053da:	d114      	bne.n	8005406 <UART_Transmit_IT+0x48>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d110      	bne.n	8005406 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	1c9a      	adds	r2, r3, #2
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	621a      	str	r2, [r3, #32]
 8005404:	e008      	b.n	8005418 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	1c59      	adds	r1, r3, #1
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6211      	str	r1, [r2, #32]
 8005410:	781a      	ldrb	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800541c:	b29b      	uxth	r3, r3
 800541e:	3b01      	subs	r3, #1
 8005420:	b29b      	uxth	r3, r3
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	4619      	mov	r1, r3
 8005426:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10f      	bne.n	800544c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800543a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800544a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	e000      	b.n	8005452 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005450:	2302      	movs	r3, #2
  }
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005474:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7ff fe5e 	bl	8005140 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b08c      	sub	sp, #48	; 0x30
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b22      	cmp	r3, #34	; 0x22
 80054a0:	f040 80ab 	bne.w	80055fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ac:	d117      	bne.n	80054de <UART_Receive_IT+0x50>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d113      	bne.n	80054de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d6:	1c9a      	adds	r2, r3, #2
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	629a      	str	r2, [r3, #40]	; 0x28
 80054dc:	e026      	b.n	800552c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f0:	d007      	beq.n	8005502 <UART_Receive_IT+0x74>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <UART_Receive_IT+0x82>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	b2da      	uxtb	r2, r3
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	e008      	b.n	8005522 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551c:	b2da      	uxtb	r2, r3
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005530:	b29b      	uxth	r3, r3
 8005532:	3b01      	subs	r3, #1
 8005534:	b29b      	uxth	r3, r3
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	4619      	mov	r1, r3
 800553a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800553c:	2b00      	cmp	r3, #0
 800553e:	d15a      	bne.n	80055f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0220 	bic.w	r2, r2, #32
 800554e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800555e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695a      	ldr	r2, [r3, #20]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0201 	bic.w	r2, r2, #1
 800556e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	2b01      	cmp	r3, #1
 800557e:	d135      	bne.n	80055ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	330c      	adds	r3, #12
 800558c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	613b      	str	r3, [r7, #16]
   return(result);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f023 0310 	bic.w	r3, r3, #16
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	330c      	adds	r3, #12
 80055a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a6:	623a      	str	r2, [r7, #32]
 80055a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	69f9      	ldr	r1, [r7, #28]
 80055ac:	6a3a      	ldr	r2, [r7, #32]
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e5      	bne.n	8005586 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0310 	and.w	r3, r3, #16
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d10a      	bne.n	80055de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055e2:	4619      	mov	r1, r3
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff fdbf 	bl	8005168 <HAL_UARTEx_RxEventCallback>
 80055ea:	e002      	b.n	80055f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f7fc f801 	bl	80015f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	e002      	b.n	80055fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	e000      	b.n	80055fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80055fa:	2302      	movs	r3, #2
  }
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3730      	adds	r7, #48	; 0x30
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005608:	b09f      	sub	sp, #124	; 0x7c
 800560a:	af00      	add	r7, sp, #0
 800560c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800560e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561a:	68d9      	ldr	r1, [r3, #12]
 800561c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	ea40 0301 	orr.w	r3, r0, r1
 8005624:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	431a      	orrs	r2, r3
 8005630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	431a      	orrs	r2, r3
 8005636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	4313      	orrs	r3, r2
 800563c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800563e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005648:	f021 010c 	bic.w	r1, r1, #12
 800564c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005652:	430b      	orrs	r3, r1
 8005654:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005662:	6999      	ldr	r1, [r3, #24]
 8005664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	ea40 0301 	orr.w	r3, r0, r1
 800566c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800566e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	4bc5      	ldr	r3, [pc, #788]	; (8005988 <UART_SetConfig+0x384>)
 8005674:	429a      	cmp	r2, r3
 8005676:	d004      	beq.n	8005682 <UART_SetConfig+0x7e>
 8005678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	4bc3      	ldr	r3, [pc, #780]	; (800598c <UART_SetConfig+0x388>)
 800567e:	429a      	cmp	r2, r3
 8005680:	d103      	bne.n	800568a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005682:	f7fd fd9b 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
 8005686:	6778      	str	r0, [r7, #116]	; 0x74
 8005688:	e002      	b.n	8005690 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800568a:	f7fd fd83 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 800568e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005698:	f040 80b6 	bne.w	8005808 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800569c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800569e:	461c      	mov	r4, r3
 80056a0:	f04f 0500 	mov.w	r5, #0
 80056a4:	4622      	mov	r2, r4
 80056a6:	462b      	mov	r3, r5
 80056a8:	1891      	adds	r1, r2, r2
 80056aa:	6439      	str	r1, [r7, #64]	; 0x40
 80056ac:	415b      	adcs	r3, r3
 80056ae:	647b      	str	r3, [r7, #68]	; 0x44
 80056b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056b4:	1912      	adds	r2, r2, r4
 80056b6:	eb45 0303 	adc.w	r3, r5, r3
 80056ba:	f04f 0000 	mov.w	r0, #0
 80056be:	f04f 0100 	mov.w	r1, #0
 80056c2:	00d9      	lsls	r1, r3, #3
 80056c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056c8:	00d0      	lsls	r0, r2, #3
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	1911      	adds	r1, r2, r4
 80056d0:	6639      	str	r1, [r7, #96]	; 0x60
 80056d2:	416b      	adcs	r3, r5
 80056d4:	667b      	str	r3, [r7, #100]	; 0x64
 80056d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	461a      	mov	r2, r3
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	1891      	adds	r1, r2, r2
 80056e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80056e4:	415b      	adcs	r3, r3
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80056f0:	f7fa fdc6 	bl	8000280 <__aeabi_uldivmod>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4ba5      	ldr	r3, [pc, #660]	; (8005990 <UART_SetConfig+0x38c>)
 80056fa:	fba3 2302 	umull	r2, r3, r3, r2
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	011e      	lsls	r6, r3, #4
 8005702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005704:	461c      	mov	r4, r3
 8005706:	f04f 0500 	mov.w	r5, #0
 800570a:	4622      	mov	r2, r4
 800570c:	462b      	mov	r3, r5
 800570e:	1891      	adds	r1, r2, r2
 8005710:	6339      	str	r1, [r7, #48]	; 0x30
 8005712:	415b      	adcs	r3, r3
 8005714:	637b      	str	r3, [r7, #52]	; 0x34
 8005716:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800571a:	1912      	adds	r2, r2, r4
 800571c:	eb45 0303 	adc.w	r3, r5, r3
 8005720:	f04f 0000 	mov.w	r0, #0
 8005724:	f04f 0100 	mov.w	r1, #0
 8005728:	00d9      	lsls	r1, r3, #3
 800572a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800572e:	00d0      	lsls	r0, r2, #3
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	1911      	adds	r1, r2, r4
 8005736:	65b9      	str	r1, [r7, #88]	; 0x58
 8005738:	416b      	adcs	r3, r5
 800573a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800573c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	461a      	mov	r2, r3
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	1891      	adds	r1, r2, r2
 8005748:	62b9      	str	r1, [r7, #40]	; 0x28
 800574a:	415b      	adcs	r3, r3
 800574c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800574e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005752:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005756:	f7fa fd93 	bl	8000280 <__aeabi_uldivmod>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4b8c      	ldr	r3, [pc, #560]	; (8005990 <UART_SetConfig+0x38c>)
 8005760:	fba3 1302 	umull	r1, r3, r3, r2
 8005764:	095b      	lsrs	r3, r3, #5
 8005766:	2164      	movs	r1, #100	; 0x64
 8005768:	fb01 f303 	mul.w	r3, r1, r3
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	3332      	adds	r3, #50	; 0x32
 8005772:	4a87      	ldr	r2, [pc, #540]	; (8005990 <UART_SetConfig+0x38c>)
 8005774:	fba2 2303 	umull	r2, r3, r2, r3
 8005778:	095b      	lsrs	r3, r3, #5
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005780:	441e      	add	r6, r3
 8005782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005784:	4618      	mov	r0, r3
 8005786:	f04f 0100 	mov.w	r1, #0
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	1894      	adds	r4, r2, r2
 8005790:	623c      	str	r4, [r7, #32]
 8005792:	415b      	adcs	r3, r3
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
 8005796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800579a:	1812      	adds	r2, r2, r0
 800579c:	eb41 0303 	adc.w	r3, r1, r3
 80057a0:	f04f 0400 	mov.w	r4, #0
 80057a4:	f04f 0500 	mov.w	r5, #0
 80057a8:	00dd      	lsls	r5, r3, #3
 80057aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80057ae:	00d4      	lsls	r4, r2, #3
 80057b0:	4622      	mov	r2, r4
 80057b2:	462b      	mov	r3, r5
 80057b4:	1814      	adds	r4, r2, r0
 80057b6:	653c      	str	r4, [r7, #80]	; 0x50
 80057b8:	414b      	adcs	r3, r1
 80057ba:	657b      	str	r3, [r7, #84]	; 0x54
 80057bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	461a      	mov	r2, r3
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	1891      	adds	r1, r2, r2
 80057c8:	61b9      	str	r1, [r7, #24]
 80057ca:	415b      	adcs	r3, r3
 80057cc:	61fb      	str	r3, [r7, #28]
 80057ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80057d6:	f7fa fd53 	bl	8000280 <__aeabi_uldivmod>
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	4b6c      	ldr	r3, [pc, #432]	; (8005990 <UART_SetConfig+0x38c>)
 80057e0:	fba3 1302 	umull	r1, r3, r3, r2
 80057e4:	095b      	lsrs	r3, r3, #5
 80057e6:	2164      	movs	r1, #100	; 0x64
 80057e8:	fb01 f303 	mul.w	r3, r1, r3
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	3332      	adds	r3, #50	; 0x32
 80057f2:	4a67      	ldr	r2, [pc, #412]	; (8005990 <UART_SetConfig+0x38c>)
 80057f4:	fba2 2303 	umull	r2, r3, r2, r3
 80057f8:	095b      	lsrs	r3, r3, #5
 80057fa:	f003 0207 	and.w	r2, r3, #7
 80057fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4432      	add	r2, r6
 8005804:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005806:	e0b9      	b.n	800597c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800580a:	461c      	mov	r4, r3
 800580c:	f04f 0500 	mov.w	r5, #0
 8005810:	4622      	mov	r2, r4
 8005812:	462b      	mov	r3, r5
 8005814:	1891      	adds	r1, r2, r2
 8005816:	6139      	str	r1, [r7, #16]
 8005818:	415b      	adcs	r3, r3
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005820:	1912      	adds	r2, r2, r4
 8005822:	eb45 0303 	adc.w	r3, r5, r3
 8005826:	f04f 0000 	mov.w	r0, #0
 800582a:	f04f 0100 	mov.w	r1, #0
 800582e:	00d9      	lsls	r1, r3, #3
 8005830:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005834:	00d0      	lsls	r0, r2, #3
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	eb12 0804 	adds.w	r8, r2, r4
 800583e:	eb43 0905 	adc.w	r9, r3, r5
 8005842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	4618      	mov	r0, r3
 8005848:	f04f 0100 	mov.w	r1, #0
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	008b      	lsls	r3, r1, #2
 8005856:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800585a:	0082      	lsls	r2, r0, #2
 800585c:	4640      	mov	r0, r8
 800585e:	4649      	mov	r1, r9
 8005860:	f7fa fd0e 	bl	8000280 <__aeabi_uldivmod>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	4b49      	ldr	r3, [pc, #292]	; (8005990 <UART_SetConfig+0x38c>)
 800586a:	fba3 2302 	umull	r2, r3, r3, r2
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	011e      	lsls	r6, r3, #4
 8005872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005874:	4618      	mov	r0, r3
 8005876:	f04f 0100 	mov.w	r1, #0
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	1894      	adds	r4, r2, r2
 8005880:	60bc      	str	r4, [r7, #8]
 8005882:	415b      	adcs	r3, r3
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800588a:	1812      	adds	r2, r2, r0
 800588c:	eb41 0303 	adc.w	r3, r1, r3
 8005890:	f04f 0400 	mov.w	r4, #0
 8005894:	f04f 0500 	mov.w	r5, #0
 8005898:	00dd      	lsls	r5, r3, #3
 800589a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800589e:	00d4      	lsls	r4, r2, #3
 80058a0:	4622      	mov	r2, r4
 80058a2:	462b      	mov	r3, r5
 80058a4:	1814      	adds	r4, r2, r0
 80058a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80058a8:	414b      	adcs	r3, r1
 80058aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f04f 0100 	mov.w	r1, #0
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	008b      	lsls	r3, r1, #2
 80058c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058c4:	0082      	lsls	r2, r0, #2
 80058c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80058ca:	f7fa fcd9 	bl	8000280 <__aeabi_uldivmod>
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	4b2f      	ldr	r3, [pc, #188]	; (8005990 <UART_SetConfig+0x38c>)
 80058d4:	fba3 1302 	umull	r1, r3, r3, r2
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	2164      	movs	r1, #100	; 0x64
 80058dc:	fb01 f303 	mul.w	r3, r1, r3
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	3332      	adds	r3, #50	; 0x32
 80058e6:	4a2a      	ldr	r2, [pc, #168]	; (8005990 <UART_SetConfig+0x38c>)
 80058e8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ec:	095b      	lsrs	r3, r3, #5
 80058ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058f2:	441e      	add	r6, r3
 80058f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058f6:	4618      	mov	r0, r3
 80058f8:	f04f 0100 	mov.w	r1, #0
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	1894      	adds	r4, r2, r2
 8005902:	603c      	str	r4, [r7, #0]
 8005904:	415b      	adcs	r3, r3
 8005906:	607b      	str	r3, [r7, #4]
 8005908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800590c:	1812      	adds	r2, r2, r0
 800590e:	eb41 0303 	adc.w	r3, r1, r3
 8005912:	f04f 0400 	mov.w	r4, #0
 8005916:	f04f 0500 	mov.w	r5, #0
 800591a:	00dd      	lsls	r5, r3, #3
 800591c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005920:	00d4      	lsls	r4, r2, #3
 8005922:	4622      	mov	r2, r4
 8005924:	462b      	mov	r3, r5
 8005926:	eb12 0a00 	adds.w	sl, r2, r0
 800592a:	eb43 0b01 	adc.w	fp, r3, r1
 800592e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	4618      	mov	r0, r3
 8005934:	f04f 0100 	mov.w	r1, #0
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	008b      	lsls	r3, r1, #2
 8005942:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005946:	0082      	lsls	r2, r0, #2
 8005948:	4650      	mov	r0, sl
 800594a:	4659      	mov	r1, fp
 800594c:	f7fa fc98 	bl	8000280 <__aeabi_uldivmod>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	4b0e      	ldr	r3, [pc, #56]	; (8005990 <UART_SetConfig+0x38c>)
 8005956:	fba3 1302 	umull	r1, r3, r3, r2
 800595a:	095b      	lsrs	r3, r3, #5
 800595c:	2164      	movs	r1, #100	; 0x64
 800595e:	fb01 f303 	mul.w	r3, r1, r3
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	3332      	adds	r3, #50	; 0x32
 8005968:	4a09      	ldr	r2, [pc, #36]	; (8005990 <UART_SetConfig+0x38c>)
 800596a:	fba2 2303 	umull	r2, r3, r2, r3
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	f003 020f 	and.w	r2, r3, #15
 8005974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4432      	add	r2, r6
 800597a:	609a      	str	r2, [r3, #8]
}
 800597c:	bf00      	nop
 800597e:	377c      	adds	r7, #124	; 0x7c
 8005980:	46bd      	mov	sp, r7
 8005982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005986:	bf00      	nop
 8005988:	40011000 	.word	0x40011000
 800598c:	40011400 	.word	0x40011400
 8005990:	51eb851f 	.word	0x51eb851f

08005994 <__NVIC_SetPriority>:
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	4603      	mov	r3, r0
 800599c:	6039      	str	r1, [r7, #0]
 800599e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	db0a      	blt.n	80059be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	490c      	ldr	r1, [pc, #48]	; (80059e0 <__NVIC_SetPriority+0x4c>)
 80059ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b2:	0112      	lsls	r2, r2, #4
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	440b      	add	r3, r1
 80059b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80059bc:	e00a      	b.n	80059d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	4908      	ldr	r1, [pc, #32]	; (80059e4 <__NVIC_SetPriority+0x50>)
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	3b04      	subs	r3, #4
 80059cc:	0112      	lsls	r2, r2, #4
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	440b      	add	r3, r1
 80059d2:	761a      	strb	r2, [r3, #24]
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	e000e100 	.word	0xe000e100
 80059e4:	e000ed00 	.word	0xe000ed00

080059e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80059ec:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <SysTick_Handler+0x1c>)
 80059ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80059f0:	f002 fd80 	bl	80084f4 <xTaskGetSchedulerState>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d001      	beq.n	80059fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80059fa:	f003 fc9d 	bl	8009338 <xPortSysTickHandler>
  }
}
 80059fe:	bf00      	nop
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	e000e010 	.word	0xe000e010

08005a08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	f06f 0004 	mvn.w	r0, #4
 8005a12:	f7ff ffbf 	bl	8005994 <__NVIC_SetPriority>
#endif
}
 8005a16:	bf00      	nop
 8005a18:	bd80      	pop	{r7, pc}
	...

08005a1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a22:	f3ef 8305 	mrs	r3, IPSR
 8005a26:	603b      	str	r3, [r7, #0]
  return(result);
 8005a28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005a2e:	f06f 0305 	mvn.w	r3, #5
 8005a32:	607b      	str	r3, [r7, #4]
 8005a34:	e00c      	b.n	8005a50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a36:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <osKernelInitialize+0x44>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d105      	bne.n	8005a4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a3e:	4b08      	ldr	r3, [pc, #32]	; (8005a60 <osKernelInitialize+0x44>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	607b      	str	r3, [r7, #4]
 8005a48:	e002      	b.n	8005a50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a50:	687b      	ldr	r3, [r7, #4]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	200000ac 	.word	0x200000ac

08005a64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a6a:	f3ef 8305 	mrs	r3, IPSR
 8005a6e:	603b      	str	r3, [r7, #0]
  return(result);
 8005a70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005a76:	f06f 0305 	mvn.w	r3, #5
 8005a7a:	607b      	str	r3, [r7, #4]
 8005a7c:	e010      	b.n	8005aa0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <osKernelStart+0x48>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d109      	bne.n	8005a9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a86:	f7ff ffbf 	bl	8005a08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a8a:	4b08      	ldr	r3, [pc, #32]	; (8005aac <osKernelStart+0x48>)
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a90:	f002 f826 	bl	8007ae0 <vTaskStartScheduler>
      stat = osOK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	607b      	str	r3, [r7, #4]
 8005a98:	e002      	b.n	8005aa0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005aa0:	687b      	ldr	r3, [r7, #4]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	200000ac 	.word	0x200000ac

08005ab0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08e      	sub	sp, #56	; 0x38
 8005ab4:	af04      	add	r7, sp, #16
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ac0:	f3ef 8305 	mrs	r3, IPSR
 8005ac4:	617b      	str	r3, [r7, #20]
  return(result);
 8005ac6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d17e      	bne.n	8005bca <osThreadNew+0x11a>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d07b      	beq.n	8005bca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005ad2:	2380      	movs	r3, #128	; 0x80
 8005ad4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005ad6:	2318      	movs	r3, #24
 8005ad8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005ade:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d045      	beq.n	8005b76 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <osThreadNew+0x48>
        name = attr->name;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d008      	beq.n	8005b1e <osThreadNew+0x6e>
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	2b38      	cmp	r3, #56	; 0x38
 8005b10:	d805      	bhi.n	8005b1e <osThreadNew+0x6e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <osThreadNew+0x72>
        return (NULL);
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e054      	b.n	8005bcc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	089b      	lsrs	r3, r3, #2
 8005b30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00e      	beq.n	8005b58 <osThreadNew+0xa8>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	2bbb      	cmp	r3, #187	; 0xbb
 8005b40:	d90a      	bls.n	8005b58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d006      	beq.n	8005b58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <osThreadNew+0xa8>
        mem = 1;
 8005b52:	2301      	movs	r3, #1
 8005b54:	61bb      	str	r3, [r7, #24]
 8005b56:	e010      	b.n	8005b7a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10c      	bne.n	8005b7a <osThreadNew+0xca>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d108      	bne.n	8005b7a <osThreadNew+0xca>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <osThreadNew+0xca>
          mem = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	61bb      	str	r3, [r7, #24]
 8005b74:	e001      	b.n	8005b7a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005b76:	2300      	movs	r3, #0
 8005b78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d110      	bne.n	8005ba2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b88:	9202      	str	r2, [sp, #8]
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	6a3a      	ldr	r2, [r7, #32]
 8005b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f001 fdb6 	bl	8007708 <xTaskCreateStatic>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	e013      	b.n	8005bca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d110      	bne.n	8005bca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	f107 0310 	add.w	r3, r7, #16
 8005bb0:	9301      	str	r3, [sp, #4]
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f001 fe01 	bl	80077c2 <xTaskCreate>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d001      	beq.n	8005bca <osThreadNew+0x11a>
            hTask = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005bca:	693b      	ldr	r3, [r7, #16]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3728      	adds	r7, #40	; 0x28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bdc:	f3ef 8305 	mrs	r3, IPSR
 8005be0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005be2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <osDelay+0x1c>
    stat = osErrorISR;
 8005be8:	f06f 0305 	mvn.w	r3, #5
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	e007      	b.n	8005c00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f001 ff3c 	bl	8007a78 <vTaskDelay>
    }
  }

  return (stat);
 8005c00:	68fb      	ldr	r3, [r7, #12]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b086      	sub	sp, #24
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c16:	f3ef 8305 	mrs	r3, IPSR
 8005c1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c1c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d12d      	bne.n	8005c7e <osEventFlagsNew+0x74>
    mem = -1;
 8005c22:	f04f 33ff 	mov.w	r3, #4294967295
 8005c26:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d015      	beq.n	8005c5a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d006      	beq.n	8005c44 <osEventFlagsNew+0x3a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	2b1f      	cmp	r3, #31
 8005c3c:	d902      	bls.n	8005c44 <osEventFlagsNew+0x3a>
        mem = 1;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	613b      	str	r3, [r7, #16]
 8005c42:	e00c      	b.n	8005c5e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d108      	bne.n	8005c5e <osEventFlagsNew+0x54>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d104      	bne.n	8005c5e <osEventFlagsNew+0x54>
          mem = 0;
 8005c54:	2300      	movs	r3, #0
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	e001      	b.n	8005c5e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d106      	bne.n	8005c72 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fb2b 	bl	80062c4 <xEventGroupCreateStatic>
 8005c6e:	6178      	str	r0, [r7, #20]
 8005c70:	e005      	b.n	8005c7e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d102      	bne.n	8005c7e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8005c78:	f000 fb5b 	bl	8006332 <xEventGroupCreate>
 8005c7c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8005c7e:	697b      	ldr	r3, [r7, #20]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d004      	beq.n	8005ca6 <osEventFlagsSet+0x1e>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8005ca6:	f06f 0303 	mvn.w	r3, #3
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	e028      	b.n	8005d00 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cae:	f3ef 8305 	mrs	r3, IPSR
 8005cb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d01d      	beq.n	8005cf6 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8005cbe:	f107 0308 	add.w	r3, r7, #8
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	6938      	ldr	r0, [r7, #16]
 8005cc8:	f000 fcd6 	bl	8006678 <xEventGroupSetBitsFromISR>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8005cd2:	f06f 0302 	mvn.w	r3, #2
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	e012      	b.n	8005d00 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00d      	beq.n	8005d00 <osEventFlagsSet+0x78>
 8005ce4:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <osEventFlagsSet+0x84>)
 8005ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	e004      	b.n	8005d00 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8005cf6:	6839      	ldr	r1, [r7, #0]
 8005cf8:	6938      	ldr	r0, [r7, #16]
 8005cfa:	f000 fc03 	bl	8006504 <xEventGroupSetBits>
 8005cfe:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8005d00:	697b      	ldr	r3, [r7, #20]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	e000ed04 	.word	0xe000ed04

08005d10 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08c      	sub	sp, #48	; 0x30
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d004      	beq.n	8005d32 <osEventFlagsWait+0x22>
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8005d32:	f06f 0303 	mvn.w	r3, #3
 8005d36:	61fb      	str	r3, [r7, #28]
 8005d38:	e04b      	b.n	8005dd2 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d3a:	f3ef 8305 	mrs	r3, IPSR
 8005d3e:	617b      	str	r3, [r7, #20]
  return(result);
 8005d40:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8005d46:	f06f 0305 	mvn.w	r3, #5
 8005d4a:	61fb      	str	r3, [r7, #28]
 8005d4c:	e041      	b.n	8005dd2 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d5c:	e001      	b.n	8005d62 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	623b      	str	r3, [r7, #32]
 8005d70:	e001      	b.n	8005d76 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8005d72:	2301      	movs	r3, #1
 8005d74:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	6a3a      	ldr	r2, [r7, #32]
 8005d7e:	68b9      	ldr	r1, [r7, #8]
 8005d80:	69b8      	ldr	r0, [r7, #24]
 8005d82:	f000 faf1 	bl	8006368 <xEventGroupWaitBits>
 8005d86:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d010      	beq.n	8005db4 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	4013      	ands	r3, r2
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d019      	beq.n	8005dd2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8005da4:	f06f 0301 	mvn.w	r3, #1
 8005da8:	61fb      	str	r3, [r7, #28]
 8005daa:	e012      	b.n	8005dd2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005dac:	f06f 0302 	mvn.w	r3, #2
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	e00e      	b.n	8005dd2 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d109      	bne.n	8005dd2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8005dc4:	f06f 0301 	mvn.w	r3, #1
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	e002      	b.n	8005dd2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005dcc:	f06f 0302 	mvn.w	r3, #2
 8005dd0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8005dd2:	69fb      	ldr	r3, [r7, #28]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3728      	adds	r7, #40	; 0x28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005de4:	2300      	movs	r3, #0
 8005de6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005de8:	f3ef 8305 	mrs	r3, IPSR
 8005dec:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dee:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d174      	bne.n	8005ede <osMutexNew+0x102>
    if (attr != NULL) {
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	61bb      	str	r3, [r7, #24]
 8005e00:	e001      	b.n	8005e06 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <osMutexNew+0x3a>
      rmtx = 1U;
 8005e10:	2301      	movs	r3, #1
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	e001      	b.n	8005e1a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d15c      	bne.n	8005ede <osMutexNew+0x102>
      mem = -1;
 8005e24:	f04f 33ff 	mov.w	r3, #4294967295
 8005e28:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d015      	beq.n	8005e5c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d006      	beq.n	8005e46 <osMutexNew+0x6a>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	2b4f      	cmp	r3, #79	; 0x4f
 8005e3e:	d902      	bls.n	8005e46 <osMutexNew+0x6a>
          mem = 1;
 8005e40:	2301      	movs	r3, #1
 8005e42:	613b      	str	r3, [r7, #16]
 8005e44:	e00c      	b.n	8005e60 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d108      	bne.n	8005e60 <osMutexNew+0x84>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d104      	bne.n	8005e60 <osMutexNew+0x84>
            mem = 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	e001      	b.n	8005e60 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d112      	bne.n	8005e8c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	4619      	mov	r1, r3
 8005e72:	2004      	movs	r0, #4
 8005e74:	f000 fe37 	bl	8006ae6 <xQueueCreateMutexStatic>
 8005e78:	61f8      	str	r0, [r7, #28]
 8005e7a:	e016      	b.n	8005eaa <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	4619      	mov	r1, r3
 8005e82:	2001      	movs	r0, #1
 8005e84:	f000 fe2f 	bl	8006ae6 <xQueueCreateMutexStatic>
 8005e88:	61f8      	str	r0, [r7, #28]
 8005e8a:	e00e      	b.n	8005eaa <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d004      	beq.n	8005ea2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005e98:	2004      	movs	r0, #4
 8005e9a:	f000 fe0c 	bl	8006ab6 <xQueueCreateMutex>
 8005e9e:	61f8      	str	r0, [r7, #28]
 8005ea0:	e003      	b.n	8005eaa <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005ea2:	2001      	movs	r0, #1
 8005ea4:	f000 fe07 	bl	8006ab6 <xQueueCreateMutex>
 8005ea8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00c      	beq.n	8005eca <osMutexNew+0xee>
        if (attr != NULL) {
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <osMutexNew+0xe2>
          name = attr->name;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	e001      	b.n	8005ec2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005ec2:	68f9      	ldr	r1, [r7, #12]
 8005ec4:	69f8      	ldr	r0, [r7, #28]
 8005ec6:	f001 fbc1 	bl	800764c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d006      	beq.n	8005ede <osMutexNew+0x102>
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	f043 0301 	orr.w	r3, r3, #1
 8005edc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005ede:	69fb      	ldr	r3, [r7, #28]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3720      	adds	r7, #32
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f06:	f3ef 8305 	mrs	r3, IPSR
 8005f0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f0c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005f12:	f06f 0305 	mvn.w	r3, #5
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	e02c      	b.n	8005f74 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d103      	bne.n	8005f28 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005f20:	f06f 0303 	mvn.w	r3, #3
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	e025      	b.n	8005f74 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d011      	beq.n	8005f52 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	6938      	ldr	r0, [r7, #16]
 8005f32:	f000 fe27 	bl	8006b84 <xQueueTakeMutexRecursive>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d01b      	beq.n	8005f74 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005f42:	f06f 0301 	mvn.w	r3, #1
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	e014      	b.n	8005f74 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005f4a:	f06f 0302 	mvn.w	r3, #2
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	e010      	b.n	8005f74 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6938      	ldr	r0, [r7, #16]
 8005f56:	f001 f8c5 	bl	80070e4 <xQueueSemaphoreTake>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d009      	beq.n	8005f74 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005f66:	f06f 0301 	mvn.w	r3, #1
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	e002      	b.n	8005f74 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005f6e:	f06f 0302 	mvn.w	r3, #2
 8005f72:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005f74:	697b      	ldr	r3, [r7, #20]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b086      	sub	sp, #24
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f9a:	f3ef 8305 	mrs	r3, IPSR
 8005f9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fa0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <osMutexRelease+0x30>
    stat = osErrorISR;
 8005fa6:	f06f 0305 	mvn.w	r3, #5
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	e01f      	b.n	8005fee <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d103      	bne.n	8005fbc <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005fb4:	f06f 0303 	mvn.w	r3, #3
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	e018      	b.n	8005fee <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d009      	beq.n	8005fd6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005fc2:	6938      	ldr	r0, [r7, #16]
 8005fc4:	f000 fdaa 	bl	8006b1c <xQueueGiveMutexRecursive>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d00f      	beq.n	8005fee <osMutexRelease+0x70>
        stat = osErrorResource;
 8005fce:	f06f 0302 	mvn.w	r3, #2
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	e00b      	b.n	8005fee <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2100      	movs	r1, #0
 8005fdc:	6938      	ldr	r0, [r7, #16]
 8005fde:	f000 fe07 	bl	8006bf0 <xQueueGenericSend>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d002      	beq.n	8005fee <osMutexRelease+0x70>
        stat = osErrorResource;
 8005fe8:	f06f 0302 	mvn.w	r3, #2
 8005fec:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005fee:	697b      	ldr	r3, [r7, #20]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	; 0x28
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006004:	2300      	movs	r3, #0
 8006006:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006008:	f3ef 8305 	mrs	r3, IPSR
 800600c:	613b      	str	r3, [r7, #16]
  return(result);
 800600e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006010:	2b00      	cmp	r3, #0
 8006012:	d15f      	bne.n	80060d4 <osMessageQueueNew+0xdc>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d05c      	beq.n	80060d4 <osMessageQueueNew+0xdc>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d059      	beq.n	80060d4 <osMessageQueueNew+0xdc>
    mem = -1;
 8006020:	f04f 33ff 	mov.w	r3, #4294967295
 8006024:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d029      	beq.n	8006080 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d012      	beq.n	800605a <osMessageQueueNew+0x62>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	2b4f      	cmp	r3, #79	; 0x4f
 800603a:	d90e      	bls.n	800605a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	695a      	ldr	r2, [r3, #20]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	fb01 f303 	mul.w	r3, r1, r3
 8006050:	429a      	cmp	r2, r3
 8006052:	d302      	bcc.n	800605a <osMessageQueueNew+0x62>
        mem = 1;
 8006054:	2301      	movs	r3, #1
 8006056:	61bb      	str	r3, [r7, #24]
 8006058:	e014      	b.n	8006084 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d110      	bne.n	8006084 <osMessageQueueNew+0x8c>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10c      	bne.n	8006084 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800606e:	2b00      	cmp	r3, #0
 8006070:	d108      	bne.n	8006084 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d104      	bne.n	8006084 <osMessageQueueNew+0x8c>
          mem = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	61bb      	str	r3, [r7, #24]
 800607e:	e001      	b.n	8006084 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006080:	2300      	movs	r3, #0
 8006082:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d10b      	bne.n	80060a2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	2100      	movs	r1, #0
 8006094:	9100      	str	r1, [sp, #0]
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 fc1d 	bl	80068d8 <xQueueGenericCreateStatic>
 800609e:	61f8      	str	r0, [r7, #28]
 80060a0:	e008      	b.n	80060b4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d105      	bne.n	80060b4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80060a8:	2200      	movs	r2, #0
 80060aa:	68b9      	ldr	r1, [r7, #8]
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 fc8b 	bl	80069c8 <xQueueGenericCreate>
 80060b2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00c      	beq.n	80060d4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	617b      	str	r3, [r7, #20]
 80060c6:	e001      	b.n	80060cc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80060c8:	2300      	movs	r3, #0
 80060ca:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80060cc:	6979      	ldr	r1, [r7, #20]
 80060ce:	69f8      	ldr	r0, [r7, #28]
 80060d0:	f001 fabc 	bl	800764c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80060d4:	69fb      	ldr	r3, [r7, #28]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3720      	adds	r7, #32
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	4613      	mov	r3, r2
 80060ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060f8:	f3ef 8305 	mrs	r3, IPSR
 80060fc:	617b      	str	r3, [r7, #20]
  return(result);
 80060fe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006100:	2b00      	cmp	r3, #0
 8006102:	d028      	beq.n	8006156 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <osMessageQueuePut+0x36>
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <osMessageQueuePut+0x36>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006116:	f06f 0303 	mvn.w	r3, #3
 800611a:	61fb      	str	r3, [r7, #28]
 800611c:	e038      	b.n	8006190 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800611e:	2300      	movs	r3, #0
 8006120:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006122:	f107 0210 	add.w	r2, r7, #16
 8006126:	2300      	movs	r3, #0
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	69b8      	ldr	r0, [r7, #24]
 800612c:	f000 fe5e 	bl	8006dec <xQueueGenericSendFromISR>
 8006130:	4603      	mov	r3, r0
 8006132:	2b01      	cmp	r3, #1
 8006134:	d003      	beq.n	800613e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006136:	f06f 0302 	mvn.w	r3, #2
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	e028      	b.n	8006190 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d025      	beq.n	8006190 <osMessageQueuePut+0xb0>
 8006144:	4b15      	ldr	r3, [pc, #84]	; (800619c <osMessageQueuePut+0xbc>)
 8006146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	e01c      	b.n	8006190 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <osMessageQueuePut+0x82>
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d103      	bne.n	800616a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006162:	f06f 0303 	mvn.w	r3, #3
 8006166:	61fb      	str	r3, [r7, #28]
 8006168:	e012      	b.n	8006190 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800616a:	2300      	movs	r3, #0
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	69b8      	ldr	r0, [r7, #24]
 8006172:	f000 fd3d 	bl	8006bf0 <xQueueGenericSend>
 8006176:	4603      	mov	r3, r0
 8006178:	2b01      	cmp	r3, #1
 800617a:	d009      	beq.n	8006190 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006182:	f06f 0301 	mvn.w	r3, #1
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	e002      	b.n	8006190 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800618a:	f06f 0302 	mvn.w	r3, #2
 800618e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006190:	69fb      	ldr	r3, [r7, #28]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3720      	adds	r7, #32
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	e000ed04 	.word	0xe000ed04

080061a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061b6:	f3ef 8305 	mrs	r3, IPSR
 80061ba:	617b      	str	r3, [r7, #20]
  return(result);
 80061bc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d028      	beq.n	8006214 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d005      	beq.n	80061d4 <osMessageQueueGet+0x34>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <osMessageQueueGet+0x34>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80061d4:	f06f 0303 	mvn.w	r3, #3
 80061d8:	61fb      	str	r3, [r7, #28]
 80061da:	e037      	b.n	800624c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80061dc:	2300      	movs	r3, #0
 80061de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80061e0:	f107 0310 	add.w	r3, r7, #16
 80061e4:	461a      	mov	r2, r3
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	69b8      	ldr	r0, [r7, #24]
 80061ea:	f001 f887 	bl	80072fc <xQueueReceiveFromISR>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d003      	beq.n	80061fc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80061f4:	f06f 0302 	mvn.w	r3, #2
 80061f8:	61fb      	str	r3, [r7, #28]
 80061fa:	e027      	b.n	800624c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d024      	beq.n	800624c <osMessageQueueGet+0xac>
 8006202:	4b15      	ldr	r3, [pc, #84]	; (8006258 <osMessageQueueGet+0xb8>)
 8006204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	e01b      	b.n	800624c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <osMessageQueueGet+0x80>
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d103      	bne.n	8006228 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006220:	f06f 0303 	mvn.w	r3, #3
 8006224:	61fb      	str	r3, [r7, #28]
 8006226:	e011      	b.n	800624c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	68b9      	ldr	r1, [r7, #8]
 800622c:	69b8      	ldr	r0, [r7, #24]
 800622e:	f000 fe79 	bl	8006f24 <xQueueReceive>
 8006232:	4603      	mov	r3, r0
 8006234:	2b01      	cmp	r3, #1
 8006236:	d009      	beq.n	800624c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800623e:	f06f 0301 	mvn.w	r3, #1
 8006242:	61fb      	str	r3, [r7, #28]
 8006244:	e002      	b.n	800624c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006246:	f06f 0302 	mvn.w	r3, #2
 800624a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800624c:	69fb      	ldr	r3, [r7, #28]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3720      	adds	r7, #32
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4a07      	ldr	r2, [pc, #28]	; (8006288 <vApplicationGetIdleTaskMemory+0x2c>)
 800626c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4a06      	ldr	r2, [pc, #24]	; (800628c <vApplicationGetIdleTaskMemory+0x30>)
 8006272:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2280      	movs	r2, #128	; 0x80
 8006278:	601a      	str	r2, [r3, #0]
}
 800627a:	bf00      	nop
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	200000b0 	.word	0x200000b0
 800628c:	2000016c 	.word	0x2000016c

08006290 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4a07      	ldr	r2, [pc, #28]	; (80062bc <vApplicationGetTimerTaskMemory+0x2c>)
 80062a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4a06      	ldr	r2, [pc, #24]	; (80062c0 <vApplicationGetTimerTaskMemory+0x30>)
 80062a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062ae:	601a      	str	r2, [r3, #0]
}
 80062b0:	bf00      	nop
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	2000036c 	.word	0x2000036c
 80062c0:	20000428 	.word	0x20000428

080062c4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10a      	bne.n	80062e8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062e4:	bf00      	nop
 80062e6:	e7fe      	b.n	80062e6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80062e8:	2320      	movs	r3, #32
 80062ea:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	d00a      	beq.n	8006308 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	60fb      	str	r3, [r7, #12]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	3304      	adds	r3, #4
 800631c:	4618      	mov	r0, r3
 800631e:	f000 f9bf 	bl	80066a0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2201      	movs	r2, #1
 8006326:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8006328:	697b      	ldr	r3, [r7, #20]
	}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006338:	2020      	movs	r0, #32
 800633a:	f003 f88d 	bl	8009458 <pvPortMalloc>
 800633e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3304      	adds	r3, #4
 8006350:	4618      	mov	r0, r3
 8006352:	f000 f9a5 	bl	80066a0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800635c:	687b      	ldr	r3, [r7, #4]
	}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b090      	sub	sp, #64	; 0x40
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800637a:	2300      	movs	r3, #0
 800637c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800637e:	2300      	movs	r3, #0
 8006380:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10a      	bne.n	800639e <xEventGroupWaitBits+0x36>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	623b      	str	r3, [r7, #32]
}
 800639a:	bf00      	nop
 800639c:	e7fe      	b.n	800639c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <xEventGroupWaitBits+0x56>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	61fb      	str	r3, [r7, #28]
}
 80063ba:	bf00      	nop
 80063bc:	e7fe      	b.n	80063bc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <xEventGroupWaitBits+0x72>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	61bb      	str	r3, [r7, #24]
}
 80063d6:	bf00      	nop
 80063d8:	e7fe      	b.n	80063d8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063da:	f002 f88b 	bl	80084f4 <xTaskGetSchedulerState>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <xEventGroupWaitBits+0x82>
 80063e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <xEventGroupWaitBits+0x86>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <xEventGroupWaitBits+0x88>
 80063ee:	2300      	movs	r3, #0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10a      	bne.n	800640a <xEventGroupWaitBits+0xa2>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	617b      	str	r3, [r7, #20]
}
 8006406:	bf00      	nop
 8006408:	e7fe      	b.n	8006408 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800640a:	f001 fbd9 	bl	8007bc0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800640e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800641a:	f000 f90b 	bl	8006634 <prvTestWaitCondition>
 800641e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00e      	beq.n	8006444 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800642a:	2300      	movs	r3, #0
 800642c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d028      	beq.n	8006486 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	43db      	mvns	r3, r3
 800643c:	401a      	ands	r2, r3
 800643e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	e020      	b.n	8006486 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006446:	2b00      	cmp	r3, #0
 8006448:	d104      	bne.n	8006454 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800644a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800644e:	2301      	movs	r3, #1
 8006450:	633b      	str	r3, [r7, #48]	; 0x30
 8006452:	e018      	b.n	8006486 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800645a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006460:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800646e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006472:	1d18      	adds	r0, r3, #4
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006478:	4313      	orrs	r3, r2
 800647a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800647c:	4619      	mov	r1, r3
 800647e:	f001 fd9d 	bl	8007fbc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8006482:	2300      	movs	r3, #0
 8006484:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006486:	f001 fba9 	bl	8007bdc <xTaskResumeAll>
 800648a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800648c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800648e:	2b00      	cmp	r3, #0
 8006490:	d031      	beq.n	80064f6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	2b00      	cmp	r3, #0
 8006496:	d107      	bne.n	80064a8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8006498:	4b19      	ldr	r3, [pc, #100]	; (8006500 <xEventGroupWaitBits+0x198>)
 800649a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80064a8:	f002 f99a 	bl	80087e0 <uxTaskResetEventItemValue>
 80064ac:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80064ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d11a      	bne.n	80064ee <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80064b8:	f002 feac 	bl	8009214 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80064bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80064c8:	f000 f8b4 	bl	8006634 <prvTestWaitCondition>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d009      	beq.n	80064e6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d006      	beq.n	80064e6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80064d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	43db      	mvns	r3, r3
 80064e0:	401a      	ands	r2, r3
 80064e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80064e6:	2301      	movs	r3, #1
 80064e8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80064ea:	f002 fec3 	bl	8009274 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80064ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80064f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80064f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3740      	adds	r7, #64	; 0x40
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	e000ed04 	.word	0xe000ed04

08006504 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08e      	sub	sp, #56	; 0x38
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800650e:	2300      	movs	r3, #0
 8006510:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006516:	2300      	movs	r3, #0
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10a      	bne.n	8006536 <xEventGroupSetBits+0x32>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	613b      	str	r3, [r7, #16]
}
 8006532:	bf00      	nop
 8006534:	e7fe      	b.n	8006534 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <xEventGroupSetBits+0x52>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	60fb      	str	r3, [r7, #12]
}
 8006552:	bf00      	nop
 8006554:	e7fe      	b.n	8006554 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	3304      	adds	r3, #4
 800655a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	3308      	adds	r3, #8
 8006560:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006562:	f001 fb2d 	bl	8007bc0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	431a      	orrs	r2, r3
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006578:	e03c      	b.n	80065f4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800657a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006586:	2300      	movs	r3, #0
 8006588:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006590:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006598:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d108      	bne.n	80065b6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00b      	beq.n	80065c8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80065b0:	2301      	movs	r3, #1
 80065b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065b4:	e008      	b.n	80065c8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	4013      	ands	r3, r2
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d101      	bne.n	80065c8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80065c4:	2301      	movs	r3, #1
 80065c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d010      	beq.n	80065f0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80065d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	4313      	orrs	r3, r2
 80065de:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80065e8:	4619      	mov	r1, r3
 80065ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80065ec:	f001 fdb2 	bl	8008154 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80065f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065f6:	6a3b      	ldr	r3, [r7, #32]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d1be      	bne.n	800657a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	43db      	mvns	r3, r3
 8006604:	401a      	ands	r2, r3
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800660a:	f001 fae7 	bl	8007bdc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	681b      	ldr	r3, [r3, #0]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3738      	adds	r7, #56	; 0x38
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8006624:	6839      	ldr	r1, [r7, #0]
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff ff6c 	bl	8006504 <xEventGroupSetBits>
}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d107      	bne.n	800665a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	4013      	ands	r3, r2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006654:	2301      	movs	r3, #1
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	e007      	b.n	800666a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4013      	ands	r3, r2
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	429a      	cmp	r2, r3
 8006664:	d101      	bne.n	800666a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006666:	2301      	movs	r3, #1
 8006668:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800666a:	697b      	ldr	r3, [r7, #20]
}
 800666c:	4618      	mov	r0, r3
 800666e:	371c      	adds	r7, #28
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	68f9      	ldr	r1, [r7, #12]
 800668a:	4804      	ldr	r0, [pc, #16]	; (800669c <xEventGroupSetBitsFromISR+0x24>)
 800668c:	f002 fc76 	bl	8008f7c <xTimerPendFunctionCallFromISR>
 8006690:	6178      	str	r0, [r7, #20]

		return xReturn;
 8006692:	697b      	ldr	r3, [r7, #20]
	}
 8006694:	4618      	mov	r0, r3
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	0800661b 	.word	0x0800661b

080066a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f103 0208 	add.w	r2, r3, #8
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f04f 32ff 	mov.w	r2, #4294967295
 80066b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f103 0208 	add.w	r2, r3, #8
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f103 0208 	add.w	r2, r3, #8
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066fa:	b480      	push	{r7}
 80066fc:	b085      	sub	sp, #20
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	601a      	str	r2, [r3, #0]
}
 8006736:	bf00      	nop
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006742:	b480      	push	{r7}
 8006744:	b085      	sub	sp, #20
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006758:	d103      	bne.n	8006762 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	e00c      	b.n	800677c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	3308      	adds	r3, #8
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	e002      	b.n	8006770 <vListInsert+0x2e>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	429a      	cmp	r2, r3
 800677a:	d2f6      	bcs.n	800676a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	601a      	str	r2, [r3, #0]
}
 80067a8:	bf00      	nop
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6892      	ldr	r2, [r2, #8]
 80067ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6852      	ldr	r2, [r2, #4]
 80067d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d103      	bne.n	80067e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	1e5a      	subs	r2, r3, #1
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <xQueueGenericReset+0x2a>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	60bb      	str	r3, [r7, #8]
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006832:	f002 fcef 	bl	8009214 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683e:	68f9      	ldr	r1, [r7, #12]
 8006840:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006842:	fb01 f303 	mul.w	r3, r1, r3
 8006846:	441a      	add	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006862:	3b01      	subs	r3, #1
 8006864:	68f9      	ldr	r1, [r7, #12]
 8006866:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	441a      	add	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	22ff      	movs	r2, #255	; 0xff
 8006876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	22ff      	movs	r2, #255	; 0xff
 800687e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d114      	bne.n	80068b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01a      	beq.n	80068c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	3310      	adds	r3, #16
 8006894:	4618      	mov	r0, r3
 8006896:	f001 fbf9 	bl	800808c <xTaskRemoveFromEventList>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d012      	beq.n	80068c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068a0:	4b0c      	ldr	r3, [pc, #48]	; (80068d4 <xQueueGenericReset+0xcc>)
 80068a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	e009      	b.n	80068c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3310      	adds	r3, #16
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7ff fef2 	bl	80066a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3324      	adds	r3, #36	; 0x24
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7ff feed 	bl	80066a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068c6:	f002 fcd5 	bl	8009274 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068ca:	2301      	movs	r3, #1
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	e000ed04 	.word	0xe000ed04

080068d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08e      	sub	sp, #56	; 0x38
 80068dc:	af02      	add	r7, sp, #8
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10a      	bne.n	8006902 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068fe:	bf00      	nop
 8006900:	e7fe      	b.n	8006900 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	627b      	str	r3, [r7, #36]	; 0x24
}
 800691a:	bf00      	nop
 800691c:	e7fe      	b.n	800691c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <xQueueGenericCreateStatic+0x52>
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <xQueueGenericCreateStatic+0x56>
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <xQueueGenericCreateStatic+0x58>
 800692e:	2300      	movs	r3, #0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	623b      	str	r3, [r7, #32]
}
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d102      	bne.n	8006956 <xQueueGenericCreateStatic+0x7e>
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <xQueueGenericCreateStatic+0x82>
 8006956:	2301      	movs	r3, #1
 8006958:	e000      	b.n	800695c <xQueueGenericCreateStatic+0x84>
 800695a:	2300      	movs	r3, #0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10a      	bne.n	8006976 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	61fb      	str	r3, [r7, #28]
}
 8006972:	bf00      	nop
 8006974:	e7fe      	b.n	8006974 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006976:	2350      	movs	r3, #80	; 0x50
 8006978:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b50      	cmp	r3, #80	; 0x50
 800697e:	d00a      	beq.n	8006996 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	61bb      	str	r3, [r7, #24]
}
 8006992:	bf00      	nop
 8006994:	e7fe      	b.n	8006994 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006996:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800699c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00d      	beq.n	80069be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80069ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	4613      	mov	r3, r2
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	68b9      	ldr	r1, [r7, #8]
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 f83f 	bl	8006a3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3730      	adds	r7, #48	; 0x30
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	; 0x28
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	4613      	mov	r3, r2
 80069d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10a      	bne.n	80069f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	613b      	str	r3, [r7, #16]
}
 80069ee:	bf00      	nop
 80069f0:	e7fe      	b.n	80069f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	fb02 f303 	mul.w	r3, r2, r3
 80069fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	3350      	adds	r3, #80	; 0x50
 8006a00:	4618      	mov	r0, r3
 8006a02:	f002 fd29 	bl	8009458 <pvPortMalloc>
 8006a06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d011      	beq.n	8006a32 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	3350      	adds	r3, #80	; 0x50
 8006a16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a20:	79fa      	ldrb	r2, [r7, #7]
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	4613      	mov	r3, r2
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f805 	bl	8006a3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a32:	69bb      	ldr	r3, [r7, #24]
	}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3720      	adds	r7, #32
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d103      	bne.n	8006a58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	e002      	b.n	8006a5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	69b8      	ldr	r0, [r7, #24]
 8006a6e:	f7ff fecb 	bl	8006808 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	78fa      	ldrb	r2, [r7, #3]
 8006a76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b082      	sub	sp, #8
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00e      	beq.n	8006aae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f8a1 	bl	8006bf0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006aae:	bf00      	nop
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b086      	sub	sp, #24
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	4603      	mov	r3, r0
 8006abe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
 8006aca:	461a      	mov	r2, r3
 8006acc:	6939      	ldr	r1, [r7, #16]
 8006ace:	6978      	ldr	r0, [r7, #20]
 8006ad0:	f7ff ff7a 	bl	80069c8 <xQueueGenericCreate>
 8006ad4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f7ff ffd3 	bl	8006a82 <prvInitialiseMutex>

		return xNewQueue;
 8006adc:	68fb      	ldr	r3, [r7, #12]
	}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b088      	sub	sp, #32
 8006aea:	af02      	add	r7, sp, #8
 8006aec:	4603      	mov	r3, r0
 8006aee:	6039      	str	r1, [r7, #0]
 8006af0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006af2:	2301      	movs	r3, #1
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	2300      	movs	r3, #0
 8006af8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2200      	movs	r2, #0
 8006b02:	6939      	ldr	r1, [r7, #16]
 8006b04:	6978      	ldr	r0, [r7, #20]
 8006b06:	f7ff fee7 	bl	80068d8 <xQueueGenericCreateStatic>
 8006b0a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f7ff ffb8 	bl	8006a82 <prvInitialiseMutex>

		return xNewQueue;
 8006b12:	68fb      	ldr	r3, [r7, #12]
	}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3718      	adds	r7, #24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006b1c:	b590      	push	{r4, r7, lr}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	60fb      	str	r3, [r7, #12]
}
 8006b40:	bf00      	nop
 8006b42:	e7fe      	b.n	8006b42 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	689c      	ldr	r4, [r3, #8]
 8006b48:	f001 fcc4 	bl	80084d4 <xTaskGetCurrentTaskHandle>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	429c      	cmp	r4, r3
 8006b50:	d111      	bne.n	8006b76 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	1e5a      	subs	r2, r3, #1
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d105      	bne.n	8006b70 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006b64:	2300      	movs	r3, #0
 8006b66:	2200      	movs	r2, #0
 8006b68:	2100      	movs	r1, #0
 8006b6a:	6938      	ldr	r0, [r7, #16]
 8006b6c:	f000 f840 	bl	8006bf0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006b70:	2301      	movs	r3, #1
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	e001      	b.n	8006b7a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006b7a:	697b      	ldr	r3, [r7, #20]
	}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	371c      	adds	r7, #28
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd90      	pop	{r4, r7, pc}

08006b84 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006b84:	b590      	push	{r4, r7, lr}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	60fb      	str	r3, [r7, #12]
}
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	689c      	ldr	r4, [r3, #8]
 8006bb2:	f001 fc8f 	bl	80084d4 <xTaskGetCurrentTaskHandle>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	429c      	cmp	r4, r3
 8006bba:	d107      	bne.n	8006bcc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	617b      	str	r3, [r7, #20]
 8006bca:	e00c      	b.n	8006be6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6938      	ldr	r0, [r7, #16]
 8006bd0:	f000 fa88 	bl	80070e4 <xQueueSemaphoreTake>
 8006bd4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d004      	beq.n	8006be6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006be6:	697b      	ldr	r3, [r7, #20]
	}
 8006be8:	4618      	mov	r0, r3
 8006bea:	371c      	adds	r7, #28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd90      	pop	{r4, r7, pc}

08006bf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08e      	sub	sp, #56	; 0x38
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10a      	bne.n	8006c22 <xQueueGenericSend+0x32>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c1e:	bf00      	nop
 8006c20:	e7fe      	b.n	8006c20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d103      	bne.n	8006c30 <xQueueGenericSend+0x40>
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <xQueueGenericSend+0x44>
 8006c30:	2301      	movs	r3, #1
 8006c32:	e000      	b.n	8006c36 <xQueueGenericSend+0x46>
 8006c34:	2300      	movs	r3, #0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10a      	bne.n	8006c50 <xQueueGenericSend+0x60>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c4c:	bf00      	nop
 8006c4e:	e7fe      	b.n	8006c4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d103      	bne.n	8006c5e <xQueueGenericSend+0x6e>
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <xQueueGenericSend+0x72>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e000      	b.n	8006c64 <xQueueGenericSend+0x74>
 8006c62:	2300      	movs	r3, #0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10a      	bne.n	8006c7e <xQueueGenericSend+0x8e>
	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	623b      	str	r3, [r7, #32]
}
 8006c7a:	bf00      	nop
 8006c7c:	e7fe      	b.n	8006c7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c7e:	f001 fc39 	bl	80084f4 <xTaskGetSchedulerState>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d102      	bne.n	8006c8e <xQueueGenericSend+0x9e>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <xQueueGenericSend+0xa2>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e000      	b.n	8006c94 <xQueueGenericSend+0xa4>
 8006c92:	2300      	movs	r3, #0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10a      	bne.n	8006cae <xQueueGenericSend+0xbe>
	__asm volatile
 8006c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	61fb      	str	r3, [r7, #28]
}
 8006caa:	bf00      	nop
 8006cac:	e7fe      	b.n	8006cac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cae:	f002 fab1 	bl	8009214 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d302      	bcc.n	8006cc4 <xQueueGenericSend+0xd4>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d129      	bne.n	8006d18 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cca:	f000 fbaf 	bl	800742c <prvCopyDataToQueue>
 8006cce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d010      	beq.n	8006cfa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	3324      	adds	r3, #36	; 0x24
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f001 f9d5 	bl	800808c <xTaskRemoveFromEventList>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d013      	beq.n	8006d10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ce8:	4b3f      	ldr	r3, [pc, #252]	; (8006de8 <xQueueGenericSend+0x1f8>)
 8006cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	e00a      	b.n	8006d10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d007      	beq.n	8006d10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d00:	4b39      	ldr	r3, [pc, #228]	; (8006de8 <xQueueGenericSend+0x1f8>)
 8006d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d10:	f002 fab0 	bl	8009274 <vPortExitCritical>
				return pdPASS;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e063      	b.n	8006de0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d103      	bne.n	8006d26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d1e:	f002 faa9 	bl	8009274 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	e05c      	b.n	8006de0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d106      	bne.n	8006d3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d2c:	f107 0314 	add.w	r3, r7, #20
 8006d30:	4618      	mov	r0, r3
 8006d32:	f001 fa71 	bl	8008218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d36:	2301      	movs	r3, #1
 8006d38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d3a:	f002 fa9b 	bl	8009274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d3e:	f000 ff3f 	bl	8007bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d42:	f002 fa67 	bl	8009214 <vPortEnterCritical>
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d4c:	b25b      	sxtb	r3, r3
 8006d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d52:	d103      	bne.n	8006d5c <xQueueGenericSend+0x16c>
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d62:	b25b      	sxtb	r3, r3
 8006d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d68:	d103      	bne.n	8006d72 <xQueueGenericSend+0x182>
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d72:	f002 fa7f 	bl	8009274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d76:	1d3a      	adds	r2, r7, #4
 8006d78:	f107 0314 	add.w	r3, r7, #20
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f001 fa60 	bl	8008244 <xTaskCheckForTimeOut>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d124      	bne.n	8006dd4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d8c:	f000 fc46 	bl	800761c <prvIsQueueFull>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d018      	beq.n	8006dc8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	3310      	adds	r3, #16
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f001 f8e8 	bl	8007f74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006da6:	f000 fbd1 	bl	800754c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006daa:	f000 ff17 	bl	8007bdc <xTaskResumeAll>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f47f af7c 	bne.w	8006cae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006db6:	4b0c      	ldr	r3, [pc, #48]	; (8006de8 <xQueueGenericSend+0x1f8>)
 8006db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	e772      	b.n	8006cae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dca:	f000 fbbf 	bl	800754c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dce:	f000 ff05 	bl	8007bdc <xTaskResumeAll>
 8006dd2:	e76c      	b.n	8006cae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dd6:	f000 fbb9 	bl	800754c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dda:	f000 feff 	bl	8007bdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006dde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3738      	adds	r7, #56	; 0x38
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	e000ed04 	.word	0xe000ed04

08006dec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b090      	sub	sp, #64	; 0x40
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10a      	bne.n	8006e1a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e16:	bf00      	nop
 8006e18:	e7fe      	b.n	8006e18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d103      	bne.n	8006e28 <xQueueGenericSendFromISR+0x3c>
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <xQueueGenericSendFromISR+0x40>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e000      	b.n	8006e2e <xQueueGenericSendFromISR+0x42>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e44:	bf00      	nop
 8006e46:	e7fe      	b.n	8006e46 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d103      	bne.n	8006e56 <xQueueGenericSendFromISR+0x6a>
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d101      	bne.n	8006e5a <xQueueGenericSendFromISR+0x6e>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <xQueueGenericSendFromISR+0x70>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10a      	bne.n	8006e76 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	623b      	str	r3, [r7, #32]
}
 8006e72:	bf00      	nop
 8006e74:	e7fe      	b.n	8006e74 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e76:	f002 faaf 	bl	80093d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e7a:	f3ef 8211 	mrs	r2, BASEPRI
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	61fa      	str	r2, [r7, #28]
 8006e90:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e92:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d302      	bcc.n	8006ea8 <xQueueGenericSendFromISR+0xbc>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d12f      	bne.n	8006f08 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ebe:	f000 fab5 	bl	800742c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ec2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eca:	d112      	bne.n	8006ef2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d016      	beq.n	8006f02 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	3324      	adds	r3, #36	; 0x24
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f001 f8d7 	bl	800808c <xTaskRemoveFromEventList>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00e      	beq.n	8006f02 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00b      	beq.n	8006f02 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	e007      	b.n	8006f02 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ef2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	b25a      	sxtb	r2, r3
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f02:	2301      	movs	r3, #1
 8006f04:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006f06:	e001      	b.n	8006f0c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3740      	adds	r7, #64	; 0x40
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
	...

08006f24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b08c      	sub	sp, #48	; 0x30
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f30:	2300      	movs	r3, #0
 8006f32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10a      	bne.n	8006f54 <xQueueReceive+0x30>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	623b      	str	r3, [r7, #32]
}
 8006f50:	bf00      	nop
 8006f52:	e7fe      	b.n	8006f52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d103      	bne.n	8006f62 <xQueueReceive+0x3e>
 8006f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <xQueueReceive+0x42>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e000      	b.n	8006f68 <xQueueReceive+0x44>
 8006f66:	2300      	movs	r3, #0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <xQueueReceive+0x5e>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	61fb      	str	r3, [r7, #28]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f82:	f001 fab7 	bl	80084f4 <xTaskGetSchedulerState>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d102      	bne.n	8006f92 <xQueueReceive+0x6e>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <xQueueReceive+0x72>
 8006f92:	2301      	movs	r3, #1
 8006f94:	e000      	b.n	8006f98 <xQueueReceive+0x74>
 8006f96:	2300      	movs	r3, #0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10a      	bne.n	8006fb2 <xQueueReceive+0x8e>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	61bb      	str	r3, [r7, #24]
}
 8006fae:	bf00      	nop
 8006fb0:	e7fe      	b.n	8006fb0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fb2:	f002 f92f 	bl	8009214 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d01f      	beq.n	8007002 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fc2:	68b9      	ldr	r1, [r7, #8]
 8006fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fc6:	f000 fa9b 	bl	8007500 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	1e5a      	subs	r2, r3, #1
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00f      	beq.n	8006ffa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fdc:	3310      	adds	r3, #16
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f001 f854 	bl	800808c <xTaskRemoveFromEventList>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d007      	beq.n	8006ffa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fea:	4b3d      	ldr	r3, [pc, #244]	; (80070e0 <xQueueReceive+0x1bc>)
 8006fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ffa:	f002 f93b 	bl	8009274 <vPortExitCritical>
				return pdPASS;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e069      	b.n	80070d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d103      	bne.n	8007010 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007008:	f002 f934 	bl	8009274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800700c:	2300      	movs	r3, #0
 800700e:	e062      	b.n	80070d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d106      	bne.n	8007024 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007016:	f107 0310 	add.w	r3, r7, #16
 800701a:	4618      	mov	r0, r3
 800701c:	f001 f8fc 	bl	8008218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007020:	2301      	movs	r3, #1
 8007022:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007024:	f002 f926 	bl	8009274 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007028:	f000 fdca 	bl	8007bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800702c:	f002 f8f2 	bl	8009214 <vPortEnterCritical>
 8007030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007036:	b25b      	sxtb	r3, r3
 8007038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703c:	d103      	bne.n	8007046 <xQueueReceive+0x122>
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800704c:	b25b      	sxtb	r3, r3
 800704e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007052:	d103      	bne.n	800705c <xQueueReceive+0x138>
 8007054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800705c:	f002 f90a 	bl	8009274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007060:	1d3a      	adds	r2, r7, #4
 8007062:	f107 0310 	add.w	r3, r7, #16
 8007066:	4611      	mov	r1, r2
 8007068:	4618      	mov	r0, r3
 800706a:	f001 f8eb 	bl	8008244 <xTaskCheckForTimeOut>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d123      	bne.n	80070bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007076:	f000 fabb 	bl	80075f0 <prvIsQueueEmpty>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d017      	beq.n	80070b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	3324      	adds	r3, #36	; 0x24
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	4611      	mov	r1, r2
 8007088:	4618      	mov	r0, r3
 800708a:	f000 ff73 	bl	8007f74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800708e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007090:	f000 fa5c 	bl	800754c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007094:	f000 fda2 	bl	8007bdc <xTaskResumeAll>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d189      	bne.n	8006fb2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800709e:	4b10      	ldr	r3, [pc, #64]	; (80070e0 <xQueueReceive+0x1bc>)
 80070a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	e780      	b.n	8006fb2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80070b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070b2:	f000 fa4b 	bl	800754c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070b6:	f000 fd91 	bl	8007bdc <xTaskResumeAll>
 80070ba:	e77a      	b.n	8006fb2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80070bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070be:	f000 fa45 	bl	800754c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070c2:	f000 fd8b 	bl	8007bdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070c8:	f000 fa92 	bl	80075f0 <prvIsQueueEmpty>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f43f af6f 	beq.w	8006fb2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3730      	adds	r7, #48	; 0x30
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	e000ed04 	.word	0xe000ed04

080070e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08e      	sub	sp, #56	; 0x38
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80070f6:	2300      	movs	r3, #0
 80070f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10a      	bne.n	8007116 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	623b      	str	r3, [r7, #32]
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	61fb      	str	r3, [r7, #28]
}
 8007130:	bf00      	nop
 8007132:	e7fe      	b.n	8007132 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007134:	f001 f9de 	bl	80084f4 <xTaskGetSchedulerState>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d102      	bne.n	8007144 <xQueueSemaphoreTake+0x60>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <xQueueSemaphoreTake+0x64>
 8007144:	2301      	movs	r3, #1
 8007146:	e000      	b.n	800714a <xQueueSemaphoreTake+0x66>
 8007148:	2300      	movs	r3, #0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	61bb      	str	r3, [r7, #24]
}
 8007160:	bf00      	nop
 8007162:	e7fe      	b.n	8007162 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007164:	f002 f856 	bl	8009214 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007170:	2b00      	cmp	r3, #0
 8007172:	d024      	beq.n	80071be <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	1e5a      	subs	r2, r3, #1
 8007178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800717c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d104      	bne.n	800718e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007184:	f001 fb44 	bl	8008810 <pvTaskIncrementMutexHeldCount>
 8007188:	4602      	mov	r2, r0
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800718e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00f      	beq.n	80071b6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007198:	3310      	adds	r3, #16
 800719a:	4618      	mov	r0, r3
 800719c:	f000 ff76 	bl	800808c <xTaskRemoveFromEventList>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d007      	beq.n	80071b6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80071a6:	4b54      	ldr	r3, [pc, #336]	; (80072f8 <xQueueSemaphoreTake+0x214>)
 80071a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071b6:	f002 f85d 	bl	8009274 <vPortExitCritical>
				return pdPASS;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e097      	b.n	80072ee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d111      	bne.n	80071e8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00a      	beq.n	80071e0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	617b      	str	r3, [r7, #20]
}
 80071dc:	bf00      	nop
 80071de:	e7fe      	b.n	80071de <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80071e0:	f002 f848 	bl	8009274 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071e4:	2300      	movs	r3, #0
 80071e6:	e082      	b.n	80072ee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d106      	bne.n	80071fc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071ee:	f107 030c 	add.w	r3, r7, #12
 80071f2:	4618      	mov	r0, r3
 80071f4:	f001 f810 	bl	8008218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071f8:	2301      	movs	r3, #1
 80071fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071fc:	f002 f83a 	bl	8009274 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007200:	f000 fcde 	bl	8007bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007204:	f002 f806 	bl	8009214 <vPortEnterCritical>
 8007208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800720e:	b25b      	sxtb	r3, r3
 8007210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007214:	d103      	bne.n	800721e <xQueueSemaphoreTake+0x13a>
 8007216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800721e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007224:	b25b      	sxtb	r3, r3
 8007226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722a:	d103      	bne.n	8007234 <xQueueSemaphoreTake+0x150>
 800722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007234:	f002 f81e 	bl	8009274 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007238:	463a      	mov	r2, r7
 800723a:	f107 030c 	add.w	r3, r7, #12
 800723e:	4611      	mov	r1, r2
 8007240:	4618      	mov	r0, r3
 8007242:	f000 ffff 	bl	8008244 <xTaskCheckForTimeOut>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d132      	bne.n	80072b2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800724c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800724e:	f000 f9cf 	bl	80075f0 <prvIsQueueEmpty>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d026      	beq.n	80072a6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d109      	bne.n	8007274 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007260:	f001 ffd8 	bl	8009214 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	4618      	mov	r0, r3
 800726a:	f001 f961 	bl	8008530 <xTaskPriorityInherit>
 800726e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007270:	f002 f800 	bl	8009274 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	3324      	adds	r3, #36	; 0x24
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	4611      	mov	r1, r2
 800727c:	4618      	mov	r0, r3
 800727e:	f000 fe79 	bl	8007f74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007284:	f000 f962 	bl	800754c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007288:	f000 fca8 	bl	8007bdc <xTaskResumeAll>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	f47f af68 	bne.w	8007164 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007294:	4b18      	ldr	r3, [pc, #96]	; (80072f8 <xQueueSemaphoreTake+0x214>)
 8007296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	e75e      	b.n	8007164 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80072a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072a8:	f000 f950 	bl	800754c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072ac:	f000 fc96 	bl	8007bdc <xTaskResumeAll>
 80072b0:	e758      	b.n	8007164 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80072b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072b4:	f000 f94a 	bl	800754c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072b8:	f000 fc90 	bl	8007bdc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072be:	f000 f997 	bl	80075f0 <prvIsQueueEmpty>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f43f af4d 	beq.w	8007164 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00d      	beq.n	80072ec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80072d0:	f001 ffa0 	bl	8009214 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80072d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072d6:	f000 f891 	bl	80073fc <prvGetDisinheritPriorityAfterTimeout>
 80072da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80072dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072e2:	4618      	mov	r0, r3
 80072e4:	f001 f9fa 	bl	80086dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80072e8:	f001 ffc4 	bl	8009274 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80072ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3738      	adds	r7, #56	; 0x38
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	e000ed04 	.word	0xe000ed04

080072fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08e      	sub	sp, #56	; 0x38
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10a      	bne.n	8007328 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	623b      	str	r3, [r7, #32]
}
 8007324:	bf00      	nop
 8007326:	e7fe      	b.n	8007326 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d103      	bne.n	8007336 <xQueueReceiveFromISR+0x3a>
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <xQueueReceiveFromISR+0x3e>
 8007336:	2301      	movs	r3, #1
 8007338:	e000      	b.n	800733c <xQueueReceiveFromISR+0x40>
 800733a:	2300      	movs	r3, #0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	61fb      	str	r3, [r7, #28]
}
 8007352:	bf00      	nop
 8007354:	e7fe      	b.n	8007354 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007356:	f002 f83f 	bl	80093d8 <vPortValidateInterruptPriority>
	__asm volatile
 800735a:	f3ef 8211 	mrs	r2, BASEPRI
 800735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	61ba      	str	r2, [r7, #24]
 8007370:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007372:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007374:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	2b00      	cmp	r3, #0
 8007380:	d02f      	beq.n	80073e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007390:	f000 f8b6 	bl	8007500 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	1e5a      	subs	r2, r3, #1
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800739c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a4:	d112      	bne.n	80073cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d016      	beq.n	80073dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	3310      	adds	r3, #16
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fe6a 	bl	800808c <xTaskRemoveFromEventList>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00e      	beq.n	80073dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00b      	beq.n	80073dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	e007      	b.n	80073dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80073cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073d0:	3301      	adds	r3, #1
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	b25a      	sxtb	r2, r3
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80073dc:	2301      	movs	r3, #1
 80073de:	637b      	str	r3, [r7, #52]	; 0x34
 80073e0:	e001      	b.n	80073e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	637b      	str	r3, [r7, #52]	; 0x34
 80073e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f383 8811 	msr	BASEPRI, r3
}
 80073f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3738      	adds	r7, #56	; 0x38
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	2b00      	cmp	r3, #0
 800740a:	d006      	beq.n	800741a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	e001      	b.n	800741e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800741e:	68fb      	ldr	r3, [r7, #12]
	}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007438:	2300      	movs	r3, #0
 800743a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10d      	bne.n	8007466 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d14d      	bne.n	80074ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	4618      	mov	r0, r3
 8007458:	f001 f8d2 	bl	8008600 <xTaskPriorityDisinherit>
 800745c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	609a      	str	r2, [r3, #8]
 8007464:	e043      	b.n	80074ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d119      	bne.n	80074a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6858      	ldr	r0, [r3, #4]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007474:	461a      	mov	r2, r3
 8007476:	68b9      	ldr	r1, [r7, #8]
 8007478:	f002 fa04 	bl	8009884 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	441a      	add	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	429a      	cmp	r2, r3
 8007494:	d32b      	bcc.n	80074ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	605a      	str	r2, [r3, #4]
 800749e:	e026      	b.n	80074ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	68d8      	ldr	r0, [r3, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	461a      	mov	r2, r3
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	f002 f9ea 	bl	8009884 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	425b      	negs	r3, r3
 80074ba:	441a      	add	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d207      	bcs.n	80074dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d4:	425b      	negs	r3, r3
 80074d6:	441a      	add	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d105      	bne.n	80074ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80074f6:	697b      	ldr	r3, [r7, #20]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	2b00      	cmp	r3, #0
 8007510:	d018      	beq.n	8007544 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	441a      	add	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	429a      	cmp	r2, r3
 800752a:	d303      	bcc.n	8007534 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68d9      	ldr	r1, [r3, #12]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753c:	461a      	mov	r2, r3
 800753e:	6838      	ldr	r0, [r7, #0]
 8007540:	f002 f9a0 	bl	8009884 <memcpy>
	}
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007554:	f001 fe5e 	bl	8009214 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800755e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007560:	e011      	b.n	8007586 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	2b00      	cmp	r3, #0
 8007568:	d012      	beq.n	8007590 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	3324      	adds	r3, #36	; 0x24
 800756e:	4618      	mov	r0, r3
 8007570:	f000 fd8c 	bl	800808c <xTaskRemoveFromEventList>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800757a:	f000 fec5 	bl	8008308 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800757e:	7bfb      	ldrb	r3, [r7, #15]
 8007580:	3b01      	subs	r3, #1
 8007582:	b2db      	uxtb	r3, r3
 8007584:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800758a:	2b00      	cmp	r3, #0
 800758c:	dce9      	bgt.n	8007562 <prvUnlockQueue+0x16>
 800758e:	e000      	b.n	8007592 <prvUnlockQueue+0x46>
					break;
 8007590:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	22ff      	movs	r2, #255	; 0xff
 8007596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800759a:	f001 fe6b 	bl	8009274 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800759e:	f001 fe39 	bl	8009214 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80075aa:	e011      	b.n	80075d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d012      	beq.n	80075da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	3310      	adds	r3, #16
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 fd67 	bl	800808c <xTaskRemoveFromEventList>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80075c4:	f000 fea0 	bl	8008308 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80075d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	dce9      	bgt.n	80075ac <prvUnlockQueue+0x60>
 80075d8:	e000      	b.n	80075dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80075da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	22ff      	movs	r2, #255	; 0xff
 80075e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80075e4:	f001 fe46 	bl	8009274 <vPortExitCritical>
}
 80075e8:	bf00      	nop
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075f8:	f001 fe0c 	bl	8009214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007604:	2301      	movs	r3, #1
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	e001      	b.n	800760e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800760e:	f001 fe31 	bl	8009274 <vPortExitCritical>

	return xReturn;
 8007612:	68fb      	ldr	r3, [r7, #12]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007624:	f001 fdf6 	bl	8009214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007630:	429a      	cmp	r2, r3
 8007632:	d102      	bne.n	800763a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007634:	2301      	movs	r3, #1
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	e001      	b.n	800763e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800763a:	2300      	movs	r3, #0
 800763c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800763e:	f001 fe19 	bl	8009274 <vPortExitCritical>

	return xReturn;
 8007642:	68fb      	ldr	r3, [r7, #12]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007656:	2300      	movs	r3, #0
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	e014      	b.n	8007686 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800765c:	4a0f      	ldr	r2, [pc, #60]	; (800769c <vQueueAddToRegistry+0x50>)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10b      	bne.n	8007680 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007668:	490c      	ldr	r1, [pc, #48]	; (800769c <vQueueAddToRegistry+0x50>)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007672:	4a0a      	ldr	r2, [pc, #40]	; (800769c <vQueueAddToRegistry+0x50>)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	4413      	add	r3, r2
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800767e:	e006      	b.n	800768e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3301      	adds	r3, #1
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2b07      	cmp	r3, #7
 800768a:	d9e7      	bls.n	800765c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800768c:	bf00      	nop
 800768e:	bf00      	nop
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	20004d2c 	.word	0x20004d2c

080076a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80076b0:	f001 fdb0 	bl	8009214 <vPortEnterCritical>
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076ba:	b25b      	sxtb	r3, r3
 80076bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c0:	d103      	bne.n	80076ca <vQueueWaitForMessageRestricted+0x2a>
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076d0:	b25b      	sxtb	r3, r3
 80076d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d6:	d103      	bne.n	80076e0 <vQueueWaitForMessageRestricted+0x40>
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076e0:	f001 fdc8 	bl	8009274 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d106      	bne.n	80076fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	3324      	adds	r3, #36	; 0x24
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 fc9d 	bl	8008034 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80076fa:	6978      	ldr	r0, [r7, #20]
 80076fc:	f7ff ff26 	bl	800754c <prvUnlockQueue>
	}
 8007700:	bf00      	nop
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007708:	b580      	push	{r7, lr}
 800770a:	b08e      	sub	sp, #56	; 0x38
 800770c:	af04      	add	r7, sp, #16
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <xTaskCreateStatic+0x2a>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	623b      	str	r3, [r7, #32]
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10a      	bne.n	800774e <xTaskCreateStatic+0x46>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	61fb      	str	r3, [r7, #28]
}
 800774a:	bf00      	nop
 800774c:	e7fe      	b.n	800774c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800774e:	23bc      	movs	r3, #188	; 0xbc
 8007750:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	2bbc      	cmp	r3, #188	; 0xbc
 8007756:	d00a      	beq.n	800776e <xTaskCreateStatic+0x66>
	__asm volatile
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	61bb      	str	r3, [r7, #24]
}
 800776a:	bf00      	nop
 800776c:	e7fe      	b.n	800776c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800776e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007772:	2b00      	cmp	r3, #0
 8007774:	d01e      	beq.n	80077b4 <xTaskCreateStatic+0xac>
 8007776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007778:	2b00      	cmp	r3, #0
 800777a:	d01b      	beq.n	80077b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800777c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007784:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	2202      	movs	r2, #2
 800778a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800778e:	2300      	movs	r3, #0
 8007790:	9303      	str	r3, [sp, #12]
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	9302      	str	r3, [sp, #8]
 8007796:	f107 0314 	add.w	r3, r7, #20
 800779a:	9301      	str	r3, [sp, #4]
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	68b9      	ldr	r1, [r7, #8]
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 f850 	bl	800784c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077ae:	f000 f8f3 	bl	8007998 <prvAddNewTaskToReadyList>
 80077b2:	e001      	b.n	80077b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80077b4:	2300      	movs	r3, #0
 80077b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80077b8:	697b      	ldr	r3, [r7, #20]
	}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3728      	adds	r7, #40	; 0x28
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b08c      	sub	sp, #48	; 0x30
 80077c6:	af04      	add	r7, sp, #16
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	603b      	str	r3, [r7, #0]
 80077ce:	4613      	mov	r3, r2
 80077d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80077d2:	88fb      	ldrh	r3, [r7, #6]
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4618      	mov	r0, r3
 80077d8:	f001 fe3e 	bl	8009458 <pvPortMalloc>
 80077dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00e      	beq.n	8007802 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80077e4:	20bc      	movs	r0, #188	; 0xbc
 80077e6:	f001 fe37 	bl	8009458 <pvPortMalloc>
 80077ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	631a      	str	r2, [r3, #48]	; 0x30
 80077f8:	e005      	b.n	8007806 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80077fa:	6978      	ldr	r0, [r7, #20]
 80077fc:	f001 fef8 	bl	80095f0 <vPortFree>
 8007800:	e001      	b.n	8007806 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d017      	beq.n	800783c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007814:	88fa      	ldrh	r2, [r7, #6]
 8007816:	2300      	movs	r3, #0
 8007818:	9303      	str	r3, [sp, #12]
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	9302      	str	r3, [sp, #8]
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	68b9      	ldr	r1, [r7, #8]
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 f80e 	bl	800784c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007830:	69f8      	ldr	r0, [r7, #28]
 8007832:	f000 f8b1 	bl	8007998 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007836:	2301      	movs	r3, #1
 8007838:	61bb      	str	r3, [r7, #24]
 800783a:	e002      	b.n	8007842 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800783c:	f04f 33ff 	mov.w	r3, #4294967295
 8007840:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007842:	69bb      	ldr	r3, [r7, #24]
	}
 8007844:	4618      	mov	r0, r3
 8007846:	3720      	adds	r7, #32
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b088      	sub	sp, #32
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
 8007858:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	461a      	mov	r2, r3
 8007864:	21a5      	movs	r1, #165	; 0xa5
 8007866:	f002 f81b 	bl	80098a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007874:	3b01      	subs	r3, #1
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	f023 0307 	bic.w	r3, r3, #7
 8007882:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	617b      	str	r3, [r7, #20]
}
 80078a0:	bf00      	nop
 80078a2:	e7fe      	b.n	80078a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d01f      	beq.n	80078ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078aa:	2300      	movs	r3, #0
 80078ac:	61fb      	str	r3, [r7, #28]
 80078ae:	e012      	b.n	80078d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	4413      	add	r3, r2
 80078b6:	7819      	ldrb	r1, [r3, #0]
 80078b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	4413      	add	r3, r2
 80078be:	3334      	adds	r3, #52	; 0x34
 80078c0:	460a      	mov	r2, r1
 80078c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	4413      	add	r3, r2
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d006      	beq.n	80078de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	3301      	adds	r3, #1
 80078d4:	61fb      	str	r3, [r7, #28]
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	2b0f      	cmp	r3, #15
 80078da:	d9e9      	bls.n	80078b0 <prvInitialiseNewTask+0x64>
 80078dc:	e000      	b.n	80078e0 <prvInitialiseNewTask+0x94>
			{
				break;
 80078de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80078e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078e8:	e003      	b.n	80078f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80078f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f4:	2b37      	cmp	r3, #55	; 0x37
 80078f6:	d901      	bls.n	80078fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80078f8:	2337      	movs	r3, #55	; 0x37
 80078fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007900:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007906:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	2200      	movs	r2, #0
 800790c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007910:	3304      	adds	r3, #4
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fee4 	bl	80066e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	3318      	adds	r3, #24
 800791c:	4618      	mov	r0, r3
 800791e:	f7fe fedf 	bl	80066e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007926:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007936:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	2200      	movs	r2, #0
 800793c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	2200      	movs	r2, #0
 8007944:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794a:	3354      	adds	r3, #84	; 0x54
 800794c:	2260      	movs	r2, #96	; 0x60
 800794e:	2100      	movs	r1, #0
 8007950:	4618      	mov	r0, r3
 8007952:	f001 ffa5 	bl	80098a0 <memset>
 8007956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007958:	4a0c      	ldr	r2, [pc, #48]	; (800798c <prvInitialiseNewTask+0x140>)
 800795a:	659a      	str	r2, [r3, #88]	; 0x58
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	4a0c      	ldr	r2, [pc, #48]	; (8007990 <prvInitialiseNewTask+0x144>)
 8007960:	65da      	str	r2, [r3, #92]	; 0x5c
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	4a0b      	ldr	r2, [pc, #44]	; (8007994 <prvInitialiseNewTask+0x148>)
 8007966:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	68f9      	ldr	r1, [r7, #12]
 800796c:	69b8      	ldr	r0, [r7, #24]
 800796e:	f001 fb25 	bl	8008fbc <pxPortInitialiseStack>
 8007972:	4602      	mov	r2, r0
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	2b00      	cmp	r3, #0
 800797c:	d002      	beq.n	8007984 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800797e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007982:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007984:	bf00      	nop
 8007986:	3720      	adds	r7, #32
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	0800a614 	.word	0x0800a614
 8007990:	0800a634 	.word	0x0800a634
 8007994:	0800a5f4 	.word	0x0800a5f4

08007998 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80079a0:	f001 fc38 	bl	8009214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80079a4:	4b2d      	ldr	r3, [pc, #180]	; (8007a5c <prvAddNewTaskToReadyList+0xc4>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3301      	adds	r3, #1
 80079aa:	4a2c      	ldr	r2, [pc, #176]	; (8007a5c <prvAddNewTaskToReadyList+0xc4>)
 80079ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80079ae:	4b2c      	ldr	r3, [pc, #176]	; (8007a60 <prvAddNewTaskToReadyList+0xc8>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d109      	bne.n	80079ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80079b6:	4a2a      	ldr	r2, [pc, #168]	; (8007a60 <prvAddNewTaskToReadyList+0xc8>)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80079bc:	4b27      	ldr	r3, [pc, #156]	; (8007a5c <prvAddNewTaskToReadyList+0xc4>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d110      	bne.n	80079e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80079c4:	f000 fcc4 	bl	8008350 <prvInitialiseTaskLists>
 80079c8:	e00d      	b.n	80079e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80079ca:	4b26      	ldr	r3, [pc, #152]	; (8007a64 <prvAddNewTaskToReadyList+0xcc>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d109      	bne.n	80079e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80079d2:	4b23      	ldr	r3, [pc, #140]	; (8007a60 <prvAddNewTaskToReadyList+0xc8>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079dc:	429a      	cmp	r2, r3
 80079de:	d802      	bhi.n	80079e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80079e0:	4a1f      	ldr	r2, [pc, #124]	; (8007a60 <prvAddNewTaskToReadyList+0xc8>)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80079e6:	4b20      	ldr	r3, [pc, #128]	; (8007a68 <prvAddNewTaskToReadyList+0xd0>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3301      	adds	r3, #1
 80079ec:	4a1e      	ldr	r2, [pc, #120]	; (8007a68 <prvAddNewTaskToReadyList+0xd0>)
 80079ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80079f0:	4b1d      	ldr	r3, [pc, #116]	; (8007a68 <prvAddNewTaskToReadyList+0xd0>)
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fc:	4b1b      	ldr	r3, [pc, #108]	; (8007a6c <prvAddNewTaskToReadyList+0xd4>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d903      	bls.n	8007a0c <prvAddNewTaskToReadyList+0x74>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a08:	4a18      	ldr	r2, [pc, #96]	; (8007a6c <prvAddNewTaskToReadyList+0xd4>)
 8007a0a:	6013      	str	r3, [r2, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a10:	4613      	mov	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4413      	add	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4a15      	ldr	r2, [pc, #84]	; (8007a70 <prvAddNewTaskToReadyList+0xd8>)
 8007a1a:	441a      	add	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3304      	adds	r3, #4
 8007a20:	4619      	mov	r1, r3
 8007a22:	4610      	mov	r0, r2
 8007a24:	f7fe fe69 	bl	80066fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a28:	f001 fc24 	bl	8009274 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a2c:	4b0d      	ldr	r3, [pc, #52]	; (8007a64 <prvAddNewTaskToReadyList+0xcc>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00e      	beq.n	8007a52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a34:	4b0a      	ldr	r3, [pc, #40]	; (8007a60 <prvAddNewTaskToReadyList+0xc8>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d207      	bcs.n	8007a52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a42:	4b0c      	ldr	r3, [pc, #48]	; (8007a74 <prvAddNewTaskToReadyList+0xdc>)
 8007a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a52:	bf00      	nop
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20000cfc 	.word	0x20000cfc
 8007a60:	20000828 	.word	0x20000828
 8007a64:	20000d08 	.word	0x20000d08
 8007a68:	20000d18 	.word	0x20000d18
 8007a6c:	20000d04 	.word	0x20000d04
 8007a70:	2000082c 	.word	0x2000082c
 8007a74:	e000ed04 	.word	0xe000ed04

08007a78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a80:	2300      	movs	r3, #0
 8007a82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d017      	beq.n	8007aba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a8a:	4b13      	ldr	r3, [pc, #76]	; (8007ad8 <vTaskDelay+0x60>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00a      	beq.n	8007aa8 <vTaskDelay+0x30>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	60bb      	str	r3, [r7, #8]
}
 8007aa4:	bf00      	nop
 8007aa6:	e7fe      	b.n	8007aa6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007aa8:	f000 f88a 	bl	8007bc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007aac:	2100      	movs	r1, #0
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fec2 	bl	8008838 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ab4:	f000 f892 	bl	8007bdc <xTaskResumeAll>
 8007ab8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d107      	bne.n	8007ad0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007ac0:	4b06      	ldr	r3, [pc, #24]	; (8007adc <vTaskDelay+0x64>)
 8007ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ad0:	bf00      	nop
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	20000d24 	.word	0x20000d24
 8007adc:	e000ed04 	.word	0xe000ed04

08007ae0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b08a      	sub	sp, #40	; 0x28
 8007ae4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007aee:	463a      	mov	r2, r7
 8007af0:	1d39      	adds	r1, r7, #4
 8007af2:	f107 0308 	add.w	r3, r7, #8
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe fbb0 	bl	800625c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	9202      	str	r2, [sp, #8]
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	2300      	movs	r3, #0
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	460a      	mov	r2, r1
 8007b0e:	4924      	ldr	r1, [pc, #144]	; (8007ba0 <vTaskStartScheduler+0xc0>)
 8007b10:	4824      	ldr	r0, [pc, #144]	; (8007ba4 <vTaskStartScheduler+0xc4>)
 8007b12:	f7ff fdf9 	bl	8007708 <xTaskCreateStatic>
 8007b16:	4603      	mov	r3, r0
 8007b18:	4a23      	ldr	r2, [pc, #140]	; (8007ba8 <vTaskStartScheduler+0xc8>)
 8007b1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b1c:	4b22      	ldr	r3, [pc, #136]	; (8007ba8 <vTaskStartScheduler+0xc8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b24:	2301      	movs	r3, #1
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	e001      	b.n	8007b2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d102      	bne.n	8007b3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007b34:	f000 fed4 	bl	80088e0 <xTimerCreateTimerTask>
 8007b38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d11b      	bne.n	8007b78 <vTaskStartScheduler+0x98>
	__asm volatile
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	613b      	str	r3, [r7, #16]
}
 8007b52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b54:	4b15      	ldr	r3, [pc, #84]	; (8007bac <vTaskStartScheduler+0xcc>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3354      	adds	r3, #84	; 0x54
 8007b5a:	4a15      	ldr	r2, [pc, #84]	; (8007bb0 <vTaskStartScheduler+0xd0>)
 8007b5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b5e:	4b15      	ldr	r3, [pc, #84]	; (8007bb4 <vTaskStartScheduler+0xd4>)
 8007b60:	f04f 32ff 	mov.w	r2, #4294967295
 8007b64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b66:	4b14      	ldr	r3, [pc, #80]	; (8007bb8 <vTaskStartScheduler+0xd8>)
 8007b68:	2201      	movs	r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b6c:	4b13      	ldr	r3, [pc, #76]	; (8007bbc <vTaskStartScheduler+0xdc>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b72:	f001 faad 	bl	80090d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b76:	e00e      	b.n	8007b96 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7e:	d10a      	bne.n	8007b96 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	60fb      	str	r3, [r7, #12]
}
 8007b92:	bf00      	nop
 8007b94:	e7fe      	b.n	8007b94 <vTaskStartScheduler+0xb4>
}
 8007b96:	bf00      	nop
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	0800a448 	.word	0x0800a448
 8007ba4:	08008321 	.word	0x08008321
 8007ba8:	20000d20 	.word	0x20000d20
 8007bac:	20000828 	.word	0x20000828
 8007bb0:	20000018 	.word	0x20000018
 8007bb4:	20000d1c 	.word	0x20000d1c
 8007bb8:	20000d08 	.word	0x20000d08
 8007bbc:	20000d00 	.word	0x20000d00

08007bc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007bc4:	4b04      	ldr	r3, [pc, #16]	; (8007bd8 <vTaskSuspendAll+0x18>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	4a03      	ldr	r2, [pc, #12]	; (8007bd8 <vTaskSuspendAll+0x18>)
 8007bcc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007bce:	bf00      	nop
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr
 8007bd8:	20000d24 	.word	0x20000d24

08007bdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007bea:	4b42      	ldr	r3, [pc, #264]	; (8007cf4 <xTaskResumeAll+0x118>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10a      	bne.n	8007c08 <xTaskResumeAll+0x2c>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	603b      	str	r3, [r7, #0]
}
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c08:	f001 fb04 	bl	8009214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c0c:	4b39      	ldr	r3, [pc, #228]	; (8007cf4 <xTaskResumeAll+0x118>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	4a38      	ldr	r2, [pc, #224]	; (8007cf4 <xTaskResumeAll+0x118>)
 8007c14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c16:	4b37      	ldr	r3, [pc, #220]	; (8007cf4 <xTaskResumeAll+0x118>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d162      	bne.n	8007ce4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c1e:	4b36      	ldr	r3, [pc, #216]	; (8007cf8 <xTaskResumeAll+0x11c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d05e      	beq.n	8007ce4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c26:	e02f      	b.n	8007c88 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c28:	4b34      	ldr	r3, [pc, #208]	; (8007cfc <xTaskResumeAll+0x120>)
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3318      	adds	r3, #24
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7fe fdbd 	bl	80067b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fe fdb8 	bl	80067b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c48:	4b2d      	ldr	r3, [pc, #180]	; (8007d00 <xTaskResumeAll+0x124>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d903      	bls.n	8007c58 <xTaskResumeAll+0x7c>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	4a2a      	ldr	r2, [pc, #168]	; (8007d00 <xTaskResumeAll+0x124>)
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4a27      	ldr	r2, [pc, #156]	; (8007d04 <xTaskResumeAll+0x128>)
 8007c66:	441a      	add	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	4610      	mov	r0, r2
 8007c70:	f7fe fd43 	bl	80066fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c78:	4b23      	ldr	r3, [pc, #140]	; (8007d08 <xTaskResumeAll+0x12c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d302      	bcc.n	8007c88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007c82:	4b22      	ldr	r3, [pc, #136]	; (8007d0c <xTaskResumeAll+0x130>)
 8007c84:	2201      	movs	r2, #1
 8007c86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c88:	4b1c      	ldr	r3, [pc, #112]	; (8007cfc <xTaskResumeAll+0x120>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1cb      	bne.n	8007c28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c96:	f000 fbfd 	bl	8008494 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c9a:	4b1d      	ldr	r3, [pc, #116]	; (8007d10 <xTaskResumeAll+0x134>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d010      	beq.n	8007cc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ca6:	f000 f847 	bl	8007d38 <xTaskIncrementTick>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007cb0:	4b16      	ldr	r3, [pc, #88]	; (8007d0c <xTaskResumeAll+0x130>)
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1f1      	bne.n	8007ca6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007cc2:	4b13      	ldr	r3, [pc, #76]	; (8007d10 <xTaskResumeAll+0x134>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007cc8:	4b10      	ldr	r3, [pc, #64]	; (8007d0c <xTaskResumeAll+0x130>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d009      	beq.n	8007ce4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007cd4:	4b0f      	ldr	r3, [pc, #60]	; (8007d14 <xTaskResumeAll+0x138>)
 8007cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ce4:	f001 fac6 	bl	8009274 <vPortExitCritical>

	return xAlreadyYielded;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20000d24 	.word	0x20000d24
 8007cf8:	20000cfc 	.word	0x20000cfc
 8007cfc:	20000cbc 	.word	0x20000cbc
 8007d00:	20000d04 	.word	0x20000d04
 8007d04:	2000082c 	.word	0x2000082c
 8007d08:	20000828 	.word	0x20000828
 8007d0c:	20000d10 	.word	0x20000d10
 8007d10:	20000d0c 	.word	0x20000d0c
 8007d14:	e000ed04 	.word	0xe000ed04

08007d18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d1e:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <xTaskGetTickCount+0x1c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d24:	687b      	ldr	r3, [r7, #4]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	20000d00 	.word	0x20000d00

08007d38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d42:	4b4f      	ldr	r3, [pc, #316]	; (8007e80 <xTaskIncrementTick+0x148>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f040 808f 	bne.w	8007e6a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d4c:	4b4d      	ldr	r3, [pc, #308]	; (8007e84 <xTaskIncrementTick+0x14c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3301      	adds	r3, #1
 8007d52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d54:	4a4b      	ldr	r2, [pc, #300]	; (8007e84 <xTaskIncrementTick+0x14c>)
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d120      	bne.n	8007da2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d60:	4b49      	ldr	r3, [pc, #292]	; (8007e88 <xTaskIncrementTick+0x150>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <xTaskIncrementTick+0x48>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	603b      	str	r3, [r7, #0]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <xTaskIncrementTick+0x46>
 8007d80:	4b41      	ldr	r3, [pc, #260]	; (8007e88 <xTaskIncrementTick+0x150>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	4b41      	ldr	r3, [pc, #260]	; (8007e8c <xTaskIncrementTick+0x154>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a3f      	ldr	r2, [pc, #252]	; (8007e88 <xTaskIncrementTick+0x150>)
 8007d8c:	6013      	str	r3, [r2, #0]
 8007d8e:	4a3f      	ldr	r2, [pc, #252]	; (8007e8c <xTaskIncrementTick+0x154>)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	4b3e      	ldr	r3, [pc, #248]	; (8007e90 <xTaskIncrementTick+0x158>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	4a3d      	ldr	r2, [pc, #244]	; (8007e90 <xTaskIncrementTick+0x158>)
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	f000 fb79 	bl	8008494 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007da2:	4b3c      	ldr	r3, [pc, #240]	; (8007e94 <xTaskIncrementTick+0x15c>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d349      	bcc.n	8007e40 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dac:	4b36      	ldr	r3, [pc, #216]	; (8007e88 <xTaskIncrementTick+0x150>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d104      	bne.n	8007dc0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007db6:	4b37      	ldr	r3, [pc, #220]	; (8007e94 <xTaskIncrementTick+0x15c>)
 8007db8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbc:	601a      	str	r2, [r3, #0]
					break;
 8007dbe:	e03f      	b.n	8007e40 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dc0:	4b31      	ldr	r3, [pc, #196]	; (8007e88 <xTaskIncrementTick+0x150>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d203      	bcs.n	8007de0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007dd8:	4a2e      	ldr	r2, [pc, #184]	; (8007e94 <xTaskIncrementTick+0x15c>)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007dde:	e02f      	b.n	8007e40 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	3304      	adds	r3, #4
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fe fce5 	bl	80067b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d004      	beq.n	8007dfc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	3318      	adds	r3, #24
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fe fcdc 	bl	80067b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e00:	4b25      	ldr	r3, [pc, #148]	; (8007e98 <xTaskIncrementTick+0x160>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d903      	bls.n	8007e10 <xTaskIncrementTick+0xd8>
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0c:	4a22      	ldr	r2, [pc, #136]	; (8007e98 <xTaskIncrementTick+0x160>)
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e14:	4613      	mov	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4a1f      	ldr	r2, [pc, #124]	; (8007e9c <xTaskIncrementTick+0x164>)
 8007e1e:	441a      	add	r2, r3
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	3304      	adds	r3, #4
 8007e24:	4619      	mov	r1, r3
 8007e26:	4610      	mov	r0, r2
 8007e28:	f7fe fc67 	bl	80066fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e30:	4b1b      	ldr	r3, [pc, #108]	; (8007ea0 <xTaskIncrementTick+0x168>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d3b8      	bcc.n	8007dac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e3e:	e7b5      	b.n	8007dac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e40:	4b17      	ldr	r3, [pc, #92]	; (8007ea0 <xTaskIncrementTick+0x168>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e46:	4915      	ldr	r1, [pc, #84]	; (8007e9c <xTaskIncrementTick+0x164>)
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	440b      	add	r3, r1
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d901      	bls.n	8007e5c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007e5c:	4b11      	ldr	r3, [pc, #68]	; (8007ea4 <xTaskIncrementTick+0x16c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d007      	beq.n	8007e74 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007e64:	2301      	movs	r3, #1
 8007e66:	617b      	str	r3, [r7, #20]
 8007e68:	e004      	b.n	8007e74 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ea8 <xTaskIncrementTick+0x170>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	4a0d      	ldr	r2, [pc, #52]	; (8007ea8 <xTaskIncrementTick+0x170>)
 8007e72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007e74:	697b      	ldr	r3, [r7, #20]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20000d24 	.word	0x20000d24
 8007e84:	20000d00 	.word	0x20000d00
 8007e88:	20000cb4 	.word	0x20000cb4
 8007e8c:	20000cb8 	.word	0x20000cb8
 8007e90:	20000d14 	.word	0x20000d14
 8007e94:	20000d1c 	.word	0x20000d1c
 8007e98:	20000d04 	.word	0x20000d04
 8007e9c:	2000082c 	.word	0x2000082c
 8007ea0:	20000828 	.word	0x20000828
 8007ea4:	20000d10 	.word	0x20000d10
 8007ea8:	20000d0c 	.word	0x20000d0c

08007eac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007eb2:	4b2a      	ldr	r3, [pc, #168]	; (8007f5c <vTaskSwitchContext+0xb0>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007eba:	4b29      	ldr	r3, [pc, #164]	; (8007f60 <vTaskSwitchContext+0xb4>)
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ec0:	e046      	b.n	8007f50 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007ec2:	4b27      	ldr	r3, [pc, #156]	; (8007f60 <vTaskSwitchContext+0xb4>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec8:	4b26      	ldr	r3, [pc, #152]	; (8007f64 <vTaskSwitchContext+0xb8>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	60fb      	str	r3, [r7, #12]
 8007ece:	e010      	b.n	8007ef2 <vTaskSwitchContext+0x46>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10a      	bne.n	8007eec <vTaskSwitchContext+0x40>
	__asm volatile
 8007ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	607b      	str	r3, [r7, #4]
}
 8007ee8:	bf00      	nop
 8007eea:	e7fe      	b.n	8007eea <vTaskSwitchContext+0x3e>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	491d      	ldr	r1, [pc, #116]	; (8007f68 <vTaskSwitchContext+0xbc>)
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	440b      	add	r3, r1
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d0e4      	beq.n	8007ed0 <vTaskSwitchContext+0x24>
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4413      	add	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4a15      	ldr	r2, [pc, #84]	; (8007f68 <vTaskSwitchContext+0xbc>)
 8007f12:	4413      	add	r3, r2
 8007f14:	60bb      	str	r3, [r7, #8]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	605a      	str	r2, [r3, #4]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	3308      	adds	r3, #8
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d104      	bne.n	8007f36 <vTaskSwitchContext+0x8a>
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	605a      	str	r2, [r3, #4]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	4a0b      	ldr	r2, [pc, #44]	; (8007f6c <vTaskSwitchContext+0xc0>)
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	4a08      	ldr	r2, [pc, #32]	; (8007f64 <vTaskSwitchContext+0xb8>)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f46:	4b09      	ldr	r3, [pc, #36]	; (8007f6c <vTaskSwitchContext+0xc0>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3354      	adds	r3, #84	; 0x54
 8007f4c:	4a08      	ldr	r2, [pc, #32]	; (8007f70 <vTaskSwitchContext+0xc4>)
 8007f4e:	6013      	str	r3, [r2, #0]
}
 8007f50:	bf00      	nop
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	20000d24 	.word	0x20000d24
 8007f60:	20000d10 	.word	0x20000d10
 8007f64:	20000d04 	.word	0x20000d04
 8007f68:	2000082c 	.word	0x2000082c
 8007f6c:	20000828 	.word	0x20000828
 8007f70:	20000018 	.word	0x20000018

08007f74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10a      	bne.n	8007f9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	60fb      	str	r3, [r7, #12]
}
 8007f96:	bf00      	nop
 8007f98:	e7fe      	b.n	8007f98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f9a:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <vTaskPlaceOnEventList+0x44>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3318      	adds	r3, #24
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7fe fbcd 	bl	8006742 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007fa8:	2101      	movs	r1, #1
 8007faa:	6838      	ldr	r0, [r7, #0]
 8007fac:	f000 fc44 	bl	8008838 <prvAddCurrentTaskToDelayedList>
}
 8007fb0:	bf00      	nop
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20000828 	.word	0x20000828

08007fbc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10a      	bne.n	8007fe4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	617b      	str	r3, [r7, #20]
}
 8007fe0:	bf00      	nop
 8007fe2:	e7fe      	b.n	8007fe2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007fe4:	4b11      	ldr	r3, [pc, #68]	; (800802c <vTaskPlaceOnUnorderedEventList+0x70>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d10a      	bne.n	8008002 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	613b      	str	r3, [r7, #16]
}
 8007ffe:	bf00      	nop
 8008000:	e7fe      	b.n	8008000 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008002:	4b0b      	ldr	r3, [pc, #44]	; (8008030 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800800c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800800e:	4b08      	ldr	r3, [pc, #32]	; (8008030 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3318      	adds	r3, #24
 8008014:	4619      	mov	r1, r3
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f7fe fb6f 	bl	80066fa <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800801c:	2101      	movs	r1, #1
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fc0a 	bl	8008838 <prvAddCurrentTaskToDelayedList>
}
 8008024:	bf00      	nop
 8008026:	3718      	adds	r7, #24
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	20000d24 	.word	0x20000d24
 8008030:	20000828 	.word	0x20000828

08008034 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10a      	bne.n	800805c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	617b      	str	r3, [r7, #20]
}
 8008058:	bf00      	nop
 800805a:	e7fe      	b.n	800805a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800805c:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <vTaskPlaceOnEventListRestricted+0x54>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3318      	adds	r3, #24
 8008062:	4619      	mov	r1, r3
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f7fe fb48 	bl	80066fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008070:	f04f 33ff 	mov.w	r3, #4294967295
 8008074:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	68b8      	ldr	r0, [r7, #8]
 800807a:	f000 fbdd 	bl	8008838 <prvAddCurrentTaskToDelayedList>
	}
 800807e:	bf00      	nop
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	20000828 	.word	0x20000828

0800808c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10a      	bne.n	80080b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	60fb      	str	r3, [r7, #12]
}
 80080b4:	bf00      	nop
 80080b6:	e7fe      	b.n	80080b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	3318      	adds	r3, #24
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fe fb79 	bl	80067b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080c2:	4b1e      	ldr	r3, [pc, #120]	; (800813c <xTaskRemoveFromEventList+0xb0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d11d      	bne.n	8008106 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	3304      	adds	r3, #4
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fe fb70 	bl	80067b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d8:	4b19      	ldr	r3, [pc, #100]	; (8008140 <xTaskRemoveFromEventList+0xb4>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d903      	bls.n	80080e8 <xTaskRemoveFromEventList+0x5c>
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e4:	4a16      	ldr	r2, [pc, #88]	; (8008140 <xTaskRemoveFromEventList+0xb4>)
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ec:	4613      	mov	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4a13      	ldr	r2, [pc, #76]	; (8008144 <xTaskRemoveFromEventList+0xb8>)
 80080f6:	441a      	add	r2, r3
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	3304      	adds	r3, #4
 80080fc:	4619      	mov	r1, r3
 80080fe:	4610      	mov	r0, r2
 8008100:	f7fe fafb 	bl	80066fa <vListInsertEnd>
 8008104:	e005      	b.n	8008112 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	3318      	adds	r3, #24
 800810a:	4619      	mov	r1, r3
 800810c:	480e      	ldr	r0, [pc, #56]	; (8008148 <xTaskRemoveFromEventList+0xbc>)
 800810e:	f7fe faf4 	bl	80066fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008116:	4b0d      	ldr	r3, [pc, #52]	; (800814c <xTaskRemoveFromEventList+0xc0>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811c:	429a      	cmp	r2, r3
 800811e:	d905      	bls.n	800812c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008120:	2301      	movs	r3, #1
 8008122:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008124:	4b0a      	ldr	r3, [pc, #40]	; (8008150 <xTaskRemoveFromEventList+0xc4>)
 8008126:	2201      	movs	r2, #1
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	e001      	b.n	8008130 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800812c:	2300      	movs	r3, #0
 800812e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008130:	697b      	ldr	r3, [r7, #20]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3718      	adds	r7, #24
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	20000d24 	.word	0x20000d24
 8008140:	20000d04 	.word	0x20000d04
 8008144:	2000082c 	.word	0x2000082c
 8008148:	20000cbc 	.word	0x20000cbc
 800814c:	20000828 	.word	0x20000828
 8008150:	20000d10 	.word	0x20000d10

08008154 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800815e:	4b29      	ldr	r3, [pc, #164]	; (8008204 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10a      	bne.n	800817c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	613b      	str	r3, [r7, #16]
}
 8008178:	bf00      	nop
 800817a:	e7fe      	b.n	800817a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10a      	bne.n	80081a8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	60fb      	str	r3, [r7, #12]
}
 80081a4:	bf00      	nop
 80081a6:	e7fe      	b.n	80081a6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7fe fb03 	bl	80067b4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	3304      	adds	r3, #4
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe fafe 	bl	80067b4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081bc:	4b12      	ldr	r3, [pc, #72]	; (8008208 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d903      	bls.n	80081cc <vTaskRemoveFromUnorderedEventList+0x78>
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	4a0f      	ldr	r2, [pc, #60]	; (8008208 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d0:	4613      	mov	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4a0c      	ldr	r2, [pc, #48]	; (800820c <vTaskRemoveFromUnorderedEventList+0xb8>)
 80081da:	441a      	add	r2, r3
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	3304      	adds	r3, #4
 80081e0:	4619      	mov	r1, r3
 80081e2:	4610      	mov	r0, r2
 80081e4:	f7fe fa89 	bl	80066fa <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ec:	4b08      	ldr	r3, [pc, #32]	; (8008210 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d902      	bls.n	80081fc <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80081f6:	4b07      	ldr	r3, [pc, #28]	; (8008214 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80081f8:	2201      	movs	r2, #1
 80081fa:	601a      	str	r2, [r3, #0]
	}
}
 80081fc:	bf00      	nop
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	20000d24 	.word	0x20000d24
 8008208:	20000d04 	.word	0x20000d04
 800820c:	2000082c 	.word	0x2000082c
 8008210:	20000828 	.word	0x20000828
 8008214:	20000d10 	.word	0x20000d10

08008218 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008220:	4b06      	ldr	r3, [pc, #24]	; (800823c <vTaskInternalSetTimeOutState+0x24>)
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008228:	4b05      	ldr	r3, [pc, #20]	; (8008240 <vTaskInternalSetTimeOutState+0x28>)
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	605a      	str	r2, [r3, #4]
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	20000d14 	.word	0x20000d14
 8008240:	20000d00 	.word	0x20000d00

08008244 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10a      	bne.n	800826a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	613b      	str	r3, [r7, #16]
}
 8008266:	bf00      	nop
 8008268:	e7fe      	b.n	8008268 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	60fb      	str	r3, [r7, #12]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008286:	f000 ffc5 	bl	8009214 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800828a:	4b1d      	ldr	r3, [pc, #116]	; (8008300 <xTaskCheckForTimeOut+0xbc>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a2:	d102      	bne.n	80082aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61fb      	str	r3, [r7, #28]
 80082a8:	e023      	b.n	80082f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	4b15      	ldr	r3, [pc, #84]	; (8008304 <xTaskCheckForTimeOut+0xc0>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d007      	beq.n	80082c6 <xTaskCheckForTimeOut+0x82>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	69ba      	ldr	r2, [r7, #24]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d302      	bcc.n	80082c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80082c0:	2301      	movs	r3, #1
 80082c2:	61fb      	str	r3, [r7, #28]
 80082c4:	e015      	b.n	80082f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d20b      	bcs.n	80082e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	1ad2      	subs	r2, r2, r3
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7ff ff9b 	bl	8008218 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80082e2:	2300      	movs	r3, #0
 80082e4:	61fb      	str	r3, [r7, #28]
 80082e6:	e004      	b.n	80082f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	2200      	movs	r2, #0
 80082ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80082ee:	2301      	movs	r3, #1
 80082f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80082f2:	f000 ffbf 	bl	8009274 <vPortExitCritical>

	return xReturn;
 80082f6:	69fb      	ldr	r3, [r7, #28]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3720      	adds	r7, #32
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	20000d00 	.word	0x20000d00
 8008304:	20000d14 	.word	0x20000d14

08008308 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008308:	b480      	push	{r7}
 800830a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800830c:	4b03      	ldr	r3, [pc, #12]	; (800831c <vTaskMissedYield+0x14>)
 800830e:	2201      	movs	r2, #1
 8008310:	601a      	str	r2, [r3, #0]
}
 8008312:	bf00      	nop
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	20000d10 	.word	0x20000d10

08008320 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008328:	f000 f852 	bl	80083d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800832c:	4b06      	ldr	r3, [pc, #24]	; (8008348 <prvIdleTask+0x28>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d9f9      	bls.n	8008328 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008334:	4b05      	ldr	r3, [pc, #20]	; (800834c <prvIdleTask+0x2c>)
 8008336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008344:	e7f0      	b.n	8008328 <prvIdleTask+0x8>
 8008346:	bf00      	nop
 8008348:	2000082c 	.word	0x2000082c
 800834c:	e000ed04 	.word	0xe000ed04

08008350 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008356:	2300      	movs	r3, #0
 8008358:	607b      	str	r3, [r7, #4]
 800835a:	e00c      	b.n	8008376 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	4613      	mov	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4a12      	ldr	r2, [pc, #72]	; (80083b0 <prvInitialiseTaskLists+0x60>)
 8008368:	4413      	add	r3, r2
 800836a:	4618      	mov	r0, r3
 800836c:	f7fe f998 	bl	80066a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3301      	adds	r3, #1
 8008374:	607b      	str	r3, [r7, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b37      	cmp	r3, #55	; 0x37
 800837a:	d9ef      	bls.n	800835c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800837c:	480d      	ldr	r0, [pc, #52]	; (80083b4 <prvInitialiseTaskLists+0x64>)
 800837e:	f7fe f98f 	bl	80066a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008382:	480d      	ldr	r0, [pc, #52]	; (80083b8 <prvInitialiseTaskLists+0x68>)
 8008384:	f7fe f98c 	bl	80066a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008388:	480c      	ldr	r0, [pc, #48]	; (80083bc <prvInitialiseTaskLists+0x6c>)
 800838a:	f7fe f989 	bl	80066a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800838e:	480c      	ldr	r0, [pc, #48]	; (80083c0 <prvInitialiseTaskLists+0x70>)
 8008390:	f7fe f986 	bl	80066a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008394:	480b      	ldr	r0, [pc, #44]	; (80083c4 <prvInitialiseTaskLists+0x74>)
 8008396:	f7fe f983 	bl	80066a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800839a:	4b0b      	ldr	r3, [pc, #44]	; (80083c8 <prvInitialiseTaskLists+0x78>)
 800839c:	4a05      	ldr	r2, [pc, #20]	; (80083b4 <prvInitialiseTaskLists+0x64>)
 800839e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083a0:	4b0a      	ldr	r3, [pc, #40]	; (80083cc <prvInitialiseTaskLists+0x7c>)
 80083a2:	4a05      	ldr	r2, [pc, #20]	; (80083b8 <prvInitialiseTaskLists+0x68>)
 80083a4:	601a      	str	r2, [r3, #0]
}
 80083a6:	bf00      	nop
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	2000082c 	.word	0x2000082c
 80083b4:	20000c8c 	.word	0x20000c8c
 80083b8:	20000ca0 	.word	0x20000ca0
 80083bc:	20000cbc 	.word	0x20000cbc
 80083c0:	20000cd0 	.word	0x20000cd0
 80083c4:	20000ce8 	.word	0x20000ce8
 80083c8:	20000cb4 	.word	0x20000cb4
 80083cc:	20000cb8 	.word	0x20000cb8

080083d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083d6:	e019      	b.n	800840c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083d8:	f000 ff1c 	bl	8009214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083dc:	4b10      	ldr	r3, [pc, #64]	; (8008420 <prvCheckTasksWaitingTermination+0x50>)
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3304      	adds	r3, #4
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe f9e3 	bl	80067b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80083ee:	4b0d      	ldr	r3, [pc, #52]	; (8008424 <prvCheckTasksWaitingTermination+0x54>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3b01      	subs	r3, #1
 80083f4:	4a0b      	ldr	r2, [pc, #44]	; (8008424 <prvCheckTasksWaitingTermination+0x54>)
 80083f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083f8:	4b0b      	ldr	r3, [pc, #44]	; (8008428 <prvCheckTasksWaitingTermination+0x58>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	4a0a      	ldr	r2, [pc, #40]	; (8008428 <prvCheckTasksWaitingTermination+0x58>)
 8008400:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008402:	f000 ff37 	bl	8009274 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f810 	bl	800842c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800840c:	4b06      	ldr	r3, [pc, #24]	; (8008428 <prvCheckTasksWaitingTermination+0x58>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1e1      	bne.n	80083d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20000cd0 	.word	0x20000cd0
 8008424:	20000cfc 	.word	0x20000cfc
 8008428:	20000ce4 	.word	0x20000ce4

0800842c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3354      	adds	r3, #84	; 0x54
 8008438:	4618      	mov	r0, r3
 800843a:	f001 faa1 	bl	8009980 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008444:	2b00      	cmp	r3, #0
 8008446:	d108      	bne.n	800845a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844c:	4618      	mov	r0, r3
 800844e:	f001 f8cf 	bl	80095f0 <vPortFree>
				vPortFree( pxTCB );
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f001 f8cc 	bl	80095f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008458:	e018      	b.n	800848c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008460:	2b01      	cmp	r3, #1
 8008462:	d103      	bne.n	800846c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f001 f8c3 	bl	80095f0 <vPortFree>
	}
 800846a:	e00f      	b.n	800848c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008472:	2b02      	cmp	r3, #2
 8008474:	d00a      	beq.n	800848c <prvDeleteTCB+0x60>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	60fb      	str	r3, [r7, #12]
}
 8008488:	bf00      	nop
 800848a:	e7fe      	b.n	800848a <prvDeleteTCB+0x5e>
	}
 800848c:	bf00      	nop
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800849a:	4b0c      	ldr	r3, [pc, #48]	; (80084cc <prvResetNextTaskUnblockTime+0x38>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d104      	bne.n	80084ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084a4:	4b0a      	ldr	r3, [pc, #40]	; (80084d0 <prvResetNextTaskUnblockTime+0x3c>)
 80084a6:	f04f 32ff 	mov.w	r2, #4294967295
 80084aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084ac:	e008      	b.n	80084c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ae:	4b07      	ldr	r3, [pc, #28]	; (80084cc <prvResetNextTaskUnblockTime+0x38>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	4a04      	ldr	r2, [pc, #16]	; (80084d0 <prvResetNextTaskUnblockTime+0x3c>)
 80084be:	6013      	str	r3, [r2, #0]
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	20000cb4 	.word	0x20000cb4
 80084d0:	20000d1c 	.word	0x20000d1c

080084d4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80084da:	4b05      	ldr	r3, [pc, #20]	; (80084f0 <xTaskGetCurrentTaskHandle+0x1c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	607b      	str	r3, [r7, #4]

		return xReturn;
 80084e0:	687b      	ldr	r3, [r7, #4]
	}
 80084e2:	4618      	mov	r0, r3
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	20000828 	.word	0x20000828

080084f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084fa:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <xTaskGetSchedulerState+0x34>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d102      	bne.n	8008508 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008502:	2301      	movs	r3, #1
 8008504:	607b      	str	r3, [r7, #4]
 8008506:	e008      	b.n	800851a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008508:	4b08      	ldr	r3, [pc, #32]	; (800852c <xTaskGetSchedulerState+0x38>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d102      	bne.n	8008516 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008510:	2302      	movs	r3, #2
 8008512:	607b      	str	r3, [r7, #4]
 8008514:	e001      	b.n	800851a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008516:	2300      	movs	r3, #0
 8008518:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800851a:	687b      	ldr	r3, [r7, #4]
	}
 800851c:	4618      	mov	r0, r3
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	20000d08 	.word	0x20000d08
 800852c:	20000d24 	.word	0x20000d24

08008530 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800853c:	2300      	movs	r3, #0
 800853e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d051      	beq.n	80085ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800854a:	4b2a      	ldr	r3, [pc, #168]	; (80085f4 <xTaskPriorityInherit+0xc4>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008550:	429a      	cmp	r2, r3
 8008552:	d241      	bcs.n	80085d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	2b00      	cmp	r3, #0
 800855a:	db06      	blt.n	800856a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800855c:	4b25      	ldr	r3, [pc, #148]	; (80085f4 <xTaskPriorityInherit+0xc4>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008562:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	6959      	ldr	r1, [r3, #20]
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008572:	4613      	mov	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4413      	add	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4a1f      	ldr	r2, [pc, #124]	; (80085f8 <xTaskPriorityInherit+0xc8>)
 800857c:	4413      	add	r3, r2
 800857e:	4299      	cmp	r1, r3
 8008580:	d122      	bne.n	80085c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	3304      	adds	r3, #4
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe f914 	bl	80067b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800858c:	4b19      	ldr	r3, [pc, #100]	; (80085f4 <xTaskPriorityInherit+0xc4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859a:	4b18      	ldr	r3, [pc, #96]	; (80085fc <xTaskPriorityInherit+0xcc>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d903      	bls.n	80085aa <xTaskPriorityInherit+0x7a>
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a6:	4a15      	ldr	r2, [pc, #84]	; (80085fc <xTaskPriorityInherit+0xcc>)
 80085a8:	6013      	str	r3, [r2, #0]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ae:	4613      	mov	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4a10      	ldr	r2, [pc, #64]	; (80085f8 <xTaskPriorityInherit+0xc8>)
 80085b8:	441a      	add	r2, r3
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	3304      	adds	r3, #4
 80085be:	4619      	mov	r1, r3
 80085c0:	4610      	mov	r0, r2
 80085c2:	f7fe f89a 	bl	80066fa <vListInsertEnd>
 80085c6:	e004      	b.n	80085d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085c8:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <xTaskPriorityInherit+0xc4>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80085d2:	2301      	movs	r3, #1
 80085d4:	60fb      	str	r3, [r7, #12]
 80085d6:	e008      	b.n	80085ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085dc:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <xTaskPriorityInherit+0xc4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d201      	bcs.n	80085ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80085e6:	2301      	movs	r3, #1
 80085e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085ea:	68fb      	ldr	r3, [r7, #12]
	}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	20000828 	.word	0x20000828
 80085f8:	2000082c 	.word	0x2000082c
 80085fc:	20000d04 	.word	0x20000d04

08008600 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800860c:	2300      	movs	r3, #0
 800860e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d056      	beq.n	80086c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008616:	4b2e      	ldr	r3, [pc, #184]	; (80086d0 <xTaskPriorityDisinherit+0xd0>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	429a      	cmp	r2, r3
 800861e:	d00a      	beq.n	8008636 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	60fb      	str	r3, [r7, #12]
}
 8008632:	bf00      	nop
 8008634:	e7fe      	b.n	8008634 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10a      	bne.n	8008654 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	60bb      	str	r3, [r7, #8]
}
 8008650:	bf00      	nop
 8008652:	e7fe      	b.n	8008652 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008658:	1e5a      	subs	r2, r3, #1
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008666:	429a      	cmp	r2, r3
 8008668:	d02c      	beq.n	80086c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800866e:	2b00      	cmp	r3, #0
 8008670:	d128      	bne.n	80086c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	3304      	adds	r3, #4
 8008676:	4618      	mov	r0, r3
 8008678:	f7fe f89c 	bl	80067b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008688:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008694:	4b0f      	ldr	r3, [pc, #60]	; (80086d4 <xTaskPriorityDisinherit+0xd4>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	429a      	cmp	r2, r3
 800869a:	d903      	bls.n	80086a4 <xTaskPriorityDisinherit+0xa4>
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	4a0c      	ldr	r2, [pc, #48]	; (80086d4 <xTaskPriorityDisinherit+0xd4>)
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4a09      	ldr	r2, [pc, #36]	; (80086d8 <xTaskPriorityDisinherit+0xd8>)
 80086b2:	441a      	add	r2, r3
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	3304      	adds	r3, #4
 80086b8:	4619      	mov	r1, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	f7fe f81d 	bl	80066fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086c0:	2301      	movs	r3, #1
 80086c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086c4:	697b      	ldr	r3, [r7, #20]
	}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	20000828 	.word	0x20000828
 80086d4:	20000d04 	.word	0x20000d04
 80086d8:	2000082c 	.word	0x2000082c

080086dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b088      	sub	sp, #32
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80086ea:	2301      	movs	r3, #1
 80086ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d06a      	beq.n	80087ca <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10a      	bne.n	8008712 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80086fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	60fb      	str	r3, [r7, #12]
}
 800870e:	bf00      	nop
 8008710:	e7fe      	b.n	8008710 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	429a      	cmp	r2, r3
 800871a:	d902      	bls.n	8008722 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	61fb      	str	r3, [r7, #28]
 8008720:	e002      	b.n	8008728 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008726:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872c:	69fa      	ldr	r2, [r7, #28]
 800872e:	429a      	cmp	r2, r3
 8008730:	d04b      	beq.n	80087ca <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	429a      	cmp	r2, r3
 800873a:	d146      	bne.n	80087ca <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800873c:	4b25      	ldr	r3, [pc, #148]	; (80087d4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	429a      	cmp	r2, r3
 8008744:	d10a      	bne.n	800875c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	60bb      	str	r3, [r7, #8]
}
 8008758:	bf00      	nop
 800875a:	e7fe      	b.n	800875a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008760:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	69fa      	ldr	r2, [r7, #28]
 8008766:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	2b00      	cmp	r3, #0
 800876e:	db04      	blt.n	800877a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	6959      	ldr	r1, [r3, #20]
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	4613      	mov	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4a13      	ldr	r2, [pc, #76]	; (80087d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800878a:	4413      	add	r3, r2
 800878c:	4299      	cmp	r1, r3
 800878e:	d11c      	bne.n	80087ca <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	3304      	adds	r3, #4
 8008794:	4618      	mov	r0, r3
 8008796:	f7fe f80d 	bl	80067b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879e:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d903      	bls.n	80087ae <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087aa:	4a0c      	ldr	r2, [pc, #48]	; (80087dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b2:	4613      	mov	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4a07      	ldr	r2, [pc, #28]	; (80087d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80087bc:	441a      	add	r2, r3
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	3304      	adds	r3, #4
 80087c2:	4619      	mov	r1, r3
 80087c4:	4610      	mov	r0, r2
 80087c6:	f7fd ff98 	bl	80066fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087ca:	bf00      	nop
 80087cc:	3720      	adds	r7, #32
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20000828 	.word	0x20000828
 80087d8:	2000082c 	.word	0x2000082c
 80087dc:	20000d04 	.word	0x20000d04

080087e0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80087e6:	4b09      	ldr	r3, [pc, #36]	; (800880c <uxTaskResetEventItemValue+0x2c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ee:	4b07      	ldr	r3, [pc, #28]	; (800880c <uxTaskResetEventItemValue+0x2c>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f4:	4b05      	ldr	r3, [pc, #20]	; (800880c <uxTaskResetEventItemValue+0x2c>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80087fc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80087fe:	687b      	ldr	r3, [r7, #4]
}
 8008800:	4618      	mov	r0, r3
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	20000828 	.word	0x20000828

08008810 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008810:	b480      	push	{r7}
 8008812:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008814:	4b07      	ldr	r3, [pc, #28]	; (8008834 <pvTaskIncrementMutexHeldCount+0x24>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d004      	beq.n	8008826 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800881c:	4b05      	ldr	r3, [pc, #20]	; (8008834 <pvTaskIncrementMutexHeldCount+0x24>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008822:	3201      	adds	r2, #1
 8008824:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008826:	4b03      	ldr	r3, [pc, #12]	; (8008834 <pvTaskIncrementMutexHeldCount+0x24>)
 8008828:	681b      	ldr	r3, [r3, #0]
	}
 800882a:	4618      	mov	r0, r3
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	20000828 	.word	0x20000828

08008838 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008842:	4b21      	ldr	r3, [pc, #132]	; (80088c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008848:	4b20      	ldr	r3, [pc, #128]	; (80088cc <prvAddCurrentTaskToDelayedList+0x94>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3304      	adds	r3, #4
 800884e:	4618      	mov	r0, r3
 8008850:	f7fd ffb0 	bl	80067b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885a:	d10a      	bne.n	8008872 <prvAddCurrentTaskToDelayedList+0x3a>
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d007      	beq.n	8008872 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008862:	4b1a      	ldr	r3, [pc, #104]	; (80088cc <prvAddCurrentTaskToDelayedList+0x94>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3304      	adds	r3, #4
 8008868:	4619      	mov	r1, r3
 800886a:	4819      	ldr	r0, [pc, #100]	; (80088d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800886c:	f7fd ff45 	bl	80066fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008870:	e026      	b.n	80088c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4413      	add	r3, r2
 8008878:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800887a:	4b14      	ldr	r3, [pc, #80]	; (80088cc <prvAddCurrentTaskToDelayedList+0x94>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	429a      	cmp	r2, r3
 8008888:	d209      	bcs.n	800889e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800888a:	4b12      	ldr	r3, [pc, #72]	; (80088d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	4b0f      	ldr	r3, [pc, #60]	; (80088cc <prvAddCurrentTaskToDelayedList+0x94>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3304      	adds	r3, #4
 8008894:	4619      	mov	r1, r3
 8008896:	4610      	mov	r0, r2
 8008898:	f7fd ff53 	bl	8006742 <vListInsert>
}
 800889c:	e010      	b.n	80088c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800889e:	4b0e      	ldr	r3, [pc, #56]	; (80088d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <prvAddCurrentTaskToDelayedList+0x94>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3304      	adds	r3, #4
 80088a8:	4619      	mov	r1, r3
 80088aa:	4610      	mov	r0, r2
 80088ac:	f7fd ff49 	bl	8006742 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088b0:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d202      	bcs.n	80088c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80088ba:	4a08      	ldr	r2, [pc, #32]	; (80088dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	6013      	str	r3, [r2, #0]
}
 80088c0:	bf00      	nop
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20000d00 	.word	0x20000d00
 80088cc:	20000828 	.word	0x20000828
 80088d0:	20000ce8 	.word	0x20000ce8
 80088d4:	20000cb8 	.word	0x20000cb8
 80088d8:	20000cb4 	.word	0x20000cb4
 80088dc:	20000d1c 	.word	0x20000d1c

080088e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08a      	sub	sp, #40	; 0x28
 80088e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80088e6:	2300      	movs	r3, #0
 80088e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80088ea:	f000 fb07 	bl	8008efc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80088ee:	4b1c      	ldr	r3, [pc, #112]	; (8008960 <xTimerCreateTimerTask+0x80>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d021      	beq.n	800893a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80088fa:	2300      	movs	r3, #0
 80088fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80088fe:	1d3a      	adds	r2, r7, #4
 8008900:	f107 0108 	add.w	r1, r7, #8
 8008904:	f107 030c 	add.w	r3, r7, #12
 8008908:	4618      	mov	r0, r3
 800890a:	f7fd fcc1 	bl	8006290 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800890e:	6879      	ldr	r1, [r7, #4]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	9202      	str	r2, [sp, #8]
 8008916:	9301      	str	r3, [sp, #4]
 8008918:	2302      	movs	r3, #2
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	2300      	movs	r3, #0
 800891e:	460a      	mov	r2, r1
 8008920:	4910      	ldr	r1, [pc, #64]	; (8008964 <xTimerCreateTimerTask+0x84>)
 8008922:	4811      	ldr	r0, [pc, #68]	; (8008968 <xTimerCreateTimerTask+0x88>)
 8008924:	f7fe fef0 	bl	8007708 <xTaskCreateStatic>
 8008928:	4603      	mov	r3, r0
 800892a:	4a10      	ldr	r2, [pc, #64]	; (800896c <xTimerCreateTimerTask+0x8c>)
 800892c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800892e:	4b0f      	ldr	r3, [pc, #60]	; (800896c <xTimerCreateTimerTask+0x8c>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008936:	2301      	movs	r3, #1
 8008938:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10a      	bne.n	8008956 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	613b      	str	r3, [r7, #16]
}
 8008952:	bf00      	nop
 8008954:	e7fe      	b.n	8008954 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008956:	697b      	ldr	r3, [r7, #20]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3718      	adds	r7, #24
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	20000d58 	.word	0x20000d58
 8008964:	0800a450 	.word	0x0800a450
 8008968:	08008aa5 	.word	0x08008aa5
 800896c:	20000d5c 	.word	0x20000d5c

08008970 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b08a      	sub	sp, #40	; 0x28
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800897e:	2300      	movs	r3, #0
 8008980:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10a      	bne.n	800899e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	623b      	str	r3, [r7, #32]
}
 800899a:	bf00      	nop
 800899c:	e7fe      	b.n	800899c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800899e:	4b1a      	ldr	r3, [pc, #104]	; (8008a08 <xTimerGenericCommand+0x98>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d02a      	beq.n	80089fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2b05      	cmp	r3, #5
 80089b6:	dc18      	bgt.n	80089ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80089b8:	f7ff fd9c 	bl	80084f4 <xTaskGetSchedulerState>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d109      	bne.n	80089d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80089c2:	4b11      	ldr	r3, [pc, #68]	; (8008a08 <xTimerGenericCommand+0x98>)
 80089c4:	6818      	ldr	r0, [r3, #0]
 80089c6:	f107 0110 	add.w	r1, r7, #16
 80089ca:	2300      	movs	r3, #0
 80089cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089ce:	f7fe f90f 	bl	8006bf0 <xQueueGenericSend>
 80089d2:	6278      	str	r0, [r7, #36]	; 0x24
 80089d4:	e012      	b.n	80089fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80089d6:	4b0c      	ldr	r3, [pc, #48]	; (8008a08 <xTimerGenericCommand+0x98>)
 80089d8:	6818      	ldr	r0, [r3, #0]
 80089da:	f107 0110 	add.w	r1, r7, #16
 80089de:	2300      	movs	r3, #0
 80089e0:	2200      	movs	r2, #0
 80089e2:	f7fe f905 	bl	8006bf0 <xQueueGenericSend>
 80089e6:	6278      	str	r0, [r7, #36]	; 0x24
 80089e8:	e008      	b.n	80089fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80089ea:	4b07      	ldr	r3, [pc, #28]	; (8008a08 <xTimerGenericCommand+0x98>)
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	f107 0110 	add.w	r1, r7, #16
 80089f2:	2300      	movs	r3, #0
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	f7fe f9f9 	bl	8006dec <xQueueGenericSendFromISR>
 80089fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3728      	adds	r7, #40	; 0x28
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	20000d58 	.word	0x20000d58

08008a0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af02      	add	r7, sp, #8
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a16:	4b22      	ldr	r3, [pc, #136]	; (8008aa0 <prvProcessExpiredTimer+0x94>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	3304      	adds	r3, #4
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7fd fec5 	bl	80067b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d022      	beq.n	8008a7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	699a      	ldr	r2, [r3, #24]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	18d1      	adds	r1, r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	6978      	ldr	r0, [r7, #20]
 8008a46:	f000 f8d1 	bl	8008bec <prvInsertTimerInActiveList>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d01f      	beq.n	8008a90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a50:	2300      	movs	r3, #0
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	2300      	movs	r3, #0
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	2100      	movs	r1, #0
 8008a5a:	6978      	ldr	r0, [r7, #20]
 8008a5c:	f7ff ff88 	bl	8008970 <xTimerGenericCommand>
 8008a60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d113      	bne.n	8008a90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6c:	f383 8811 	msr	BASEPRI, r3
 8008a70:	f3bf 8f6f 	isb	sy
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	60fb      	str	r3, [r7, #12]
}
 8008a7a:	bf00      	nop
 8008a7c:	e7fe      	b.n	8008a7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a84:	f023 0301 	bic.w	r3, r3, #1
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	6a1b      	ldr	r3, [r3, #32]
 8008a94:	6978      	ldr	r0, [r7, #20]
 8008a96:	4798      	blx	r3
}
 8008a98:	bf00      	nop
 8008a9a:	3718      	adds	r7, #24
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	20000d50 	.word	0x20000d50

08008aa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008aac:	f107 0308 	add.w	r3, r7, #8
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 f857 	bl	8008b64 <prvGetNextExpireTime>
 8008ab6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	4619      	mov	r1, r3
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f000 f803 	bl	8008ac8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008ac2:	f000 f8d5 	bl	8008c70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ac6:	e7f1      	b.n	8008aac <prvTimerTask+0x8>

08008ac8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008ad2:	f7ff f875 	bl	8007bc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ad6:	f107 0308 	add.w	r3, r7, #8
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 f866 	bl	8008bac <prvSampleTimeNow>
 8008ae0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d130      	bne.n	8008b4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10a      	bne.n	8008b04 <prvProcessTimerOrBlockTask+0x3c>
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d806      	bhi.n	8008b04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008af6:	f7ff f871 	bl	8007bdc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008afa:	68f9      	ldr	r1, [r7, #12]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7ff ff85 	bl	8008a0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b02:	e024      	b.n	8008b4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d008      	beq.n	8008b1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b0a:	4b13      	ldr	r3, [pc, #76]	; (8008b58 <prvProcessTimerOrBlockTask+0x90>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d101      	bne.n	8008b18 <prvProcessTimerOrBlockTask+0x50>
 8008b14:	2301      	movs	r3, #1
 8008b16:	e000      	b.n	8008b1a <prvProcessTimerOrBlockTask+0x52>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b1c:	4b0f      	ldr	r3, [pc, #60]	; (8008b5c <prvProcessTimerOrBlockTask+0x94>)
 8008b1e:	6818      	ldr	r0, [r3, #0]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	f7fe fdb9 	bl	80076a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b2e:	f7ff f855 	bl	8007bdc <xTaskResumeAll>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10a      	bne.n	8008b4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b38:	4b09      	ldr	r3, [pc, #36]	; (8008b60 <prvProcessTimerOrBlockTask+0x98>)
 8008b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3e:	601a      	str	r2, [r3, #0]
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	f3bf 8f6f 	isb	sy
}
 8008b48:	e001      	b.n	8008b4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b4a:	f7ff f847 	bl	8007bdc <xTaskResumeAll>
}
 8008b4e:	bf00      	nop
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	20000d54 	.word	0x20000d54
 8008b5c:	20000d58 	.word	0x20000d58
 8008b60:	e000ed04 	.word	0xe000ed04

08008b64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b6c:	4b0e      	ldr	r3, [pc, #56]	; (8008ba8 <prvGetNextExpireTime+0x44>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <prvGetNextExpireTime+0x16>
 8008b76:	2201      	movs	r2, #1
 8008b78:	e000      	b.n	8008b7c <prvGetNextExpireTime+0x18>
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d105      	bne.n	8008b94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b88:	4b07      	ldr	r3, [pc, #28]	; (8008ba8 <prvGetNextExpireTime+0x44>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	60fb      	str	r3, [r7, #12]
 8008b92:	e001      	b.n	8008b98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008b94:	2300      	movs	r3, #0
 8008b96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008b98:	68fb      	ldr	r3, [r7, #12]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3714      	adds	r7, #20
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	20000d50 	.word	0x20000d50

08008bac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008bb4:	f7ff f8b0 	bl	8007d18 <xTaskGetTickCount>
 8008bb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008bba:	4b0b      	ldr	r3, [pc, #44]	; (8008be8 <prvSampleTimeNow+0x3c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d205      	bcs.n	8008bd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008bc4:	f000 f936 	bl	8008e34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	e002      	b.n	8008bd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008bd6:	4a04      	ldr	r2, [pc, #16]	; (8008be8 <prvSampleTimeNow+0x3c>)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	20000d60 	.word	0x20000d60

08008bec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
 8008bf8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d812      	bhi.n	8008c38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	1ad2      	subs	r2, r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d302      	bcc.n	8008c26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c20:	2301      	movs	r3, #1
 8008c22:	617b      	str	r3, [r7, #20]
 8008c24:	e01b      	b.n	8008c5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c26:	4b10      	ldr	r3, [pc, #64]	; (8008c68 <prvInsertTimerInActiveList+0x7c>)
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	4619      	mov	r1, r3
 8008c30:	4610      	mov	r0, r2
 8008c32:	f7fd fd86 	bl	8006742 <vListInsert>
 8008c36:	e012      	b.n	8008c5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d206      	bcs.n	8008c4e <prvInsertTimerInActiveList+0x62>
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d302      	bcc.n	8008c4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	617b      	str	r3, [r7, #20]
 8008c4c:	e007      	b.n	8008c5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c4e:	4b07      	ldr	r3, [pc, #28]	; (8008c6c <prvInsertTimerInActiveList+0x80>)
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3304      	adds	r3, #4
 8008c56:	4619      	mov	r1, r3
 8008c58:	4610      	mov	r0, r2
 8008c5a:	f7fd fd72 	bl	8006742 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008c5e:	697b      	ldr	r3, [r7, #20]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	20000d54 	.word	0x20000d54
 8008c6c:	20000d50 	.word	0x20000d50

08008c70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b08e      	sub	sp, #56	; 0x38
 8008c74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c76:	e0ca      	b.n	8008e0e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	da18      	bge.n	8008cb0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008c7e:	1d3b      	adds	r3, r7, #4
 8008c80:	3304      	adds	r3, #4
 8008c82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10a      	bne.n	8008ca0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	61fb      	str	r3, [r7, #28]
}
 8008c9c:	bf00      	nop
 8008c9e:	e7fe      	b.n	8008c9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ca6:	6850      	ldr	r0, [r2, #4]
 8008ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008caa:	6892      	ldr	r2, [r2, #8]
 8008cac:	4611      	mov	r1, r2
 8008cae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f2c0 80aa 	blt.w	8008e0c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d004      	beq.n	8008cce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc6:	3304      	adds	r3, #4
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fd fd73 	bl	80067b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cce:	463b      	mov	r3, r7
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7ff ff6b 	bl	8008bac <prvSampleTimeNow>
 8008cd6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b09      	cmp	r3, #9
 8008cdc:	f200 8097 	bhi.w	8008e0e <prvProcessReceivedCommands+0x19e>
 8008ce0:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <prvProcessReceivedCommands+0x78>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008d11 	.word	0x08008d11
 8008cec:	08008d11 	.word	0x08008d11
 8008cf0:	08008d11 	.word	0x08008d11
 8008cf4:	08008d85 	.word	0x08008d85
 8008cf8:	08008d99 	.word	0x08008d99
 8008cfc:	08008de3 	.word	0x08008de3
 8008d00:	08008d11 	.word	0x08008d11
 8008d04:	08008d11 	.word	0x08008d11
 8008d08:	08008d85 	.word	0x08008d85
 8008d0c:	08008d99 	.word	0x08008d99
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d16:	f043 0301 	orr.w	r3, r3, #1
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	18d1      	adds	r1, r2, r3
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d30:	f7ff ff5c 	bl	8008bec <prvInsertTimerInActiveList>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d069      	beq.n	8008e0e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d48:	f003 0304 	and.w	r3, r3, #4
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d05e      	beq.n	8008e0e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d50:	68ba      	ldr	r2, [r7, #8]
 8008d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	441a      	add	r2, r3
 8008d58:	2300      	movs	r3, #0
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	2100      	movs	r1, #0
 8008d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d62:	f7ff fe05 	bl	8008970 <xTimerGenericCommand>
 8008d66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d14f      	bne.n	8008e0e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	61bb      	str	r3, [r7, #24]
}
 8008d80:	bf00      	nop
 8008d82:	e7fe      	b.n	8008d82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d8a:	f023 0301 	bic.w	r3, r3, #1
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008d96:	e03a      	b.n	8008e0e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d9e:	f043 0301 	orr.w	r3, r3, #1
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10a      	bne.n	8008dce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	617b      	str	r3, [r7, #20]
}
 8008dca:	bf00      	nop
 8008dcc:	e7fe      	b.n	8008dcc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd0:	699a      	ldr	r2, [r3, #24]
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	18d1      	adds	r1, r2, r3
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ddc:	f7ff ff06 	bl	8008bec <prvInsertTimerInActiveList>
					break;
 8008de0:	e015      	b.n	8008e0e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008de8:	f003 0302 	and.w	r3, r3, #2
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d103      	bne.n	8008df8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008df2:	f000 fbfd 	bl	80095f0 <vPortFree>
 8008df6:	e00a      	b.n	8008e0e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dfe:	f023 0301 	bic.w	r3, r3, #1
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e0a:	e000      	b.n	8008e0e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008e0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e0e:	4b08      	ldr	r3, [pc, #32]	; (8008e30 <prvProcessReceivedCommands+0x1c0>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	1d39      	adds	r1, r7, #4
 8008e14:	2200      	movs	r2, #0
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fe f884 	bl	8006f24 <xQueueReceive>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f47f af2a 	bne.w	8008c78 <prvProcessReceivedCommands+0x8>
	}
}
 8008e24:	bf00      	nop
 8008e26:	bf00      	nop
 8008e28:	3730      	adds	r7, #48	; 0x30
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20000d58 	.word	0x20000d58

08008e34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b088      	sub	sp, #32
 8008e38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e3a:	e048      	b.n	8008ece <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e3c:	4b2d      	ldr	r3, [pc, #180]	; (8008ef4 <prvSwitchTimerLists+0xc0>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e46:	4b2b      	ldr	r3, [pc, #172]	; (8008ef4 <prvSwitchTimerLists+0xc0>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3304      	adds	r3, #4
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7fd fcad 	bl	80067b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e68:	f003 0304 	and.w	r3, r3, #4
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d02e      	beq.n	8008ece <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	4413      	add	r3, r2
 8008e78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d90e      	bls.n	8008ea0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e8e:	4b19      	ldr	r3, [pc, #100]	; (8008ef4 <prvSwitchTimerLists+0xc0>)
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3304      	adds	r3, #4
 8008e96:	4619      	mov	r1, r3
 8008e98:	4610      	mov	r0, r2
 8008e9a:	f7fd fc52 	bl	8006742 <vListInsert>
 8008e9e:	e016      	b.n	8008ece <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f7ff fd60 	bl	8008970 <xTimerGenericCommand>
 8008eb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10a      	bne.n	8008ece <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	603b      	str	r3, [r7, #0]
}
 8008eca:	bf00      	nop
 8008ecc:	e7fe      	b.n	8008ecc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ece:	4b09      	ldr	r3, [pc, #36]	; (8008ef4 <prvSwitchTimerLists+0xc0>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1b1      	bne.n	8008e3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ed8:	4b06      	ldr	r3, [pc, #24]	; (8008ef4 <prvSwitchTimerLists+0xc0>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ede:	4b06      	ldr	r3, [pc, #24]	; (8008ef8 <prvSwitchTimerLists+0xc4>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a04      	ldr	r2, [pc, #16]	; (8008ef4 <prvSwitchTimerLists+0xc0>)
 8008ee4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ee6:	4a04      	ldr	r2, [pc, #16]	; (8008ef8 <prvSwitchTimerLists+0xc4>)
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	6013      	str	r3, [r2, #0]
}
 8008eec:	bf00      	nop
 8008eee:	3718      	adds	r7, #24
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	20000d50 	.word	0x20000d50
 8008ef8:	20000d54 	.word	0x20000d54

08008efc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008f02:	f000 f987 	bl	8009214 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f06:	4b15      	ldr	r3, [pc, #84]	; (8008f5c <prvCheckForValidListAndQueue+0x60>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d120      	bne.n	8008f50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f0e:	4814      	ldr	r0, [pc, #80]	; (8008f60 <prvCheckForValidListAndQueue+0x64>)
 8008f10:	f7fd fbc6 	bl	80066a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f14:	4813      	ldr	r0, [pc, #76]	; (8008f64 <prvCheckForValidListAndQueue+0x68>)
 8008f16:	f7fd fbc3 	bl	80066a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f1a:	4b13      	ldr	r3, [pc, #76]	; (8008f68 <prvCheckForValidListAndQueue+0x6c>)
 8008f1c:	4a10      	ldr	r2, [pc, #64]	; (8008f60 <prvCheckForValidListAndQueue+0x64>)
 8008f1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f20:	4b12      	ldr	r3, [pc, #72]	; (8008f6c <prvCheckForValidListAndQueue+0x70>)
 8008f22:	4a10      	ldr	r2, [pc, #64]	; (8008f64 <prvCheckForValidListAndQueue+0x68>)
 8008f24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f26:	2300      	movs	r3, #0
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	4b11      	ldr	r3, [pc, #68]	; (8008f70 <prvCheckForValidListAndQueue+0x74>)
 8008f2c:	4a11      	ldr	r2, [pc, #68]	; (8008f74 <prvCheckForValidListAndQueue+0x78>)
 8008f2e:	2110      	movs	r1, #16
 8008f30:	200a      	movs	r0, #10
 8008f32:	f7fd fcd1 	bl	80068d8 <xQueueGenericCreateStatic>
 8008f36:	4603      	mov	r3, r0
 8008f38:	4a08      	ldr	r2, [pc, #32]	; (8008f5c <prvCheckForValidListAndQueue+0x60>)
 8008f3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f3c:	4b07      	ldr	r3, [pc, #28]	; (8008f5c <prvCheckForValidListAndQueue+0x60>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d005      	beq.n	8008f50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f44:	4b05      	ldr	r3, [pc, #20]	; (8008f5c <prvCheckForValidListAndQueue+0x60>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	490b      	ldr	r1, [pc, #44]	; (8008f78 <prvCheckForValidListAndQueue+0x7c>)
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fe fb7e 	bl	800764c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f50:	f000 f990 	bl	8009274 <vPortExitCritical>
}
 8008f54:	bf00      	nop
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20000d58 	.word	0x20000d58
 8008f60:	20000d28 	.word	0x20000d28
 8008f64:	20000d3c 	.word	0x20000d3c
 8008f68:	20000d50 	.word	0x20000d50
 8008f6c:	20000d54 	.word	0x20000d54
 8008f70:	20000e04 	.word	0x20000e04
 8008f74:	20000d64 	.word	0x20000d64
 8008f78:	0800a458 	.word	0x0800a458

08008f7c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b08a      	sub	sp, #40	; 0x28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008f8a:	f06f 0301 	mvn.w	r3, #1
 8008f8e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f9c:	4b06      	ldr	r3, [pc, #24]	; (8008fb8 <xTimerPendFunctionCallFromISR+0x3c>)
 8008f9e:	6818      	ldr	r0, [r3, #0]
 8008fa0:	f107 0114 	add.w	r1, r7, #20
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	f7fd ff20 	bl	8006dec <xQueueGenericSendFromISR>
 8008fac:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3728      	adds	r7, #40	; 0x28
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	20000d58 	.word	0x20000d58

08008fbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	3b04      	subs	r3, #4
 8008fcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	3b04      	subs	r3, #4
 8008fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f023 0201 	bic.w	r2, r3, #1
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	3b04      	subs	r3, #4
 8008fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fec:	4a0c      	ldr	r2, [pc, #48]	; (8009020 <pxPortInitialiseStack+0x64>)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3b14      	subs	r3, #20
 8008ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3b04      	subs	r3, #4
 8009002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f06f 0202 	mvn.w	r2, #2
 800900a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	3b20      	subs	r3, #32
 8009010:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009012:	68fb      	ldr	r3, [r7, #12]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3714      	adds	r7, #20
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr
 8009020:	08009025 	.word	0x08009025

08009024 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800902a:	2300      	movs	r3, #0
 800902c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800902e:	4b12      	ldr	r3, [pc, #72]	; (8009078 <prvTaskExitError+0x54>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009036:	d00a      	beq.n	800904e <prvTaskExitError+0x2a>
	__asm volatile
 8009038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	60fb      	str	r3, [r7, #12]
}
 800904a:	bf00      	nop
 800904c:	e7fe      	b.n	800904c <prvTaskExitError+0x28>
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	60bb      	str	r3, [r7, #8]
}
 8009060:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009062:	bf00      	nop
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0fc      	beq.n	8009064 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800906a:	bf00      	nop
 800906c:	bf00      	nop
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	20000014 	.word	0x20000014
 800907c:	00000000 	.word	0x00000000

08009080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009080:	4b07      	ldr	r3, [pc, #28]	; (80090a0 <pxCurrentTCBConst2>)
 8009082:	6819      	ldr	r1, [r3, #0]
 8009084:	6808      	ldr	r0, [r1, #0]
 8009086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908a:	f380 8809 	msr	PSP, r0
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f04f 0000 	mov.w	r0, #0
 8009096:	f380 8811 	msr	BASEPRI, r0
 800909a:	4770      	bx	lr
 800909c:	f3af 8000 	nop.w

080090a0 <pxCurrentTCBConst2>:
 80090a0:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop

080090a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80090a8:	4808      	ldr	r0, [pc, #32]	; (80090cc <prvPortStartFirstTask+0x24>)
 80090aa:	6800      	ldr	r0, [r0, #0]
 80090ac:	6800      	ldr	r0, [r0, #0]
 80090ae:	f380 8808 	msr	MSP, r0
 80090b2:	f04f 0000 	mov.w	r0, #0
 80090b6:	f380 8814 	msr	CONTROL, r0
 80090ba:	b662      	cpsie	i
 80090bc:	b661      	cpsie	f
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	df00      	svc	0
 80090c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80090ca:	bf00      	nop
 80090cc:	e000ed08 	.word	0xe000ed08

080090d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80090d6:	4b46      	ldr	r3, [pc, #280]	; (80091f0 <xPortStartScheduler+0x120>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a46      	ldr	r2, [pc, #280]	; (80091f4 <xPortStartScheduler+0x124>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d10a      	bne.n	80090f6 <xPortStartScheduler+0x26>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	613b      	str	r3, [r7, #16]
}
 80090f2:	bf00      	nop
 80090f4:	e7fe      	b.n	80090f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80090f6:	4b3e      	ldr	r3, [pc, #248]	; (80091f0 <xPortStartScheduler+0x120>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a3f      	ldr	r2, [pc, #252]	; (80091f8 <xPortStartScheduler+0x128>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d10a      	bne.n	8009116 <xPortStartScheduler+0x46>
	__asm volatile
 8009100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	60fb      	str	r3, [r7, #12]
}
 8009112:	bf00      	nop
 8009114:	e7fe      	b.n	8009114 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009116:	4b39      	ldr	r3, [pc, #228]	; (80091fc <xPortStartScheduler+0x12c>)
 8009118:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	22ff      	movs	r2, #255	; 0xff
 8009126:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	b2db      	uxtb	r3, r3
 800912e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	b2db      	uxtb	r3, r3
 8009134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009138:	b2da      	uxtb	r2, r3
 800913a:	4b31      	ldr	r3, [pc, #196]	; (8009200 <xPortStartScheduler+0x130>)
 800913c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800913e:	4b31      	ldr	r3, [pc, #196]	; (8009204 <xPortStartScheduler+0x134>)
 8009140:	2207      	movs	r2, #7
 8009142:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009144:	e009      	b.n	800915a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009146:	4b2f      	ldr	r3, [pc, #188]	; (8009204 <xPortStartScheduler+0x134>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3b01      	subs	r3, #1
 800914c:	4a2d      	ldr	r2, [pc, #180]	; (8009204 <xPortStartScheduler+0x134>)
 800914e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	b2db      	uxtb	r3, r3
 8009154:	005b      	lsls	r3, r3, #1
 8009156:	b2db      	uxtb	r3, r3
 8009158:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	b2db      	uxtb	r3, r3
 800915e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009162:	2b80      	cmp	r3, #128	; 0x80
 8009164:	d0ef      	beq.n	8009146 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009166:	4b27      	ldr	r3, [pc, #156]	; (8009204 <xPortStartScheduler+0x134>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f1c3 0307 	rsb	r3, r3, #7
 800916e:	2b04      	cmp	r3, #4
 8009170:	d00a      	beq.n	8009188 <xPortStartScheduler+0xb8>
	__asm volatile
 8009172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009176:	f383 8811 	msr	BASEPRI, r3
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	60bb      	str	r3, [r7, #8]
}
 8009184:	bf00      	nop
 8009186:	e7fe      	b.n	8009186 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009188:	4b1e      	ldr	r3, [pc, #120]	; (8009204 <xPortStartScheduler+0x134>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	021b      	lsls	r3, r3, #8
 800918e:	4a1d      	ldr	r2, [pc, #116]	; (8009204 <xPortStartScheduler+0x134>)
 8009190:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009192:	4b1c      	ldr	r3, [pc, #112]	; (8009204 <xPortStartScheduler+0x134>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800919a:	4a1a      	ldr	r2, [pc, #104]	; (8009204 <xPortStartScheduler+0x134>)
 800919c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80091a6:	4b18      	ldr	r3, [pc, #96]	; (8009208 <xPortStartScheduler+0x138>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a17      	ldr	r2, [pc, #92]	; (8009208 <xPortStartScheduler+0x138>)
 80091ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80091b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80091b2:	4b15      	ldr	r3, [pc, #84]	; (8009208 <xPortStartScheduler+0x138>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a14      	ldr	r2, [pc, #80]	; (8009208 <xPortStartScheduler+0x138>)
 80091b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80091bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80091be:	f000 f8dd 	bl	800937c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80091c2:	4b12      	ldr	r3, [pc, #72]	; (800920c <xPortStartScheduler+0x13c>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80091c8:	f000 f8fc 	bl	80093c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80091cc:	4b10      	ldr	r3, [pc, #64]	; (8009210 <xPortStartScheduler+0x140>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a0f      	ldr	r2, [pc, #60]	; (8009210 <xPortStartScheduler+0x140>)
 80091d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80091d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80091d8:	f7ff ff66 	bl	80090a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80091dc:	f7fe fe66 	bl	8007eac <vTaskSwitchContext>
	prvTaskExitError();
 80091e0:	f7ff ff20 	bl	8009024 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3718      	adds	r7, #24
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	e000ed00 	.word	0xe000ed00
 80091f4:	410fc271 	.word	0x410fc271
 80091f8:	410fc270 	.word	0x410fc270
 80091fc:	e000e400 	.word	0xe000e400
 8009200:	20000e54 	.word	0x20000e54
 8009204:	20000e58 	.word	0x20000e58
 8009208:	e000ed20 	.word	0xe000ed20
 800920c:	20000014 	.word	0x20000014
 8009210:	e000ef34 	.word	0xe000ef34

08009214 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
	__asm volatile
 800921a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921e:	f383 8811 	msr	BASEPRI, r3
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	607b      	str	r3, [r7, #4]
}
 800922c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800922e:	4b0f      	ldr	r3, [pc, #60]	; (800926c <vPortEnterCritical+0x58>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3301      	adds	r3, #1
 8009234:	4a0d      	ldr	r2, [pc, #52]	; (800926c <vPortEnterCritical+0x58>)
 8009236:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009238:	4b0c      	ldr	r3, [pc, #48]	; (800926c <vPortEnterCritical+0x58>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d10f      	bne.n	8009260 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009240:	4b0b      	ldr	r3, [pc, #44]	; (8009270 <vPortEnterCritical+0x5c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00a      	beq.n	8009260 <vPortEnterCritical+0x4c>
	__asm volatile
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	603b      	str	r3, [r7, #0]
}
 800925c:	bf00      	nop
 800925e:	e7fe      	b.n	800925e <vPortEnterCritical+0x4a>
	}
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	20000014 	.word	0x20000014
 8009270:	e000ed04 	.word	0xe000ed04

08009274 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800927a:	4b12      	ldr	r3, [pc, #72]	; (80092c4 <vPortExitCritical+0x50>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10a      	bne.n	8009298 <vPortExitCritical+0x24>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	607b      	str	r3, [r7, #4]
}
 8009294:	bf00      	nop
 8009296:	e7fe      	b.n	8009296 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009298:	4b0a      	ldr	r3, [pc, #40]	; (80092c4 <vPortExitCritical+0x50>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3b01      	subs	r3, #1
 800929e:	4a09      	ldr	r2, [pc, #36]	; (80092c4 <vPortExitCritical+0x50>)
 80092a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80092a2:	4b08      	ldr	r3, [pc, #32]	; (80092c4 <vPortExitCritical+0x50>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d105      	bne.n	80092b6 <vPortExitCritical+0x42>
 80092aa:	2300      	movs	r3, #0
 80092ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	f383 8811 	msr	BASEPRI, r3
}
 80092b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80092b6:	bf00      	nop
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	20000014 	.word	0x20000014
	...

080092d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80092d0:	f3ef 8009 	mrs	r0, PSP
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	4b15      	ldr	r3, [pc, #84]	; (8009330 <pxCurrentTCBConst>)
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	f01e 0f10 	tst.w	lr, #16
 80092e0:	bf08      	it	eq
 80092e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80092e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ea:	6010      	str	r0, [r2, #0]
 80092ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80092f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80092f4:	f380 8811 	msr	BASEPRI, r0
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f7fe fdd4 	bl	8007eac <vTaskSwitchContext>
 8009304:	f04f 0000 	mov.w	r0, #0
 8009308:	f380 8811 	msr	BASEPRI, r0
 800930c:	bc09      	pop	{r0, r3}
 800930e:	6819      	ldr	r1, [r3, #0]
 8009310:	6808      	ldr	r0, [r1, #0]
 8009312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009316:	f01e 0f10 	tst.w	lr, #16
 800931a:	bf08      	it	eq
 800931c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009320:	f380 8809 	msr	PSP, r0
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	f3af 8000 	nop.w

08009330 <pxCurrentTCBConst>:
 8009330:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop

08009338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
	__asm volatile
 800933e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009342:	f383 8811 	msr	BASEPRI, r3
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	607b      	str	r3, [r7, #4]
}
 8009350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009352:	f7fe fcf1 	bl	8007d38 <xTaskIncrementTick>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d003      	beq.n	8009364 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800935c:	4b06      	ldr	r3, [pc, #24]	; (8009378 <xPortSysTickHandler+0x40>)
 800935e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	2300      	movs	r3, #0
 8009366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	f383 8811 	msr	BASEPRI, r3
}
 800936e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009370:	bf00      	nop
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	e000ed04 	.word	0xe000ed04

0800937c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800937c:	b480      	push	{r7}
 800937e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009380:	4b0b      	ldr	r3, [pc, #44]	; (80093b0 <vPortSetupTimerInterrupt+0x34>)
 8009382:	2200      	movs	r2, #0
 8009384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009386:	4b0b      	ldr	r3, [pc, #44]	; (80093b4 <vPortSetupTimerInterrupt+0x38>)
 8009388:	2200      	movs	r2, #0
 800938a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800938c:	4b0a      	ldr	r3, [pc, #40]	; (80093b8 <vPortSetupTimerInterrupt+0x3c>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a0a      	ldr	r2, [pc, #40]	; (80093bc <vPortSetupTimerInterrupt+0x40>)
 8009392:	fba2 2303 	umull	r2, r3, r2, r3
 8009396:	099b      	lsrs	r3, r3, #6
 8009398:	4a09      	ldr	r2, [pc, #36]	; (80093c0 <vPortSetupTimerInterrupt+0x44>)
 800939a:	3b01      	subs	r3, #1
 800939c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800939e:	4b04      	ldr	r3, [pc, #16]	; (80093b0 <vPortSetupTimerInterrupt+0x34>)
 80093a0:	2207      	movs	r2, #7
 80093a2:	601a      	str	r2, [r3, #0]
}
 80093a4:	bf00      	nop
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	e000e010 	.word	0xe000e010
 80093b4:	e000e018 	.word	0xe000e018
 80093b8:	20000008 	.word	0x20000008
 80093bc:	10624dd3 	.word	0x10624dd3
 80093c0:	e000e014 	.word	0xe000e014

080093c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80093c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80093d4 <vPortEnableVFP+0x10>
 80093c8:	6801      	ldr	r1, [r0, #0]
 80093ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80093ce:	6001      	str	r1, [r0, #0]
 80093d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80093d2:	bf00      	nop
 80093d4:	e000ed88 	.word	0xe000ed88

080093d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80093de:	f3ef 8305 	mrs	r3, IPSR
 80093e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b0f      	cmp	r3, #15
 80093e8:	d914      	bls.n	8009414 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80093ea:	4a17      	ldr	r2, [pc, #92]	; (8009448 <vPortValidateInterruptPriority+0x70>)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4413      	add	r3, r2
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80093f4:	4b15      	ldr	r3, [pc, #84]	; (800944c <vPortValidateInterruptPriority+0x74>)
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	7afa      	ldrb	r2, [r7, #11]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d20a      	bcs.n	8009414 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80093fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	607b      	str	r3, [r7, #4]
}
 8009410:	bf00      	nop
 8009412:	e7fe      	b.n	8009412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009414:	4b0e      	ldr	r3, [pc, #56]	; (8009450 <vPortValidateInterruptPriority+0x78>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800941c:	4b0d      	ldr	r3, [pc, #52]	; (8009454 <vPortValidateInterruptPriority+0x7c>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	429a      	cmp	r2, r3
 8009422:	d90a      	bls.n	800943a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	603b      	str	r3, [r7, #0]
}
 8009436:	bf00      	nop
 8009438:	e7fe      	b.n	8009438 <vPortValidateInterruptPriority+0x60>
	}
 800943a:	bf00      	nop
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	e000e3f0 	.word	0xe000e3f0
 800944c:	20000e54 	.word	0x20000e54
 8009450:	e000ed0c 	.word	0xe000ed0c
 8009454:	20000e58 	.word	0x20000e58

08009458 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b08a      	sub	sp, #40	; 0x28
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009460:	2300      	movs	r3, #0
 8009462:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009464:	f7fe fbac 	bl	8007bc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009468:	4b5b      	ldr	r3, [pc, #364]	; (80095d8 <pvPortMalloc+0x180>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d101      	bne.n	8009474 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009470:	f000 f920 	bl	80096b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009474:	4b59      	ldr	r3, [pc, #356]	; (80095dc <pvPortMalloc+0x184>)
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4013      	ands	r3, r2
 800947c:	2b00      	cmp	r3, #0
 800947e:	f040 8093 	bne.w	80095a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d01d      	beq.n	80094c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009488:	2208      	movs	r2, #8
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4413      	add	r3, r2
 800948e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f003 0307 	and.w	r3, r3, #7
 8009496:	2b00      	cmp	r3, #0
 8009498:	d014      	beq.n	80094c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f023 0307 	bic.w	r3, r3, #7
 80094a0:	3308      	adds	r3, #8
 80094a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f003 0307 	and.w	r3, r3, #7
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00a      	beq.n	80094c4 <pvPortMalloc+0x6c>
	__asm volatile
 80094ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	617b      	str	r3, [r7, #20]
}
 80094c0:	bf00      	nop
 80094c2:	e7fe      	b.n	80094c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d06e      	beq.n	80095a8 <pvPortMalloc+0x150>
 80094ca:	4b45      	ldr	r3, [pc, #276]	; (80095e0 <pvPortMalloc+0x188>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d869      	bhi.n	80095a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80094d4:	4b43      	ldr	r3, [pc, #268]	; (80095e4 <pvPortMalloc+0x18c>)
 80094d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80094d8:	4b42      	ldr	r3, [pc, #264]	; (80095e4 <pvPortMalloc+0x18c>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094de:	e004      	b.n	80094ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80094e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d903      	bls.n	80094fc <pvPortMalloc+0xa4>
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1f1      	bne.n	80094e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80094fc:	4b36      	ldr	r3, [pc, #216]	; (80095d8 <pvPortMalloc+0x180>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009502:	429a      	cmp	r2, r3
 8009504:	d050      	beq.n	80095a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2208      	movs	r2, #8
 800950c:	4413      	add	r3, r2
 800950e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	6a3b      	ldr	r3, [r7, #32]
 8009516:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	685a      	ldr	r2, [r3, #4]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	1ad2      	subs	r2, r2, r3
 8009520:	2308      	movs	r3, #8
 8009522:	005b      	lsls	r3, r3, #1
 8009524:	429a      	cmp	r2, r3
 8009526:	d91f      	bls.n	8009568 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4413      	add	r3, r2
 800952e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	f003 0307 	and.w	r3, r3, #7
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00a      	beq.n	8009550 <pvPortMalloc+0xf8>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	613b      	str	r3, [r7, #16]
}
 800954c:	bf00      	nop
 800954e:	e7fe      	b.n	800954e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	1ad2      	subs	r2, r2, r3
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009562:	69b8      	ldr	r0, [r7, #24]
 8009564:	f000 f908 	bl	8009778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009568:	4b1d      	ldr	r3, [pc, #116]	; (80095e0 <pvPortMalloc+0x188>)
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	4a1b      	ldr	r2, [pc, #108]	; (80095e0 <pvPortMalloc+0x188>)
 8009574:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009576:	4b1a      	ldr	r3, [pc, #104]	; (80095e0 <pvPortMalloc+0x188>)
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	4b1b      	ldr	r3, [pc, #108]	; (80095e8 <pvPortMalloc+0x190>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	429a      	cmp	r2, r3
 8009580:	d203      	bcs.n	800958a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009582:	4b17      	ldr	r3, [pc, #92]	; (80095e0 <pvPortMalloc+0x188>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a18      	ldr	r2, [pc, #96]	; (80095e8 <pvPortMalloc+0x190>)
 8009588:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800958a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	4b13      	ldr	r3, [pc, #76]	; (80095dc <pvPortMalloc+0x184>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	431a      	orrs	r2, r3
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009596:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959a:	2200      	movs	r2, #0
 800959c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800959e:	4b13      	ldr	r3, [pc, #76]	; (80095ec <pvPortMalloc+0x194>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	3301      	adds	r3, #1
 80095a4:	4a11      	ldr	r2, [pc, #68]	; (80095ec <pvPortMalloc+0x194>)
 80095a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80095a8:	f7fe fb18 	bl	8007bdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	f003 0307 	and.w	r3, r3, #7
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00a      	beq.n	80095cc <pvPortMalloc+0x174>
	__asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	60fb      	str	r3, [r7, #12]
}
 80095c8:	bf00      	nop
 80095ca:	e7fe      	b.n	80095ca <pvPortMalloc+0x172>
	return pvReturn;
 80095cc:	69fb      	ldr	r3, [r7, #28]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3728      	adds	r7, #40	; 0x28
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	20004a64 	.word	0x20004a64
 80095dc:	20004a78 	.word	0x20004a78
 80095e0:	20004a68 	.word	0x20004a68
 80095e4:	20004a5c 	.word	0x20004a5c
 80095e8:	20004a6c 	.word	0x20004a6c
 80095ec:	20004a70 	.word	0x20004a70

080095f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b086      	sub	sp, #24
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d04d      	beq.n	800969e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009602:	2308      	movs	r3, #8
 8009604:	425b      	negs	r3, r3
 8009606:	697a      	ldr	r2, [r7, #20]
 8009608:	4413      	add	r3, r2
 800960a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	685a      	ldr	r2, [r3, #4]
 8009614:	4b24      	ldr	r3, [pc, #144]	; (80096a8 <vPortFree+0xb8>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4013      	ands	r3, r2
 800961a:	2b00      	cmp	r3, #0
 800961c:	d10a      	bne.n	8009634 <vPortFree+0x44>
	__asm volatile
 800961e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	60fb      	str	r3, [r7, #12]
}
 8009630:	bf00      	nop
 8009632:	e7fe      	b.n	8009632 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00a      	beq.n	8009652 <vPortFree+0x62>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	60bb      	str	r3, [r7, #8]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	685a      	ldr	r2, [r3, #4]
 8009656:	4b14      	ldr	r3, [pc, #80]	; (80096a8 <vPortFree+0xb8>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4013      	ands	r3, r2
 800965c:	2b00      	cmp	r3, #0
 800965e:	d01e      	beq.n	800969e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d11a      	bne.n	800969e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	685a      	ldr	r2, [r3, #4]
 800966c:	4b0e      	ldr	r3, [pc, #56]	; (80096a8 <vPortFree+0xb8>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	43db      	mvns	r3, r3
 8009672:	401a      	ands	r2, r3
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009678:	f7fe faa2 	bl	8007bc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	4b0a      	ldr	r3, [pc, #40]	; (80096ac <vPortFree+0xbc>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4413      	add	r3, r2
 8009686:	4a09      	ldr	r2, [pc, #36]	; (80096ac <vPortFree+0xbc>)
 8009688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800968a:	6938      	ldr	r0, [r7, #16]
 800968c:	f000 f874 	bl	8009778 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009690:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <vPortFree+0xc0>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3301      	adds	r3, #1
 8009696:	4a06      	ldr	r2, [pc, #24]	; (80096b0 <vPortFree+0xc0>)
 8009698:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800969a:	f7fe fa9f 	bl	8007bdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800969e:	bf00      	nop
 80096a0:	3718      	adds	r7, #24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20004a78 	.word	0x20004a78
 80096ac:	20004a68 	.word	0x20004a68
 80096b0:	20004a74 	.word	0x20004a74

080096b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80096ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80096be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80096c0:	4b27      	ldr	r3, [pc, #156]	; (8009760 <prvHeapInit+0xac>)
 80096c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f003 0307 	and.w	r3, r3, #7
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00c      	beq.n	80096e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3307      	adds	r3, #7
 80096d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f023 0307 	bic.w	r3, r3, #7
 80096da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	4a1f      	ldr	r2, [pc, #124]	; (8009760 <prvHeapInit+0xac>)
 80096e4:	4413      	add	r3, r2
 80096e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80096ec:	4a1d      	ldr	r2, [pc, #116]	; (8009764 <prvHeapInit+0xb0>)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80096f2:	4b1c      	ldr	r3, [pc, #112]	; (8009764 <prvHeapInit+0xb0>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	4413      	add	r3, r2
 80096fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009700:	2208      	movs	r2, #8
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	1a9b      	subs	r3, r3, r2
 8009706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f023 0307 	bic.w	r3, r3, #7
 800970e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4a15      	ldr	r2, [pc, #84]	; (8009768 <prvHeapInit+0xb4>)
 8009714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009716:	4b14      	ldr	r3, [pc, #80]	; (8009768 <prvHeapInit+0xb4>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2200      	movs	r2, #0
 800971c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800971e:	4b12      	ldr	r3, [pc, #72]	; (8009768 <prvHeapInit+0xb4>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2200      	movs	r2, #0
 8009724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	1ad2      	subs	r2, r2, r3
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009734:	4b0c      	ldr	r3, [pc, #48]	; (8009768 <prvHeapInit+0xb4>)
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	4a0a      	ldr	r2, [pc, #40]	; (800976c <prvHeapInit+0xb8>)
 8009742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	4a09      	ldr	r2, [pc, #36]	; (8009770 <prvHeapInit+0xbc>)
 800974a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800974c:	4b09      	ldr	r3, [pc, #36]	; (8009774 <prvHeapInit+0xc0>)
 800974e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009752:	601a      	str	r2, [r3, #0]
}
 8009754:	bf00      	nop
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	20000e5c 	.word	0x20000e5c
 8009764:	20004a5c 	.word	0x20004a5c
 8009768:	20004a64 	.word	0x20004a64
 800976c:	20004a6c 	.word	0x20004a6c
 8009770:	20004a68 	.word	0x20004a68
 8009774:	20004a78 	.word	0x20004a78

08009778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009780:	4b28      	ldr	r3, [pc, #160]	; (8009824 <prvInsertBlockIntoFreeList+0xac>)
 8009782:	60fb      	str	r3, [r7, #12]
 8009784:	e002      	b.n	800978c <prvInsertBlockIntoFreeList+0x14>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	60fb      	str	r3, [r7, #12]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	429a      	cmp	r2, r3
 8009794:	d8f7      	bhi.n	8009786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	4413      	add	r3, r2
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d108      	bne.n	80097ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	441a      	add	r2, r3
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	441a      	add	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d118      	bne.n	8009800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	4b15      	ldr	r3, [pc, #84]	; (8009828 <prvInsertBlockIntoFreeList+0xb0>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d00d      	beq.n	80097f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	441a      	add	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	e008      	b.n	8009808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80097f6:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <prvInsertBlockIntoFreeList+0xb0>)
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	e003      	b.n	8009808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	429a      	cmp	r2, r3
 800980e:	d002      	beq.n	8009816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009816:	bf00      	nop
 8009818:	3714      	adds	r7, #20
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	20004a5c 	.word	0x20004a5c
 8009828:	20004a64 	.word	0x20004a64

0800982c <__errno>:
 800982c:	4b01      	ldr	r3, [pc, #4]	; (8009834 <__errno+0x8>)
 800982e:	6818      	ldr	r0, [r3, #0]
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	20000018 	.word	0x20000018

08009838 <__libc_init_array>:
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	4d0d      	ldr	r5, [pc, #52]	; (8009870 <__libc_init_array+0x38>)
 800983c:	4c0d      	ldr	r4, [pc, #52]	; (8009874 <__libc_init_array+0x3c>)
 800983e:	1b64      	subs	r4, r4, r5
 8009840:	10a4      	asrs	r4, r4, #2
 8009842:	2600      	movs	r6, #0
 8009844:	42a6      	cmp	r6, r4
 8009846:	d109      	bne.n	800985c <__libc_init_array+0x24>
 8009848:	4d0b      	ldr	r5, [pc, #44]	; (8009878 <__libc_init_array+0x40>)
 800984a:	4c0c      	ldr	r4, [pc, #48]	; (800987c <__libc_init_array+0x44>)
 800984c:	f000 fcb8 	bl	800a1c0 <_init>
 8009850:	1b64      	subs	r4, r4, r5
 8009852:	10a4      	asrs	r4, r4, #2
 8009854:	2600      	movs	r6, #0
 8009856:	42a6      	cmp	r6, r4
 8009858:	d105      	bne.n	8009866 <__libc_init_array+0x2e>
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009860:	4798      	blx	r3
 8009862:	3601      	adds	r6, #1
 8009864:	e7ee      	b.n	8009844 <__libc_init_array+0xc>
 8009866:	f855 3b04 	ldr.w	r3, [r5], #4
 800986a:	4798      	blx	r3
 800986c:	3601      	adds	r6, #1
 800986e:	e7f2      	b.n	8009856 <__libc_init_array+0x1e>
 8009870:	0800a690 	.word	0x0800a690
 8009874:	0800a690 	.word	0x0800a690
 8009878:	0800a690 	.word	0x0800a690
 800987c:	0800a694 	.word	0x0800a694

08009880 <__retarget_lock_acquire_recursive>:
 8009880:	4770      	bx	lr

08009882 <__retarget_lock_release_recursive>:
 8009882:	4770      	bx	lr

08009884 <memcpy>:
 8009884:	440a      	add	r2, r1
 8009886:	4291      	cmp	r1, r2
 8009888:	f100 33ff 	add.w	r3, r0, #4294967295
 800988c:	d100      	bne.n	8009890 <memcpy+0xc>
 800988e:	4770      	bx	lr
 8009890:	b510      	push	{r4, lr}
 8009892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800989a:	4291      	cmp	r1, r2
 800989c:	d1f9      	bne.n	8009892 <memcpy+0xe>
 800989e:	bd10      	pop	{r4, pc}

080098a0 <memset>:
 80098a0:	4402      	add	r2, r0
 80098a2:	4603      	mov	r3, r0
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d100      	bne.n	80098aa <memset+0xa>
 80098a8:	4770      	bx	lr
 80098aa:	f803 1b01 	strb.w	r1, [r3], #1
 80098ae:	e7f9      	b.n	80098a4 <memset+0x4>

080098b0 <_malloc_r>:
 80098b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b2:	1ccd      	adds	r5, r1, #3
 80098b4:	f025 0503 	bic.w	r5, r5, #3
 80098b8:	3508      	adds	r5, #8
 80098ba:	2d0c      	cmp	r5, #12
 80098bc:	bf38      	it	cc
 80098be:	250c      	movcc	r5, #12
 80098c0:	2d00      	cmp	r5, #0
 80098c2:	4606      	mov	r6, r0
 80098c4:	db01      	blt.n	80098ca <_malloc_r+0x1a>
 80098c6:	42a9      	cmp	r1, r5
 80098c8:	d903      	bls.n	80098d2 <_malloc_r+0x22>
 80098ca:	230c      	movs	r3, #12
 80098cc:	6033      	str	r3, [r6, #0]
 80098ce:	2000      	movs	r0, #0
 80098d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098d2:	f000 f8e1 	bl	8009a98 <__malloc_lock>
 80098d6:	4921      	ldr	r1, [pc, #132]	; (800995c <_malloc_r+0xac>)
 80098d8:	680a      	ldr	r2, [r1, #0]
 80098da:	4614      	mov	r4, r2
 80098dc:	b99c      	cbnz	r4, 8009906 <_malloc_r+0x56>
 80098de:	4f20      	ldr	r7, [pc, #128]	; (8009960 <_malloc_r+0xb0>)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	b923      	cbnz	r3, 80098ee <_malloc_r+0x3e>
 80098e4:	4621      	mov	r1, r4
 80098e6:	4630      	mov	r0, r6
 80098e8:	f000 f8a6 	bl	8009a38 <_sbrk_r>
 80098ec:	6038      	str	r0, [r7, #0]
 80098ee:	4629      	mov	r1, r5
 80098f0:	4630      	mov	r0, r6
 80098f2:	f000 f8a1 	bl	8009a38 <_sbrk_r>
 80098f6:	1c43      	adds	r3, r0, #1
 80098f8:	d123      	bne.n	8009942 <_malloc_r+0x92>
 80098fa:	230c      	movs	r3, #12
 80098fc:	6033      	str	r3, [r6, #0]
 80098fe:	4630      	mov	r0, r6
 8009900:	f000 f8d0 	bl	8009aa4 <__malloc_unlock>
 8009904:	e7e3      	b.n	80098ce <_malloc_r+0x1e>
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	1b5b      	subs	r3, r3, r5
 800990a:	d417      	bmi.n	800993c <_malloc_r+0x8c>
 800990c:	2b0b      	cmp	r3, #11
 800990e:	d903      	bls.n	8009918 <_malloc_r+0x68>
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	441c      	add	r4, r3
 8009914:	6025      	str	r5, [r4, #0]
 8009916:	e004      	b.n	8009922 <_malloc_r+0x72>
 8009918:	6863      	ldr	r3, [r4, #4]
 800991a:	42a2      	cmp	r2, r4
 800991c:	bf0c      	ite	eq
 800991e:	600b      	streq	r3, [r1, #0]
 8009920:	6053      	strne	r3, [r2, #4]
 8009922:	4630      	mov	r0, r6
 8009924:	f000 f8be 	bl	8009aa4 <__malloc_unlock>
 8009928:	f104 000b 	add.w	r0, r4, #11
 800992c:	1d23      	adds	r3, r4, #4
 800992e:	f020 0007 	bic.w	r0, r0, #7
 8009932:	1ac2      	subs	r2, r0, r3
 8009934:	d0cc      	beq.n	80098d0 <_malloc_r+0x20>
 8009936:	1a1b      	subs	r3, r3, r0
 8009938:	50a3      	str	r3, [r4, r2]
 800993a:	e7c9      	b.n	80098d0 <_malloc_r+0x20>
 800993c:	4622      	mov	r2, r4
 800993e:	6864      	ldr	r4, [r4, #4]
 8009940:	e7cc      	b.n	80098dc <_malloc_r+0x2c>
 8009942:	1cc4      	adds	r4, r0, #3
 8009944:	f024 0403 	bic.w	r4, r4, #3
 8009948:	42a0      	cmp	r0, r4
 800994a:	d0e3      	beq.n	8009914 <_malloc_r+0x64>
 800994c:	1a21      	subs	r1, r4, r0
 800994e:	4630      	mov	r0, r6
 8009950:	f000 f872 	bl	8009a38 <_sbrk_r>
 8009954:	3001      	adds	r0, #1
 8009956:	d1dd      	bne.n	8009914 <_malloc_r+0x64>
 8009958:	e7cf      	b.n	80098fa <_malloc_r+0x4a>
 800995a:	bf00      	nop
 800995c:	20004a7c 	.word	0x20004a7c
 8009960:	20004a80 	.word	0x20004a80

08009964 <cleanup_glue>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	460c      	mov	r4, r1
 8009968:	6809      	ldr	r1, [r1, #0]
 800996a:	4605      	mov	r5, r0
 800996c:	b109      	cbz	r1, 8009972 <cleanup_glue+0xe>
 800996e:	f7ff fff9 	bl	8009964 <cleanup_glue>
 8009972:	4621      	mov	r1, r4
 8009974:	4628      	mov	r0, r5
 8009976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800997a:	f000 b899 	b.w	8009ab0 <_free_r>
	...

08009980 <_reclaim_reent>:
 8009980:	4b2c      	ldr	r3, [pc, #176]	; (8009a34 <_reclaim_reent+0xb4>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4283      	cmp	r3, r0
 8009986:	b570      	push	{r4, r5, r6, lr}
 8009988:	4604      	mov	r4, r0
 800998a:	d051      	beq.n	8009a30 <_reclaim_reent+0xb0>
 800998c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800998e:	b143      	cbz	r3, 80099a2 <_reclaim_reent+0x22>
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d14a      	bne.n	8009a2c <_reclaim_reent+0xac>
 8009996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009998:	6819      	ldr	r1, [r3, #0]
 800999a:	b111      	cbz	r1, 80099a2 <_reclaim_reent+0x22>
 800999c:	4620      	mov	r0, r4
 800999e:	f000 f887 	bl	8009ab0 <_free_r>
 80099a2:	6961      	ldr	r1, [r4, #20]
 80099a4:	b111      	cbz	r1, 80099ac <_reclaim_reent+0x2c>
 80099a6:	4620      	mov	r0, r4
 80099a8:	f000 f882 	bl	8009ab0 <_free_r>
 80099ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80099ae:	b111      	cbz	r1, 80099b6 <_reclaim_reent+0x36>
 80099b0:	4620      	mov	r0, r4
 80099b2:	f000 f87d 	bl	8009ab0 <_free_r>
 80099b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80099b8:	b111      	cbz	r1, 80099c0 <_reclaim_reent+0x40>
 80099ba:	4620      	mov	r0, r4
 80099bc:	f000 f878 	bl	8009ab0 <_free_r>
 80099c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80099c2:	b111      	cbz	r1, 80099ca <_reclaim_reent+0x4a>
 80099c4:	4620      	mov	r0, r4
 80099c6:	f000 f873 	bl	8009ab0 <_free_r>
 80099ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80099cc:	b111      	cbz	r1, 80099d4 <_reclaim_reent+0x54>
 80099ce:	4620      	mov	r0, r4
 80099d0:	f000 f86e 	bl	8009ab0 <_free_r>
 80099d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80099d6:	b111      	cbz	r1, 80099de <_reclaim_reent+0x5e>
 80099d8:	4620      	mov	r0, r4
 80099da:	f000 f869 	bl	8009ab0 <_free_r>
 80099de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80099e0:	b111      	cbz	r1, 80099e8 <_reclaim_reent+0x68>
 80099e2:	4620      	mov	r0, r4
 80099e4:	f000 f864 	bl	8009ab0 <_free_r>
 80099e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099ea:	b111      	cbz	r1, 80099f2 <_reclaim_reent+0x72>
 80099ec:	4620      	mov	r0, r4
 80099ee:	f000 f85f 	bl	8009ab0 <_free_r>
 80099f2:	69a3      	ldr	r3, [r4, #24]
 80099f4:	b1e3      	cbz	r3, 8009a30 <_reclaim_reent+0xb0>
 80099f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80099f8:	4620      	mov	r0, r4
 80099fa:	4798      	blx	r3
 80099fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80099fe:	b1b9      	cbz	r1, 8009a30 <_reclaim_reent+0xb0>
 8009a00:	4620      	mov	r0, r4
 8009a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a06:	f7ff bfad 	b.w	8009964 <cleanup_glue>
 8009a0a:	5949      	ldr	r1, [r1, r5]
 8009a0c:	b941      	cbnz	r1, 8009a20 <_reclaim_reent+0xa0>
 8009a0e:	3504      	adds	r5, #4
 8009a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a12:	2d80      	cmp	r5, #128	; 0x80
 8009a14:	68d9      	ldr	r1, [r3, #12]
 8009a16:	d1f8      	bne.n	8009a0a <_reclaim_reent+0x8a>
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f000 f849 	bl	8009ab0 <_free_r>
 8009a1e:	e7ba      	b.n	8009996 <_reclaim_reent+0x16>
 8009a20:	680e      	ldr	r6, [r1, #0]
 8009a22:	4620      	mov	r0, r4
 8009a24:	f000 f844 	bl	8009ab0 <_free_r>
 8009a28:	4631      	mov	r1, r6
 8009a2a:	e7ef      	b.n	8009a0c <_reclaim_reent+0x8c>
 8009a2c:	2500      	movs	r5, #0
 8009a2e:	e7ef      	b.n	8009a10 <_reclaim_reent+0x90>
 8009a30:	bd70      	pop	{r4, r5, r6, pc}
 8009a32:	bf00      	nop
 8009a34:	20000018 	.word	0x20000018

08009a38 <_sbrk_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4d06      	ldr	r5, [pc, #24]	; (8009a54 <_sbrk_r+0x1c>)
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	4604      	mov	r4, r0
 8009a40:	4608      	mov	r0, r1
 8009a42:	602b      	str	r3, [r5, #0]
 8009a44:	f7f8 fb58 	bl	80020f8 <_sbrk>
 8009a48:	1c43      	adds	r3, r0, #1
 8009a4a:	d102      	bne.n	8009a52 <_sbrk_r+0x1a>
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	b103      	cbz	r3, 8009a52 <_sbrk_r+0x1a>
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	20004d78 	.word	0x20004d78

08009a58 <siprintf>:
 8009a58:	b40e      	push	{r1, r2, r3}
 8009a5a:	b500      	push	{lr}
 8009a5c:	b09c      	sub	sp, #112	; 0x70
 8009a5e:	ab1d      	add	r3, sp, #116	; 0x74
 8009a60:	9002      	str	r0, [sp, #8]
 8009a62:	9006      	str	r0, [sp, #24]
 8009a64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a68:	4809      	ldr	r0, [pc, #36]	; (8009a90 <siprintf+0x38>)
 8009a6a:	9107      	str	r1, [sp, #28]
 8009a6c:	9104      	str	r1, [sp, #16]
 8009a6e:	4909      	ldr	r1, [pc, #36]	; (8009a94 <siprintf+0x3c>)
 8009a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a74:	9105      	str	r1, [sp, #20]
 8009a76:	6800      	ldr	r0, [r0, #0]
 8009a78:	9301      	str	r3, [sp, #4]
 8009a7a:	a902      	add	r1, sp, #8
 8009a7c:	f000 f8c4 	bl	8009c08 <_svfiprintf_r>
 8009a80:	9b02      	ldr	r3, [sp, #8]
 8009a82:	2200      	movs	r2, #0
 8009a84:	701a      	strb	r2, [r3, #0]
 8009a86:	b01c      	add	sp, #112	; 0x70
 8009a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a8c:	b003      	add	sp, #12
 8009a8e:	4770      	bx	lr
 8009a90:	20000018 	.word	0x20000018
 8009a94:	ffff0208 	.word	0xffff0208

08009a98 <__malloc_lock>:
 8009a98:	4801      	ldr	r0, [pc, #4]	; (8009aa0 <__malloc_lock+0x8>)
 8009a9a:	f7ff bef1 	b.w	8009880 <__retarget_lock_acquire_recursive>
 8009a9e:	bf00      	nop
 8009aa0:	20004d70 	.word	0x20004d70

08009aa4 <__malloc_unlock>:
 8009aa4:	4801      	ldr	r0, [pc, #4]	; (8009aac <__malloc_unlock+0x8>)
 8009aa6:	f7ff beec 	b.w	8009882 <__retarget_lock_release_recursive>
 8009aaa:	bf00      	nop
 8009aac:	20004d70 	.word	0x20004d70

08009ab0 <_free_r>:
 8009ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ab2:	2900      	cmp	r1, #0
 8009ab4:	d048      	beq.n	8009b48 <_free_r+0x98>
 8009ab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aba:	9001      	str	r0, [sp, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f1a1 0404 	sub.w	r4, r1, #4
 8009ac2:	bfb8      	it	lt
 8009ac4:	18e4      	addlt	r4, r4, r3
 8009ac6:	f7ff ffe7 	bl	8009a98 <__malloc_lock>
 8009aca:	4a20      	ldr	r2, [pc, #128]	; (8009b4c <_free_r+0x9c>)
 8009acc:	9801      	ldr	r0, [sp, #4]
 8009ace:	6813      	ldr	r3, [r2, #0]
 8009ad0:	4615      	mov	r5, r2
 8009ad2:	b933      	cbnz	r3, 8009ae2 <_free_r+0x32>
 8009ad4:	6063      	str	r3, [r4, #4]
 8009ad6:	6014      	str	r4, [r2, #0]
 8009ad8:	b003      	add	sp, #12
 8009ada:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ade:	f7ff bfe1 	b.w	8009aa4 <__malloc_unlock>
 8009ae2:	42a3      	cmp	r3, r4
 8009ae4:	d90b      	bls.n	8009afe <_free_r+0x4e>
 8009ae6:	6821      	ldr	r1, [r4, #0]
 8009ae8:	1862      	adds	r2, r4, r1
 8009aea:	4293      	cmp	r3, r2
 8009aec:	bf04      	itt	eq
 8009aee:	681a      	ldreq	r2, [r3, #0]
 8009af0:	685b      	ldreq	r3, [r3, #4]
 8009af2:	6063      	str	r3, [r4, #4]
 8009af4:	bf04      	itt	eq
 8009af6:	1852      	addeq	r2, r2, r1
 8009af8:	6022      	streq	r2, [r4, #0]
 8009afa:	602c      	str	r4, [r5, #0]
 8009afc:	e7ec      	b.n	8009ad8 <_free_r+0x28>
 8009afe:	461a      	mov	r2, r3
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	b10b      	cbz	r3, 8009b08 <_free_r+0x58>
 8009b04:	42a3      	cmp	r3, r4
 8009b06:	d9fa      	bls.n	8009afe <_free_r+0x4e>
 8009b08:	6811      	ldr	r1, [r2, #0]
 8009b0a:	1855      	adds	r5, r2, r1
 8009b0c:	42a5      	cmp	r5, r4
 8009b0e:	d10b      	bne.n	8009b28 <_free_r+0x78>
 8009b10:	6824      	ldr	r4, [r4, #0]
 8009b12:	4421      	add	r1, r4
 8009b14:	1854      	adds	r4, r2, r1
 8009b16:	42a3      	cmp	r3, r4
 8009b18:	6011      	str	r1, [r2, #0]
 8009b1a:	d1dd      	bne.n	8009ad8 <_free_r+0x28>
 8009b1c:	681c      	ldr	r4, [r3, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	6053      	str	r3, [r2, #4]
 8009b22:	4421      	add	r1, r4
 8009b24:	6011      	str	r1, [r2, #0]
 8009b26:	e7d7      	b.n	8009ad8 <_free_r+0x28>
 8009b28:	d902      	bls.n	8009b30 <_free_r+0x80>
 8009b2a:	230c      	movs	r3, #12
 8009b2c:	6003      	str	r3, [r0, #0]
 8009b2e:	e7d3      	b.n	8009ad8 <_free_r+0x28>
 8009b30:	6825      	ldr	r5, [r4, #0]
 8009b32:	1961      	adds	r1, r4, r5
 8009b34:	428b      	cmp	r3, r1
 8009b36:	bf04      	itt	eq
 8009b38:	6819      	ldreq	r1, [r3, #0]
 8009b3a:	685b      	ldreq	r3, [r3, #4]
 8009b3c:	6063      	str	r3, [r4, #4]
 8009b3e:	bf04      	itt	eq
 8009b40:	1949      	addeq	r1, r1, r5
 8009b42:	6021      	streq	r1, [r4, #0]
 8009b44:	6054      	str	r4, [r2, #4]
 8009b46:	e7c7      	b.n	8009ad8 <_free_r+0x28>
 8009b48:	b003      	add	sp, #12
 8009b4a:	bd30      	pop	{r4, r5, pc}
 8009b4c:	20004a7c 	.word	0x20004a7c

08009b50 <__ssputs_r>:
 8009b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b54:	688e      	ldr	r6, [r1, #8]
 8009b56:	429e      	cmp	r6, r3
 8009b58:	4682      	mov	sl, r0
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	4690      	mov	r8, r2
 8009b5e:	461f      	mov	r7, r3
 8009b60:	d838      	bhi.n	8009bd4 <__ssputs_r+0x84>
 8009b62:	898a      	ldrh	r2, [r1, #12]
 8009b64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b68:	d032      	beq.n	8009bd0 <__ssputs_r+0x80>
 8009b6a:	6825      	ldr	r5, [r4, #0]
 8009b6c:	6909      	ldr	r1, [r1, #16]
 8009b6e:	eba5 0901 	sub.w	r9, r5, r1
 8009b72:	6965      	ldr	r5, [r4, #20]
 8009b74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	444b      	add	r3, r9
 8009b80:	106d      	asrs	r5, r5, #1
 8009b82:	429d      	cmp	r5, r3
 8009b84:	bf38      	it	cc
 8009b86:	461d      	movcc	r5, r3
 8009b88:	0553      	lsls	r3, r2, #21
 8009b8a:	d531      	bpl.n	8009bf0 <__ssputs_r+0xa0>
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	f7ff fe8f 	bl	80098b0 <_malloc_r>
 8009b92:	4606      	mov	r6, r0
 8009b94:	b950      	cbnz	r0, 8009bac <__ssputs_r+0x5c>
 8009b96:	230c      	movs	r3, #12
 8009b98:	f8ca 3000 	str.w	r3, [sl]
 8009b9c:	89a3      	ldrh	r3, [r4, #12]
 8009b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ba2:	81a3      	strh	r3, [r4, #12]
 8009ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bac:	6921      	ldr	r1, [r4, #16]
 8009bae:	464a      	mov	r2, r9
 8009bb0:	f7ff fe68 	bl	8009884 <memcpy>
 8009bb4:	89a3      	ldrh	r3, [r4, #12]
 8009bb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bbe:	81a3      	strh	r3, [r4, #12]
 8009bc0:	6126      	str	r6, [r4, #16]
 8009bc2:	6165      	str	r5, [r4, #20]
 8009bc4:	444e      	add	r6, r9
 8009bc6:	eba5 0509 	sub.w	r5, r5, r9
 8009bca:	6026      	str	r6, [r4, #0]
 8009bcc:	60a5      	str	r5, [r4, #8]
 8009bce:	463e      	mov	r6, r7
 8009bd0:	42be      	cmp	r6, r7
 8009bd2:	d900      	bls.n	8009bd6 <__ssputs_r+0x86>
 8009bd4:	463e      	mov	r6, r7
 8009bd6:	4632      	mov	r2, r6
 8009bd8:	6820      	ldr	r0, [r4, #0]
 8009bda:	4641      	mov	r1, r8
 8009bdc:	f000 faa8 	bl	800a130 <memmove>
 8009be0:	68a3      	ldr	r3, [r4, #8]
 8009be2:	6822      	ldr	r2, [r4, #0]
 8009be4:	1b9b      	subs	r3, r3, r6
 8009be6:	4432      	add	r2, r6
 8009be8:	60a3      	str	r3, [r4, #8]
 8009bea:	6022      	str	r2, [r4, #0]
 8009bec:	2000      	movs	r0, #0
 8009bee:	e7db      	b.n	8009ba8 <__ssputs_r+0x58>
 8009bf0:	462a      	mov	r2, r5
 8009bf2:	f000 fab7 	bl	800a164 <_realloc_r>
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	d1e1      	bne.n	8009bc0 <__ssputs_r+0x70>
 8009bfc:	6921      	ldr	r1, [r4, #16]
 8009bfe:	4650      	mov	r0, sl
 8009c00:	f7ff ff56 	bl	8009ab0 <_free_r>
 8009c04:	e7c7      	b.n	8009b96 <__ssputs_r+0x46>
	...

08009c08 <_svfiprintf_r>:
 8009c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c0c:	4698      	mov	r8, r3
 8009c0e:	898b      	ldrh	r3, [r1, #12]
 8009c10:	061b      	lsls	r3, r3, #24
 8009c12:	b09d      	sub	sp, #116	; 0x74
 8009c14:	4607      	mov	r7, r0
 8009c16:	460d      	mov	r5, r1
 8009c18:	4614      	mov	r4, r2
 8009c1a:	d50e      	bpl.n	8009c3a <_svfiprintf_r+0x32>
 8009c1c:	690b      	ldr	r3, [r1, #16]
 8009c1e:	b963      	cbnz	r3, 8009c3a <_svfiprintf_r+0x32>
 8009c20:	2140      	movs	r1, #64	; 0x40
 8009c22:	f7ff fe45 	bl	80098b0 <_malloc_r>
 8009c26:	6028      	str	r0, [r5, #0]
 8009c28:	6128      	str	r0, [r5, #16]
 8009c2a:	b920      	cbnz	r0, 8009c36 <_svfiprintf_r+0x2e>
 8009c2c:	230c      	movs	r3, #12
 8009c2e:	603b      	str	r3, [r7, #0]
 8009c30:	f04f 30ff 	mov.w	r0, #4294967295
 8009c34:	e0d1      	b.n	8009dda <_svfiprintf_r+0x1d2>
 8009c36:	2340      	movs	r3, #64	; 0x40
 8009c38:	616b      	str	r3, [r5, #20]
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c3e:	2320      	movs	r3, #32
 8009c40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c44:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c48:	2330      	movs	r3, #48	; 0x30
 8009c4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009df4 <_svfiprintf_r+0x1ec>
 8009c4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c52:	f04f 0901 	mov.w	r9, #1
 8009c56:	4623      	mov	r3, r4
 8009c58:	469a      	mov	sl, r3
 8009c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c5e:	b10a      	cbz	r2, 8009c64 <_svfiprintf_r+0x5c>
 8009c60:	2a25      	cmp	r2, #37	; 0x25
 8009c62:	d1f9      	bne.n	8009c58 <_svfiprintf_r+0x50>
 8009c64:	ebba 0b04 	subs.w	fp, sl, r4
 8009c68:	d00b      	beq.n	8009c82 <_svfiprintf_r+0x7a>
 8009c6a:	465b      	mov	r3, fp
 8009c6c:	4622      	mov	r2, r4
 8009c6e:	4629      	mov	r1, r5
 8009c70:	4638      	mov	r0, r7
 8009c72:	f7ff ff6d 	bl	8009b50 <__ssputs_r>
 8009c76:	3001      	adds	r0, #1
 8009c78:	f000 80aa 	beq.w	8009dd0 <_svfiprintf_r+0x1c8>
 8009c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c7e:	445a      	add	r2, fp
 8009c80:	9209      	str	r2, [sp, #36]	; 0x24
 8009c82:	f89a 3000 	ldrb.w	r3, [sl]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f000 80a2 	beq.w	8009dd0 <_svfiprintf_r+0x1c8>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c96:	f10a 0a01 	add.w	sl, sl, #1
 8009c9a:	9304      	str	r3, [sp, #16]
 8009c9c:	9307      	str	r3, [sp, #28]
 8009c9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ca2:	931a      	str	r3, [sp, #104]	; 0x68
 8009ca4:	4654      	mov	r4, sl
 8009ca6:	2205      	movs	r2, #5
 8009ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cac:	4851      	ldr	r0, [pc, #324]	; (8009df4 <_svfiprintf_r+0x1ec>)
 8009cae:	f7f6 fa97 	bl	80001e0 <memchr>
 8009cb2:	9a04      	ldr	r2, [sp, #16]
 8009cb4:	b9d8      	cbnz	r0, 8009cee <_svfiprintf_r+0xe6>
 8009cb6:	06d0      	lsls	r0, r2, #27
 8009cb8:	bf44      	itt	mi
 8009cba:	2320      	movmi	r3, #32
 8009cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cc0:	0711      	lsls	r1, r2, #28
 8009cc2:	bf44      	itt	mi
 8009cc4:	232b      	movmi	r3, #43	; 0x2b
 8009cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cca:	f89a 3000 	ldrb.w	r3, [sl]
 8009cce:	2b2a      	cmp	r3, #42	; 0x2a
 8009cd0:	d015      	beq.n	8009cfe <_svfiprintf_r+0xf6>
 8009cd2:	9a07      	ldr	r2, [sp, #28]
 8009cd4:	4654      	mov	r4, sl
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	f04f 0c0a 	mov.w	ip, #10
 8009cdc:	4621      	mov	r1, r4
 8009cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ce2:	3b30      	subs	r3, #48	; 0x30
 8009ce4:	2b09      	cmp	r3, #9
 8009ce6:	d94e      	bls.n	8009d86 <_svfiprintf_r+0x17e>
 8009ce8:	b1b0      	cbz	r0, 8009d18 <_svfiprintf_r+0x110>
 8009cea:	9207      	str	r2, [sp, #28]
 8009cec:	e014      	b.n	8009d18 <_svfiprintf_r+0x110>
 8009cee:	eba0 0308 	sub.w	r3, r0, r8
 8009cf2:	fa09 f303 	lsl.w	r3, r9, r3
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	9304      	str	r3, [sp, #16]
 8009cfa:	46a2      	mov	sl, r4
 8009cfc:	e7d2      	b.n	8009ca4 <_svfiprintf_r+0x9c>
 8009cfe:	9b03      	ldr	r3, [sp, #12]
 8009d00:	1d19      	adds	r1, r3, #4
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	9103      	str	r1, [sp, #12]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	bfbb      	ittet	lt
 8009d0a:	425b      	neglt	r3, r3
 8009d0c:	f042 0202 	orrlt.w	r2, r2, #2
 8009d10:	9307      	strge	r3, [sp, #28]
 8009d12:	9307      	strlt	r3, [sp, #28]
 8009d14:	bfb8      	it	lt
 8009d16:	9204      	strlt	r2, [sp, #16]
 8009d18:	7823      	ldrb	r3, [r4, #0]
 8009d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d1c:	d10c      	bne.n	8009d38 <_svfiprintf_r+0x130>
 8009d1e:	7863      	ldrb	r3, [r4, #1]
 8009d20:	2b2a      	cmp	r3, #42	; 0x2a
 8009d22:	d135      	bne.n	8009d90 <_svfiprintf_r+0x188>
 8009d24:	9b03      	ldr	r3, [sp, #12]
 8009d26:	1d1a      	adds	r2, r3, #4
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	9203      	str	r2, [sp, #12]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	bfb8      	it	lt
 8009d30:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d34:	3402      	adds	r4, #2
 8009d36:	9305      	str	r3, [sp, #20]
 8009d38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e04 <_svfiprintf_r+0x1fc>
 8009d3c:	7821      	ldrb	r1, [r4, #0]
 8009d3e:	2203      	movs	r2, #3
 8009d40:	4650      	mov	r0, sl
 8009d42:	f7f6 fa4d 	bl	80001e0 <memchr>
 8009d46:	b140      	cbz	r0, 8009d5a <_svfiprintf_r+0x152>
 8009d48:	2340      	movs	r3, #64	; 0x40
 8009d4a:	eba0 000a 	sub.w	r0, r0, sl
 8009d4e:	fa03 f000 	lsl.w	r0, r3, r0
 8009d52:	9b04      	ldr	r3, [sp, #16]
 8009d54:	4303      	orrs	r3, r0
 8009d56:	3401      	adds	r4, #1
 8009d58:	9304      	str	r3, [sp, #16]
 8009d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d5e:	4826      	ldr	r0, [pc, #152]	; (8009df8 <_svfiprintf_r+0x1f0>)
 8009d60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d64:	2206      	movs	r2, #6
 8009d66:	f7f6 fa3b 	bl	80001e0 <memchr>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d038      	beq.n	8009de0 <_svfiprintf_r+0x1d8>
 8009d6e:	4b23      	ldr	r3, [pc, #140]	; (8009dfc <_svfiprintf_r+0x1f4>)
 8009d70:	bb1b      	cbnz	r3, 8009dba <_svfiprintf_r+0x1b2>
 8009d72:	9b03      	ldr	r3, [sp, #12]
 8009d74:	3307      	adds	r3, #7
 8009d76:	f023 0307 	bic.w	r3, r3, #7
 8009d7a:	3308      	adds	r3, #8
 8009d7c:	9303      	str	r3, [sp, #12]
 8009d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d80:	4433      	add	r3, r6
 8009d82:	9309      	str	r3, [sp, #36]	; 0x24
 8009d84:	e767      	b.n	8009c56 <_svfiprintf_r+0x4e>
 8009d86:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d8a:	460c      	mov	r4, r1
 8009d8c:	2001      	movs	r0, #1
 8009d8e:	e7a5      	b.n	8009cdc <_svfiprintf_r+0xd4>
 8009d90:	2300      	movs	r3, #0
 8009d92:	3401      	adds	r4, #1
 8009d94:	9305      	str	r3, [sp, #20]
 8009d96:	4619      	mov	r1, r3
 8009d98:	f04f 0c0a 	mov.w	ip, #10
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009da2:	3a30      	subs	r2, #48	; 0x30
 8009da4:	2a09      	cmp	r2, #9
 8009da6:	d903      	bls.n	8009db0 <_svfiprintf_r+0x1a8>
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d0c5      	beq.n	8009d38 <_svfiprintf_r+0x130>
 8009dac:	9105      	str	r1, [sp, #20]
 8009dae:	e7c3      	b.n	8009d38 <_svfiprintf_r+0x130>
 8009db0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009db4:	4604      	mov	r4, r0
 8009db6:	2301      	movs	r3, #1
 8009db8:	e7f0      	b.n	8009d9c <_svfiprintf_r+0x194>
 8009dba:	ab03      	add	r3, sp, #12
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	462a      	mov	r2, r5
 8009dc0:	4b0f      	ldr	r3, [pc, #60]	; (8009e00 <_svfiprintf_r+0x1f8>)
 8009dc2:	a904      	add	r1, sp, #16
 8009dc4:	4638      	mov	r0, r7
 8009dc6:	f3af 8000 	nop.w
 8009dca:	1c42      	adds	r2, r0, #1
 8009dcc:	4606      	mov	r6, r0
 8009dce:	d1d6      	bne.n	8009d7e <_svfiprintf_r+0x176>
 8009dd0:	89ab      	ldrh	r3, [r5, #12]
 8009dd2:	065b      	lsls	r3, r3, #25
 8009dd4:	f53f af2c 	bmi.w	8009c30 <_svfiprintf_r+0x28>
 8009dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dda:	b01d      	add	sp, #116	; 0x74
 8009ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de0:	ab03      	add	r3, sp, #12
 8009de2:	9300      	str	r3, [sp, #0]
 8009de4:	462a      	mov	r2, r5
 8009de6:	4b06      	ldr	r3, [pc, #24]	; (8009e00 <_svfiprintf_r+0x1f8>)
 8009de8:	a904      	add	r1, sp, #16
 8009dea:	4638      	mov	r0, r7
 8009dec:	f000 f87a 	bl	8009ee4 <_printf_i>
 8009df0:	e7eb      	b.n	8009dca <_svfiprintf_r+0x1c2>
 8009df2:	bf00      	nop
 8009df4:	0800a654 	.word	0x0800a654
 8009df8:	0800a65e 	.word	0x0800a65e
 8009dfc:	00000000 	.word	0x00000000
 8009e00:	08009b51 	.word	0x08009b51
 8009e04:	0800a65a 	.word	0x0800a65a

08009e08 <_printf_common>:
 8009e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e0c:	4616      	mov	r6, r2
 8009e0e:	4699      	mov	r9, r3
 8009e10:	688a      	ldr	r2, [r1, #8]
 8009e12:	690b      	ldr	r3, [r1, #16]
 8009e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	bfb8      	it	lt
 8009e1c:	4613      	movlt	r3, r2
 8009e1e:	6033      	str	r3, [r6, #0]
 8009e20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e24:	4607      	mov	r7, r0
 8009e26:	460c      	mov	r4, r1
 8009e28:	b10a      	cbz	r2, 8009e2e <_printf_common+0x26>
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	6033      	str	r3, [r6, #0]
 8009e2e:	6823      	ldr	r3, [r4, #0]
 8009e30:	0699      	lsls	r1, r3, #26
 8009e32:	bf42      	ittt	mi
 8009e34:	6833      	ldrmi	r3, [r6, #0]
 8009e36:	3302      	addmi	r3, #2
 8009e38:	6033      	strmi	r3, [r6, #0]
 8009e3a:	6825      	ldr	r5, [r4, #0]
 8009e3c:	f015 0506 	ands.w	r5, r5, #6
 8009e40:	d106      	bne.n	8009e50 <_printf_common+0x48>
 8009e42:	f104 0a19 	add.w	sl, r4, #25
 8009e46:	68e3      	ldr	r3, [r4, #12]
 8009e48:	6832      	ldr	r2, [r6, #0]
 8009e4a:	1a9b      	subs	r3, r3, r2
 8009e4c:	42ab      	cmp	r3, r5
 8009e4e:	dc26      	bgt.n	8009e9e <_printf_common+0x96>
 8009e50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e54:	1e13      	subs	r3, r2, #0
 8009e56:	6822      	ldr	r2, [r4, #0]
 8009e58:	bf18      	it	ne
 8009e5a:	2301      	movne	r3, #1
 8009e5c:	0692      	lsls	r2, r2, #26
 8009e5e:	d42b      	bmi.n	8009eb8 <_printf_common+0xb0>
 8009e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e64:	4649      	mov	r1, r9
 8009e66:	4638      	mov	r0, r7
 8009e68:	47c0      	blx	r8
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	d01e      	beq.n	8009eac <_printf_common+0xa4>
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	68e5      	ldr	r5, [r4, #12]
 8009e72:	6832      	ldr	r2, [r6, #0]
 8009e74:	f003 0306 	and.w	r3, r3, #6
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	bf08      	it	eq
 8009e7c:	1aad      	subeq	r5, r5, r2
 8009e7e:	68a3      	ldr	r3, [r4, #8]
 8009e80:	6922      	ldr	r2, [r4, #16]
 8009e82:	bf0c      	ite	eq
 8009e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e88:	2500      	movne	r5, #0
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	bfc4      	itt	gt
 8009e8e:	1a9b      	subgt	r3, r3, r2
 8009e90:	18ed      	addgt	r5, r5, r3
 8009e92:	2600      	movs	r6, #0
 8009e94:	341a      	adds	r4, #26
 8009e96:	42b5      	cmp	r5, r6
 8009e98:	d11a      	bne.n	8009ed0 <_printf_common+0xc8>
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	e008      	b.n	8009eb0 <_printf_common+0xa8>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	4652      	mov	r2, sl
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	47c0      	blx	r8
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	d103      	bne.n	8009eb4 <_printf_common+0xac>
 8009eac:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb4:	3501      	adds	r5, #1
 8009eb6:	e7c6      	b.n	8009e46 <_printf_common+0x3e>
 8009eb8:	18e1      	adds	r1, r4, r3
 8009eba:	1c5a      	adds	r2, r3, #1
 8009ebc:	2030      	movs	r0, #48	; 0x30
 8009ebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ec2:	4422      	add	r2, r4
 8009ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ecc:	3302      	adds	r3, #2
 8009ece:	e7c7      	b.n	8009e60 <_printf_common+0x58>
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	4622      	mov	r2, r4
 8009ed4:	4649      	mov	r1, r9
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	47c0      	blx	r8
 8009eda:	3001      	adds	r0, #1
 8009edc:	d0e6      	beq.n	8009eac <_printf_common+0xa4>
 8009ede:	3601      	adds	r6, #1
 8009ee0:	e7d9      	b.n	8009e96 <_printf_common+0x8e>
	...

08009ee4 <_printf_i>:
 8009ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee8:	460c      	mov	r4, r1
 8009eea:	4691      	mov	r9, r2
 8009eec:	7e27      	ldrb	r7, [r4, #24]
 8009eee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ef0:	2f78      	cmp	r7, #120	; 0x78
 8009ef2:	4680      	mov	r8, r0
 8009ef4:	469a      	mov	sl, r3
 8009ef6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009efa:	d807      	bhi.n	8009f0c <_printf_i+0x28>
 8009efc:	2f62      	cmp	r7, #98	; 0x62
 8009efe:	d80a      	bhi.n	8009f16 <_printf_i+0x32>
 8009f00:	2f00      	cmp	r7, #0
 8009f02:	f000 80d8 	beq.w	800a0b6 <_printf_i+0x1d2>
 8009f06:	2f58      	cmp	r7, #88	; 0x58
 8009f08:	f000 80a3 	beq.w	800a052 <_printf_i+0x16e>
 8009f0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f14:	e03a      	b.n	8009f8c <_printf_i+0xa8>
 8009f16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f1a:	2b15      	cmp	r3, #21
 8009f1c:	d8f6      	bhi.n	8009f0c <_printf_i+0x28>
 8009f1e:	a001      	add	r0, pc, #4	; (adr r0, 8009f24 <_printf_i+0x40>)
 8009f20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009f24:	08009f7d 	.word	0x08009f7d
 8009f28:	08009f91 	.word	0x08009f91
 8009f2c:	08009f0d 	.word	0x08009f0d
 8009f30:	08009f0d 	.word	0x08009f0d
 8009f34:	08009f0d 	.word	0x08009f0d
 8009f38:	08009f0d 	.word	0x08009f0d
 8009f3c:	08009f91 	.word	0x08009f91
 8009f40:	08009f0d 	.word	0x08009f0d
 8009f44:	08009f0d 	.word	0x08009f0d
 8009f48:	08009f0d 	.word	0x08009f0d
 8009f4c:	08009f0d 	.word	0x08009f0d
 8009f50:	0800a09d 	.word	0x0800a09d
 8009f54:	08009fc1 	.word	0x08009fc1
 8009f58:	0800a07f 	.word	0x0800a07f
 8009f5c:	08009f0d 	.word	0x08009f0d
 8009f60:	08009f0d 	.word	0x08009f0d
 8009f64:	0800a0bf 	.word	0x0800a0bf
 8009f68:	08009f0d 	.word	0x08009f0d
 8009f6c:	08009fc1 	.word	0x08009fc1
 8009f70:	08009f0d 	.word	0x08009f0d
 8009f74:	08009f0d 	.word	0x08009f0d
 8009f78:	0800a087 	.word	0x0800a087
 8009f7c:	680b      	ldr	r3, [r1, #0]
 8009f7e:	1d1a      	adds	r2, r3, #4
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	600a      	str	r2, [r1, #0]
 8009f84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e0a3      	b.n	800a0d8 <_printf_i+0x1f4>
 8009f90:	6825      	ldr	r5, [r4, #0]
 8009f92:	6808      	ldr	r0, [r1, #0]
 8009f94:	062e      	lsls	r6, r5, #24
 8009f96:	f100 0304 	add.w	r3, r0, #4
 8009f9a:	d50a      	bpl.n	8009fb2 <_printf_i+0xce>
 8009f9c:	6805      	ldr	r5, [r0, #0]
 8009f9e:	600b      	str	r3, [r1, #0]
 8009fa0:	2d00      	cmp	r5, #0
 8009fa2:	da03      	bge.n	8009fac <_printf_i+0xc8>
 8009fa4:	232d      	movs	r3, #45	; 0x2d
 8009fa6:	426d      	negs	r5, r5
 8009fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fac:	485e      	ldr	r0, [pc, #376]	; (800a128 <_printf_i+0x244>)
 8009fae:	230a      	movs	r3, #10
 8009fb0:	e019      	b.n	8009fe6 <_printf_i+0x102>
 8009fb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009fb6:	6805      	ldr	r5, [r0, #0]
 8009fb8:	600b      	str	r3, [r1, #0]
 8009fba:	bf18      	it	ne
 8009fbc:	b22d      	sxthne	r5, r5
 8009fbe:	e7ef      	b.n	8009fa0 <_printf_i+0xbc>
 8009fc0:	680b      	ldr	r3, [r1, #0]
 8009fc2:	6825      	ldr	r5, [r4, #0]
 8009fc4:	1d18      	adds	r0, r3, #4
 8009fc6:	6008      	str	r0, [r1, #0]
 8009fc8:	0628      	lsls	r0, r5, #24
 8009fca:	d501      	bpl.n	8009fd0 <_printf_i+0xec>
 8009fcc:	681d      	ldr	r5, [r3, #0]
 8009fce:	e002      	b.n	8009fd6 <_printf_i+0xf2>
 8009fd0:	0669      	lsls	r1, r5, #25
 8009fd2:	d5fb      	bpl.n	8009fcc <_printf_i+0xe8>
 8009fd4:	881d      	ldrh	r5, [r3, #0]
 8009fd6:	4854      	ldr	r0, [pc, #336]	; (800a128 <_printf_i+0x244>)
 8009fd8:	2f6f      	cmp	r7, #111	; 0x6f
 8009fda:	bf0c      	ite	eq
 8009fdc:	2308      	moveq	r3, #8
 8009fde:	230a      	movne	r3, #10
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fe6:	6866      	ldr	r6, [r4, #4]
 8009fe8:	60a6      	str	r6, [r4, #8]
 8009fea:	2e00      	cmp	r6, #0
 8009fec:	bfa2      	ittt	ge
 8009fee:	6821      	ldrge	r1, [r4, #0]
 8009ff0:	f021 0104 	bicge.w	r1, r1, #4
 8009ff4:	6021      	strge	r1, [r4, #0]
 8009ff6:	b90d      	cbnz	r5, 8009ffc <_printf_i+0x118>
 8009ff8:	2e00      	cmp	r6, #0
 8009ffa:	d04d      	beq.n	800a098 <_printf_i+0x1b4>
 8009ffc:	4616      	mov	r6, r2
 8009ffe:	fbb5 f1f3 	udiv	r1, r5, r3
 800a002:	fb03 5711 	mls	r7, r3, r1, r5
 800a006:	5dc7      	ldrb	r7, [r0, r7]
 800a008:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a00c:	462f      	mov	r7, r5
 800a00e:	42bb      	cmp	r3, r7
 800a010:	460d      	mov	r5, r1
 800a012:	d9f4      	bls.n	8009ffe <_printf_i+0x11a>
 800a014:	2b08      	cmp	r3, #8
 800a016:	d10b      	bne.n	800a030 <_printf_i+0x14c>
 800a018:	6823      	ldr	r3, [r4, #0]
 800a01a:	07df      	lsls	r7, r3, #31
 800a01c:	d508      	bpl.n	800a030 <_printf_i+0x14c>
 800a01e:	6923      	ldr	r3, [r4, #16]
 800a020:	6861      	ldr	r1, [r4, #4]
 800a022:	4299      	cmp	r1, r3
 800a024:	bfde      	ittt	le
 800a026:	2330      	movle	r3, #48	; 0x30
 800a028:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a02c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a030:	1b92      	subs	r2, r2, r6
 800a032:	6122      	str	r2, [r4, #16]
 800a034:	f8cd a000 	str.w	sl, [sp]
 800a038:	464b      	mov	r3, r9
 800a03a:	aa03      	add	r2, sp, #12
 800a03c:	4621      	mov	r1, r4
 800a03e:	4640      	mov	r0, r8
 800a040:	f7ff fee2 	bl	8009e08 <_printf_common>
 800a044:	3001      	adds	r0, #1
 800a046:	d14c      	bne.n	800a0e2 <_printf_i+0x1fe>
 800a048:	f04f 30ff 	mov.w	r0, #4294967295
 800a04c:	b004      	add	sp, #16
 800a04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a052:	4835      	ldr	r0, [pc, #212]	; (800a128 <_printf_i+0x244>)
 800a054:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a058:	6823      	ldr	r3, [r4, #0]
 800a05a:	680e      	ldr	r6, [r1, #0]
 800a05c:	061f      	lsls	r7, r3, #24
 800a05e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a062:	600e      	str	r6, [r1, #0]
 800a064:	d514      	bpl.n	800a090 <_printf_i+0x1ac>
 800a066:	07d9      	lsls	r1, r3, #31
 800a068:	bf44      	itt	mi
 800a06a:	f043 0320 	orrmi.w	r3, r3, #32
 800a06e:	6023      	strmi	r3, [r4, #0]
 800a070:	b91d      	cbnz	r5, 800a07a <_printf_i+0x196>
 800a072:	6823      	ldr	r3, [r4, #0]
 800a074:	f023 0320 	bic.w	r3, r3, #32
 800a078:	6023      	str	r3, [r4, #0]
 800a07a:	2310      	movs	r3, #16
 800a07c:	e7b0      	b.n	8009fe0 <_printf_i+0xfc>
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	f043 0320 	orr.w	r3, r3, #32
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	2378      	movs	r3, #120	; 0x78
 800a088:	4828      	ldr	r0, [pc, #160]	; (800a12c <_printf_i+0x248>)
 800a08a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a08e:	e7e3      	b.n	800a058 <_printf_i+0x174>
 800a090:	065e      	lsls	r6, r3, #25
 800a092:	bf48      	it	mi
 800a094:	b2ad      	uxthmi	r5, r5
 800a096:	e7e6      	b.n	800a066 <_printf_i+0x182>
 800a098:	4616      	mov	r6, r2
 800a09a:	e7bb      	b.n	800a014 <_printf_i+0x130>
 800a09c:	680b      	ldr	r3, [r1, #0]
 800a09e:	6826      	ldr	r6, [r4, #0]
 800a0a0:	6960      	ldr	r0, [r4, #20]
 800a0a2:	1d1d      	adds	r5, r3, #4
 800a0a4:	600d      	str	r5, [r1, #0]
 800a0a6:	0635      	lsls	r5, r6, #24
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	d501      	bpl.n	800a0b0 <_printf_i+0x1cc>
 800a0ac:	6018      	str	r0, [r3, #0]
 800a0ae:	e002      	b.n	800a0b6 <_printf_i+0x1d2>
 800a0b0:	0671      	lsls	r1, r6, #25
 800a0b2:	d5fb      	bpl.n	800a0ac <_printf_i+0x1c8>
 800a0b4:	8018      	strh	r0, [r3, #0]
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	6123      	str	r3, [r4, #16]
 800a0ba:	4616      	mov	r6, r2
 800a0bc:	e7ba      	b.n	800a034 <_printf_i+0x150>
 800a0be:	680b      	ldr	r3, [r1, #0]
 800a0c0:	1d1a      	adds	r2, r3, #4
 800a0c2:	600a      	str	r2, [r1, #0]
 800a0c4:	681e      	ldr	r6, [r3, #0]
 800a0c6:	6862      	ldr	r2, [r4, #4]
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f7f6 f888 	bl	80001e0 <memchr>
 800a0d0:	b108      	cbz	r0, 800a0d6 <_printf_i+0x1f2>
 800a0d2:	1b80      	subs	r0, r0, r6
 800a0d4:	6060      	str	r0, [r4, #4]
 800a0d6:	6863      	ldr	r3, [r4, #4]
 800a0d8:	6123      	str	r3, [r4, #16]
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0e0:	e7a8      	b.n	800a034 <_printf_i+0x150>
 800a0e2:	6923      	ldr	r3, [r4, #16]
 800a0e4:	4632      	mov	r2, r6
 800a0e6:	4649      	mov	r1, r9
 800a0e8:	4640      	mov	r0, r8
 800a0ea:	47d0      	blx	sl
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	d0ab      	beq.n	800a048 <_printf_i+0x164>
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	079b      	lsls	r3, r3, #30
 800a0f4:	d413      	bmi.n	800a11e <_printf_i+0x23a>
 800a0f6:	68e0      	ldr	r0, [r4, #12]
 800a0f8:	9b03      	ldr	r3, [sp, #12]
 800a0fa:	4298      	cmp	r0, r3
 800a0fc:	bfb8      	it	lt
 800a0fe:	4618      	movlt	r0, r3
 800a100:	e7a4      	b.n	800a04c <_printf_i+0x168>
 800a102:	2301      	movs	r3, #1
 800a104:	4632      	mov	r2, r6
 800a106:	4649      	mov	r1, r9
 800a108:	4640      	mov	r0, r8
 800a10a:	47d0      	blx	sl
 800a10c:	3001      	adds	r0, #1
 800a10e:	d09b      	beq.n	800a048 <_printf_i+0x164>
 800a110:	3501      	adds	r5, #1
 800a112:	68e3      	ldr	r3, [r4, #12]
 800a114:	9903      	ldr	r1, [sp, #12]
 800a116:	1a5b      	subs	r3, r3, r1
 800a118:	42ab      	cmp	r3, r5
 800a11a:	dcf2      	bgt.n	800a102 <_printf_i+0x21e>
 800a11c:	e7eb      	b.n	800a0f6 <_printf_i+0x212>
 800a11e:	2500      	movs	r5, #0
 800a120:	f104 0619 	add.w	r6, r4, #25
 800a124:	e7f5      	b.n	800a112 <_printf_i+0x22e>
 800a126:	bf00      	nop
 800a128:	0800a665 	.word	0x0800a665
 800a12c:	0800a676 	.word	0x0800a676

0800a130 <memmove>:
 800a130:	4288      	cmp	r0, r1
 800a132:	b510      	push	{r4, lr}
 800a134:	eb01 0402 	add.w	r4, r1, r2
 800a138:	d902      	bls.n	800a140 <memmove+0x10>
 800a13a:	4284      	cmp	r4, r0
 800a13c:	4623      	mov	r3, r4
 800a13e:	d807      	bhi.n	800a150 <memmove+0x20>
 800a140:	1e43      	subs	r3, r0, #1
 800a142:	42a1      	cmp	r1, r4
 800a144:	d008      	beq.n	800a158 <memmove+0x28>
 800a146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a14a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a14e:	e7f8      	b.n	800a142 <memmove+0x12>
 800a150:	4402      	add	r2, r0
 800a152:	4601      	mov	r1, r0
 800a154:	428a      	cmp	r2, r1
 800a156:	d100      	bne.n	800a15a <memmove+0x2a>
 800a158:	bd10      	pop	{r4, pc}
 800a15a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a15e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a162:	e7f7      	b.n	800a154 <memmove+0x24>

0800a164 <_realloc_r>:
 800a164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a166:	4607      	mov	r7, r0
 800a168:	4614      	mov	r4, r2
 800a16a:	460e      	mov	r6, r1
 800a16c:	b921      	cbnz	r1, 800a178 <_realloc_r+0x14>
 800a16e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a172:	4611      	mov	r1, r2
 800a174:	f7ff bb9c 	b.w	80098b0 <_malloc_r>
 800a178:	b922      	cbnz	r2, 800a184 <_realloc_r+0x20>
 800a17a:	f7ff fc99 	bl	8009ab0 <_free_r>
 800a17e:	4625      	mov	r5, r4
 800a180:	4628      	mov	r0, r5
 800a182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a184:	f000 f814 	bl	800a1b0 <_malloc_usable_size_r>
 800a188:	42a0      	cmp	r0, r4
 800a18a:	d20f      	bcs.n	800a1ac <_realloc_r+0x48>
 800a18c:	4621      	mov	r1, r4
 800a18e:	4638      	mov	r0, r7
 800a190:	f7ff fb8e 	bl	80098b0 <_malloc_r>
 800a194:	4605      	mov	r5, r0
 800a196:	2800      	cmp	r0, #0
 800a198:	d0f2      	beq.n	800a180 <_realloc_r+0x1c>
 800a19a:	4631      	mov	r1, r6
 800a19c:	4622      	mov	r2, r4
 800a19e:	f7ff fb71 	bl	8009884 <memcpy>
 800a1a2:	4631      	mov	r1, r6
 800a1a4:	4638      	mov	r0, r7
 800a1a6:	f7ff fc83 	bl	8009ab0 <_free_r>
 800a1aa:	e7e9      	b.n	800a180 <_realloc_r+0x1c>
 800a1ac:	4635      	mov	r5, r6
 800a1ae:	e7e7      	b.n	800a180 <_realloc_r+0x1c>

0800a1b0 <_malloc_usable_size_r>:
 800a1b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1b4:	1f18      	subs	r0, r3, #4
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	bfbc      	itt	lt
 800a1ba:	580b      	ldrlt	r3, [r1, r0]
 800a1bc:	18c0      	addlt	r0, r0, r3
 800a1be:	4770      	bx	lr

0800a1c0 <_init>:
 800a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c2:	bf00      	nop
 800a1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1c6:	bc08      	pop	{r3}
 800a1c8:	469e      	mov	lr, r3
 800a1ca:	4770      	bx	lr

0800a1cc <_fini>:
 800a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ce:	bf00      	nop
 800a1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d2:	bc08      	pop	{r3}
 800a1d4:	469e      	mov	lr, r3
 800a1d6:	4770      	bx	lr
