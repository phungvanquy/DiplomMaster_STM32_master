
SPI_RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009298  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08009438  08009438  00019438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800988c  0800988c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800988c  0800988c  0001988c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009894  08009894  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009894  08009894  00019894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009898  08009898  00019898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800989c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cb0  2000007c  08009918  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d2c  08009918  00024d2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021493  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ec6  00000000  00000000  0004153f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001858  00000000  00000000  00045408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001700  00000000  00000000  00046c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ae8  00000000  00000000  00048360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a12a  00000000  00000000  00060e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bd7d  00000000  00000000  0007af72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00116cef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006be0  00000000  00000000  00116d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009420 	.word	0x08009420

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08009420 	.word	0x08009420

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <delay_us>:
DHT_DataTypeDef DHT_Data;

extern TIM_HandleTypeDef htim10;

void delay_us(uint32_t us)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCounter(&htim10, 0);
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <delay_us+0x34>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2200      	movs	r2, #0
 8000586:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim10);
 8000588:	4808      	ldr	r0, [pc, #32]	; (80005ac <delay_us+0x34>)
 800058a:	f003 f821 	bl	80035d0 <HAL_TIM_Base_Start>
	while(__HAL_TIM_GetCounter(&htim10) < us);
 800058e:	bf00      	nop
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <delay_us+0x34>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f9      	bhi.n	8000590 <delay_us+0x18>
	HAL_TIM_Base_Stop(&htim10);
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <delay_us+0x34>)
 800059e:	f003 f871 	bl	8003684 <HAL_TIM_Base_Stop>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20004a90 	.word	0x20004a90

080005b0 <Set_Pin_Output>:

//volatile float Temperature = 0;
//volatile float Humidity = 0;

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80005cc:	887b      	ldrh	r3, [r7, #2]
 80005ce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	613b      	str	r3, [r7, #16]
//	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	4619      	mov	r1, r3
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f001 fe54 	bl	800228c <HAL_GPIO_Init>
}
 80005e4:	bf00      	nop
 80005e6:	3720      	adds	r7, #32
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000608:	887b      	ldrh	r3, [r7, #2]
 800060a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000610:	2301      	movs	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	4619      	mov	r1, r3
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f001 fe34 	bl	800228c <HAL_GPIO_Init>
}
 8000624:	bf00      	nop
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <DHT11_Start>:

void DHT11_Start(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT11_PORT, DHT11_PIN);
 8000630:	2101      	movs	r1, #1
 8000632:	480c      	ldr	r0, [pc, #48]	; (8000664 <DHT11_Start+0x38>)
 8000634:	f7ff ffbc 	bl	80005b0 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2101      	movs	r1, #1
 800063c:	4809      	ldr	r0, [pc, #36]	; (8000664 <DHT11_Start+0x38>)
 800063e:	f001 ffc1 	bl	80025c4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000642:	2014      	movs	r0, #20
 8000644:	f001 fc8a 	bl	8001f5c <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2101      	movs	r1, #1
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <DHT11_Start+0x38>)
 800064e:	f001 ffb9 	bl	80025c4 <HAL_GPIO_WritePin>
	delay_us(20);
 8000652:	2014      	movs	r0, #20
 8000654:	f7ff ff90 	bl	8000578 <delay_us>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);
 8000658:	2101      	movs	r1, #1
 800065a:	4802      	ldr	r0, [pc, #8]	; (8000664 <DHT11_Start+0x38>)
 800065c:	f7ff ffc6 	bl	80005ec <Set_Pin_Input>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40020400 	.word	0x40020400

08000668 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	71fb      	strb	r3, [r7, #7]
	delay_us(40);
 8000672:	2028      	movs	r0, #40	; 0x28
 8000674:	f7ff ff80 	bl	8000578 <delay_us>
	if(!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000678:	2101      	movs	r1, #1
 800067a:	4811      	ldr	r0, [pc, #68]	; (80006c0 <DHT11_Check_Response+0x58>)
 800067c:	f001 ff8a 	bl	8002594 <HAL_GPIO_ReadPin>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d10e      	bne.n	80006a4 <DHT11_Check_Response+0x3c>
	{
		delay_us(80);
 8000686:	2050      	movs	r0, #80	; 0x50
 8000688:	f7ff ff76 	bl	8000578 <delay_us>
		if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 800068c:	2101      	movs	r1, #1
 800068e:	480c      	ldr	r0, [pc, #48]	; (80006c0 <DHT11_Check_Response+0x58>)
 8000690:	f001 ff80 	bl	8002594 <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d002      	beq.n	80006a0 <DHT11_Check_Response+0x38>
		{
			Response = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	71fb      	strb	r3, [r7, #7]
 800069e:	e001      	b.n	80006a4 <DHT11_Check_Response+0x3c>
		}
		else
		{
			Response = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	71fb      	strb	r3, [r7, #7]
		}
	}
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN));
 80006a4:	bf00      	nop
 80006a6:	2101      	movs	r1, #1
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <DHT11_Check_Response+0x58>)
 80006aa:	f001 ff73 	bl	8002594 <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1f8      	bne.n	80006a6 <DHT11_Check_Response+0x3e>

	return Response;
 80006b4:	79fb      	ldrb	r3, [r7, #7]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40020400 	.word	0x40020400

080006c4 <DHT11_Read>:

uint8_t DHT11_Read(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for(j=0; j<8; j++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	71bb      	strb	r3, [r7, #6]
 80006ce:	e037      	b.n	8000740 <DHT11_Read+0x7c>
	{
		while(!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)));
 80006d0:	bf00      	nop
 80006d2:	2101      	movs	r1, #1
 80006d4:	481e      	ldr	r0, [pc, #120]	; (8000750 <DHT11_Read+0x8c>)
 80006d6:	f001 ff5d 	bl	8002594 <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0f8      	beq.n	80006d2 <DHT11_Read+0xe>
		delay_us(40);
 80006e0:	2028      	movs	r0, #40	; 0x28
 80006e2:	f7ff ff49 	bl	8000578 <delay_us>
		if(!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 80006e6:	2101      	movs	r1, #1
 80006e8:	4819      	ldr	r0, [pc, #100]	; (8000750 <DHT11_Read+0x8c>)
 80006ea:	f001 ff53 	bl	8002594 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10e      	bne.n	8000712 <DHT11_Read+0x4e>
		{
			i &= ~(1<<(7-j));			// write 0
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	f1c3 0307 	rsb	r3, r3, #7
 80006fa:	2201      	movs	r2, #1
 80006fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000700:	b25b      	sxtb	r3, r3
 8000702:	43db      	mvns	r3, r3
 8000704:	b25a      	sxtb	r2, r3
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	4013      	ands	r3, r2
 800070c:	b25b      	sxtb	r3, r3
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	e013      	b.n	800073a <DHT11_Read+0x76>
		}
		else
		{
			i |= (1<<(7-j));			// if the pin is high, write 1
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	f1c3 0307 	rsb	r3, r3, #7
 8000718:	2201      	movs	r2, #1
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	b25a      	sxtb	r2, r3
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	4313      	orrs	r3, r2
 8000726:	b25b      	sxtb	r3, r3
 8000728:	71fb      	strb	r3, [r7, #7]
			while((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)));		// wait for the pin to go low
 800072a:	bf00      	nop
 800072c:	2101      	movs	r1, #1
 800072e:	4808      	ldr	r0, [pc, #32]	; (8000750 <DHT11_Read+0x8c>)
 8000730:	f001 ff30 	bl	8002594 <HAL_GPIO_ReadPin>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1f8      	bne.n	800072c <DHT11_Read+0x68>
	for(j=0; j<8; j++)
 800073a:	79bb      	ldrb	r3, [r7, #6]
 800073c:	3301      	adds	r3, #1
 800073e:	71bb      	strb	r3, [r7, #6]
 8000740:	79bb      	ldrb	r3, [r7, #6]
 8000742:	2b07      	cmp	r3, #7
 8000744:	d9c4      	bls.n	80006d0 <DHT11_Read+0xc>
		}
	}
	return i;
 8000746:	79fb      	ldrb	r3, [r7, #7]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40020400 	.word	0x40020400

08000754 <DHT11_GetData>:

void DHT11_GetData(DHT_DataTypeDef *DHT_Data)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
	uint16_t SUM, RH, TEMP;

	DHT11_Start();
 800075c:	f7ff ff66 	bl	800062c <DHT11_Start>
	if(DHT11_Check_Response())
 8000760:	f7ff ff82 	bl	8000668 <DHT11_Check_Response>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d013      	beq.n	8000792 <DHT11_GetData+0x3e>
	{
		Rh_byte1 = DHT11_Read();
 800076a:	f7ff ffab 	bl	80006c4 <DHT11_Read>
 800076e:	4603      	mov	r3, r0
 8000770:	73fb      	strb	r3, [r7, #15]
		Rh_byte2 = DHT11_Read();
 8000772:	f7ff ffa7 	bl	80006c4 <DHT11_Read>
 8000776:	4603      	mov	r3, r0
 8000778:	73bb      	strb	r3, [r7, #14]
		Temp_byte1 = DHT11_Read();
 800077a:	f7ff ffa3 	bl	80006c4 <DHT11_Read>
 800077e:	4603      	mov	r3, r0
 8000780:	737b      	strb	r3, [r7, #13]
		Temp_byte2 = DHT11_Read();
 8000782:	f7ff ff9f 	bl	80006c4 <DHT11_Read>
 8000786:	4603      	mov	r3, r0
 8000788:	733b      	strb	r3, [r7, #12]
		SUM = DHT11_Read();
 800078a:	f7ff ff9b 	bl	80006c4 <DHT11_Read>
 800078e:	4603      	mov	r3, r0
 8000790:	817b      	strh	r3, [r7, #10]
	}

	if(SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000792:	897a      	ldrh	r2, [r7, #10]
 8000794:	7bf9      	ldrb	r1, [r7, #15]
 8000796:	7bbb      	ldrb	r3, [r7, #14]
 8000798:	4419      	add	r1, r3
 800079a:	7b7b      	ldrb	r3, [r7, #13]
 800079c:	4419      	add	r1, r3
 800079e:	7b3b      	ldrb	r3, [r7, #12]
 80007a0:	440b      	add	r3, r1
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d10f      	bne.n	80007c6 <DHT11_GetData+0x72>
	{
		DHT_Data->Temperature = Temp_byte1;
 80007a6:	7b7b      	ldrb	r3, [r7, #13]
 80007a8:	ee07 3a90 	vmov	s15, r3
 80007ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	edc3 7a00 	vstr	s15, [r3]
		DHT_Data->Humidity = Rh_byte1;
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	ee07 3a90 	vmov	s15, r3
 80007bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	edc3 7a01 	vstr	s15, [r3, #4]
	}
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <spi_transfer>:
uchar MFRC522_Auth(uchar, uchar, uchar*, uchar*);
uchar MFRC522_Read(uchar, uchar*);
uchar MFRC522_Write(uchar, uchar*);
void MFRC522_Halt(void);

uint8_t spi_transfer(uint8_t byte_s) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	uint8_t rx;
	HAL_SPI_TransmitReceive(&hspi3, &byte_s, &rx, 1, 0xffffffff);
 80007da:	f107 020f 	add.w	r2, r7, #15
 80007de:	1df9      	adds	r1, r7, #7
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2301      	movs	r3, #1
 80007e8:	4803      	ldr	r0, [pc, #12]	; (80007f8 <spi_transfer+0x28>)
 80007ea:	f002 fc34 	bl	8003056 <HAL_SPI_TransmitReceive>
	return rx;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20004ae0 	.word	0x20004ae0

080007fc <Write_MFRC522>:
	values[index] = spi_transfer(0);// Read the final byte. Send 0 to stop reading.
	cs_set(1);

} // End PCD_ReadRegister()

void Write_MFRC522(uchar addr, uchar val) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	460a      	mov	r2, r1
 8000806:	71fb      	strb	r3, [r7, #7]
 8000808:	4613      	mov	r3, r2
 800080a:	71bb      	strb	r3, [r7, #6]

	cs_clr(1);
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <Write_MFRC522+0x4c>)
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <Write_MFRC522+0x4c>)
 8000812:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000816:	6153      	str	r3, [r2, #20]
	spi_transfer(((addr << 1) & 0x7E));
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	b2db      	uxtb	r3, r3
 800081e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000822:	b2db      	uxtb	r3, r3
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ffd3 	bl	80007d0 <spi_transfer>
	spi_transfer(val);
 800082a:	79bb      	ldrb	r3, [r7, #6]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ffcf 	bl	80007d0 <spi_transfer>
	cs_set(1);
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <Write_MFRC522+0x4c>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a04      	ldr	r2, [pc, #16]	; (8000848 <Write_MFRC522+0x4c>)
 8000838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800083c:	6153      	str	r3, [r2, #20]

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40020400 	.word	0x40020400

0800084c <Read_MFRC522>:

uchar Read_MFRC522(uchar addr) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]

	int value;
	cs_clr(1);
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <Read_MFRC522+0x54>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	4a11      	ldr	r2, [pc, #68]	; (80008a0 <Read_MFRC522+0x54>)
 800085c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000860:	6153      	str	r3, [r2, #20]
	spi_transfer((((addr << 1) & 0x7E) | 0x80));
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	b25b      	sxtb	r3, r3
 8000868:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800086c:	b25b      	sxtb	r3, r3
 800086e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000872:	b25b      	sxtb	r3, r3
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ffaa 	bl	80007d0 <spi_transfer>
	value = spi_transfer(0x00);
 800087c:	2000      	movs	r0, #0
 800087e:	f7ff ffa7 	bl	80007d0 <spi_transfer>
 8000882:	4603      	mov	r3, r0
 8000884:	60fb      	str	r3, [r7, #12]
	cs_set(1);
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <Read_MFRC522+0x54>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <Read_MFRC522+0x54>)
 800088c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000890:	6153      	str	r3, [r2, #20]

	return value;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	b2db      	uxtb	r3, r3
}
 8000896:	4618      	mov	r0, r3
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40020400 	.word	0x40020400

080008a4 <MFRC522_Reset>:
 * Function Name: ResetMFRC522
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80008a8:	210f      	movs	r1, #15
 80008aa:	2001      	movs	r0, #1
 80008ac:	f7ff ffa6 	bl	80007fc <Write_MFRC522>
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <MFRC522_Init>:
 * Function Name:InitMFRC522
 * Description: Initialize RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Init(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 80008b8:	f7ff fff4 	bl	80008a4 <MFRC522_Reset>

	// Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);     // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80008bc:	218d      	movs	r1, #141	; 0x8d
 80008be:	202a      	movs	r0, #42	; 0x2a
 80008c0:	f7ff ff9c 	bl	80007fc <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E); // TModeReg[3..0] + TPrescalerReg
 80008c4:	213e      	movs	r1, #62	; 0x3e
 80008c6:	202b      	movs	r0, #43	; 0x2b
 80008c8:	f7ff ff98 	bl	80007fc <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80008cc:	211e      	movs	r1, #30
 80008ce:	202d      	movs	r0, #45	; 0x2d
 80008d0:	f7ff ff94 	bl	80007fc <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80008d4:	2100      	movs	r1, #0
 80008d6:	202c      	movs	r0, #44	; 0x2c
 80008d8:	f7ff ff90 	bl	80007fc <Write_MFRC522>
	Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 80008dc:	2140      	movs	r1, #64	; 0x40
 80008de:	2015      	movs	r0, #21
 80008e0:	f7ff ff8c 	bl	80007fc <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 80008e4:	213d      	movs	r1, #61	; 0x3d
 80008e6:	2011      	movs	r0, #17
 80008e8:	f7ff ff88 	bl	80007fc <Write_MFRC522>
	// interrupts, still playing with these
	// Write_MFRC522(CommIEnReg, 0xFF);
	// Write_MFRC522(DivlEnReg, 0xFF);

	// turn antenna on
	AntennaOn();
 80008ec:	f000 f802 	bl	80008f4 <AntennaOn>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <AntennaOn>:
 * Function Name:AntennaOn
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	SetBitMask(TxControlReg, 0x03);
 80008f8:	2103      	movs	r1, #3
 80008fa:	2014      	movs	r0, #20
 80008fc:	f000 f802 	bl	8000904 <SetBitMask>
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <SetBitMask>:
 * Function Name:SetBitMask
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	460a      	mov	r2, r1
 800090e:	71fb      	strb	r3, [r7, #7]
 8000910:	4613      	mov	r3, r2
 8000912:	71bb      	strb	r3, [r7, #6]
	uchar tmp;
	tmp = Read_MFRC522(reg);
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ff98 	bl	800084c <Read_MFRC522>
 800091c:	4603      	mov	r3, r0
 800091e:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000920:	7bfa      	ldrb	r2, [r7, #15]
 8000922:	79bb      	ldrb	r3, [r7, #6]
 8000924:	4313      	orrs	r3, r2
 8000926:	b2da      	uxtb	r2, r3
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff65 	bl	80007fc <Write_MFRC522>
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <MFRC522_Request>:
 *    0x0200 = Mifare_One(S70)
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType) {
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af02      	add	r7, sp, #8
 8000940:	4603      	mov	r3, r0
 8000942:	6039      	str	r1, [r7, #0]
 8000944:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits; // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);
 8000946:	2107      	movs	r1, #7
 8000948:	200d      	movs	r0, #13
 800094a:	f7ff ff57 	bl	80007fc <Write_MFRC522>
	// TxLastBists = BitFramingReg[2..0]

	TagType[0] = reqMode;
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	79fa      	ldrb	r2, [r7, #7]
 8000952:	701a      	strb	r2, [r3, #0]

	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	2201      	movs	r2, #1
 800095e:	6839      	ldr	r1, [r7, #0]
 8000960:	200c      	movs	r0, #12
 8000962:	f000 f80f 	bl	8000984 <MFRC522_ToCard>
 8000966:	4603      	mov	r3, r0
 8000968:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d102      	bne.n	8000976 <MFRC522_Request+0x3c>
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	2b10      	cmp	r3, #16
 8000974:	d001      	beq.n	800097a <MFRC522_Request+0x40>
		status = MI_ERR;
 8000976:	2302      	movs	r3, #2
 8000978:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800097a:	7bfb      	ldrb	r3, [r7, #15]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen,
		uchar *backData, uint *backLen) {
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b089      	sub	sp, #36	; 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4603      	mov	r3, r0
 8000990:	73fb      	strb	r3, [r7, #15]
 8000992:	4613      	mov	r3, r2
 8000994:	73bb      	strb	r3, [r7, #14]
	uchar status = MI_ERR;
 8000996:	2302      	movs	r3, #2
 8000998:	77fb      	strb	r3, [r7, #31]
	uchar irqEn = 0x00;
 800099a:	2300      	movs	r3, #0
 800099c:	77bb      	strb	r3, [r7, #30]
	uchar waitIRq = 0x00;
 800099e:	2300      	movs	r3, #0
 80009a0:	777b      	strb	r3, [r7, #29]
	uchar lastBits;
	uchar n;
	uint i;

	switch (command) {
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	2b0c      	cmp	r3, #12
 80009a6:	d006      	beq.n	80009b6 <MFRC522_ToCard+0x32>
 80009a8:	2b0e      	cmp	r3, #14
 80009aa:	d109      	bne.n	80009c0 <MFRC522_ToCard+0x3c>
	case PCD_AUTHENT:     // Certification cards close
	{
		irqEn = 0x12;
 80009ac:	2312      	movs	r3, #18
 80009ae:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x10;
 80009b0:	2310      	movs	r3, #16
 80009b2:	777b      	strb	r3, [r7, #29]
		break;
 80009b4:	e005      	b.n	80009c2 <MFRC522_ToCard+0x3e>
	}
	case PCD_TRANSCEIVE:  // Transmit FIFO data
	{
		irqEn = 0x77;
 80009b6:	2377      	movs	r3, #119	; 0x77
 80009b8:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x30;
 80009ba:	2330      	movs	r3, #48	; 0x30
 80009bc:	777b      	strb	r3, [r7, #29]
		break;
 80009be:	e000      	b.n	80009c2 <MFRC522_ToCard+0x3e>
	}
	default:
		break;
 80009c0:	bf00      	nop
	}

	Write_MFRC522(CommIEnReg, irqEn | 0x80);  // Interrupt request
 80009c2:	7fbb      	ldrb	r3, [r7, #30]
 80009c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4619      	mov	r1, r3
 80009cc:	2002      	movs	r0, #2
 80009ce:	f7ff ff15 	bl	80007fc <Write_MFRC522>
	ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 80009d2:	2180      	movs	r1, #128	; 0x80
 80009d4:	2004      	movs	r0, #4
 80009d6:	f000 f8b3 	bl	8000b40 <ClearBitMask>
	SetBitMask(FIFOLevelReg, 0x80);        // FlushBuffer=1, FIFO Initialization
 80009da:	2180      	movs	r1, #128	; 0x80
 80009dc:	200a      	movs	r0, #10
 80009de:	f7ff ff91 	bl	8000904 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE); // NO action; Cancel the current command
 80009e2:	2100      	movs	r1, #0
 80009e4:	2001      	movs	r0, #1
 80009e6:	f7ff ff09 	bl	80007fc <Write_MFRC522>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 80009ea:	2300      	movs	r3, #0
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	e00a      	b.n	8000a06 <MFRC522_ToCard+0x82>
		Write_MFRC522(FIFODataReg, sendData[i]);
 80009f0:	68ba      	ldr	r2, [r7, #8]
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	4413      	add	r3, r2
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4619      	mov	r1, r3
 80009fa:	2009      	movs	r0, #9
 80009fc:	f7ff fefe 	bl	80007fc <Write_MFRC522>
	for (i = 0; i < sendLen; i++) {
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	3301      	adds	r3, #1
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	7bbb      	ldrb	r3, [r7, #14]
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d3f0      	bcc.n	80009f0 <MFRC522_ToCard+0x6c>
	}

	// Execute the command
	Write_MFRC522(CommandReg, command);
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	4619      	mov	r1, r3
 8000a12:	2001      	movs	r0, #1
 8000a14:	f7ff fef2 	bl	80007fc <Write_MFRC522>
	if (command == PCD_TRANSCEIVE) {
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	2b0c      	cmp	r3, #12
 8000a1c:	d103      	bne.n	8000a26 <MFRC522_ToCard+0xa2>
		SetBitMask(BitFramingReg, 0x80); // StartSend=1,transmission of data starts  
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	200d      	movs	r0, #13
 8000a22:	f7ff ff6f 	bl	8000904 <SetBitMask>
	}

	// Waiting to receive data to complete
	i = 2000;// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000a26:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a2a:	61bb      	str	r3, [r7, #24]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = Read_MFRC522(CommIrqReg);
 8000a2c:	2004      	movs	r0, #4
 8000a2e:	f7ff ff0d 	bl	800084c <Read_MFRC522>
 8000a32:	4603      	mov	r3, r0
 8000a34:	773b      	strb	r3, [r7, #28]
		i--;
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	61bb      	str	r3, [r7, #24]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00a      	beq.n	8000a58 <MFRC522_ToCard+0xd4>
 8000a42:	7f3b      	ldrb	r3, [r7, #28]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d105      	bne.n	8000a58 <MFRC522_ToCard+0xd4>
 8000a4c:	7f3a      	ldrb	r2, [r7, #28]
 8000a4e:	7f7b      	ldrb	r3, [r7, #29]
 8000a50:	4013      	ands	r3, r2
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d0e9      	beq.n	8000a2c <MFRC522_ToCard+0xa8>
	ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	200d      	movs	r0, #13
 8000a5c:	f000 f870 	bl	8000b40 <ClearBitMask>
	if (i != 0) {
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d05a      	beq.n	8000b1c <MFRC522_ToCard+0x198>
		if (!(Read_MFRC522(ErrorReg) & 0x1B)) // BufferOvfl Collerr CRCErr ProtecolErr
 8000a66:	2006      	movs	r0, #6
 8000a68:	f7ff fef0 	bl	800084c <Read_MFRC522>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	f003 031b 	and.w	r3, r3, #27
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d148      	bne.n	8000b08 <MFRC522_ToCard+0x184>
		{
			status = MI_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	77fb      	strb	r3, [r7, #31]
			if (n & irqEn & 0x01) {
 8000a7a:	7f3a      	ldrb	r2, [r7, #28]
 8000a7c:	7fbb      	ldrb	r3, [r7, #30]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MFRC522_ToCard+0x10a>
				status = MI_NOTAGERR;             // ??
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	77fb      	strb	r3, [r7, #31]
			}

			if (command == PCD_TRANSCEIVE) {
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	2b0c      	cmp	r3, #12
 8000a92:	d14a      	bne.n	8000b2a <MFRC522_ToCard+0x1a6>
				n = Read_MFRC522(FIFOLevelReg);
 8000a94:	200a      	movs	r0, #10
 8000a96:	f7ff fed9 	bl	800084c <Read_MFRC522>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	773b      	strb	r3, [r7, #28]
				lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000a9e:	200c      	movs	r0, #12
 8000aa0:	f7ff fed4 	bl	800084c <Read_MFRC522>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	75fb      	strb	r3, [r7, #23]
				if (lastBits) {
 8000aac:	7dfb      	ldrb	r3, [r7, #23]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d008      	beq.n	8000ac4 <MFRC522_ToCard+0x140>
					*backLen = (n - 1) * 8 + lastBits;
 8000ab2:	7f3b      	ldrb	r3, [r7, #28]
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	00da      	lsls	r2, r3, #3
 8000ab8:	7dfb      	ldrb	r3, [r7, #23]
 8000aba:	4413      	add	r3, r2
 8000abc:	461a      	mov	r2, r3
 8000abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	e004      	b.n	8000ace <MFRC522_ToCard+0x14a>
				} else {
					*backLen = n * 8;
 8000ac4:	7f3b      	ldrb	r3, [r7, #28]
 8000ac6:	00db      	lsls	r3, r3, #3
 8000ac8:	461a      	mov	r2, r3
 8000aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000acc:	601a      	str	r2, [r3, #0]
				}

				if (n == 0) {
 8000ace:	7f3b      	ldrb	r3, [r7, #28]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d101      	bne.n	8000ad8 <MFRC522_ToCard+0x154>
					n = 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	773b      	strb	r3, [r7, #28]
				}
				if (n > MAX_LEN) {
 8000ad8:	7f3b      	ldrb	r3, [r7, #28]
 8000ada:	2b10      	cmp	r3, #16
 8000adc:	d901      	bls.n	8000ae2 <MFRC522_ToCard+0x15e>
					n = MAX_LEN;
 8000ade:	2310      	movs	r3, #16
 8000ae0:	773b      	strb	r3, [r7, #28]
				}

				// Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
 8000ae6:	e00a      	b.n	8000afe <MFRC522_ToCard+0x17a>
					backData[i] = Read_MFRC522(FIFODataReg);
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	18d4      	adds	r4, r2, r3
 8000aee:	2009      	movs	r0, #9
 8000af0:	f7ff feac 	bl	800084c <Read_MFRC522>
 8000af4:	4603      	mov	r3, r0
 8000af6:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	3301      	adds	r3, #1
 8000afc:	61bb      	str	r3, [r7, #24]
 8000afe:	7f3b      	ldrb	r3, [r7, #28]
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d3f0      	bcc.n	8000ae8 <MFRC522_ToCard+0x164>
 8000b06:	e010      	b.n	8000b2a <MFRC522_ToCard+0x1a6>
				}
			}
		} else {
			//printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
			HAL_UART_Transmit(&huart2,
 8000b08:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b0c:	2236      	movs	r2, #54	; 0x36
 8000b0e:	4909      	ldr	r1, [pc, #36]	; (8000b34 <MFRC522_ToCard+0x1b0>)
 8000b10:	4809      	ldr	r0, [pc, #36]	; (8000b38 <MFRC522_ToCard+0x1b4>)
 8000b12:	f003 f852 	bl	8003bba <HAL_UART_Transmit>
					(uchar*) "~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n",
					54, 5000);
			status = MI_ERR;
 8000b16:	2302      	movs	r3, #2
 8000b18:	77fb      	strb	r3, [r7, #31]
 8000b1a:	e006      	b.n	8000b2a <MFRC522_ToCard+0x1a6>
		}
	} else {
		//printf("~~~ request timed out\r\n");
		HAL_UART_Transmit(&huart2, (uchar*) "~~~ request timed out\r\n", 23,
 8000b1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b20:	2217      	movs	r2, #23
 8000b22:	4906      	ldr	r1, [pc, #24]	; (8000b3c <MFRC522_ToCard+0x1b8>)
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MFRC522_ToCard+0x1b4>)
 8000b26:	f003 f848 	bl	8003bba <HAL_UART_Transmit>
				5000);

	}

	return status;
 8000b2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3724      	adds	r7, #36	; 0x24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	08009438 	.word	0x08009438
 8000b38:	20004c44 	.word	0x20004c44
 8000b3c:	08009470 	.word	0x08009470

08000b40 <ClearBitMask>:
 * Function Name: ClearBitMask
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
 */
void ClearBitMask(uchar reg, uchar mask) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	460a      	mov	r2, r1
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	71bb      	strb	r3, [r7, #6]
	uchar tmp;
	tmp = Read_MFRC522(reg);
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fe7a 	bl	800084c <Read_MFRC522>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000b5c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	b25a      	sxtb	r2, r3
 8000b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	b25b      	sxtb	r3, r3
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fe42 	bl	80007fc <Write_MFRC522>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <MFRC522_Anticoll>:
 * Function Name: MFRC522_Anticoll
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af02      	add	r7, sp, #8
 8000b86:	6078      	str	r0, [r7, #4]
	uchar status;
	uchar i;
	uchar serNumCheck = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	737b      	strb	r3, [r7, #13]
	uint unLen;

	//ClearBitMask(Status2Reg, 0x08);		//TempSensclear
	//ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	200d      	movs	r0, #13
 8000b90:	f7ff fe34 	bl	80007fc <Write_MFRC522>

	serNum[0] = PICC_ANTICOLL;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2293      	movs	r2, #147	; 0x93
 8000b98:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	2220      	movs	r2, #32
 8000ba0:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2202      	movs	r2, #2
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	200c      	movs	r0, #12
 8000bb0:	f7ff fee8 	bl	8000984 <MFRC522_ToCard>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d118      	bne.n	8000bf0 <MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73bb      	strb	r3, [r7, #14]
 8000bc2:	e009      	b.n	8000bd8 <MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8000bc4:	7bbb      	ldrb	r3, [r7, #14]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	781a      	ldrb	r2, [r3, #0]
 8000bcc:	7b7b      	ldrb	r3, [r7, #13]
 8000bce:	4053      	eors	r3, r2
 8000bd0:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8000bd2:	7bbb      	ldrb	r3, [r7, #14]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	73bb      	strb	r3, [r7, #14]
 8000bd8:	7bbb      	ldrb	r3, [r7, #14]
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d9f2      	bls.n	8000bc4 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8000bde:	7bbb      	ldrb	r3, [r7, #14]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	4413      	add	r3, r2
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	7b7a      	ldrb	r2, [r7, #13]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d001      	beq.n	8000bf0 <MFRC522_Anticoll+0x70>
			status = MI_ERR;
 8000bec:	2302      	movs	r3, #2
 8000bee:	73fb      	strb	r3, [r7, #15]
		}
	}

	//SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

	return status;
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <MFRC522_Read>:
 * Function Name: MFRC522_Read
 * Description: Read block data
 * Input parameters: blockAddr - block address; recvData - read block data
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Read(uchar blockAddr, uchar *recvData) {
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af02      	add	r7, sp, #8
 8000c00:	4603      	mov	r3, r0
 8000c02:	6039      	str	r1, [r7, #0]
 8000c04:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint unLen;

	recvData[0] = PICC_READ;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2230      	movs	r2, #48	; 0x30
 8000c0a:	701a      	strb	r2, [r3, #0]
	recvData[1] = blockAddr;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	79fa      	ldrb	r2, [r7, #7]
 8000c12:	701a      	strb	r2, [r3, #0]
	CalulateCRC(recvData, 2, &recvData[2]);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	3302      	adds	r3, #2
 8000c18:	461a      	mov	r2, r3
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	6838      	ldr	r0, [r7, #0]
 8000c1e:	f000 f818 	bl	8000c52 <CalulateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	6839      	ldr	r1, [r7, #0]
 8000c2e:	200c      	movs	r0, #12
 8000c30:	f7ff fea8 	bl	8000984 <MFRC522_ToCard>
 8000c34:	4603      	mov	r3, r0
 8000c36:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (unLen != 0x90)) {
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d102      	bne.n	8000c44 <MFRC522_Read+0x4a>
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	2b90      	cmp	r3, #144	; 0x90
 8000c42:	d001      	beq.n	8000c48 <MFRC522_Read+0x4e>
		status = MI_ERR;
 8000c44:	2302      	movs	r3, #2
 8000c46:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <CalulateCRC>:
 * Function Name: CalulateCRC
 * Description: CRC calculation with MF522
 * Input parameters: pIndata - To read the CRC data, len - the data length, pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC(uchar *pIndata, uchar len, uchar *pOutData) {
 8000c52:	b590      	push	{r4, r7, lr}
 8000c54:	b087      	sub	sp, #28
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	72fb      	strb	r3, [r7, #11]
	uchar i, n;

	ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 8000c60:	2104      	movs	r1, #4
 8000c62:	2005      	movs	r0, #5
 8000c64:	f7ff ff6c 	bl	8000b40 <ClearBitMask>
	SetBitMask(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
 8000c68:	2180      	movs	r1, #128	; 0x80
 8000c6a:	200a      	movs	r0, #10
 8000c6c:	f7ff fe4a 	bl	8000904 <SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {
 8000c70:	2300      	movs	r3, #0
 8000c72:	75fb      	strb	r3, [r7, #23]
 8000c74:	e00a      	b.n	8000c8c <CalulateCRC+0x3a>
		Write_MFRC522(FIFODataReg, *(pIndata + i));
 8000c76:	7dfb      	ldrb	r3, [r7, #23]
 8000c78:	68fa      	ldr	r2, [r7, #12]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	2009      	movs	r0, #9
 8000c82:	f7ff fdbb 	bl	80007fc <Write_MFRC522>
	for (i = 0; i < len; i++) {
 8000c86:	7dfb      	ldrb	r3, [r7, #23]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	75fb      	strb	r3, [r7, #23]
 8000c8c:	7dfa      	ldrb	r2, [r7, #23]
 8000c8e:	7afb      	ldrb	r3, [r7, #11]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d3f0      	bcc.n	8000c76 <CalulateCRC+0x24>
	}
	Write_MFRC522(CommandReg, PCD_CALCCRC);
 8000c94:	2103      	movs	r1, #3
 8000c96:	2001      	movs	r0, #1
 8000c98:	f7ff fdb0 	bl	80007fc <Write_MFRC522>

	//Wait CRC calculation is complete
	i = 0xFF;
 8000c9c:	23ff      	movs	r3, #255	; 0xff
 8000c9e:	75fb      	strb	r3, [r7, #23]
	do {
		n = Read_MFRC522(DivIrqReg);
 8000ca0:	2005      	movs	r0, #5
 8000ca2:	f7ff fdd3 	bl	800084c <Read_MFRC522>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	75bb      	strb	r3, [r7, #22]
		i--;
 8000caa:	7dfb      	ldrb	r3, [r7, #23]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	75fb      	strb	r3, [r7, #23]
	} while ((i != 0) && !(n & 0x04));			//CRCIrq = 1
 8000cb0:	7dfb      	ldrb	r3, [r7, #23]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d004      	beq.n	8000cc0 <CalulateCRC+0x6e>
 8000cb6:	7dbb      	ldrb	r3, [r7, #22]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d0ef      	beq.n	8000ca0 <CalulateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = Read_MFRC522(CRCResultRegL);
 8000cc0:	2022      	movs	r0, #34	; 0x22
 8000cc2:	f7ff fdc3 	bl	800084c <Read_MFRC522>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461a      	mov	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	701a      	strb	r2, [r3, #0]
	pOutData[1] = Read_MFRC522(CRCResultRegM);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	1c5c      	adds	r4, r3, #1
 8000cd2:	2021      	movs	r0, #33	; 0x21
 8000cd4:	f7ff fdba 	bl	800084c <Read_MFRC522>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	7023      	strb	r3, [r4, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	371c      	adds	r7, #28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd90      	pop	{r4, r7, pc}

08000ce4 <MFRC522_SelectTag>:
 * Function Name: MFRC522_SelectTag
 * Description: election card, read the card memory capacity
 * Input parameters: serNum - Incoming card serial number
 * Return value: the successful return of card capacity
 */
uchar MFRC522_SelectTag(uchar *serNum) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	6078      	str	r0, [r7, #4]
	uint recvBits;
	uchar buffer[9];

	//ClearBitMask(Status2Reg, 0x08);			//MFCrypto1On=0

	buffer[0] = PICC_SElECTTAG;
 8000cec:	2393      	movs	r3, #147	; 0x93
 8000cee:	733b      	strb	r3, [r7, #12]
	buffer[1] = 0x70;
 8000cf0:	2370      	movs	r3, #112	; 0x70
 8000cf2:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < 5; i++) {
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	77fb      	strb	r3, [r7, #31]
 8000cf8:	e00d      	b.n	8000d16 <MFRC522_SelectTag+0x32>
		buffer[i + 2] = *(serNum + i);
 8000cfa:	7ffb      	ldrb	r3, [r7, #31]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	441a      	add	r2, r3
 8000d00:	7ffb      	ldrb	r3, [r7, #31]
 8000d02:	3302      	adds	r3, #2
 8000d04:	7812      	ldrb	r2, [r2, #0]
 8000d06:	f107 0120 	add.w	r1, r7, #32
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 5; i++) {
 8000d10:	7ffb      	ldrb	r3, [r7, #31]
 8000d12:	3301      	adds	r3, #1
 8000d14:	77fb      	strb	r3, [r7, #31]
 8000d16:	7ffb      	ldrb	r3, [r7, #31]
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d9ee      	bls.n	8000cfa <MFRC522_SelectTag+0x16>
	}
	CalulateCRC(buffer, 7, &buffer[7]);		//??
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	1dda      	adds	r2, r3, #7
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	2107      	movs	r1, #7
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff92 	bl	8000c52 <CalulateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 8000d2e:	f107 020c 	add.w	r2, r7, #12
 8000d32:	f107 010c 	add.w	r1, r7, #12
 8000d36:	f107 0318 	add.w	r3, r7, #24
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	2209      	movs	r2, #9
 8000d40:	200c      	movs	r0, #12
 8000d42:	f7ff fe1f 	bl	8000984 <MFRC522_ToCard>
 8000d46:	4603      	mov	r3, r0
 8000d48:	777b      	strb	r3, [r7, #29]

	if ((status == MI_OK) && (recvBits == 0x18)) {
 8000d4a:	7f7b      	ldrb	r3, [r7, #29]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d105      	bne.n	8000d5c <MFRC522_SelectTag+0x78>
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2b18      	cmp	r3, #24
 8000d54:	d102      	bne.n	8000d5c <MFRC522_SelectTag+0x78>
		size = buffer[0];
 8000d56:	7b3b      	ldrb	r3, [r7, #12]
 8000d58:	77bb      	strb	r3, [r7, #30]
 8000d5a:	e001      	b.n	8000d60 <MFRC522_SelectTag+0x7c>
	} else {
		size = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	77bb      	strb	r3, [r7, #30]
	}

	return size;
 8000d60:	7fbb      	ldrb	r3, [r7, #30]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3720      	adds	r7, #32
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <MFRC522_Auth>:
 Sectorkey--Sector password
 serNum--Card serial number, 4-byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Auth(uchar authMode, uchar BlockAddr, uchar *Sectorkey,
		uchar *serNum) {
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b08c      	sub	sp, #48	; 0x30
 8000d6e:	af02      	add	r7, sp, #8
 8000d70:	60ba      	str	r2, [r7, #8]
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	73bb      	strb	r3, [r7, #14]
	uint recvBits;
	uchar i;
	uchar buff[12];

	//Verify the command block address + sector + password + card serial number
	buff[0] = authMode;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	753b      	strb	r3, [r7, #20]
	buff[1] = BlockAddr;
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	757b      	strb	r3, [r7, #21]
	for (i = 0; i < 6; i++) {
 8000d84:	2300      	movs	r3, #0
 8000d86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000d8a:	e011      	b.n	8000db0 <MFRC522_Auth+0x46>
		buff[i + 2] = *(Sectorkey + i);
 8000d8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d90:	68ba      	ldr	r2, [r7, #8]
 8000d92:	441a      	add	r2, r3
 8000d94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d98:	3302      	adds	r3, #2
 8000d9a:	7812      	ldrb	r2, [r2, #0]
 8000d9c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000da0:	440b      	add	r3, r1
 8000da2:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 6; i++) {
 8000da6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000daa:	3301      	adds	r3, #1
 8000dac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000db0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000db4:	2b05      	cmp	r3, #5
 8000db6:	d9e9      	bls.n	8000d8c <MFRC522_Auth+0x22>
	}
	for (i = 0; i < 4; i++) {
 8000db8:	2300      	movs	r3, #0
 8000dba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000dbe:	e011      	b.n	8000de4 <MFRC522_Auth+0x7a>
		buff[i + 8] = *(serNum + i);
 8000dc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	441a      	add	r2, r3
 8000dc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dcc:	3308      	adds	r3, #8
 8000dce:	7812      	ldrb	r2, [r2, #0]
 8000dd0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000dd4:	440b      	add	r3, r1
 8000dd6:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 4; i++) {
 8000dda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dde:	3301      	adds	r3, #1
 8000de0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000de4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d9e9      	bls.n	8000dc0 <MFRC522_Auth+0x56>
	}
	status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 8000dec:	f107 0214 	add.w	r2, r7, #20
 8000df0:	f107 0114 	add.w	r1, r7, #20
 8000df4:	f107 0320 	add.w	r3, r7, #32
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	220c      	movs	r2, #12
 8000dfe:	200e      	movs	r0, #14
 8000e00:	f7ff fdc0 	bl	8000984 <MFRC522_ToCard>
 8000e04:	4603      	mov	r3, r0
 8000e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((status != MI_OK) || (!(Read_MFRC522(Status2Reg) & 0x08))) {
 8000e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d107      	bne.n	8000e22 <MFRC522_Auth+0xb8>
 8000e12:	2008      	movs	r0, #8
 8000e14:	f7ff fd1a 	bl	800084c <Read_MFRC522>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <MFRC522_Auth+0xbe>
		status = MI_ERR;
 8000e22:	2302      	movs	r3, #2
 8000e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return status;
 8000e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <MFRC522_Halt>:
 * Function Name: MFRC522_Halt
 * Description: Command card into hibernation
 * Input: None
 * Return value: None
 */
void MFRC522_Halt(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af02      	add	r7, sp, #8
	uint unLen;
	uchar buff[4];

	buff[0] = PICC_HALT;
 8000e3a:	2350      	movs	r3, #80	; 0x50
 8000e3c:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	707b      	strb	r3, [r7, #1]
	CalulateCRC(buff, 2, &buff[2]);
 8000e42:	463b      	mov	r3, r7
 8000e44:	1c9a      	adds	r2, r3, #2
 8000e46:	463b      	mov	r3, r7
 8000e48:	2102      	movs	r1, #2
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff01 	bl	8000c52 <CalulateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8000e50:	463a      	mov	r2, r7
 8000e52:	4639      	mov	r1, r7
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	200c      	movs	r0, #12
 8000e5e:	f7ff fd91 	bl	8000984 <MFRC522_ToCard>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <ScanCardAndGetDataFromBlock>:
 * 		blockAddr: block number desired to Read
 * 		receivedData: pointer to Data Returned after reading
 * 		keyValue: Value of KEY_A or KEY_B
 * Return value: MI_OK or MI_ERR
 */
uint8_t ScanCardAndGetDataFromBlock(uint8_t blockAddr, uchar* receivedData, uchar* keyValue) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
 8000e78:	73fb      	strb	r3, [r7, #15]
	uchar str[16];

	/*** 1. Start RFID Reader ***/
	MFRC522_Init();
 8000e7a:	f7ff fd1b 	bl	80008b4 <MFRC522_Init>

	/*** 2. Make request and receive Card type ***/
	if (MFRC522_Request(PICC_REQIDL, str) != MI_OK) {
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	4619      	mov	r1, r3
 8000e84:	2026      	movs	r0, #38	; 0x26
 8000e86:	f7ff fd58 	bl	800093a <MFRC522_Request>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <ScanCardAndGetDataFromBlock+0x28>
		return MI_ERR;
 8000e90:	2302      	movs	r3, #2
 8000e92:	e04e      	b.n	8000f32 <ScanCardAndGetDataFromBlock+0xc6>
	}

	/*** 3. Anti-collision loop***/
	if (MFRC522_Anticoll(str) == MI_OK) {
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fe71 	bl	8000b80 <MFRC522_Anticoll>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d143      	bne.n	8000f2c <ScanCardAndGetDataFromBlock+0xc0>

	/*** 4. Select Card ***/
		MFRC522_SelectTag(str);
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff1b 	bl	8000ce4 <MFRC522_SelectTag>

	/*** 5. Pass authentication on every sector ***/
		// First, we try to use KeyA authentication (COMMAND CODE: 0x60 - KeyA, 0x61 - KeyB)
		if (MI_OK == MFRC522_Auth(0x60, blockAddr, keyValue, str)) {
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	7bf9      	ldrb	r1, [r7, #15]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	2060      	movs	r0, #96	; 0x60
 8000eb8:	f7ff ff57 	bl	8000d6a <MFRC522_Auth>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d111      	bne.n	8000ee6 <ScanCardAndGetDataFromBlock+0x7a>
				//Read Data
			if (MFRC522_Read(blockAddr, receivedData) == MI_OK) {
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fe97 	bl	8000bfa <MFRC522_Read>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <ScanCardAndGetDataFromBlock+0x6a>
				return MI_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e02d      	b.n	8000f32 <ScanCardAndGetDataFromBlock+0xc6>
			} else {
				// Print error if READ is not OK
				HAL_UART_Transmit(&huart2,
 8000ed6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eda:	221a      	movs	r2, #26
 8000edc:	4917      	ldr	r1, [pc, #92]	; (8000f3c <ScanCardAndGetDataFromBlock+0xd0>)
 8000ede:	4818      	ldr	r0, [pc, #96]	; (8000f40 <ScanCardAndGetDataFromBlock+0xd4>)
 8000ee0:	f002 fe6b 	bl	8003bba <HAL_UART_Transmit>
 8000ee4:	e022      	b.n	8000f2c <ScanCardAndGetDataFromBlock+0xc0>
						(uint8_t*) "Error: Can not read data",
						strlen("Error: Can not read data\n\r"), 5000);
			}
		}
		// Second, we try to use KeyB authentication
		else if (MI_OK == MFRC522_Auth(0x61, blockAddr, keyValue, str)) {
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	7bf9      	ldrb	r1, [r7, #15]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	2061      	movs	r0, #97	; 0x61
 8000ef0:	f7ff ff3b 	bl	8000d6a <MFRC522_Auth>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d111      	bne.n	8000f1e <ScanCardAndGetDataFromBlock+0xb2>
				// Read Data
			if (MFRC522_Read(blockAddr, receivedData) == MI_OK) {
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fe7b 	bl	8000bfa <MFRC522_Read>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <ScanCardAndGetDataFromBlock+0xa2>
				return MI_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e011      	b.n	8000f32 <ScanCardAndGetDataFromBlock+0xc6>
			} else {
				// Print error if READ is not ok
				HAL_UART_Transmit(&huart2,
 8000f0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f12:	221a      	movs	r2, #26
 8000f14:	4909      	ldr	r1, [pc, #36]	; (8000f3c <ScanCardAndGetDataFromBlock+0xd0>)
 8000f16:	480a      	ldr	r0, [pc, #40]	; (8000f40 <ScanCardAndGetDataFromBlock+0xd4>)
 8000f18:	f002 fe4f 	bl	8003bba <HAL_UART_Transmit>
 8000f1c:	e006      	b.n	8000f2c <ScanCardAndGetDataFromBlock+0xc0>
						strlen("Error: Can not read data\n\r"), 5000);
			}
		}
		// If KeyA and KeyB authentications don't work, they must be a wrong key
		else {
			HAL_UART_Transmit(&huart2, (uchar*) "\n\rKeys are wrong.\n\r", 19,
 8000f1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f22:	2213      	movs	r2, #19
 8000f24:	4907      	ldr	r1, [pc, #28]	; (8000f44 <ScanCardAndGetDataFromBlock+0xd8>)
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <ScanCardAndGetDataFromBlock+0xd4>)
 8000f28:	f002 fe47 	bl	8003bba <HAL_UART_Transmit>
					5000);
		}
	}

	/*** 6. HALT ***/
	MFRC522_Halt();
 8000f2c:	f7ff ff82 	bl	8000e34 <MFRC522_Halt>

	return MI_ERR;
 8000f30:	2302      	movs	r3, #2
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3720      	adds	r7, #32
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	08009510 	.word	0x08009510
 8000f40:	20004c44 	.word	0x20004c44
 8000f44:	0800953c 	.word	0x0800953c

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	wareHouse_1.index = 1;
 8000f4c:	4b3f      	ldr	r3, [pc, #252]	; (800104c <main+0x104>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]
	wareHouse_2.index = 2;
 8000f52:	4b3f      	ldr	r3, [pc, #252]	; (8001050 <main+0x108>)
 8000f54:	2202      	movs	r2, #2
 8000f56:	601a      	str	r2, [r3, #0]
	wareHouse_3.index = 3;
 8000f58:	4b3e      	ldr	r3, [pc, #248]	; (8001054 <main+0x10c>)
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f000 ffbb 	bl	8001ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f8b9 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f000 f9f9 	bl	800135c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f6a:	f000 f9a3 	bl	80012b4 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000f6e:	f000 f91d 	bl	80011ac <MX_SPI3_Init>
  MX_USART6_UART_Init();
 8000f72:	f000 f9c9 	bl	8001308 <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 8000f76:	f000 f973 	bl	8001260 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8000f7a:	f000 f94d 	bl	8001218 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000f7e:	f7ff fc99 	bl	80008b4 <MFRC522_Init>
  HAL_UART_Transmit(&huart2, (uchar*) "\n\rSerial Connected...\n\r", 23, 5000);
 8000f82:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f86:	2217      	movs	r2, #23
 8000f88:	4933      	ldr	r1, [pc, #204]	; (8001058 <main+0x110>)
 8000f8a:	4834      	ldr	r0, [pc, #208]	; (800105c <main+0x114>)
 8000f8c:	f002 fe15 	bl	8003bba <HAL_UART_Transmit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f90:	f003 fe74 	bl	8004c7c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutex_uart2 */
  mutex_uart2Handle = osMutexNew(&mutex_uart2_attributes);
 8000f94:	4832      	ldr	r0, [pc, #200]	; (8001060 <main+0x118>)
 8000f96:	f004 f851 	bl	800503c <osMutexNew>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a31      	ldr	r2, [pc, #196]	; (8001064 <main+0x11c>)
 8000f9e:	6013      	str	r3, [r2, #0]

  /* creation of mutex_uart6 */
  mutex_uart6Handle = osMutexNew(&mutex_uart6_attributes);
 8000fa0:	4831      	ldr	r0, [pc, #196]	; (8001068 <main+0x120>)
 8000fa2:	f004 f84b 	bl	800503c <osMutexNew>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a30      	ldr	r2, [pc, #192]	; (800106c <main+0x124>)
 8000faa:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of cardID_Queue */
  cardID_QueueHandle = osMessageQueueNew (1, sizeof(WareHouse_t), &cardID_Queue_attributes);
 8000fac:	4a30      	ldr	r2, [pc, #192]	; (8001070 <main+0x128>)
 8000fae:	211c      	movs	r1, #28
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f004 f951 	bl	8005258 <osMessageQueueNew>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a2e      	ldr	r2, [pc, #184]	; (8001074 <main+0x12c>)
 8000fba:	6013      	str	r3, [r2, #0]

  /* creation of sensorData_Queue */
  sensorData_QueueHandle = osMessageQueueNew (3, sizeof(WareHouse_t), &sensorData_Queue_attributes);
 8000fbc:	4a2e      	ldr	r2, [pc, #184]	; (8001078 <main+0x130>)
 8000fbe:	211c      	movs	r1, #28
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f004 f949 	bl	8005258 <osMessageQueueNew>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a2c      	ldr	r2, [pc, #176]	; (800107c <main+0x134>)
 8000fca:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CmdParsing */
  CmdParsingHandle = osThreadNew(CmdParsing_Task, NULL, &CmdParsing_attributes);
 8000fcc:	4a2c      	ldr	r2, [pc, #176]	; (8001080 <main+0x138>)
 8000fce:	2100      	movs	r1, #0
 8000fd0:	482c      	ldr	r0, [pc, #176]	; (8001084 <main+0x13c>)
 8000fd2:	f003 fe9d 	bl	8004d10 <osThreadNew>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a2b      	ldr	r2, [pc, #172]	; (8001088 <main+0x140>)
 8000fda:	6013      	str	r3, [r2, #0]

  /* creation of ToggleLed */
  ToggleLedHandle = osThreadNew(ToggleLed_Task, NULL, &ToggleLed_attributes);
 8000fdc:	4a2b      	ldr	r2, [pc, #172]	; (800108c <main+0x144>)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	482b      	ldr	r0, [pc, #172]	; (8001090 <main+0x148>)
 8000fe2:	f003 fe95 	bl	8004d10 <osThreadNew>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a2a      	ldr	r2, [pc, #168]	; (8001094 <main+0x14c>)
 8000fea:	6013      	str	r3, [r2, #0]

  /* creation of ScanCard */
  ScanCardHandle = osThreadNew(ScanCard_Task, NULL, &ScanCard_attributes);
 8000fec:	4a2a      	ldr	r2, [pc, #168]	; (8001098 <main+0x150>)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	482a      	ldr	r0, [pc, #168]	; (800109c <main+0x154>)
 8000ff2:	f003 fe8d 	bl	8004d10 <osThreadNew>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a29      	ldr	r2, [pc, #164]	; (80010a0 <main+0x158>)
 8000ffa:	6013      	str	r3, [r2, #0]

  /* creation of SensorMeasuring */
  SensorMeasuringHandle = osThreadNew(SensorMeasuring_Task, NULL, &SensorMeasuring_attributes);
 8000ffc:	4a29      	ldr	r2, [pc, #164]	; (80010a4 <main+0x15c>)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4829      	ldr	r0, [pc, #164]	; (80010a8 <main+0x160>)
 8001002:	f003 fe85 	bl	8004d10 <osThreadNew>
 8001006:	4603      	mov	r3, r0
 8001008:	4a28      	ldr	r2, [pc, #160]	; (80010ac <main+0x164>)
 800100a:	6013      	str	r3, [r2, #0]

  /* creation of SendCardID */
  SendCardIDHandle = osThreadNew(SendCardID_Task, NULL, &SendCardID_attributes);
 800100c:	4a28      	ldr	r2, [pc, #160]	; (80010b0 <main+0x168>)
 800100e:	2100      	movs	r1, #0
 8001010:	4828      	ldr	r0, [pc, #160]	; (80010b4 <main+0x16c>)
 8001012:	f003 fe7d 	bl	8004d10 <osThreadNew>
 8001016:	4603      	mov	r3, r0
 8001018:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <main+0x170>)
 800101a:	6013      	str	r3, [r2, #0]

  /* creation of SendSensorData */
  SendSensorDataHandle = osThreadNew(SendSensorData_Task, NULL, &SendSensorData_attributes);
 800101c:	4a27      	ldr	r2, [pc, #156]	; (80010bc <main+0x174>)
 800101e:	2100      	movs	r1, #0
 8001020:	4827      	ldr	r0, [pc, #156]	; (80010c0 <main+0x178>)
 8001022:	f003 fe75 	bl	8004d10 <osThreadNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <main+0x17c>)
 800102a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of scanCardAvailable */
  scanCardAvailableHandle = osEventFlagsNew(&scanCardAvailable_attributes);
 800102c:	4826      	ldr	r0, [pc, #152]	; (80010c8 <main+0x180>)
 800102e:	f003 ff1c 	bl	8004e6a <osEventFlagsNew>
 8001032:	4603      	mov	r3, r0
 8001034:	4a25      	ldr	r2, [pc, #148]	; (80010cc <main+0x184>)
 8001036:	6013      	str	r3, [r2, #0]

  /* creation of parsingCMDAvailable */
  parsingCMDAvailableHandle = osEventFlagsNew(&parsingCMDAvailable_attributes);
 8001038:	4825      	ldr	r0, [pc, #148]	; (80010d0 <main+0x188>)
 800103a:	f003 ff16 	bl	8004e6a <osEventFlagsNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a24      	ldr	r2, [pc, #144]	; (80010d4 <main+0x18c>)
 8001042:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001044:	f003 fe3e 	bl	8004cc4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	while (1) {
 8001048:	e7fe      	b.n	8001048 <main+0x100>
 800104a:	bf00      	nop
 800104c:	20004b38 	.word	0x20004b38
 8001050:	20004be0 	.word	0x20004be0
 8001054:	20004ba8 	.word	0x20004ba8
 8001058:	0800965c 	.word	0x0800965c
 800105c:	20004c44 	.word	0x20004c44
 8001060:	080097a0 	.word	0x080097a0
 8001064:	20004a8c 	.word	0x20004a8c
 8001068:	080097b0 	.word	0x080097b0
 800106c:	20004adc 	.word	0x20004adc
 8001070:	08009770 	.word	0x08009770
 8001074:	20004b58 	.word	0x20004b58
 8001078:	08009788 	.word	0x08009788
 800107c:	20004ad8 	.word	0x20004ad8
 8001080:	08009698 	.word	0x08009698
 8001084:	0800176d 	.word	0x0800176d
 8001088:	20004b60 	.word	0x20004b60
 800108c:	080096bc 	.word	0x080096bc
 8001090:	080017f9 	.word	0x080017f9
 8001094:	20004b54 	.word	0x20004b54
 8001098:	080096e0 	.word	0x080096e0
 800109c:	08001809 	.word	0x08001809
 80010a0:	20004bcc 	.word	0x20004bcc
 80010a4:	08009704 	.word	0x08009704
 80010a8:	0800183d 	.word	0x0800183d
 80010ac:	20004c40 	.word	0x20004c40
 80010b0:	08009728 	.word	0x08009728
 80010b4:	08001915 	.word	0x08001915
 80010b8:	20004bc4 	.word	0x20004bc4
 80010bc:	0800974c 	.word	0x0800974c
 80010c0:	08001965 	.word	0x08001965
 80010c4:	20004bc8 	.word	0x20004bc8
 80010c8:	080097c0 	.word	0x080097c0
 80010cc:	20004b5c 	.word	0x20004b5c
 80010d0:	080097d0 	.word	0x080097d0
 80010d4:	20004c88 	.word	0x20004c88

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	; 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	; 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f007 fd0a 	bl	8008b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <SystemClock_Config+0xcc>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a27      	ldr	r2, [pc, #156]	; (80011a4 <SystemClock_Config+0xcc>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <SystemClock_Config+0xcc>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <SystemClock_Config+0xd0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <SystemClock_Config+0xd0>)
 8001122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <SystemClock_Config+0xd0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001138:	2301      	movs	r3, #1
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800113c:	2310      	movs	r3, #16
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001140:	2302      	movs	r3, #2
 8001142:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001144:	2300      	movs	r3, #0
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001148:	2308      	movs	r3, #8
 800114a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800114c:	2332      	movs	r3, #50	; 0x32
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001150:	2302      	movs	r3, #2
 8001152:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001154:	2304      	movs	r3, #4
 8001156:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fa4b 	bl	80025f8 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001168:	f000 fc36 	bl	80019d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001170:	2302      	movs	r3, #2
 8001172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001182:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2101      	movs	r1, #1
 800118a:	4618      	mov	r0, r3
 800118c:	f001 fcac 	bl	8002ae8 <HAL_RCC_ClockConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001196:	f000 fc1f 	bl	80019d8 <Error_Handler>
  }
}
 800119a:	bf00      	nop
 800119c:	3750      	adds	r7, #80	; 0x50
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40007000 	.word	0x40007000

080011ac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_SPI3_Init+0x64>)
 80011b2:	4a18      	ldr	r2, [pc, #96]	; (8001214 <MX_SPI3_Init+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <MX_SPI3_Init+0x64>)
 80011b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_SPI3_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_SPI3_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_SPI3_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_SPI3_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_SPI3_Init+0x64>)
 80011d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011dc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_SPI3_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MX_SPI3_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_SPI3_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <MX_SPI3_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_SPI3_Init+0x64>)
 80011f8:	220a      	movs	r2, #10
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_SPI3_Init+0x64>)
 80011fe:	f001 fea1 	bl	8002f44 <HAL_SPI_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001208:	f000 fbe6 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20004ae0 	.word	0x20004ae0
 8001214:	40003c00 	.word	0x40003c00

08001218 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_TIM10_Init+0x40>)
 800121e:	4a0f      	ldr	r2, [pc, #60]	; (800125c <MX_TIM10_Init+0x44>)
 8001220:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 50-1;
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <MX_TIM10_Init+0x40>)
 8001224:	2231      	movs	r2, #49	; 0x31
 8001226:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_TIM10_Init+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <MX_TIM10_Init+0x40>)
 8001230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001234:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MX_TIM10_Init+0x40>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_TIM10_Init+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_TIM10_Init+0x40>)
 8001244:	f002 f974 	bl	8003530 <HAL_TIM_Base_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800124e:	f000 fbc3 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20004a90 	.word	0x20004a90
 800125c:	40014400 	.word	0x40014400

08001260 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_USART1_UART_Init+0x50>)
 8001268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800126c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001298:	f002 fc42 	bl	8003b20 <HAL_UART_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012a2:	f000 fb99 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20004b64 	.word	0x20004b64
 80012b0:	40011000 	.word	0x40011000

080012b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <MX_USART2_UART_Init+0x50>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ec:	f002 fc18 	bl	8003b20 <HAL_UART_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012f6:	f000 fb6f 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20004c44 	.word	0x20004c44
 8001304:	40004400 	.word	0x40004400

08001308 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <MX_USART6_UART_Init+0x50>)
 8001310:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 8001314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001318:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_USART6_UART_Init+0x4c>)
 8001340:	f002 fbee 	bl	8003b20 <HAL_UART_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800134a:	f000 fb45 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20004bfc 	.word	0x20004bfc
 8001358:	40011400 	.word	0x40011400

0800135c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b52      	ldr	r3, [pc, #328]	; (80014c0 <MX_GPIO_Init+0x164>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a51      	ldr	r2, [pc, #324]	; (80014c0 <MX_GPIO_Init+0x164>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <MX_GPIO_Init+0x164>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b4b      	ldr	r3, [pc, #300]	; (80014c0 <MX_GPIO_Init+0x164>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a4a      	ldr	r2, [pc, #296]	; (80014c0 <MX_GPIO_Init+0x164>)
 8001398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <MX_GPIO_Init+0x164>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <MX_GPIO_Init+0x164>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a43      	ldr	r2, [pc, #268]	; (80014c0 <MX_GPIO_Init+0x164>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <MX_GPIO_Init+0x164>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	4b3d      	ldr	r3, [pc, #244]	; (80014c0 <MX_GPIO_Init+0x164>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a3c      	ldr	r2, [pc, #240]	; (80014c0 <MX_GPIO_Init+0x164>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b3a      	ldr	r3, [pc, #232]	; (80014c0 <MX_GPIO_Init+0x164>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2120      	movs	r1, #32
 80013e6:	4837      	ldr	r0, [pc, #220]	; (80014c4 <MX_GPIO_Init+0x168>)
 80013e8:	f001 f8ec 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_SS3_Pin|SPI_SS2_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	f44f 41c6 	mov.w	r1, #25344	; 0x6300
 80013f2:	4835      	ldr	r0, [pc, #212]	; (80014c8 <MX_GPIO_Init+0x16c>)
 80013f4:	f001 f8e6 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_SS_GPIO_Port, SPI3_SS_Pin, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013fe:	4832      	ldr	r0, [pc, #200]	; (80014c8 <MX_GPIO_Init+0x16c>)
 8001400:	f001 f8e0 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 7100 	mov.w	r1, #512	; 0x200
 800140a:	4830      	ldr	r0, [pc, #192]	; (80014cc <MX_GPIO_Init+0x170>)
 800140c:	f001 f8da 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001416:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800141a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	4829      	ldr	r0, [pc, #164]	; (80014cc <MX_GPIO_Init+0x170>)
 8001428:	f000 ff30 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800142c:	2320      	movs	r3, #32
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	4820      	ldr	r0, [pc, #128]	; (80014c4 <MX_GPIO_Init+0x168>)
 8001444:	f000 ff22 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001448:	2301      	movs	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001450:	2301      	movs	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4619      	mov	r1, r3
 800145a:	481b      	ldr	r0, [pc, #108]	; (80014c8 <MX_GPIO_Init+0x16c>)
 800145c:	f000 ff16 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_SS3_Pin SPI_SS2_Pin SPI3_SS_Pin LED_YELLOW_Pin
                           LED_GREEN_Pin */
  GPIO_InitStruct.Pin = SPI_SS3_Pin|SPI_SS2_Pin|SPI3_SS_Pin|LED_YELLOW_Pin
 8001460:	f44f 4363 	mov.w	r3, #58112	; 0xe300
 8001464:	617b      	str	r3, [r7, #20]
                          |LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2301      	movs	r3, #1
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4813      	ldr	r0, [pc, #76]	; (80014c8 <MX_GPIO_Init+0x16c>)
 800147a:	f000 ff07 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800147e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_GPIO_Init+0x170>)
 8001498:	f000 fef8 	bl	800228c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800149c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_GPIO_Init+0x168>)
 80014b2:	f000 feeb 	bl	800228c <HAL_GPIO_Init>

}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40020800 	.word	0x40020800

080014d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	if (huart == &huart6){
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a09      	ldr	r2, [pc, #36]	; (8001500 <HAL_UART_RxCpltCallback+0x30>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d10a      	bne.n	80014f6 <HAL_UART_RxCpltCallback+0x26>
		osEventFlagsSet(parsingCMDAvailableHandle, 0x00000001U);
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_UART_RxCpltCallback+0x34>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2101      	movs	r1, #1
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 fcfe 	bl	8004ee8 <osEventFlagsSet>
		HAL_UART_Receive_IT(&huart6, (uint8_t*)receivedDataFromServer, 8);
 80014ec:	2208      	movs	r2, #8
 80014ee:	4906      	ldr	r1, [pc, #24]	; (8001508 <HAL_UART_RxCpltCallback+0x38>)
 80014f0:	4803      	ldr	r0, [pc, #12]	; (8001500 <HAL_UART_RxCpltCallback+0x30>)
 80014f2:	f002 fc96 	bl	8003e22 <HAL_UART_Receive_IT>
//			uchar temp[3];
//			sprintf((char*)temp, (const char*)"%02x ", (char)wareHouse_2.idOfScannedCard[i]);
//			HAL_UART_Transmit(&huart2, temp, 3, HAL_MAX_DELAY);
//		}
//	}
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20004bfc 	.word	0x20004bfc
 8001504:	20004c88 	.word	0x20004c88
 8001508:	20000098 	.word	0x20000098

0800150c <sendDataToServer>:


void sendDataToServer(volatile WareHouse_t* wareHouse, uint8_t typeOfData){
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]

	uchar dataToSend[18]={0};
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	819a      	strh	r2, [r3, #12]

	switch(typeOfData){
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	2b05      	cmp	r3, #5
 800152e:	d002      	beq.n	8001536 <sendDataToServer+0x2a>
 8001530:	2b06      	cmp	r3, #6
 8001532:	d00d      	beq.n	8001550 <sendDataToServer+0x44>
 8001534:	e026      	b.n	8001584 <sendDataToServer+0x78>
		case Sensor_DATA:
			dataToSend[0] = wareHouse->temperature;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	723b      	strb	r3, [r7, #8]
			dataToSend[1] = wareHouse->humidity;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	727b      	strb	r3, [r7, #9]
			dataToSend[17] = wareHouse->index;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	767b      	strb	r3, [r7, #25]
			break;
 800154e:	e019      	b.n	8001584 <sendDataToServer+0x78>
		case CardID_DATA:
			for(int i = 0; i<16; i++){
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
 8001554:	e00e      	b.n	8001574 <sendDataToServer+0x68>
				dataToSend[i]=wareHouse->idOfScannedCard[i];
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	4413      	add	r3, r2
 800155c:	3304      	adds	r3, #4
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2d9      	uxtb	r1, r3
 8001562:	f107 0208 	add.w	r2, r7, #8
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	4413      	add	r3, r2
 800156a:	460a      	mov	r2, r1
 800156c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<16; i++){
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3301      	adds	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	2b0f      	cmp	r3, #15
 8001578:	dded      	ble.n	8001556 <sendDataToServer+0x4a>
			}
			dataToSend[17] = wareHouse->index;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	767b      	strb	r3, [r7, #25]
			break;
 8001582:	bf00      	nop
	}

	dataToSend[16] = typeOfData;
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	763b      	strb	r3, [r7, #24]


	HAL_UART_Transmit(&huart6, dataToSend, 18, HAL_MAX_DELAY);
 8001588:	f107 0108 	add.w	r1, r7, #8
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	2212      	movs	r2, #18
 8001592:	4803      	ldr	r0, [pc, #12]	; (80015a0 <sendDataToServer+0x94>)
 8001594:	f002 fb11 	bl	8003bba <HAL_UART_Transmit>

}
 8001598:	bf00      	nop
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20004bfc 	.word	0x20004bfc

080015a4 <scanCardIdHandle>:



void scanCardIdHandle(uint8_t wareHouseId){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
	switch(wareHouseId){
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d002      	beq.n	80015ba <scanCardIdHandle+0x16>
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d036      	beq.n	8001626 <scanCardIdHandle+0x82>
		}

		osMessageQueuePut(cardID_QueueHandle, &wareHouse_2, 0U, osWaitForever);
		break;
	default:
		break;
 80015b8:	e070      	b.n	800169c <scanCardIdHandle+0xf8>
			if( ScanCardAndGetDataFromBlock(0, wareHouse_1.idOfScannedCard, keyA) == MI_OK){
 80015ba:	4a3a      	ldr	r2, [pc, #232]	; (80016a4 <scanCardIdHandle+0x100>)
 80015bc:	493a      	ldr	r1, [pc, #232]	; (80016a8 <scanCardIdHandle+0x104>)
 80015be:	2000      	movs	r0, #0
 80015c0:	f7ff fc54 	bl	8000e6c <ScanCardAndGetDataFromBlock>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f7      	bne.n	80015ba <scanCardIdHandle+0x16>
					for(int i = 0; i<16; i++){
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	e017      	b.n	8001600 <scanCardIdHandle+0x5c>
						sprintf((char*)temp, (const char*)"%02x ", (char)wareHouse_1.idOfScannedCard[i]);
 80015d0:	4a36      	ldr	r2, [pc, #216]	; (80016ac <scanCardIdHandle+0x108>)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	4413      	add	r3, r2
 80015d6:	3304      	adds	r3, #4
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	4933      	ldr	r1, [pc, #204]	; (80016b0 <scanCardIdHandle+0x10c>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f007 fb67 	bl	8008cb8 <siprintf>
						HAL_UART_Transmit(&huart2, temp, 3, HAL_MAX_DELAY);
 80015ea:	f107 010c 	add.w	r1, r7, #12
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	2203      	movs	r2, #3
 80015f4:	482f      	ldr	r0, [pc, #188]	; (80016b4 <scanCardIdHandle+0x110>)
 80015f6:	f002 fae0 	bl	8003bba <HAL_UART_Transmit>
					for(int i = 0; i<16; i++){
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	3301      	adds	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2b0f      	cmp	r3, #15
 8001604:	dde4      	ble.n	80015d0 <scanCardIdHandle+0x2c>
					HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	2202      	movs	r2, #2
 800160c:	492a      	ldr	r1, [pc, #168]	; (80016b8 <scanCardIdHandle+0x114>)
 800160e:	4829      	ldr	r0, [pc, #164]	; (80016b4 <scanCardIdHandle+0x110>)
 8001610:	f002 fad3 	bl	8003bba <HAL_UART_Transmit>
					osMessageQueuePut(cardID_QueueHandle, &wareHouse_1, 0U, osWaitForever);
 8001614:	4b29      	ldr	r3, [pc, #164]	; (80016bc <scanCardIdHandle+0x118>)
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
 800161c:	2200      	movs	r2, #0
 800161e:	4923      	ldr	r1, [pc, #140]	; (80016ac <scanCardIdHandle+0x108>)
 8001620:	f003 fe8e 	bl	8005340 <osMessageQueuePut>
					return;
 8001624:	e03a      	b.n	800169c <scanCardIdHandle+0xf8>
		cmdToSend[0] = SCAN_CARDID;
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <scanCardIdHandle+0x11c>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, cmdToSend, 8, HAL_MAX_DELAY);
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
 8001630:	2208      	movs	r2, #8
 8001632:	4923      	ldr	r1, [pc, #140]	; (80016c0 <scanCardIdHandle+0x11c>)
 8001634:	4823      	ldr	r0, [pc, #140]	; (80016c4 <scanCardIdHandle+0x120>)
 8001636:	f002 fac0 	bl	8003bba <HAL_UART_Transmit>
		osDelay(10);
 800163a:	200a      	movs	r0, #10
 800163c:	f003 fbfa 	bl	8004e34 <osDelay>
		HAL_UART_Receive(&huart1, wareHouse_2.idOfScannedCard, 16, HAL_MAX_DELAY);
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
 8001644:	2210      	movs	r2, #16
 8001646:	4920      	ldr	r1, [pc, #128]	; (80016c8 <scanCardIdHandle+0x124>)
 8001648:	481e      	ldr	r0, [pc, #120]	; (80016c4 <scanCardIdHandle+0x120>)
 800164a:	f002 fb48 	bl	8003cde <HAL_UART_Receive>
		for(int i = 0; i<16; i++){
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	e017      	b.n	8001684 <scanCardIdHandle+0xe0>
			sprintf((char*)temp, (const char*)"%02x ", (char)wareHouse_2.idOfScannedCard[i]);
 8001654:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <scanCardIdHandle+0x128>)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4413      	add	r3, r2
 800165a:	3304      	adds	r3, #4
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	4912      	ldr	r1, [pc, #72]	; (80016b0 <scanCardIdHandle+0x10c>)
 8001668:	4618      	mov	r0, r3
 800166a:	f007 fb25 	bl	8008cb8 <siprintf>
			HAL_UART_Transmit(&huart2, temp, 3, HAL_MAX_DELAY);
 800166e:	f107 0108 	add.w	r1, r7, #8
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	2203      	movs	r2, #3
 8001678:	480e      	ldr	r0, [pc, #56]	; (80016b4 <scanCardIdHandle+0x110>)
 800167a:	f002 fa9e 	bl	8003bba <HAL_UART_Transmit>
		for(int i = 0; i<16; i++){
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	3301      	adds	r3, #1
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	2b0f      	cmp	r3, #15
 8001688:	dde4      	ble.n	8001654 <scanCardIdHandle+0xb0>
		osMessageQueuePut(cardID_QueueHandle, &wareHouse_2, 0U, osWaitForever);
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <scanCardIdHandle+0x118>)
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	2200      	movs	r2, #0
 8001694:	490d      	ldr	r1, [pc, #52]	; (80016cc <scanCardIdHandle+0x128>)
 8001696:	f003 fe53 	bl	8005340 <osMessageQueuePut>
		break;
 800169a:	bf00      	nop
	}
}
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20004b3c 	.word	0x20004b3c
 80016ac:	20004b38 	.word	0x20004b38
 80016b0:	08009674 	.word	0x08009674
 80016b4:	20004c44 	.word	0x20004c44
 80016b8:	0800967c 	.word	0x0800967c
 80016bc:	20004b58 	.word	0x20004b58
 80016c0:	200000a0 	.word	0x200000a0
 80016c4:	20004b64 	.word	0x20004b64
 80016c8:	20004be4 	.word	0x20004be4
 80016cc:	20004be0 	.word	0x20004be0

080016d0 <toggleLEDHanlde>:

void toggleLEDHanlde(uint8_t wareHouseId, uint8_t ledId, uint8_t state){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
 80016da:	460b      	mov	r3, r1
 80016dc:	71bb      	strb	r3, [r7, #6]
 80016de:	4613      	mov	r3, r2
 80016e0:	717b      	strb	r3, [r7, #5]

	switch(wareHouseId){
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d002      	beq.n	80016ee <toggleLEDHanlde+0x1e>
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d021      	beq.n	8001730 <toggleLEDHanlde+0x60>
			cmdToSend[0] = TOGGLE_LED;
			cmdToSend[1] =  ledId;
			cmdToSend[2] =  state;
			HAL_UART_Transmit(&huart1, cmdToSend, 8, 1000);
		default:
			break;
 80016ec:	e032      	b.n	8001754 <toggleLEDHanlde+0x84>
			if(ledId == 1){
 80016ee:	79bb      	ldrb	r3, [r7, #6]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d107      	bne.n	8001704 <toggleLEDHanlde+0x34>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, state);
 80016f4:	797b      	ldrb	r3, [r7, #5]
 80016f6:	461a      	mov	r2, r3
 80016f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fc:	4817      	ldr	r0, [pc, #92]	; (800175c <toggleLEDHanlde+0x8c>)
 80016fe:	f000 ff61 	bl	80025c4 <HAL_GPIO_WritePin>
			break;
 8001702:	e026      	b.n	8001752 <toggleLEDHanlde+0x82>
			}else if(ledId == 2){
 8001704:	79bb      	ldrb	r3, [r7, #6]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d107      	bne.n	800171a <toggleLEDHanlde+0x4a>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, state);
 800170a:	797b      	ldrb	r3, [r7, #5]
 800170c:	461a      	mov	r2, r3
 800170e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001712:	4812      	ldr	r0, [pc, #72]	; (800175c <toggleLEDHanlde+0x8c>)
 8001714:	f000 ff56 	bl	80025c4 <HAL_GPIO_WritePin>
			break;
 8001718:	e01b      	b.n	8001752 <toggleLEDHanlde+0x82>
			}else if(ledId == 3){
 800171a:	79bb      	ldrb	r3, [r7, #6]
 800171c:	2b03      	cmp	r3, #3
 800171e:	d118      	bne.n	8001752 <toggleLEDHanlde+0x82>
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, state);
 8001720:	797b      	ldrb	r3, [r7, #5]
 8001722:	461a      	mov	r2, r3
 8001724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001728:	480d      	ldr	r0, [pc, #52]	; (8001760 <toggleLEDHanlde+0x90>)
 800172a:	f000 ff4b 	bl	80025c4 <HAL_GPIO_WritePin>
			break;
 800172e:	e010      	b.n	8001752 <toggleLEDHanlde+0x82>
			cmdToSend[0] = TOGGLE_LED;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <toggleLEDHanlde+0x94>)
 8001732:	2202      	movs	r2, #2
 8001734:	701a      	strb	r2, [r3, #0]
			cmdToSend[1] =  ledId;
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <toggleLEDHanlde+0x94>)
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	7053      	strb	r3, [r2, #1]
			cmdToSend[2] =  state;
 800173c:	4a09      	ldr	r2, [pc, #36]	; (8001764 <toggleLEDHanlde+0x94>)
 800173e:	797b      	ldrb	r3, [r7, #5]
 8001740:	7093      	strb	r3, [r2, #2]
			HAL_UART_Transmit(&huart1, cmdToSend, 8, 1000);
 8001742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001746:	2208      	movs	r2, #8
 8001748:	4906      	ldr	r1, [pc, #24]	; (8001764 <toggleLEDHanlde+0x94>)
 800174a:	4807      	ldr	r0, [pc, #28]	; (8001768 <toggleLEDHanlde+0x98>)
 800174c:	f002 fa35 	bl	8003bba <HAL_UART_Transmit>
			break;
 8001750:	e000      	b.n	8001754 <toggleLEDHanlde+0x84>
			break;
 8001752:	bf00      	nop
		}
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40020400 	.word	0x40020400
 8001760:	40020800 	.word	0x40020800
 8001764:	200000a0 	.word	0x200000a0
 8001768:	20004b64 	.word	0x20004b64

0800176c <CmdParsing_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_CmdParsing_Task */
void CmdParsing_Task(void *argument)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  HAL_UART_Receive_IT(&huart6, (uint8_t*)receivedDataFromServer, 8);
 8001774:	2208      	movs	r2, #8
 8001776:	491b      	ldr	r1, [pc, #108]	; (80017e4 <CmdParsing_Task+0x78>)
 8001778:	481b      	ldr	r0, [pc, #108]	; (80017e8 <CmdParsing_Task+0x7c>)
 800177a:	f002 fb52 	bl	8003e22 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
	// Wait for flag to parsing comming CMD
	osEventFlagsWait(parsingCMDAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <CmdParsing_Task+0x80>)
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	2200      	movs	r2, #0
 8001788:	2101      	movs	r1, #1
 800178a:	f003 fbf1 	bl	8004f70 <osEventFlagsWait>

	// Parsing CMD
	switch(receivedDataFromServer[0]){
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <CmdParsing_Task+0x78>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b03      	cmp	r3, #3
 8001796:	d01a      	beq.n	80017ce <CmdParsing_Task+0x62>
 8001798:	2b03      	cmp	r3, #3
 800179a:	dc1e      	bgt.n	80017da <CmdParsing_Task+0x6e>
 800179c:	2b01      	cmp	r3, #1
 800179e:	d002      	beq.n	80017a6 <CmdParsing_Task+0x3a>
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d007      	beq.n	80017b4 <CmdParsing_Task+0x48>
 80017a4:	e019      	b.n	80017da <CmdParsing_Task+0x6e>
	case SCAN_CARDID:
		osEventFlagsSet(scanCardAvailableHandle, 0x00000001U);
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <CmdParsing_Task+0x84>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2101      	movs	r1, #1
 80017ac:	4618      	mov	r0, r3
 80017ae:	f003 fb9b 	bl	8004ee8 <osEventFlagsSet>
		break;
 80017b2:	e012      	b.n	80017da <CmdParsing_Task+0x6e>
	case TOGGLE_LED:
		toggleLEDHanlde(receivedDataFromServer[1], receivedDataFromServer[2], receivedDataFromServer[3]);
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <CmdParsing_Task+0x78>)
 80017b6:	785b      	ldrb	r3, [r3, #1]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <CmdParsing_Task+0x78>)
 80017bc:	7892      	ldrb	r2, [r2, #2]
 80017be:	b2d1      	uxtb	r1, r2
 80017c0:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <CmdParsing_Task+0x78>)
 80017c2:	78d2      	ldrb	r2, [r2, #3]
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff82 	bl	80016d0 <toggleLEDHanlde>
		break;
 80017cc:	e005      	b.n	80017da <CmdParsing_Task+0x6e>
	case SENSOR_MEASURING:
			//dosomething
		sensorMeasuringIsEnable = receivedDataFromServer[7];
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <CmdParsing_Task+0x78>)
 80017d0:	79db      	ldrb	r3, [r3, #7]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <CmdParsing_Task+0x88>)
 80017d6:	701a      	strb	r2, [r3, #0]
		break;
 80017d8:	bf00      	nop
	}

    osDelay(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f003 fb2a 	bl	8004e34 <osDelay>
	osEventFlagsWait(parsingCMDAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 80017e0:	e7cd      	b.n	800177e <CmdParsing_Task+0x12>
 80017e2:	bf00      	nop
 80017e4:	20000098 	.word	0x20000098
 80017e8:	20004bfc 	.word	0x20004bfc
 80017ec:	20004c88 	.word	0x20004c88
 80017f0:	20004b5c 	.word	0x20004b5c
 80017f4:	20000006 	.word	0x20000006

080017f8 <ToggleLed_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ToggleLed_Task */
void ToggleLed_Task(void *argument)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ToggleLed_Task */

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8001800:	2001      	movs	r0, #1
 8001802:	f003 fb17 	bl	8004e34 <osDelay>
 8001806:	e7fb      	b.n	8001800 <ToggleLed_Task+0x8>

08001808 <ScanCard_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ScanCard_Task */
void ScanCard_Task(void *argument)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	// Wait for scan flag
	osEventFlagsWait(scanCardAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <ScanCard_Task+0x2c>)
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
 8001818:	2200      	movs	r2, #0
 800181a:	2101      	movs	r1, #1
 800181c:	f003 fba8 	bl	8004f70 <osEventFlagsWait>

	// Mutex protect for uart2 start
//	osMutexAcquire(mutex_uart2Handle, osWaitForever);

	// Scan card id in ware house (id = receivedDataFromServer[1]) and send data to queue to SendCardID_Task
	scanCardIdHandle(receivedDataFromServer[1]);
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <ScanCard_Task+0x30>)
 8001822:	785b      	ldrb	r3, [r3, #1]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff febc 	bl	80015a4 <scanCardIdHandle>

	// Mutex protect for uart2 end
//	osMutexRelease(mutex_uart2Handle);

    osDelay(1);
 800182c:	2001      	movs	r0, #1
 800182e:	f003 fb01 	bl	8004e34 <osDelay>
	osEventFlagsWait(scanCardAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 8001832:	e7ed      	b.n	8001810 <ScanCard_Task+0x8>
 8001834:	20004b5c 	.word	0x20004b5c
 8001838:	20000098 	.word	0x20000098

0800183c <SensorMeasuring_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SensorMeasuring_Task */
void SensorMeasuring_Task(void *argument)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SensorMeasuring_Task */
  /* Infinite loop */
	HAL_TIM_Base_Start(&htim10);
 8001844:	4829      	ldr	r0, [pc, #164]	; (80018ec <SensorMeasuring_Task+0xb0>)
 8001846:	f001 fec3 	bl	80035d0 <HAL_TIM_Base_Start>
  for(;;)
  {
	  if(sensorMeasuringIsEnable){
 800184a:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <SensorMeasuring_Task+0xb4>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d01c      	beq.n	800188e <SensorMeasuring_Task+0x52>
		DHT11_GetData(&DHT_Data);
 8001854:	4827      	ldr	r0, [pc, #156]	; (80018f4 <SensorMeasuring_Task+0xb8>)
 8001856:	f7fe ff7d 	bl	8000754 <DHT11_GetData>
		wareHouse_1.humidity = DHT_Data.Humidity;
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <SensorMeasuring_Task+0xb8>)
 800185c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001860:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001864:	ee17 2a90 	vmov	r2, s15
 8001868:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <SensorMeasuring_Task+0xbc>)
 800186a:	619a      	str	r2, [r3, #24]
		wareHouse_1.temperature = DHT_Data.Temperature;
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <SensorMeasuring_Task+0xb8>)
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001876:	ee17 2a90 	vmov	r2, s15
 800187a:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <SensorMeasuring_Task+0xbc>)
 800187c:	615a      	str	r2, [r3, #20]

//		wareHouse_2.humidity = rand()%5 + 90;
//		wareHouse_2.temperature = rand()%10 + 22;
		osMessageQueuePut(sensorData_QueueHandle, &wareHouse_1, NULL, osWaitForever);
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <SensorMeasuring_Task+0xc0>)
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	2200      	movs	r2, #0
 8001888:	491b      	ldr	r1, [pc, #108]	; (80018f8 <SensorMeasuring_Task+0xbc>)
 800188a:	f003 fd59 	bl	8005340 <osMessageQueuePut>
	  }

	  osDelay(1000);
 800188e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001892:	f003 facf 	bl	8004e34 <osDelay>

	  if(sensorMeasuringIsEnable){
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <SensorMeasuring_Task+0xb4>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d01f      	beq.n	80018e0 <SensorMeasuring_Task+0xa4>
		//Send Cmd to warehouse2 to get humidity and temperature
		cmdToSend[0] = SENSOR_MEASURING;
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <SensorMeasuring_Task+0xc4>)
 80018a2:	2203      	movs	r2, #3
 80018a4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, cmdToSend, 8, HAL_MAX_DELAY);
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	2208      	movs	r2, #8
 80018ac:	4914      	ldr	r1, [pc, #80]	; (8001900 <SensorMeasuring_Task+0xc4>)
 80018ae:	4815      	ldr	r0, [pc, #84]	; (8001904 <SensorMeasuring_Task+0xc8>)
 80018b0:	f002 f983 	bl	8003bba <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, &wareHouse_2.humidity, 1, 1000);
 80018b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b8:	2201      	movs	r2, #1
 80018ba:	4913      	ldr	r1, [pc, #76]	; (8001908 <SensorMeasuring_Task+0xcc>)
 80018bc:	4811      	ldr	r0, [pc, #68]	; (8001904 <SensorMeasuring_Task+0xc8>)
 80018be:	f002 fa0e 	bl	8003cde <HAL_UART_Receive>
		HAL_UART_Receive(&huart1, &wareHouse_2.temperature, 1, 1000);
 80018c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c6:	2201      	movs	r2, #1
 80018c8:	4910      	ldr	r1, [pc, #64]	; (800190c <SensorMeasuring_Task+0xd0>)
 80018ca:	480e      	ldr	r0, [pc, #56]	; (8001904 <SensorMeasuring_Task+0xc8>)
 80018cc:	f002 fa07 	bl	8003cde <HAL_UART_Receive>


//		wareHouse_2.humidity = rand()%5 + 90;
//		wareHouse_2.temperature = rand()%10 + 22;
		osMessageQueuePut(sensorData_QueueHandle, &wareHouse_2, NULL, osWaitForever);
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <SensorMeasuring_Task+0xc0>)
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
 80018d8:	2200      	movs	r2, #0
 80018da:	490d      	ldr	r1, [pc, #52]	; (8001910 <SensorMeasuring_Task+0xd4>)
 80018dc:	f003 fd30 	bl	8005340 <osMessageQueuePut>
	  }
	  osDelay(1000);
 80018e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018e4:	f003 faa6 	bl	8004e34 <osDelay>
	  if(sensorMeasuringIsEnable){
 80018e8:	e7af      	b.n	800184a <SensorMeasuring_Task+0xe>
 80018ea:	bf00      	nop
 80018ec:	20004a90 	.word	0x20004a90
 80018f0:	20000006 	.word	0x20000006
 80018f4:	20004a84 	.word	0x20004a84
 80018f8:	20004b38 	.word	0x20004b38
 80018fc:	20004ad8 	.word	0x20004ad8
 8001900:	200000a0 	.word	0x200000a0
 8001904:	20004b64 	.word	0x20004b64
 8001908:	20004bf8 	.word	0x20004bf8
 800190c:	20004bf4 	.word	0x20004bf4
 8001910:	20004be0 	.word	0x20004be0

08001914 <SendCardID_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SendCardID_Task */
void SendCardID_Task(void *argument)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	WareHouse_t wareHouse;
  /* Infinite loop */
  for(;;)
  {
	// wait for data from queue
	osMessageQueueGet(cardID_QueueHandle, &wareHouse, NULL, osWaitForever);
 800191c:	4b0f      	ldr	r3, [pc, #60]	; (800195c <SendCardID_Task+0x48>)
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	f107 010c 	add.w	r1, r7, #12
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
 8001928:	2200      	movs	r2, #0
 800192a:	f003 fd69 	bl	8005400 <osMessageQueueGet>

	// Mutex protect for uart6 (connect to Esp) start
	osMutexAcquire(mutex_uart6Handle, osWaitForever);
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <SendCardID_Task+0x4c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f04f 31ff 	mov.w	r1, #4294967295
 8001936:	4618      	mov	r0, r3
 8001938:	f003 fc06 	bl	8005148 <osMutexAcquire>

	// send Data to ESP8266 -> Sever
	sendDataToServer(&wareHouse, CardID_DATA);
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	2106      	movs	r1, #6
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fde2 	bl	800150c <sendDataToServer>

	// Mutex protect for uart6 end
	osMutexRelease(mutex_uart6Handle);
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <SendCardID_Task+0x4c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f003 fc46 	bl	80051de <osMutexRelease>

    osDelay(1);
 8001952:	2001      	movs	r0, #1
 8001954:	f003 fa6e 	bl	8004e34 <osDelay>
	osMessageQueueGet(cardID_QueueHandle, &wareHouse, NULL, osWaitForever);
 8001958:	e7e0      	b.n	800191c <SendCardID_Task+0x8>
 800195a:	bf00      	nop
 800195c:	20004b58 	.word	0x20004b58
 8001960:	20004adc 	.word	0x20004adc

08001964 <SendSensorData_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SendSensorData_Task */
void SendSensorData_Task(void *argument)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	// wait for data from queue
	osMessageQueueGet(sensorData_QueueHandle, &wareHouse, NULL, osWaitForever);
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <SendSensorData_Task+0x48>)
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	f107 010c 	add.w	r1, r7, #12
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
 8001978:	2200      	movs	r2, #0
 800197a:	f003 fd41 	bl	8005400 <osMessageQueueGet>

	// Mutex protect for uart6 (connect to Esp) start
	osMutexAcquire(mutex_uart6Handle, osWaitForever);
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <SendSensorData_Task+0x4c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f04f 31ff 	mov.w	r1, #4294967295
 8001986:	4618      	mov	r0, r3
 8001988:	f003 fbde 	bl	8005148 <osMutexAcquire>

	// send Data to ESP8266 -> Sever
	sendDataToServer(&wareHouse, Sensor_DATA);
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	2105      	movs	r1, #5
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fdba 	bl	800150c <sendDataToServer>

	// Mutex protect for uart6 end
	osMutexRelease(mutex_uart6Handle);
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SendSensorData_Task+0x4c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f003 fc1e 	bl	80051de <osMutexRelease>

    osDelay(1);
 80019a2:	2001      	movs	r0, #1
 80019a4:	f003 fa46 	bl	8004e34 <osDelay>
	osMessageQueueGet(sensorData_QueueHandle, &wareHouse, NULL, osWaitForever);
 80019a8:	e7e0      	b.n	800196c <SendSensorData_Task+0x8>
 80019aa:	bf00      	nop
 80019ac:	20004ad8 	.word	0x20004ad8
 80019b0:	20004adc 	.word	0x20004adc

080019b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019c6:	f000 faa9 	bl	8001f1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40000800 	.word	0x40000800

080019d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019dc:	b672      	cpsid	i
}
 80019de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019e0:	e7fe      	b.n	80019e0 <Error_Handler+0x8>
	...

080019e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_MspInit+0x54>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <HAL_MspInit+0x54>)
 80019f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f8:	6453      	str	r3, [r2, #68]	; 0x44
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_MspInit+0x54>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	603b      	str	r3, [r7, #0]
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_MspInit+0x54>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <HAL_MspInit+0x54>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_MspInit+0x54>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	210f      	movs	r1, #15
 8001a26:	f06f 0001 	mvn.w	r0, #1
 8001a2a:	f000 fb73 	bl	8002114 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800

08001a3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a29      	ldr	r2, [pc, #164]	; (8001b00 <HAL_SPI_MspInit+0xc4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d14b      	bne.n	8001af6 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <HAL_SPI_MspInit+0xc8>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <HAL_SPI_MspInit+0xc8>)
 8001a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6e:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <HAL_SPI_MspInit+0xc8>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <HAL_SPI_MspInit+0xc8>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a20      	ldr	r2, [pc, #128]	; (8001b04 <HAL_SPI_MspInit+0xc8>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <HAL_SPI_MspInit+0xc8>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <HAL_SPI_MspInit+0xc8>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a19      	ldr	r2, [pc, #100]	; (8001b04 <HAL_SPI_MspInit+0xc8>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <HAL_SPI_MspInit+0xc8>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB12     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	480e      	ldr	r0, [pc, #56]	; (8001b08 <HAL_SPI_MspInit+0xcc>)
 8001ad0:	f000 fbdc 	bl	800228c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ad4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ae6:	2306      	movs	r3, #6
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	4806      	ldr	r0, [pc, #24]	; (8001b0c <HAL_SPI_MspInit+0xd0>)
 8001af2:	f000 fbcb 	bl	800228c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001af6:	bf00      	nop
 8001af8:	3728      	adds	r7, #40	; 0x28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40003c00 	.word	0x40003c00
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	40020800 	.word	0x40020800

08001b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <HAL_TIM_Base_MspInit+0x3c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d10d      	bne.n	8001b3e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_TIM_Base_MspInit+0x40>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <HAL_TIM_Base_MspInit+0x40>)
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_TIM_Base_MspInit+0x40>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40014400 	.word	0x40014400
 8001b50:	40023800 	.word	0x40023800

08001b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08e      	sub	sp, #56	; 0x38
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a53      	ldr	r2, [pc, #332]	; (8001cc0 <HAL_UART_MspInit+0x16c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d135      	bne.n	8001be2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	623b      	str	r3, [r7, #32]
 8001b7a:	4b52      	ldr	r3, [pc, #328]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	4a51      	ldr	r2, [pc, #324]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001b80:	f043 0310 	orr.w	r3, r3, #16
 8001b84:	6453      	str	r3, [r2, #68]	; 0x44
 8001b86:	4b4f      	ldr	r3, [pc, #316]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	623b      	str	r3, [r7, #32]
 8001b90:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
 8001b96:	4b4b      	ldr	r3, [pc, #300]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a4a      	ldr	r2, [pc, #296]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b48      	ldr	r3, [pc, #288]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
 8001bac:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bc0:	2307      	movs	r3, #7
 8001bc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc8:	4619      	mov	r1, r3
 8001bca:	483f      	ldr	r0, [pc, #252]	; (8001cc8 <HAL_UART_MspInit+0x174>)
 8001bcc:	f000 fb5e 	bl	800228c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2105      	movs	r1, #5
 8001bd4:	2025      	movs	r0, #37	; 0x25
 8001bd6:	f000 fa9d 	bl	8002114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bda:	2025      	movs	r0, #37	; 0x25
 8001bdc:	f000 fab6 	bl	800214c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001be0:	e06a      	b.n	8001cb8 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a39      	ldr	r2, [pc, #228]	; (8001ccc <HAL_UART_MspInit+0x178>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d12c      	bne.n	8001c46 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bec:	2300      	movs	r3, #0
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	4b34      	ldr	r3, [pc, #208]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	4a33      	ldr	r2, [pc, #204]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfc:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c04:	61bb      	str	r3, [r7, #24]
 8001c06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	4a2c      	ldr	r2, [pc, #176]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6313      	str	r3, [r2, #48]	; 0x30
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c24:	230c      	movs	r3, #12
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c34:	2307      	movs	r3, #7
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4822      	ldr	r0, [pc, #136]	; (8001cc8 <HAL_UART_MspInit+0x174>)
 8001c40:	f000 fb24 	bl	800228c <HAL_GPIO_Init>
}
 8001c44:	e038      	b.n	8001cb8 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a21      	ldr	r2, [pc, #132]	; (8001cd0 <HAL_UART_MspInit+0x17c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d133      	bne.n	8001cb8 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	4a1a      	ldr	r2, [pc, #104]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001c5a:	f043 0320 	orr.w	r3, r3, #32
 8001c5e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_UART_MspInit+0x170>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c88:	23c0      	movs	r3, #192	; 0xc0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c98:	2308      	movs	r3, #8
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480c      	ldr	r0, [pc, #48]	; (8001cd4 <HAL_UART_MspInit+0x180>)
 8001ca4:	f000 faf2 	bl	800228c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2105      	movs	r1, #5
 8001cac:	2047      	movs	r0, #71	; 0x47
 8001cae:	f000 fa31 	bl	8002114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001cb2:	2047      	movs	r0, #71	; 0x47
 8001cb4:	f000 fa4a 	bl	800214c <HAL_NVIC_EnableIRQ>
}
 8001cb8:	bf00      	nop
 8001cba:	3738      	adds	r7, #56	; 0x38
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40011000 	.word	0x40011000
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40004400 	.word	0x40004400
 8001cd0:	40011400 	.word	0x40011400
 8001cd4:	40020800 	.word	0x40020800

08001cd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08c      	sub	sp, #48	; 0x30
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	201e      	movs	r0, #30
 8001cee:	f000 fa11 	bl	8002114 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cf2:	201e      	movs	r0, #30
 8001cf4:	f000 fa2a 	bl	800214c <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <HAL_InitTick+0xa4>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <HAL_InitTick+0xa4>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	6413      	str	r3, [r2, #64]	; 0x40
 8001d08:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <HAL_InitTick+0xa4>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d14:	f107 0210 	add.w	r2, r7, #16
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f001 f8de 	bl	8002ee0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d24:	f001 f8b4 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d30:	4a13      	ldr	r2, [pc, #76]	; (8001d80 <HAL_InitTick+0xa8>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	0c9b      	lsrs	r3, r3, #18
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_InitTick+0xac>)
 8001d3e:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <HAL_InitTick+0xb0>)
 8001d40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <HAL_InitTick+0xac>)
 8001d44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d48:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001d4a:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <HAL_InitTick+0xac>)
 8001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <HAL_InitTick+0xac>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_InitTick+0xac>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001d5c:	4809      	ldr	r0, [pc, #36]	; (8001d84 <HAL_InitTick+0xac>)
 8001d5e:	f001 fbe7 	bl	8003530 <HAL_TIM_Base_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d104      	bne.n	8001d72 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001d68:	4806      	ldr	r0, [pc, #24]	; (8001d84 <HAL_InitTick+0xac>)
 8001d6a:	f001 fcb3 	bl	80036d4 <HAL_TIM_Base_Start_IT>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	e000      	b.n	8001d74 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3730      	adds	r7, #48	; 0x30
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	431bde83 	.word	0x431bde83
 8001d84:	20004c90 	.word	0x20004c90
 8001d88:	40000800 	.word	0x40000800

08001d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <NMI_Handler+0x4>

08001d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <HardFault_Handler+0x4>

08001d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <MemManage_Handler+0x4>

08001d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <BusFault_Handler+0x4>

08001da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <UsageFault_Handler+0x4>

08001daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <TIM4_IRQHandler+0x10>)
 8001dbe:	f001 fceb 	bl	8003798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20004c90 	.word	0x20004c90

08001dcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <USART1_IRQHandler+0x10>)
 8001dd2:	f002 f857 	bl	8003e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20004b64 	.word	0x20004b64

08001de0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <USART6_IRQHandler+0x10>)
 8001de6:	f002 f84d 	bl	8003e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20004bfc 	.word	0x20004bfc

08001df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dfc:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <_sbrk+0x5c>)
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <_sbrk+0x60>)
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <_sbrk+0x64>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <_sbrk+0x64>)
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <_sbrk+0x68>)
 8001e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <_sbrk+0x64>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d207      	bcs.n	8001e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e24:	f006 fe32 	bl	8008a8c <__errno>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	e009      	b.n	8001e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <_sbrk+0x64>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <_sbrk+0x64>)
 8001e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e46:	68fb      	ldr	r3, [r7, #12]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20020000 	.word	0x20020000
 8001e54:	00000400 	.word	0x00000400
 8001e58:	200000a8 	.word	0x200000a8
 8001e5c:	20004d30 	.word	0x20004d30

08001e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <SystemInit+0x20>)
 8001e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <SystemInit+0x20>)
 8001e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ebc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e88:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e8a:	490e      	ldr	r1, [pc, #56]	; (8001ec4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e90:	e002      	b.n	8001e98 <LoopCopyDataInit>

08001e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e96:	3304      	adds	r3, #4

08001e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e9c:	d3f9      	bcc.n	8001e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ea0:	4c0b      	ldr	r4, [pc, #44]	; (8001ed0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea4:	e001      	b.n	8001eaa <LoopFillZerobss>

08001ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea8:	3204      	adds	r2, #4

08001eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eac:	d3fb      	bcc.n	8001ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eae:	f7ff ffd7 	bl	8001e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eb2:	f006 fdf1 	bl	8008a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eb6:	f7ff f847 	bl	8000f48 <main>
  bx  lr    
 8001eba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ebc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001ec8:	0800989c 	.word	0x0800989c
  ldr r2, =_sbss
 8001ecc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001ed0:	20004d2c 	.word	0x20004d2c

08001ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed4:	e7fe      	b.n	8001ed4 <ADC_IRQHandler>
	...

08001ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001edc:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <HAL_Init+0x40>)
 8001ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HAL_Init+0x40>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_Init+0x40>)
 8001eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <HAL_Init+0x40>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a07      	ldr	r2, [pc, #28]	; (8001f18 <HAL_Init+0x40>)
 8001efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f00:	2003      	movs	r0, #3
 8001f02:	f000 f8fc 	bl	80020fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f06:	200f      	movs	r0, #15
 8001f08:	f7ff fee6 	bl	8001cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f0c:	f7ff fd6a 	bl	80019e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023c00 	.word	0x40023c00

08001f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_IncTick+0x20>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_IncTick+0x24>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <HAL_IncTick+0x24>)
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000010 	.word	0x20000010
 8001f40:	20004cd8 	.word	0x20004cd8

08001f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return uwTick;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_GetTick+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20004cd8 	.word	0x20004cd8

08001f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7ff ffee 	bl	8001f44 <HAL_GetTick>
 8001f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d005      	beq.n	8001f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_Delay+0x44>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f82:	bf00      	nop
 8001f84:	f7ff ffde 	bl	8001f44 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d8f7      	bhi.n	8001f84 <HAL_Delay+0x28>
  {
  }
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000010 	.word	0x20000010

08001fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd6:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	60d3      	str	r3, [r2, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0307 	and.w	r3, r3, #7
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db0b      	blt.n	8002032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4907      	ldr	r1, [pc, #28]	; (8002040 <__NVIC_EnableIRQ+0x38>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100

08002044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	2b00      	cmp	r3, #0
 8002056:	db0a      	blt.n	800206e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	490c      	ldr	r1, [pc, #48]	; (8002090 <__NVIC_SetPriority+0x4c>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	440b      	add	r3, r1
 8002068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800206c:	e00a      	b.n	8002084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4908      	ldr	r1, [pc, #32]	; (8002094 <__NVIC_SetPriority+0x50>)
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	3b04      	subs	r3, #4
 800207c:	0112      	lsls	r2, r2, #4
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	440b      	add	r3, r1
 8002082:	761a      	strb	r2, [r3, #24]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000e100 	.word	0xe000e100
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f1c3 0307 	rsb	r3, r3, #7
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	bf28      	it	cs
 80020b6:	2304      	movcs	r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3304      	adds	r3, #4
 80020be:	2b06      	cmp	r3, #6
 80020c0:	d902      	bls.n	80020c8 <NVIC_EncodePriority+0x30>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3b03      	subs	r3, #3
 80020c6:	e000      	b.n	80020ca <NVIC_EncodePriority+0x32>
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	4313      	orrs	r3, r2
         );
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ff4c 	bl	8001fa4 <__NVIC_SetPriorityGrouping>
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002126:	f7ff ff61 	bl	8001fec <__NVIC_GetPriorityGrouping>
 800212a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	6978      	ldr	r0, [r7, #20]
 8002132:	f7ff ffb1 	bl	8002098 <NVIC_EncodePriority>
 8002136:	4602      	mov	r2, r0
 8002138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff ff80 	bl	8002044 <__NVIC_SetPriority>
}
 8002144:	bf00      	nop
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff54 	bl	8002008 <__NVIC_EnableIRQ>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002176:	f7ff fee5 	bl	8001f44 <HAL_GetTick>
 800217a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d008      	beq.n	800219a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e052      	b.n	8002240 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0216 	bic.w	r2, r2, #22
 80021a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d103      	bne.n	80021ca <HAL_DMA_Abort+0x62>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0208 	bic.w	r2, r2, #8
 80021d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0201 	bic.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ea:	e013      	b.n	8002214 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ec:	f7ff feaa 	bl	8001f44 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	d90c      	bls.n	8002214 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2220      	movs	r2, #32
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2203      	movs	r2, #3
 8002204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e015      	b.n	8002240 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1e4      	bne.n	80021ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002226:	223f      	movs	r2, #63	; 0x3f
 8002228:	409a      	lsls	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d004      	beq.n	8002266 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e00c      	b.n	8002280 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2205      	movs	r2, #5
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0201 	bic.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800228c:	b480      	push	{r7}
 800228e:	b089      	sub	sp, #36	; 0x24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	e159      	b.n	800255c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022a8:	2201      	movs	r2, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4013      	ands	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	f040 8148 	bne.w	8002556 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d005      	beq.n	80022de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d130      	bne.n	8002340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	2203      	movs	r2, #3
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 0201 	and.w	r2, r3, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b03      	cmp	r3, #3
 800234a:	d017      	beq.n	800237c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d123      	bne.n	80023d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	08da      	lsrs	r2, r3, #3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3208      	adds	r2, #8
 8002390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	220f      	movs	r2, #15
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	08da      	lsrs	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3208      	adds	r2, #8
 80023ca:	69b9      	ldr	r1, [r7, #24]
 80023cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0203 	and.w	r2, r3, #3
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80a2 	beq.w	8002556 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	4b57      	ldr	r3, [pc, #348]	; (8002574 <HAL_GPIO_Init+0x2e8>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	4a56      	ldr	r2, [pc, #344]	; (8002574 <HAL_GPIO_Init+0x2e8>)
 800241c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002420:	6453      	str	r3, [r2, #68]	; 0x44
 8002422:	4b54      	ldr	r3, [pc, #336]	; (8002574 <HAL_GPIO_Init+0x2e8>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800242e:	4a52      	ldr	r2, [pc, #328]	; (8002578 <HAL_GPIO_Init+0x2ec>)
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	089b      	lsrs	r3, r3, #2
 8002434:	3302      	adds	r3, #2
 8002436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	220f      	movs	r2, #15
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a49      	ldr	r2, [pc, #292]	; (800257c <HAL_GPIO_Init+0x2f0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d019      	beq.n	800248e <HAL_GPIO_Init+0x202>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a48      	ldr	r2, [pc, #288]	; (8002580 <HAL_GPIO_Init+0x2f4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d013      	beq.n	800248a <HAL_GPIO_Init+0x1fe>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a47      	ldr	r2, [pc, #284]	; (8002584 <HAL_GPIO_Init+0x2f8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d00d      	beq.n	8002486 <HAL_GPIO_Init+0x1fa>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a46      	ldr	r2, [pc, #280]	; (8002588 <HAL_GPIO_Init+0x2fc>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d007      	beq.n	8002482 <HAL_GPIO_Init+0x1f6>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a45      	ldr	r2, [pc, #276]	; (800258c <HAL_GPIO_Init+0x300>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d101      	bne.n	800247e <HAL_GPIO_Init+0x1f2>
 800247a:	2304      	movs	r3, #4
 800247c:	e008      	b.n	8002490 <HAL_GPIO_Init+0x204>
 800247e:	2307      	movs	r3, #7
 8002480:	e006      	b.n	8002490 <HAL_GPIO_Init+0x204>
 8002482:	2303      	movs	r3, #3
 8002484:	e004      	b.n	8002490 <HAL_GPIO_Init+0x204>
 8002486:	2302      	movs	r3, #2
 8002488:	e002      	b.n	8002490 <HAL_GPIO_Init+0x204>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_GPIO_Init+0x204>
 800248e:	2300      	movs	r3, #0
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	f002 0203 	and.w	r2, r2, #3
 8002496:	0092      	lsls	r2, r2, #2
 8002498:	4093      	lsls	r3, r2
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024a0:	4935      	ldr	r1, [pc, #212]	; (8002578 <HAL_GPIO_Init+0x2ec>)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	3302      	adds	r3, #2
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ae:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_GPIO_Init+0x304>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d2:	4a2f      	ldr	r2, [pc, #188]	; (8002590 <HAL_GPIO_Init+0x304>)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024d8:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <HAL_GPIO_Init+0x304>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024fc:	4a24      	ldr	r2, [pc, #144]	; (8002590 <HAL_GPIO_Init+0x304>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002502:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_GPIO_Init+0x304>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002526:	4a1a      	ldr	r2, [pc, #104]	; (8002590 <HAL_GPIO_Init+0x304>)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800252c:	4b18      	ldr	r3, [pc, #96]	; (8002590 <HAL_GPIO_Init+0x304>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002550:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <HAL_GPIO_Init+0x304>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3301      	adds	r3, #1
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	2b0f      	cmp	r3, #15
 8002560:	f67f aea2 	bls.w	80022a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3724      	adds	r7, #36	; 0x24
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	40013800 	.word	0x40013800
 800257c:	40020000 	.word	0x40020000
 8002580:	40020400 	.word	0x40020400
 8002584:	40020800 	.word	0x40020800
 8002588:	40020c00 	.word	0x40020c00
 800258c:	40021000 	.word	0x40021000
 8002590:	40013c00 	.word	0x40013c00

08002594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
 80025b0:	e001      	b.n	80025b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e0:	e003      	b.n	80025ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	041a      	lsls	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	619a      	str	r2, [r3, #24]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e264      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d075      	beq.n	8002702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002616:	4ba3      	ldr	r3, [pc, #652]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b04      	cmp	r3, #4
 8002620:	d00c      	beq.n	800263c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002622:	4ba0      	ldr	r3, [pc, #640]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262a:	2b08      	cmp	r3, #8
 800262c:	d112      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262e:	4b9d      	ldr	r3, [pc, #628]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800263a:	d10b      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	4b99      	ldr	r3, [pc, #612]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d05b      	beq.n	8002700 <HAL_RCC_OscConfig+0x108>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d157      	bne.n	8002700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e23f      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d106      	bne.n	800266c <HAL_RCC_OscConfig+0x74>
 800265e:	4b91      	ldr	r3, [pc, #580]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a90      	ldr	r2, [pc, #576]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e01d      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x98>
 8002676:	4b8b      	ldr	r3, [pc, #556]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a8a      	ldr	r2, [pc, #552]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b88      	ldr	r3, [pc, #544]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a87      	ldr	r2, [pc, #540]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 8002690:	4b84      	ldr	r3, [pc, #528]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a83      	ldr	r2, [pc, #524]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 8002696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b81      	ldr	r3, [pc, #516]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a80      	ldr	r2, [pc, #512]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 80026a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff fc48 	bl	8001f44 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b8:	f7ff fc44 	bl	8001f44 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e204      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b76      	ldr	r3, [pc, #472]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0xc0>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff fc34 	bl	8001f44 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e0:	f7ff fc30 	bl	8001f44 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e1f0      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	4b6c      	ldr	r3, [pc, #432]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0xe8>
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d063      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800270e:	4b65      	ldr	r3, [pc, #404]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271a:	4b62      	ldr	r3, [pc, #392]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002722:	2b08      	cmp	r3, #8
 8002724:	d11c      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002726:	4b5f      	ldr	r3, [pc, #380]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d116      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	4b5c      	ldr	r3, [pc, #368]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d001      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e1c4      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274a:	4b56      	ldr	r3, [pc, #344]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4952      	ldr	r1, [pc, #328]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275e:	e03a      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002768:	4b4f      	ldr	r3, [pc, #316]	; (80028a8 <HAL_RCC_OscConfig+0x2b0>)
 800276a:	2201      	movs	r2, #1
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7ff fbe9 	bl	8001f44 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002776:	f7ff fbe5 	bl	8001f44 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e1a5      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4b43      	ldr	r3, [pc, #268]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4940      	ldr	r1, [pc, #256]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027aa:	4b3f      	ldr	r3, [pc, #252]	; (80028a8 <HAL_RCC_OscConfig+0x2b0>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7ff fbc8 	bl	8001f44 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b8:	f7ff fbc4 	bl	8001f44 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e184      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	4b36      	ldr	r3, [pc, #216]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d030      	beq.n	8002844 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ea:	4b30      	ldr	r3, [pc, #192]	; (80028ac <HAL_RCC_OscConfig+0x2b4>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7ff fba8 	bl	8001f44 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f8:	f7ff fba4 	bl	8001f44 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e164      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x200>
 8002816:	e015      	b.n	8002844 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002818:	4b24      	ldr	r3, [pc, #144]	; (80028ac <HAL_RCC_OscConfig+0x2b4>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7ff fb91 	bl	8001f44 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002826:	f7ff fb8d 	bl	8001f44 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e14d      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 800283a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f0      	bne.n	8002826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80a0 	beq.w	8002992 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002856:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10f      	bne.n	8002882 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	4a0e      	ldr	r2, [pc, #56]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 800286c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002870:	6413      	str	r3, [r2, #64]	; 0x40
 8002872:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287e:	2301      	movs	r3, #1
 8002880:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_RCC_OscConfig+0x2b8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d121      	bne.n	80028d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288e:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <HAL_RCC_OscConfig+0x2b8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <HAL_RCC_OscConfig+0x2b8>)
 8002894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289a:	f7ff fb53 	bl	8001f44 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	e011      	b.n	80028c6 <HAL_RCC_OscConfig+0x2ce>
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800
 80028a8:	42470000 	.word	0x42470000
 80028ac:	42470e80 	.word	0x42470e80
 80028b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b4:	f7ff fb46 	bl	8001f44 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e106      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c6:	4b85      	ldr	r3, [pc, #532]	; (8002adc <HAL_RCC_OscConfig+0x4e4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d106      	bne.n	80028e8 <HAL_RCC_OscConfig+0x2f0>
 80028da:	4b81      	ldr	r3, [pc, #516]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	4a80      	ldr	r2, [pc, #512]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6713      	str	r3, [r2, #112]	; 0x70
 80028e6:	e01c      	b.n	8002922 <HAL_RCC_OscConfig+0x32a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b05      	cmp	r3, #5
 80028ee:	d10c      	bne.n	800290a <HAL_RCC_OscConfig+0x312>
 80028f0:	4b7b      	ldr	r3, [pc, #492]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 80028f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f4:	4a7a      	ldr	r2, [pc, #488]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 80028f6:	f043 0304 	orr.w	r3, r3, #4
 80028fa:	6713      	str	r3, [r2, #112]	; 0x70
 80028fc:	4b78      	ldr	r3, [pc, #480]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 80028fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002900:	4a77      	ldr	r2, [pc, #476]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6713      	str	r3, [r2, #112]	; 0x70
 8002908:	e00b      	b.n	8002922 <HAL_RCC_OscConfig+0x32a>
 800290a:	4b75      	ldr	r3, [pc, #468]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	4a74      	ldr	r2, [pc, #464]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	6713      	str	r3, [r2, #112]	; 0x70
 8002916:	4b72      	ldr	r3, [pc, #456]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	4a71      	ldr	r2, [pc, #452]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 800291c:	f023 0304 	bic.w	r3, r3, #4
 8002920:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d015      	beq.n	8002956 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292a:	f7ff fb0b 	bl	8001f44 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002930:	e00a      	b.n	8002948 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002932:	f7ff fb07 	bl	8001f44 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002940:	4293      	cmp	r3, r2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e0c5      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002948:	4b65      	ldr	r3, [pc, #404]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0ee      	beq.n	8002932 <HAL_RCC_OscConfig+0x33a>
 8002954:	e014      	b.n	8002980 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002956:	f7ff faf5 	bl	8001f44 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295c:	e00a      	b.n	8002974 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295e:	f7ff faf1 	bl	8001f44 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f241 3288 	movw	r2, #5000	; 0x1388
 800296c:	4293      	cmp	r3, r2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e0af      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002974:	4b5a      	ldr	r3, [pc, #360]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1ee      	bne.n	800295e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002980:	7dfb      	ldrb	r3, [r7, #23]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d105      	bne.n	8002992 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002986:	4b56      	ldr	r3, [pc, #344]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	4a55      	ldr	r2, [pc, #340]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 800298c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002990:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 809b 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800299c:	4b50      	ldr	r3, [pc, #320]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 030c 	and.w	r3, r3, #12
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d05c      	beq.n	8002a62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d141      	bne.n	8002a34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b0:	4b4c      	ldr	r3, [pc, #304]	; (8002ae4 <HAL_RCC_OscConfig+0x4ec>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b6:	f7ff fac5 	bl	8001f44 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029be:	f7ff fac1 	bl	8001f44 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e081      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d0:	4b43      	ldr	r3, [pc, #268]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1f0      	bne.n	80029be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69da      	ldr	r2, [r3, #28]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	019b      	lsls	r3, r3, #6
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	085b      	lsrs	r3, r3, #1
 80029f4:	3b01      	subs	r3, #1
 80029f6:	041b      	lsls	r3, r3, #16
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	061b      	lsls	r3, r3, #24
 8002a00:	4937      	ldr	r1, [pc, #220]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a06:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <HAL_RCC_OscConfig+0x4ec>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7ff fa9a 	bl	8001f44 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a14:	f7ff fa96 	bl	8001f44 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e056      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a26:	4b2e      	ldr	r3, [pc, #184]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x41c>
 8002a32:	e04e      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a34:	4b2b      	ldr	r3, [pc, #172]	; (8002ae4 <HAL_RCC_OscConfig+0x4ec>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7ff fa83 	bl	8001f44 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a42:	f7ff fa7f 	bl	8001f44 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e03f      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f0      	bne.n	8002a42 <HAL_RCC_OscConfig+0x44a>
 8002a60:	e037      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e032      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <HAL_RCC_OscConfig+0x4e8>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d028      	beq.n	8002ace <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d121      	bne.n	8002ace <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d11a      	bne.n	8002ace <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aa4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d111      	bne.n	8002ace <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	085b      	lsrs	r3, r3, #1
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40007000 	.word	0x40007000
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	42470060 	.word	0x42470060

08002ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0cc      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002afc:	4b68      	ldr	r3, [pc, #416]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d90c      	bls.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b65      	ldr	r3, [pc, #404]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b8      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b3c:	4b59      	ldr	r3, [pc, #356]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b54:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a52      	ldr	r2, [pc, #328]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	494d      	ldr	r1, [pc, #308]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d044      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d119      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e067      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc6:	4b37      	ldr	r3, [pc, #220]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f023 0203 	bic.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4934      	ldr	r1, [pc, #208]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd8:	f7ff f9b4 	bl	8001f44 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be0:	f7ff f9b0 	bl	8001f44 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e04f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 020c 	and.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d1eb      	bne.n	8002be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d20c      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e032      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4916      	ldr	r1, [pc, #88]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c6e:	f000 f821 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	490a      	ldr	r1, [pc, #40]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	4a09      	ldr	r2, [pc, #36]	; (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff f822 	bl	8001cd8 <HAL_InitTick>

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023c00 	.word	0x40023c00
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	080097e0 	.word	0x080097e0
 8002cac:	20000008 	.word	0x20000008
 8002cb0:	2000000c 	.word	0x2000000c

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ccc:	4b67      	ldr	r3, [pc, #412]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	f200 80bd 	bhi.w	8002e58 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ce6:	e0b7      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b61      	ldr	r3, [pc, #388]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002cea:	60bb      	str	r3, [r7, #8]
       break;
 8002cec:	e0b7      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cee:	4b61      	ldr	r3, [pc, #388]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002cf0:	60bb      	str	r3, [r7, #8]
      break;
 8002cf2:	e0b4      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf4:	4b5d      	ldr	r3, [pc, #372]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cfc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cfe:	4b5b      	ldr	r3, [pc, #364]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d04d      	beq.n	8002da6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0a:	4b58      	ldr	r3, [pc, #352]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	099b      	lsrs	r3, r3, #6
 8002d10:	461a      	mov	r2, r3
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d1a:	f04f 0100 	mov.w	r1, #0
 8002d1e:	ea02 0800 	and.w	r8, r2, r0
 8002d22:	ea03 0901 	and.w	r9, r3, r1
 8002d26:	4640      	mov	r0, r8
 8002d28:	4649      	mov	r1, r9
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	014b      	lsls	r3, r1, #5
 8002d34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d38:	0142      	lsls	r2, r0, #5
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	ebb0 0008 	subs.w	r0, r0, r8
 8002d42:	eb61 0109 	sbc.w	r1, r1, r9
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	018b      	lsls	r3, r1, #6
 8002d50:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d54:	0182      	lsls	r2, r0, #6
 8002d56:	1a12      	subs	r2, r2, r0
 8002d58:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5c:	f04f 0000 	mov.w	r0, #0
 8002d60:	f04f 0100 	mov.w	r1, #0
 8002d64:	00d9      	lsls	r1, r3, #3
 8002d66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d6a:	00d0      	lsls	r0, r2, #3
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	eb12 0208 	adds.w	r2, r2, r8
 8002d74:	eb43 0309 	adc.w	r3, r3, r9
 8002d78:	f04f 0000 	mov.w	r0, #0
 8002d7c:	f04f 0100 	mov.w	r1, #0
 8002d80:	0259      	lsls	r1, r3, #9
 8002d82:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d86:	0250      	lsls	r0, r2, #9
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	461a      	mov	r2, r3
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	f7fd fa72 	bl	8000280 <__aeabi_uldivmod>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4613      	mov	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	e04a      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da6:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	099b      	lsrs	r3, r3, #6
 8002dac:	461a      	mov	r2, r3
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	ea02 0400 	and.w	r4, r2, r0
 8002dbe:	ea03 0501 	and.w	r5, r3, r1
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	014b      	lsls	r3, r1, #5
 8002dd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002dd4:	0142      	lsls	r2, r0, #5
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	1b00      	subs	r0, r0, r4
 8002ddc:	eb61 0105 	sbc.w	r1, r1, r5
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	018b      	lsls	r3, r1, #6
 8002dea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002dee:	0182      	lsls	r2, r0, #6
 8002df0:	1a12      	subs	r2, r2, r0
 8002df2:	eb63 0301 	sbc.w	r3, r3, r1
 8002df6:	f04f 0000 	mov.w	r0, #0
 8002dfa:	f04f 0100 	mov.w	r1, #0
 8002dfe:	00d9      	lsls	r1, r3, #3
 8002e00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e04:	00d0      	lsls	r0, r2, #3
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	1912      	adds	r2, r2, r4
 8002e0c:	eb45 0303 	adc.w	r3, r5, r3
 8002e10:	f04f 0000 	mov.w	r0, #0
 8002e14:	f04f 0100 	mov.w	r1, #0
 8002e18:	0299      	lsls	r1, r3, #10
 8002e1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e1e:	0290      	lsls	r0, r2, #10
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4610      	mov	r0, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	f7fd fa26 	bl	8000280 <__aeabi_uldivmod>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4613      	mov	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	3301      	adds	r3, #1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	60bb      	str	r3, [r7, #8]
      break;
 8002e56:	e002      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e5a:	60bb      	str	r3, [r7, #8]
      break;
 8002e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	00f42400 	.word	0x00f42400
 8002e74:	007a1200 	.word	0x007a1200

08002e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e7c:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000008 	.word	0x20000008

08002e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e94:	f7ff fff0 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	0a9b      	lsrs	r3, r3, #10
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4903      	ldr	r1, [pc, #12]	; (8002eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	080097f0 	.word	0x080097f0

08002eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ebc:	f7ff ffdc 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	0b5b      	lsrs	r3, r3, #13
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	4903      	ldr	r1, [pc, #12]	; (8002edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ece:	5ccb      	ldrb	r3, [r1, r3]
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	080097f0 	.word	0x080097f0

08002ee0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	220f      	movs	r2, #15
 8002eee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ef0:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <HAL_RCC_GetClockConfig+0x5c>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 0203 	and.w	r2, r3, #3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002efc:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <HAL_RCC_GetClockConfig+0x5c>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <HAL_RCC_GetClockConfig+0x5c>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <HAL_RCC_GetClockConfig+0x5c>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	08db      	lsrs	r3, r3, #3
 8002f1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f22:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <HAL_RCC_GetClockConfig+0x60>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0207 	and.w	r2, r3, #7
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	601a      	str	r2, [r3, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40023c00 	.word	0x40023c00

08002f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e07b      	b.n	800304e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d108      	bne.n	8002f70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f66:	d009      	beq.n	8002f7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	61da      	str	r2, [r3, #28]
 8002f6e:	e005      	b.n	8002f7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fe fd50 	bl	8001a3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003000:	ea42 0103 	orr.w	r1, r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	f003 0104 	and.w	r1, r3, #4
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	f003 0210 	and.w	r2, r3, #16
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800303c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b08c      	sub	sp, #48	; 0x30
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003064:	2301      	movs	r3, #1
 8003066:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_SPI_TransmitReceive+0x26>
 8003078:	2302      	movs	r3, #2
 800307a:	e18a      	b.n	8003392 <HAL_SPI_TransmitReceive+0x33c>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003084:	f7fe ff5e 	bl	8001f44 <HAL_GetTick>
 8003088:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003090:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800309a:	887b      	ldrh	r3, [r7, #2]
 800309c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800309e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d00f      	beq.n	80030c6 <HAL_SPI_TransmitReceive+0x70>
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ac:	d107      	bne.n	80030be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d103      	bne.n	80030be <HAL_SPI_TransmitReceive+0x68>
 80030b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d003      	beq.n	80030c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80030be:	2302      	movs	r3, #2
 80030c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030c4:	e15b      	b.n	800337e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_SPI_TransmitReceive+0x82>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_SPI_TransmitReceive+0x82>
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d103      	bne.n	80030e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80030de:	e14e      	b.n	800337e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d003      	beq.n	80030f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2205      	movs	r2, #5
 80030f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	887a      	ldrh	r2, [r7, #2]
 8003104:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	887a      	ldrh	r2, [r7, #2]
 800310a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	887a      	ldrh	r2, [r7, #2]
 8003116:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	887a      	ldrh	r2, [r7, #2]
 800311c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d007      	beq.n	8003148 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003146:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003150:	d178      	bne.n	8003244 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <HAL_SPI_TransmitReceive+0x10a>
 800315a:	8b7b      	ldrh	r3, [r7, #26]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d166      	bne.n	800322e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	881a      	ldrh	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	1c9a      	adds	r2, r3, #2
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003184:	e053      	b.n	800322e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b02      	cmp	r3, #2
 8003192:	d11b      	bne.n	80031cc <HAL_SPI_TransmitReceive+0x176>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d016      	beq.n	80031cc <HAL_SPI_TransmitReceive+0x176>
 800319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d113      	bne.n	80031cc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	881a      	ldrh	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	1c9a      	adds	r2, r3, #2
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d119      	bne.n	800320e <HAL_SPI_TransmitReceive+0x1b8>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d014      	beq.n	800320e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	b292      	uxth	r2, r2
 80031f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	1c9a      	adds	r2, r3, #2
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800320a:	2301      	movs	r3, #1
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800320e:	f7fe fe99 	bl	8001f44 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800321a:	429a      	cmp	r2, r3
 800321c:	d807      	bhi.n	800322e <HAL_SPI_TransmitReceive+0x1d8>
 800321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003224:	d003      	beq.n	800322e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800322c:	e0a7      	b.n	800337e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1a6      	bne.n	8003186 <HAL_SPI_TransmitReceive+0x130>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1a1      	bne.n	8003186 <HAL_SPI_TransmitReceive+0x130>
 8003242:	e07c      	b.n	800333e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <HAL_SPI_TransmitReceive+0x1fc>
 800324c:	8b7b      	ldrh	r3, [r7, #26]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d16b      	bne.n	800332a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	330c      	adds	r3, #12
 800325c:	7812      	ldrb	r2, [r2, #0]
 800325e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003278:	e057      	b.n	800332a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b02      	cmp	r3, #2
 8003286:	d11c      	bne.n	80032c2 <HAL_SPI_TransmitReceive+0x26c>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d017      	beq.n	80032c2 <HAL_SPI_TransmitReceive+0x26c>
 8003292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003294:	2b01      	cmp	r3, #1
 8003296:	d114      	bne.n	80032c2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	330c      	adds	r3, #12
 80032a2:	7812      	ldrb	r2, [r2, #0]
 80032a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d119      	bne.n	8003304 <HAL_SPI_TransmitReceive+0x2ae>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d014      	beq.n	8003304 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003300:	2301      	movs	r3, #1
 8003302:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003304:	f7fe fe1e 	bl	8001f44 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003310:	429a      	cmp	r2, r3
 8003312:	d803      	bhi.n	800331c <HAL_SPI_TransmitReceive+0x2c6>
 8003314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331a:	d102      	bne.n	8003322 <HAL_SPI_TransmitReceive+0x2cc>
 800331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003328:	e029      	b.n	800337e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1a2      	bne.n	800327a <HAL_SPI_TransmitReceive+0x224>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d19d      	bne.n	800327a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800333e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003340:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f8b2 	bl	80034ac <SPI_EndRxTxTransaction>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800335a:	e010      	b.n	800337e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10b      	bne.n	800337c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	e000      	b.n	800337e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800337c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800338e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003392:	4618      	mov	r0, r3
 8003394:	3730      	adds	r7, #48	; 0x30
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	4613      	mov	r3, r2
 80033aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033ac:	f7fe fdca 	bl	8001f44 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	4413      	add	r3, r2
 80033ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033bc:	f7fe fdc2 	bl	8001f44 <HAL_GetTick>
 80033c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033c2:	4b39      	ldr	r3, [pc, #228]	; (80034a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	015b      	lsls	r3, r3, #5
 80033c8:	0d1b      	lsrs	r3, r3, #20
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	fb02 f303 	mul.w	r3, r2, r3
 80033d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033d2:	e054      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033da:	d050      	beq.n	800347e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033dc:	f7fe fdb2 	bl	8001f44 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d902      	bls.n	80033f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d13d      	bne.n	800346e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003400:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800340a:	d111      	bne.n	8003430 <SPI_WaitFlagStateUntilTimeout+0x94>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003414:	d004      	beq.n	8003420 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341e:	d107      	bne.n	8003430 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800342e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003438:	d10f      	bne.n	800345a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003458:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e017      	b.n	800349e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	3b01      	subs	r3, #1
 800347c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	429a      	cmp	r2, r3
 800349a:	d19b      	bne.n	80033d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000008 	.word	0x20000008

080034ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <SPI_EndRxTxTransaction+0x7c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1b      	ldr	r2, [pc, #108]	; (800352c <SPI_EndRxTxTransaction+0x80>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	0d5b      	lsrs	r3, r3, #21
 80034c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034c8:	fb02 f303 	mul.w	r3, r2, r3
 80034cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034d6:	d112      	bne.n	80034fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2200      	movs	r2, #0
 80034e0:	2180      	movs	r1, #128	; 0x80
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f7ff ff5a 	bl	800339c <SPI_WaitFlagStateUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d016      	beq.n	800351c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f2:	f043 0220 	orr.w	r2, r3, #32
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e00f      	b.n	800351e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	3b01      	subs	r3, #1
 8003508:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003514:	2b80      	cmp	r3, #128	; 0x80
 8003516:	d0f2      	beq.n	80034fe <SPI_EndRxTxTransaction+0x52>
 8003518:	e000      	b.n	800351c <SPI_EndRxTxTransaction+0x70>
        break;
 800351a:	bf00      	nop
  }

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000008 	.word	0x20000008
 800352c:	165e9f81 	.word	0x165e9f81

08003530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e041      	b.n	80035c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fe fada 	bl	8001b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3304      	adds	r3, #4
 800356c:	4619      	mov	r1, r3
 800356e:	4610      	mov	r0, r2
 8003570:	f000 fa42 	bl	80039f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d001      	beq.n	80035e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e03c      	b.n	8003662 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1e      	ldr	r2, [pc, #120]	; (8003670 <HAL_TIM_Base_Start+0xa0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d018      	beq.n	800362c <HAL_TIM_Base_Start+0x5c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003602:	d013      	beq.n	800362c <HAL_TIM_Base_Start+0x5c>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a1a      	ldr	r2, [pc, #104]	; (8003674 <HAL_TIM_Base_Start+0xa4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00e      	beq.n	800362c <HAL_TIM_Base_Start+0x5c>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a19      	ldr	r2, [pc, #100]	; (8003678 <HAL_TIM_Base_Start+0xa8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d009      	beq.n	800362c <HAL_TIM_Base_Start+0x5c>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a17      	ldr	r2, [pc, #92]	; (800367c <HAL_TIM_Base_Start+0xac>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d004      	beq.n	800362c <HAL_TIM_Base_Start+0x5c>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a16      	ldr	r2, [pc, #88]	; (8003680 <HAL_TIM_Base_Start+0xb0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d111      	bne.n	8003650 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b06      	cmp	r3, #6
 800363c:	d010      	beq.n	8003660 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364e:	e007      	b.n	8003660 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40010000 	.word	0x40010000
 8003674:	40000400 	.word	0x40000400
 8003678:	40000800 	.word	0x40000800
 800367c:	40000c00 	.word	0x40000c00
 8003680:	40014000 	.word	0x40014000

08003684 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6a1a      	ldr	r2, [r3, #32]
 8003692:	f241 1311 	movw	r3, #4369	; 0x1111
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10f      	bne.n	80036bc <HAL_TIM_Base_Stop+0x38>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6a1a      	ldr	r2, [r3, #32]
 80036a2:	f240 4344 	movw	r3, #1092	; 0x444
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d107      	bne.n	80036bc <HAL_TIM_Base_Stop+0x38>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
	...

080036d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d001      	beq.n	80036ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e044      	b.n	8003776 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1e      	ldr	r2, [pc, #120]	; (8003784 <HAL_TIM_Base_Start_IT+0xb0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d018      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x6c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003716:	d013      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x6c>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1a      	ldr	r2, [pc, #104]	; (8003788 <HAL_TIM_Base_Start_IT+0xb4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00e      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x6c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a19      	ldr	r2, [pc, #100]	; (800378c <HAL_TIM_Base_Start_IT+0xb8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d009      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x6c>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a17      	ldr	r2, [pc, #92]	; (8003790 <HAL_TIM_Base_Start_IT+0xbc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x6c>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a16      	ldr	r2, [pc, #88]	; (8003794 <HAL_TIM_Base_Start_IT+0xc0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d111      	bne.n	8003764 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b06      	cmp	r3, #6
 8003750:	d010      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0201 	orr.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003762:	e007      	b.n	8003774 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40010000 	.word	0x40010000
 8003788:	40000400 	.word	0x40000400
 800378c:	40000800 	.word	0x40000800
 8003790:	40000c00 	.word	0x40000c00
 8003794:	40014000 	.word	0x40014000

08003798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d122      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d11b      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0202 	mvn.w	r2, #2
 80037c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f8ee 	bl	80039bc <HAL_TIM_IC_CaptureCallback>
 80037e0:	e005      	b.n	80037ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f8e0 	bl	80039a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f8f1 	bl	80039d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d122      	bne.n	8003848 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b04      	cmp	r3, #4
 800380e:	d11b      	bne.n	8003848 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0204 	mvn.w	r2, #4
 8003818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2202      	movs	r2, #2
 800381e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f8c4 	bl	80039bc <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f8b6 	bl	80039a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f8c7 	bl	80039d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b08      	cmp	r3, #8
 8003854:	d122      	bne.n	800389c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b08      	cmp	r3, #8
 8003862:	d11b      	bne.n	800389c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0208 	mvn.w	r2, #8
 800386c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2204      	movs	r2, #4
 8003872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f89a 	bl	80039bc <HAL_TIM_IC_CaptureCallback>
 8003888:	e005      	b.n	8003896 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f88c 	bl	80039a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f89d 	bl	80039d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d122      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d11b      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0210 	mvn.w	r2, #16
 80038c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2208      	movs	r2, #8
 80038c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f870 	bl	80039bc <HAL_TIM_IC_CaptureCallback>
 80038dc:	e005      	b.n	80038ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f862 	bl	80039a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f873 	bl	80039d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d10e      	bne.n	800391c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b01      	cmp	r3, #1
 800390a:	d107      	bne.n	800391c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0201 	mvn.w	r2, #1
 8003914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fe f84c 	bl	80019b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003926:	2b80      	cmp	r3, #128	; 0x80
 8003928:	d10e      	bne.n	8003948 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003934:	2b80      	cmp	r3, #128	; 0x80
 8003936:	d107      	bne.n	8003948 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f8e2 	bl	8003b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d10e      	bne.n	8003974 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d107      	bne.n	8003974 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800396c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f838 	bl	80039e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b20      	cmp	r3, #32
 8003980:	d10e      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b20      	cmp	r3, #32
 800398e:	d107      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0220 	mvn.w	r2, #32
 8003998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f8ac 	bl	8003af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a34      	ldr	r2, [pc, #208]	; (8003adc <TIM_Base_SetConfig+0xe4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00f      	beq.n	8003a30 <TIM_Base_SetConfig+0x38>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a16:	d00b      	beq.n	8003a30 <TIM_Base_SetConfig+0x38>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a31      	ldr	r2, [pc, #196]	; (8003ae0 <TIM_Base_SetConfig+0xe8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d007      	beq.n	8003a30 <TIM_Base_SetConfig+0x38>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a30      	ldr	r2, [pc, #192]	; (8003ae4 <TIM_Base_SetConfig+0xec>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d003      	beq.n	8003a30 <TIM_Base_SetConfig+0x38>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a2f      	ldr	r2, [pc, #188]	; (8003ae8 <TIM_Base_SetConfig+0xf0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d108      	bne.n	8003a42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a25      	ldr	r2, [pc, #148]	; (8003adc <TIM_Base_SetConfig+0xe4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d01b      	beq.n	8003a82 <TIM_Base_SetConfig+0x8a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a50:	d017      	beq.n	8003a82 <TIM_Base_SetConfig+0x8a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a22      	ldr	r2, [pc, #136]	; (8003ae0 <TIM_Base_SetConfig+0xe8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <TIM_Base_SetConfig+0x8a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a21      	ldr	r2, [pc, #132]	; (8003ae4 <TIM_Base_SetConfig+0xec>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00f      	beq.n	8003a82 <TIM_Base_SetConfig+0x8a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a20      	ldr	r2, [pc, #128]	; (8003ae8 <TIM_Base_SetConfig+0xf0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00b      	beq.n	8003a82 <TIM_Base_SetConfig+0x8a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a1f      	ldr	r2, [pc, #124]	; (8003aec <TIM_Base_SetConfig+0xf4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d007      	beq.n	8003a82 <TIM_Base_SetConfig+0x8a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <TIM_Base_SetConfig+0xf8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d003      	beq.n	8003a82 <TIM_Base_SetConfig+0x8a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <TIM_Base_SetConfig+0xfc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d108      	bne.n	8003a94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a08      	ldr	r2, [pc, #32]	; (8003adc <TIM_Base_SetConfig+0xe4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d103      	bne.n	8003ac8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	615a      	str	r2, [r3, #20]
}
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40010000 	.word	0x40010000
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40000800 	.word	0x40000800
 8003ae8:	40000c00 	.word	0x40000c00
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40014400 	.word	0x40014400
 8003af4:	40014800 	.word	0x40014800

08003af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e03f      	b.n	8003bb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fe f804 	bl	8001b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2224      	movs	r2, #36	; 0x24
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fe7d 	bl	8004864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b08a      	sub	sp, #40	; 0x28
 8003bbe:	af02      	add	r7, sp, #8
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	d17c      	bne.n	8003cd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_UART_Transmit+0x2c>
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e075      	b.n	8003cd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_UART_Transmit+0x3e>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e06e      	b.n	8003cd6 <HAL_UART_Transmit+0x11c>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2221      	movs	r2, #33	; 0x21
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c0e:	f7fe f999 	bl	8001f44 <HAL_GetTick>
 8003c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	88fa      	ldrh	r2, [r7, #6]
 8003c18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	88fa      	ldrh	r2, [r7, #6]
 8003c1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c28:	d108      	bne.n	8003c3c <HAL_UART_Transmit+0x82>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d104      	bne.n	8003c3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	e003      	b.n	8003c44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c4c:	e02a      	b.n	8003ca4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2200      	movs	r2, #0
 8003c56:	2180      	movs	r1, #128	; 0x80
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fbc1 	bl	80043e0 <UART_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e036      	b.n	8003cd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10b      	bne.n	8003c86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	3302      	adds	r3, #2
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	e007      	b.n	8003c96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	3301      	adds	r3, #1
 8003c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1cf      	bne.n	8003c4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2140      	movs	r1, #64	; 0x40
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 fb91 	bl	80043e0 <UART_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e006      	b.n	8003cd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e000      	b.n	8003cd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
  }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b08a      	sub	sp, #40	; 0x28
 8003ce2:	af02      	add	r7, sp, #8
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	f040 808c 	bne.w	8003e18 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <HAL_UART_Receive+0x2e>
 8003d06:	88fb      	ldrh	r3, [r7, #6]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e084      	b.n	8003e1a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Receive+0x40>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e07d      	b.n	8003e1a <HAL_UART_Receive+0x13c>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2222      	movs	r2, #34	; 0x22
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d3a:	f7fe f903 	bl	8001f44 <HAL_GetTick>
 8003d3e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	88fa      	ldrh	r2, [r7, #6]
 8003d44:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	88fa      	ldrh	r2, [r7, #6]
 8003d4a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d54:	d108      	bne.n	8003d68 <HAL_UART_Receive+0x8a>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d104      	bne.n	8003d68 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	e003      	b.n	8003d70 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d78:	e043      	b.n	8003e02 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2200      	movs	r2, #0
 8003d82:	2120      	movs	r1, #32
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fb2b 	bl	80043e0 <UART_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e042      	b.n	8003e1a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10c      	bne.n	8003db4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	3302      	adds	r3, #2
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	e01f      	b.n	8003df4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbc:	d007      	beq.n	8003dce <HAL_UART_Receive+0xf0>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <HAL_UART_Receive+0xfe>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	e008      	b.n	8003dee <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3301      	adds	r3, #1
 8003df2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1b6      	bne.n	8003d7a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e000      	b.n	8003e1a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003e18:	2302      	movs	r3, #2
  }
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d11d      	bne.n	8003e78 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_UART_Receive_IT+0x26>
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e016      	b.n	8003e7a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_UART_Receive_IT+0x38>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e00f      	b.n	8003e7a <HAL_UART_Receive_IT+0x58>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 fb24 	bl	80044bc <UART_Start_Receive_IT>
 8003e74:	4603      	mov	r3, r0
 8003e76:	e000      	b.n	8003e7a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b0ba      	sub	sp, #232	; 0xe8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10f      	bne.n	8003eea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <HAL_UART_IRQHandler+0x66>
 8003ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fc03 	bl	80046ee <UART_Receive_IT>
      return;
 8003ee8:	e256      	b.n	8004398 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80de 	beq.w	80040b0 <HAL_UART_IRQHandler+0x22c>
 8003ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d106      	bne.n	8003f0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80d1 	beq.w	80040b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00b      	beq.n	8003f32 <HAL_UART_IRQHandler+0xae>
 8003f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	f043 0201 	orr.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <HAL_UART_IRQHandler+0xd2>
 8003f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f043 0202 	orr.w	r2, r3, #2
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <HAL_UART_IRQHandler+0xf6>
 8003f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f043 0204 	orr.w	r2, r3, #4
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d011      	beq.n	8003faa <HAL_UART_IRQHandler+0x126>
 8003f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d105      	bne.n	8003f9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f043 0208 	orr.w	r2, r3, #8
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 81ed 	beq.w	800438e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x14e>
 8003fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fb8e 	bl	80046ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fdc:	2b40      	cmp	r3, #64	; 0x40
 8003fde:	bf0c      	ite	eq
 8003fe0:	2301      	moveq	r3, #1
 8003fe2:	2300      	movne	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d103      	bne.n	8003ffe <HAL_UART_IRQHandler+0x17a>
 8003ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d04f      	beq.n	800409e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa96 	bl	8004530 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d141      	bne.n	8004096 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3314      	adds	r3, #20
 8004018:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004028:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800402c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004030:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3314      	adds	r3, #20
 800403a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800403e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800404a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1d9      	bne.n	8004012 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	2b00      	cmp	r3, #0
 8004064:	d013      	beq.n	800408e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	4a7d      	ldr	r2, [pc, #500]	; (8004260 <HAL_UART_IRQHandler+0x3dc>)
 800406c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe f8e8 	bl	8002248 <HAL_DMA_Abort_IT>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d016      	beq.n	80040ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004088:	4610      	mov	r0, r2
 800408a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800408c:	e00e      	b.n	80040ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f990 	bl	80043b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004094:	e00a      	b.n	80040ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f98c 	bl	80043b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	e006      	b.n	80040ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f988 	bl	80043b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80040aa:	e170      	b.n	800438e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ac:	bf00      	nop
    return;
 80040ae:	e16e      	b.n	800438e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	f040 814a 	bne.w	800434e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040be:	f003 0310 	and.w	r3, r3, #16
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 8143 	beq.w	800434e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 813c 	beq.w	800434e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f6:	2b40      	cmp	r3, #64	; 0x40
 80040f8:	f040 80b4 	bne.w	8004264 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004108:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 8140 	beq.w	8004392 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800411a:	429a      	cmp	r2, r3
 800411c:	f080 8139 	bcs.w	8004392 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004126:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004132:	f000 8088 	beq.w	8004246 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800414c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004154:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	330c      	adds	r3, #12
 800415e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004162:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800416e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800417a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1d9      	bne.n	8004136 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3314      	adds	r3, #20
 8004188:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3314      	adds	r3, #20
 80041a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041b2:	e841 2300 	strex	r3, r2, [r1]
 80041b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1e1      	bne.n	8004182 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3314      	adds	r3, #20
 80041c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041c8:	e853 3f00 	ldrex	r3, [r3]
 80041cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3314      	adds	r3, #20
 80041de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1e3      	bne.n	80041be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	330c      	adds	r3, #12
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004216:	f023 0310 	bic.w	r3, r3, #16
 800421a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	330c      	adds	r3, #12
 8004224:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004228:	65ba      	str	r2, [r7, #88]	; 0x58
 800422a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800422e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004230:	e841 2300 	strex	r3, r2, [r1]
 8004234:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1e3      	bne.n	8004204 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004240:	4618      	mov	r0, r3
 8004242:	f7fd ff91 	bl	8002168 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800424e:	b29b      	uxth	r3, r3
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	b29b      	uxth	r3, r3
 8004254:	4619      	mov	r1, r3
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f8b6 	bl	80043c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800425c:	e099      	b.n	8004392 <HAL_UART_IRQHandler+0x50e>
 800425e:	bf00      	nop
 8004260:	080045f7 	.word	0x080045f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800426c:	b29b      	uxth	r3, r3
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 808b 	beq.w	8004396 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004280:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8086 	beq.w	8004396 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800429a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80042ae:	647a      	str	r2, [r7, #68]	; 0x44
 80042b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e3      	bne.n	800428a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3314      	adds	r3, #20
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	623b      	str	r3, [r7, #32]
   return(result);
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3314      	adds	r3, #20
 80042e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042e6:	633a      	str	r2, [r7, #48]	; 0x30
 80042e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e3      	bne.n	80042c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	330c      	adds	r3, #12
 800430e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	60fb      	str	r3, [r7, #12]
   return(result);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0310 	bic.w	r3, r3, #16
 800431e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	330c      	adds	r3, #12
 8004328:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800432c:	61fa      	str	r2, [r7, #28]
 800432e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004330:	69b9      	ldr	r1, [r7, #24]
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	617b      	str	r3, [r7, #20]
   return(result);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e3      	bne.n	8004308 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004340:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004344:	4619      	mov	r1, r3
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f83e 	bl	80043c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800434c:	e023      	b.n	8004396 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800434e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004356:	2b00      	cmp	r3, #0
 8004358:	d009      	beq.n	800436e <HAL_UART_IRQHandler+0x4ea>
 800435a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f959 	bl	800461e <UART_Transmit_IT>
    return;
 800436c:	e014      	b.n	8004398 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800436e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00e      	beq.n	8004398 <HAL_UART_IRQHandler+0x514>
 800437a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800437e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f999 	bl	80046be <UART_EndTransmit_IT>
    return;
 800438c:	e004      	b.n	8004398 <HAL_UART_IRQHandler+0x514>
    return;
 800438e:	bf00      	nop
 8004390:	e002      	b.n	8004398 <HAL_UART_IRQHandler+0x514>
      return;
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <HAL_UART_IRQHandler+0x514>
      return;
 8004396:	bf00      	nop
  }
}
 8004398:	37e8      	adds	r7, #232	; 0xe8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop

080043a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b090      	sub	sp, #64	; 0x40
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	4613      	mov	r3, r2
 80043ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f0:	e050      	b.n	8004494 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f8:	d04c      	beq.n	8004494 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <UART_WaitOnFlagUntilTimeout+0x30>
 8004400:	f7fd fda0 	bl	8001f44 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800440c:	429a      	cmp	r2, r3
 800440e:	d241      	bcs.n	8004494 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	330c      	adds	r3, #12
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	330c      	adds	r3, #12
 800442e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004430:	637a      	str	r2, [r7, #52]	; 0x34
 8004432:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e5      	bne.n	8004410 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3314      	adds	r3, #20
 800444a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	613b      	str	r3, [r7, #16]
   return(result);
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f023 0301 	bic.w	r3, r3, #1
 800445a:	63bb      	str	r3, [r7, #56]	; 0x38
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3314      	adds	r3, #20
 8004462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004464:	623a      	str	r2, [r7, #32]
 8004466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	69f9      	ldr	r1, [r7, #28]
 800446a:	6a3a      	ldr	r2, [r7, #32]
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	61bb      	str	r3, [r7, #24]
   return(result);
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e5      	bne.n	8004444 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e00f      	b.n	80044b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4013      	ands	r3, r2
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d09f      	beq.n	80043f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3740      	adds	r7, #64	; 0x40
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	4613      	mov	r3, r2
 80044c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	88fa      	ldrh	r2, [r7, #6]
 80044da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2222      	movs	r2, #34	; 0x22
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004500:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695a      	ldr	r2, [r3, #20]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0201 	orr.w	r2, r2, #1
 8004510:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0220 	orr.w	r2, r2, #32
 8004520:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004530:	b480      	push	{r7}
 8004532:	b095      	sub	sp, #84	; 0x54
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	330c      	adds	r3, #12
 800453e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800454e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	330c      	adds	r3, #12
 8004556:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004558:	643a      	str	r2, [r7, #64]	; 0x40
 800455a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800455e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004560:	e841 2300 	strex	r3, r2, [r1]
 8004564:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e5      	bne.n	8004538 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3314      	adds	r3, #20
 8004572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	61fb      	str	r3, [r7, #28]
   return(result);
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f023 0301 	bic.w	r3, r3, #1
 8004582:	64bb      	str	r3, [r7, #72]	; 0x48
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3314      	adds	r3, #20
 800458a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800458c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e5      	bne.n	800456c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d119      	bne.n	80045dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	330c      	adds	r3, #12
 80045ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f023 0310 	bic.w	r3, r3, #16
 80045be:	647b      	str	r3, [r7, #68]	; 0x44
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045c8:	61ba      	str	r2, [r7, #24]
 80045ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	6979      	ldr	r1, [r7, #20]
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	e841 2300 	strex	r3, r2, [r1]
 80045d4:	613b      	str	r3, [r7, #16]
   return(result);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e5      	bne.n	80045a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045ea:	bf00      	nop
 80045ec:	3754      	adds	r7, #84	; 0x54
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004602:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f7ff fecf 	bl	80043b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004616:	bf00      	nop
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800461e:	b480      	push	{r7}
 8004620:	b085      	sub	sp, #20
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b21      	cmp	r3, #33	; 0x21
 8004630:	d13e      	bne.n	80046b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800463a:	d114      	bne.n	8004666 <UART_Transmit_IT+0x48>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d110      	bne.n	8004666 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004658:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	1c9a      	adds	r2, r3, #2
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	621a      	str	r2, [r3, #32]
 8004664:	e008      	b.n	8004678 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	1c59      	adds	r1, r3, #1
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6211      	str	r1, [r2, #32]
 8004670:	781a      	ldrb	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29b      	uxth	r3, r3
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	4619      	mov	r1, r3
 8004686:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10f      	bne.n	80046ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800469a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	e000      	b.n	80046b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046b0:	2302      	movs	r3, #2
  }
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b082      	sub	sp, #8
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff fe5e 	bl	80043a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b08c      	sub	sp, #48	; 0x30
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b22      	cmp	r3, #34	; 0x22
 8004700:	f040 80ab 	bne.w	800485a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470c:	d117      	bne.n	800473e <UART_Receive_IT+0x50>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d113      	bne.n	800473e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	b29b      	uxth	r3, r3
 8004728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800472c:	b29a      	uxth	r2, r3
 800472e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004730:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004736:	1c9a      	adds	r2, r3, #2
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	629a      	str	r2, [r3, #40]	; 0x28
 800473c:	e026      	b.n	800478c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004744:	2300      	movs	r3, #0
 8004746:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004750:	d007      	beq.n	8004762 <UART_Receive_IT+0x74>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10a      	bne.n	8004770 <UART_Receive_IT+0x82>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	b2da      	uxtb	r2, r3
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	701a      	strb	r2, [r3, #0]
 800476e:	e008      	b.n	8004782 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800477c:	b2da      	uxtb	r2, r3
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29b      	uxth	r3, r3
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	4619      	mov	r1, r3
 800479a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800479c:	2b00      	cmp	r3, #0
 800479e:	d15a      	bne.n	8004856 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0220 	bic.w	r2, r2, #32
 80047ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695a      	ldr	r2, [r3, #20]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0201 	bic.w	r2, r2, #1
 80047ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d135      	bne.n	800484c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	330c      	adds	r3, #12
 80047ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	613b      	str	r3, [r7, #16]
   return(result);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f023 0310 	bic.w	r3, r3, #16
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	330c      	adds	r3, #12
 8004804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004806:	623a      	str	r2, [r7, #32]
 8004808:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	69f9      	ldr	r1, [r7, #28]
 800480c:	6a3a      	ldr	r2, [r7, #32]
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	61bb      	str	r3, [r7, #24]
   return(result);
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e5      	bne.n	80047e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	2b10      	cmp	r3, #16
 8004826:	d10a      	bne.n	800483e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004842:	4619      	mov	r1, r3
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff fdbf 	bl	80043c8 <HAL_UARTEx_RxEventCallback>
 800484a:	e002      	b.n	8004852 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7fc fe3f 	bl	80014d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	e002      	b.n	800485c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	e000      	b.n	800485c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800485a:	2302      	movs	r3, #2
  }
}
 800485c:	4618      	mov	r0, r3
 800485e:	3730      	adds	r7, #48	; 0x30
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004868:	b09f      	sub	sp, #124	; 0x7c
 800486a:	af00      	add	r7, sp, #0
 800486c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800486e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487a:	68d9      	ldr	r1, [r3, #12]
 800487c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	ea40 0301 	orr.w	r3, r0, r1
 8004884:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	431a      	orrs	r2, r3
 8004890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	431a      	orrs	r2, r3
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	4313      	orrs	r3, r2
 800489c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800489e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048a8:	f021 010c 	bic.w	r1, r1, #12
 80048ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048b2:	430b      	orrs	r3, r1
 80048b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c2:	6999      	ldr	r1, [r3, #24]
 80048c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	ea40 0301 	orr.w	r3, r0, r1
 80048cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4bc5      	ldr	r3, [pc, #788]	; (8004be8 <UART_SetConfig+0x384>)
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d004      	beq.n	80048e2 <UART_SetConfig+0x7e>
 80048d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	4bc3      	ldr	r3, [pc, #780]	; (8004bec <UART_SetConfig+0x388>)
 80048de:	429a      	cmp	r2, r3
 80048e0:	d103      	bne.n	80048ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048e2:	f7fe fae9 	bl	8002eb8 <HAL_RCC_GetPCLK2Freq>
 80048e6:	6778      	str	r0, [r7, #116]	; 0x74
 80048e8:	e002      	b.n	80048f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ea:	f7fe fad1 	bl	8002e90 <HAL_RCC_GetPCLK1Freq>
 80048ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f8:	f040 80b6 	bne.w	8004a68 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048fe:	461c      	mov	r4, r3
 8004900:	f04f 0500 	mov.w	r5, #0
 8004904:	4622      	mov	r2, r4
 8004906:	462b      	mov	r3, r5
 8004908:	1891      	adds	r1, r2, r2
 800490a:	6439      	str	r1, [r7, #64]	; 0x40
 800490c:	415b      	adcs	r3, r3
 800490e:	647b      	str	r3, [r7, #68]	; 0x44
 8004910:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004914:	1912      	adds	r2, r2, r4
 8004916:	eb45 0303 	adc.w	r3, r5, r3
 800491a:	f04f 0000 	mov.w	r0, #0
 800491e:	f04f 0100 	mov.w	r1, #0
 8004922:	00d9      	lsls	r1, r3, #3
 8004924:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004928:	00d0      	lsls	r0, r2, #3
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	1911      	adds	r1, r2, r4
 8004930:	6639      	str	r1, [r7, #96]	; 0x60
 8004932:	416b      	adcs	r3, r5
 8004934:	667b      	str	r3, [r7, #100]	; 0x64
 8004936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	461a      	mov	r2, r3
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	1891      	adds	r1, r2, r2
 8004942:	63b9      	str	r1, [r7, #56]	; 0x38
 8004944:	415b      	adcs	r3, r3
 8004946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004948:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800494c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004950:	f7fb fc96 	bl	8000280 <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4ba5      	ldr	r3, [pc, #660]	; (8004bf0 <UART_SetConfig+0x38c>)
 800495a:	fba3 2302 	umull	r2, r3, r3, r2
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	011e      	lsls	r6, r3, #4
 8004962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004964:	461c      	mov	r4, r3
 8004966:	f04f 0500 	mov.w	r5, #0
 800496a:	4622      	mov	r2, r4
 800496c:	462b      	mov	r3, r5
 800496e:	1891      	adds	r1, r2, r2
 8004970:	6339      	str	r1, [r7, #48]	; 0x30
 8004972:	415b      	adcs	r3, r3
 8004974:	637b      	str	r3, [r7, #52]	; 0x34
 8004976:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800497a:	1912      	adds	r2, r2, r4
 800497c:	eb45 0303 	adc.w	r3, r5, r3
 8004980:	f04f 0000 	mov.w	r0, #0
 8004984:	f04f 0100 	mov.w	r1, #0
 8004988:	00d9      	lsls	r1, r3, #3
 800498a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800498e:	00d0      	lsls	r0, r2, #3
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	1911      	adds	r1, r2, r4
 8004996:	65b9      	str	r1, [r7, #88]	; 0x58
 8004998:	416b      	adcs	r3, r5
 800499a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800499c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	461a      	mov	r2, r3
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	1891      	adds	r1, r2, r2
 80049a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80049aa:	415b      	adcs	r3, r3
 80049ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80049b6:	f7fb fc63 	bl	8000280 <__aeabi_uldivmod>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4b8c      	ldr	r3, [pc, #560]	; (8004bf0 <UART_SetConfig+0x38c>)
 80049c0:	fba3 1302 	umull	r1, r3, r3, r2
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	2164      	movs	r1, #100	; 0x64
 80049c8:	fb01 f303 	mul.w	r3, r1, r3
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	3332      	adds	r3, #50	; 0x32
 80049d2:	4a87      	ldr	r2, [pc, #540]	; (8004bf0 <UART_SetConfig+0x38c>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049e0:	441e      	add	r6, r3
 80049e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049e4:	4618      	mov	r0, r3
 80049e6:	f04f 0100 	mov.w	r1, #0
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	1894      	adds	r4, r2, r2
 80049f0:	623c      	str	r4, [r7, #32]
 80049f2:	415b      	adcs	r3, r3
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
 80049f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049fa:	1812      	adds	r2, r2, r0
 80049fc:	eb41 0303 	adc.w	r3, r1, r3
 8004a00:	f04f 0400 	mov.w	r4, #0
 8004a04:	f04f 0500 	mov.w	r5, #0
 8004a08:	00dd      	lsls	r5, r3, #3
 8004a0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a0e:	00d4      	lsls	r4, r2, #3
 8004a10:	4622      	mov	r2, r4
 8004a12:	462b      	mov	r3, r5
 8004a14:	1814      	adds	r4, r2, r0
 8004a16:	653c      	str	r4, [r7, #80]	; 0x50
 8004a18:	414b      	adcs	r3, r1
 8004a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	461a      	mov	r2, r3
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	1891      	adds	r1, r2, r2
 8004a28:	61b9      	str	r1, [r7, #24]
 8004a2a:	415b      	adcs	r3, r3
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004a36:	f7fb fc23 	bl	8000280 <__aeabi_uldivmod>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4b6c      	ldr	r3, [pc, #432]	; (8004bf0 <UART_SetConfig+0x38c>)
 8004a40:	fba3 1302 	umull	r1, r3, r3, r2
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	2164      	movs	r1, #100	; 0x64
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	3332      	adds	r3, #50	; 0x32
 8004a52:	4a67      	ldr	r2, [pc, #412]	; (8004bf0 <UART_SetConfig+0x38c>)
 8004a54:	fba2 2303 	umull	r2, r3, r2, r3
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	f003 0207 	and.w	r2, r3, #7
 8004a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4432      	add	r2, r6
 8004a64:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a66:	e0b9      	b.n	8004bdc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a6a:	461c      	mov	r4, r3
 8004a6c:	f04f 0500 	mov.w	r5, #0
 8004a70:	4622      	mov	r2, r4
 8004a72:	462b      	mov	r3, r5
 8004a74:	1891      	adds	r1, r2, r2
 8004a76:	6139      	str	r1, [r7, #16]
 8004a78:	415b      	adcs	r3, r3
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a80:	1912      	adds	r2, r2, r4
 8004a82:	eb45 0303 	adc.w	r3, r5, r3
 8004a86:	f04f 0000 	mov.w	r0, #0
 8004a8a:	f04f 0100 	mov.w	r1, #0
 8004a8e:	00d9      	lsls	r1, r3, #3
 8004a90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a94:	00d0      	lsls	r0, r2, #3
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	eb12 0804 	adds.w	r8, r2, r4
 8004a9e:	eb43 0905 	adc.w	r9, r3, r5
 8004aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f04f 0100 	mov.w	r1, #0
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	008b      	lsls	r3, r1, #2
 8004ab6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004aba:	0082      	lsls	r2, r0, #2
 8004abc:	4640      	mov	r0, r8
 8004abe:	4649      	mov	r1, r9
 8004ac0:	f7fb fbde 	bl	8000280 <__aeabi_uldivmod>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4b49      	ldr	r3, [pc, #292]	; (8004bf0 <UART_SetConfig+0x38c>)
 8004aca:	fba3 2302 	umull	r2, r3, r3, r2
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	011e      	lsls	r6, r3, #4
 8004ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f04f 0100 	mov.w	r1, #0
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	1894      	adds	r4, r2, r2
 8004ae0:	60bc      	str	r4, [r7, #8]
 8004ae2:	415b      	adcs	r3, r3
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aea:	1812      	adds	r2, r2, r0
 8004aec:	eb41 0303 	adc.w	r3, r1, r3
 8004af0:	f04f 0400 	mov.w	r4, #0
 8004af4:	f04f 0500 	mov.w	r5, #0
 8004af8:	00dd      	lsls	r5, r3, #3
 8004afa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004afe:	00d4      	lsls	r4, r2, #3
 8004b00:	4622      	mov	r2, r4
 8004b02:	462b      	mov	r3, r5
 8004b04:	1814      	adds	r4, r2, r0
 8004b06:	64bc      	str	r4, [r7, #72]	; 0x48
 8004b08:	414b      	adcs	r3, r1
 8004b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f04f 0100 	mov.w	r1, #0
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	008b      	lsls	r3, r1, #2
 8004b20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b24:	0082      	lsls	r2, r0, #2
 8004b26:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004b2a:	f7fb fba9 	bl	8000280 <__aeabi_uldivmod>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4b2f      	ldr	r3, [pc, #188]	; (8004bf0 <UART_SetConfig+0x38c>)
 8004b34:	fba3 1302 	umull	r1, r3, r3, r2
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	2164      	movs	r1, #100	; 0x64
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	3332      	adds	r3, #50	; 0x32
 8004b46:	4a2a      	ldr	r2, [pc, #168]	; (8004bf0 <UART_SetConfig+0x38c>)
 8004b48:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b52:	441e      	add	r6, r3
 8004b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b56:	4618      	mov	r0, r3
 8004b58:	f04f 0100 	mov.w	r1, #0
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	1894      	adds	r4, r2, r2
 8004b62:	603c      	str	r4, [r7, #0]
 8004b64:	415b      	adcs	r3, r3
 8004b66:	607b      	str	r3, [r7, #4]
 8004b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b6c:	1812      	adds	r2, r2, r0
 8004b6e:	eb41 0303 	adc.w	r3, r1, r3
 8004b72:	f04f 0400 	mov.w	r4, #0
 8004b76:	f04f 0500 	mov.w	r5, #0
 8004b7a:	00dd      	lsls	r5, r3, #3
 8004b7c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b80:	00d4      	lsls	r4, r2, #3
 8004b82:	4622      	mov	r2, r4
 8004b84:	462b      	mov	r3, r5
 8004b86:	eb12 0a00 	adds.w	sl, r2, r0
 8004b8a:	eb43 0b01 	adc.w	fp, r3, r1
 8004b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	008b      	lsls	r3, r1, #2
 8004ba2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ba6:	0082      	lsls	r2, r0, #2
 8004ba8:	4650      	mov	r0, sl
 8004baa:	4659      	mov	r1, fp
 8004bac:	f7fb fb68 	bl	8000280 <__aeabi_uldivmod>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4b0e      	ldr	r3, [pc, #56]	; (8004bf0 <UART_SetConfig+0x38c>)
 8004bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	2164      	movs	r1, #100	; 0x64
 8004bbe:	fb01 f303 	mul.w	r3, r1, r3
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	3332      	adds	r3, #50	; 0x32
 8004bc8:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <UART_SetConfig+0x38c>)
 8004bca:	fba2 2303 	umull	r2, r3, r2, r3
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	f003 020f 	and.w	r2, r3, #15
 8004bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4432      	add	r2, r6
 8004bda:	609a      	str	r2, [r3, #8]
}
 8004bdc:	bf00      	nop
 8004bde:	377c      	adds	r7, #124	; 0x7c
 8004be0:	46bd      	mov	sp, r7
 8004be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be6:	bf00      	nop
 8004be8:	40011000 	.word	0x40011000
 8004bec:	40011400 	.word	0x40011400
 8004bf0:	51eb851f 	.word	0x51eb851f

08004bf4 <__NVIC_SetPriority>:
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	6039      	str	r1, [r7, #0]
 8004bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	db0a      	blt.n	8004c1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	490c      	ldr	r1, [pc, #48]	; (8004c40 <__NVIC_SetPriority+0x4c>)
 8004c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c12:	0112      	lsls	r2, r2, #4
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	440b      	add	r3, r1
 8004c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004c1c:	e00a      	b.n	8004c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	4908      	ldr	r1, [pc, #32]	; (8004c44 <__NVIC_SetPriority+0x50>)
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	3b04      	subs	r3, #4
 8004c2c:	0112      	lsls	r2, r2, #4
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	440b      	add	r3, r1
 8004c32:	761a      	strb	r2, [r3, #24]
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	e000e100 	.word	0xe000e100
 8004c44:	e000ed00 	.word	0xe000ed00

08004c48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <SysTick_Handler+0x1c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004c50:	f002 fd80 	bl	8007754 <xTaskGetSchedulerState>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d001      	beq.n	8004c5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004c5a:	f003 fc9d 	bl	8008598 <xPortSysTickHandler>
  }
}
 8004c5e:	bf00      	nop
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	e000e010 	.word	0xe000e010

08004c68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	f06f 0004 	mvn.w	r0, #4
 8004c72:	f7ff ffbf 	bl	8004bf4 <__NVIC_SetPriority>
#endif
}
 8004c76:	bf00      	nop
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c82:	f3ef 8305 	mrs	r3, IPSR
 8004c86:	603b      	str	r3, [r7, #0]
  return(result);
 8004c88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c8e:	f06f 0305 	mvn.w	r3, #5
 8004c92:	607b      	str	r3, [r7, #4]
 8004c94:	e00c      	b.n	8004cb0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c96:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <osKernelInitialize+0x44>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d105      	bne.n	8004caa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c9e:	4b08      	ldr	r3, [pc, #32]	; (8004cc0 <osKernelInitialize+0x44>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	607b      	str	r3, [r7, #4]
 8004ca8:	e002      	b.n	8004cb0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004caa:	f04f 33ff 	mov.w	r3, #4294967295
 8004cae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004cb0:	687b      	ldr	r3, [r7, #4]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	200000ac 	.word	0x200000ac

08004cc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cca:	f3ef 8305 	mrs	r3, IPSR
 8004cce:	603b      	str	r3, [r7, #0]
  return(result);
 8004cd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <osKernelStart+0x1a>
    stat = osErrorISR;
 8004cd6:	f06f 0305 	mvn.w	r3, #5
 8004cda:	607b      	str	r3, [r7, #4]
 8004cdc:	e010      	b.n	8004d00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004cde:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <osKernelStart+0x48>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d109      	bne.n	8004cfa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ce6:	f7ff ffbf 	bl	8004c68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004cea:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <osKernelStart+0x48>)
 8004cec:	2202      	movs	r2, #2
 8004cee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004cf0:	f002 f826 	bl	8006d40 <vTaskStartScheduler>
      stat = osOK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	607b      	str	r3, [r7, #4]
 8004cf8:	e002      	b.n	8004d00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d00:	687b      	ldr	r3, [r7, #4]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	200000ac 	.word	0x200000ac

08004d10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08e      	sub	sp, #56	; 0x38
 8004d14:	af04      	add	r7, sp, #16
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d20:	f3ef 8305 	mrs	r3, IPSR
 8004d24:	617b      	str	r3, [r7, #20]
  return(result);
 8004d26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d17e      	bne.n	8004e2a <osThreadNew+0x11a>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d07b      	beq.n	8004e2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d32:	2380      	movs	r3, #128	; 0x80
 8004d34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d36:	2318      	movs	r3, #24
 8004d38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d045      	beq.n	8004dd6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <osThreadNew+0x48>
        name = attr->name;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <osThreadNew+0x6e>
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	2b38      	cmp	r3, #56	; 0x38
 8004d70:	d805      	bhi.n	8004d7e <osThreadNew+0x6e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <osThreadNew+0x72>
        return (NULL);
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e054      	b.n	8004e2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	089b      	lsrs	r3, r3, #2
 8004d90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00e      	beq.n	8004db8 <osThreadNew+0xa8>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	2bbb      	cmp	r3, #187	; 0xbb
 8004da0:	d90a      	bls.n	8004db8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d006      	beq.n	8004db8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <osThreadNew+0xa8>
        mem = 1;
 8004db2:	2301      	movs	r3, #1
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	e010      	b.n	8004dda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10c      	bne.n	8004dda <osThreadNew+0xca>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d108      	bne.n	8004dda <osThreadNew+0xca>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d104      	bne.n	8004dda <osThreadNew+0xca>
          mem = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61bb      	str	r3, [r7, #24]
 8004dd4:	e001      	b.n	8004dda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d110      	bne.n	8004e02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004de8:	9202      	str	r2, [sp, #8]
 8004dea:	9301      	str	r3, [sp, #4]
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	6a3a      	ldr	r2, [r7, #32]
 8004df4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f001 fdb6 	bl	8006968 <xTaskCreateStatic>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	e013      	b.n	8004e2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d110      	bne.n	8004e2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	f107 0310 	add.w	r3, r7, #16
 8004e10:	9301      	str	r3, [sp, #4]
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f001 fe01 	bl	8006a22 <xTaskCreate>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d001      	beq.n	8004e2a <osThreadNew+0x11a>
            hTask = NULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e2a:	693b      	ldr	r3, [r7, #16]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3728      	adds	r7, #40	; 0x28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e3c:	f3ef 8305 	mrs	r3, IPSR
 8004e40:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e42:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <osDelay+0x1c>
    stat = osErrorISR;
 8004e48:	f06f 0305 	mvn.w	r3, #5
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	e007      	b.n	8004e60 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f001 ff3c 	bl	8006cd8 <vTaskDelay>
    }
  }

  return (stat);
 8004e60:	68fb      	ldr	r3, [r7, #12]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b086      	sub	sp, #24
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e76:	f3ef 8305 	mrs	r3, IPSR
 8004e7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e7c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d12d      	bne.n	8004ede <osEventFlagsNew+0x74>
    mem = -1;
 8004e82:	f04f 33ff 	mov.w	r3, #4294967295
 8004e86:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d015      	beq.n	8004eba <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d006      	beq.n	8004ea4 <osEventFlagsNew+0x3a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2b1f      	cmp	r3, #31
 8004e9c:	d902      	bls.n	8004ea4 <osEventFlagsNew+0x3a>
        mem = 1;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	e00c      	b.n	8004ebe <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d108      	bne.n	8004ebe <osEventFlagsNew+0x54>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d104      	bne.n	8004ebe <osEventFlagsNew+0x54>
          mem = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	e001      	b.n	8004ebe <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d106      	bne.n	8004ed2 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fb2b 	bl	8005524 <xEventGroupCreateStatic>
 8004ece:	6178      	str	r0, [r7, #20]
 8004ed0:	e005      	b.n	8004ede <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d102      	bne.n	8004ede <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8004ed8:	f000 fb5b 	bl	8005592 <xEventGroupCreate>
 8004edc:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004ede:	697b      	ldr	r3, [r7, #20]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d004      	beq.n	8004f06 <osEventFlagsSet+0x1e>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8004f06:	f06f 0303 	mvn.w	r3, #3
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	e028      	b.n	8004f60 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f0e:	f3ef 8305 	mrs	r3, IPSR
 8004f12:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f14:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d01d      	beq.n	8004f56 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004f1e:	f107 0308 	add.w	r3, r7, #8
 8004f22:	461a      	mov	r2, r3
 8004f24:	6839      	ldr	r1, [r7, #0]
 8004f26:	6938      	ldr	r0, [r7, #16]
 8004f28:	f000 fcd6 	bl	80058d8 <xEventGroupSetBitsFromISR>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d103      	bne.n	8004f3a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8004f32:	f06f 0302 	mvn.w	r3, #2
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	e012      	b.n	8004f60 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00d      	beq.n	8004f60 <osEventFlagsSet+0x78>
 8004f44:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <osEventFlagsSet+0x84>)
 8004f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	e004      	b.n	8004f60 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	6938      	ldr	r0, [r7, #16]
 8004f5a:	f000 fc03 	bl	8005764 <xEventGroupSetBits>
 8004f5e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004f60:	697b      	ldr	r3, [r7, #20]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	e000ed04 	.word	0xe000ed04

08004f70 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08c      	sub	sp, #48	; 0x30
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d004      	beq.n	8004f92 <osEventFlagsWait+0x22>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8004f92:	f06f 0303 	mvn.w	r3, #3
 8004f96:	61fb      	str	r3, [r7, #28]
 8004f98:	e04b      	b.n	8005032 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f9a:	f3ef 8305 	mrs	r3, IPSR
 8004f9e:	617b      	str	r3, [r7, #20]
  return(result);
 8004fa0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8004fa6:	f06f 0305 	mvn.w	r3, #5
 8004faa:	61fb      	str	r3, [r7, #28]
 8004fac:	e041      	b.n	8005032 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
 8004fbc:	e001      	b.n	8004fc2 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	623b      	str	r3, [r7, #32]
 8004fd0:	e001      	b.n	8004fd6 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	6a3a      	ldr	r2, [r7, #32]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	69b8      	ldr	r0, [r7, #24]
 8004fe2:	f000 faf1 	bl	80055c8 <xEventGroupWaitBits>
 8004fe6:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d010      	beq.n	8005014 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d019      	beq.n	8005032 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8005004:	f06f 0301 	mvn.w	r3, #1
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	e012      	b.n	8005032 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800500c:	f06f 0302 	mvn.w	r3, #2
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	e00e      	b.n	8005032 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	4013      	ands	r3, r2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8005024:	f06f 0301 	mvn.w	r3, #1
 8005028:	61fb      	str	r3, [r7, #28]
 800502a:	e002      	b.n	8005032 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800502c:	f06f 0302 	mvn.w	r3, #2
 8005030:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8005032:	69fb      	ldr	r3, [r7, #28]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3728      	adds	r7, #40	; 0x28
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800503c:	b580      	push	{r7, lr}
 800503e:	b088      	sub	sp, #32
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005044:	2300      	movs	r3, #0
 8005046:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005048:	f3ef 8305 	mrs	r3, IPSR
 800504c:	60bb      	str	r3, [r7, #8]
  return(result);
 800504e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005050:	2b00      	cmp	r3, #0
 8005052:	d174      	bne.n	800513e <osMutexNew+0x102>
    if (attr != NULL) {
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <osMutexNew+0x26>
      type = attr->attr_bits;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	61bb      	str	r3, [r7, #24]
 8005060:	e001      	b.n	8005066 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <osMutexNew+0x3a>
      rmtx = 1U;
 8005070:	2301      	movs	r3, #1
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	e001      	b.n	800507a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b00      	cmp	r3, #0
 8005082:	d15c      	bne.n	800513e <osMutexNew+0x102>
      mem = -1;
 8005084:	f04f 33ff 	mov.w	r3, #4294967295
 8005088:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d015      	beq.n	80050bc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d006      	beq.n	80050a6 <osMutexNew+0x6a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	2b4f      	cmp	r3, #79	; 0x4f
 800509e:	d902      	bls.n	80050a6 <osMutexNew+0x6a>
          mem = 1;
 80050a0:	2301      	movs	r3, #1
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	e00c      	b.n	80050c0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d108      	bne.n	80050c0 <osMutexNew+0x84>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d104      	bne.n	80050c0 <osMutexNew+0x84>
            mem = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	613b      	str	r3, [r7, #16]
 80050ba:	e001      	b.n	80050c0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d112      	bne.n	80050ec <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d007      	beq.n	80050dc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4619      	mov	r1, r3
 80050d2:	2004      	movs	r0, #4
 80050d4:	f000 fe37 	bl	8005d46 <xQueueCreateMutexStatic>
 80050d8:	61f8      	str	r0, [r7, #28]
 80050da:	e016      	b.n	800510a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	4619      	mov	r1, r3
 80050e2:	2001      	movs	r0, #1
 80050e4:	f000 fe2f 	bl	8005d46 <xQueueCreateMutexStatic>
 80050e8:	61f8      	str	r0, [r7, #28]
 80050ea:	e00e      	b.n	800510a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10b      	bne.n	800510a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d004      	beq.n	8005102 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80050f8:	2004      	movs	r0, #4
 80050fa:	f000 fe0c 	bl	8005d16 <xQueueCreateMutex>
 80050fe:	61f8      	str	r0, [r7, #28]
 8005100:	e003      	b.n	800510a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005102:	2001      	movs	r0, #1
 8005104:	f000 fe07 	bl	8005d16 <xQueueCreateMutex>
 8005108:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00c      	beq.n	800512a <osMutexNew+0xee>
        if (attr != NULL) {
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <osMutexNew+0xe2>
          name = attr->name;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	e001      	b.n	8005122 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005122:	68f9      	ldr	r1, [r7, #12]
 8005124:	69f8      	ldr	r0, [r7, #28]
 8005126:	f001 fbc1 	bl	80068ac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d006      	beq.n	800513e <osMutexNew+0x102>
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800513e:	69fb      	ldr	r3, [r7, #28]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3720      	adds	r7, #32
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f023 0301 	bic.w	r3, r3, #1
 8005158:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005166:	f3ef 8305 	mrs	r3, IPSR
 800516a:	60bb      	str	r3, [r7, #8]
  return(result);
 800516c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005172:	f06f 0305 	mvn.w	r3, #5
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	e02c      	b.n	80051d4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d103      	bne.n	8005188 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005180:	f06f 0303 	mvn.w	r3, #3
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	e025      	b.n	80051d4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d011      	beq.n	80051b2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800518e:	6839      	ldr	r1, [r7, #0]
 8005190:	6938      	ldr	r0, [r7, #16]
 8005192:	f000 fe27 	bl	8005de4 <xQueueTakeMutexRecursive>
 8005196:	4603      	mov	r3, r0
 8005198:	2b01      	cmp	r3, #1
 800519a:	d01b      	beq.n	80051d4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80051a2:	f06f 0301 	mvn.w	r3, #1
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	e014      	b.n	80051d4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80051aa:	f06f 0302 	mvn.w	r3, #2
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	e010      	b.n	80051d4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80051b2:	6839      	ldr	r1, [r7, #0]
 80051b4:	6938      	ldr	r0, [r7, #16]
 80051b6:	f001 f8c5 	bl	8006344 <xQueueSemaphoreTake>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d009      	beq.n	80051d4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80051c6:	f06f 0301 	mvn.w	r3, #1
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e002      	b.n	80051d4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80051ce:	f06f 0302 	mvn.w	r3, #2
 80051d2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80051d4:	697b      	ldr	r3, [r7, #20]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80051de:	b580      	push	{r7, lr}
 80051e0:	b086      	sub	sp, #24
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051fa:	f3ef 8305 	mrs	r3, IPSR
 80051fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8005200:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <osMutexRelease+0x30>
    stat = osErrorISR;
 8005206:	f06f 0305 	mvn.w	r3, #5
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	e01f      	b.n	800524e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d103      	bne.n	800521c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005214:	f06f 0303 	mvn.w	r3, #3
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	e018      	b.n	800524e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005222:	6938      	ldr	r0, [r7, #16]
 8005224:	f000 fdaa 	bl	8005d7c <xQueueGiveMutexRecursive>
 8005228:	4603      	mov	r3, r0
 800522a:	2b01      	cmp	r3, #1
 800522c:	d00f      	beq.n	800524e <osMutexRelease+0x70>
        stat = osErrorResource;
 800522e:	f06f 0302 	mvn.w	r3, #2
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	e00b      	b.n	800524e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005236:	2300      	movs	r3, #0
 8005238:	2200      	movs	r2, #0
 800523a:	2100      	movs	r1, #0
 800523c:	6938      	ldr	r0, [r7, #16]
 800523e:	f000 fe07 	bl	8005e50 <xQueueGenericSend>
 8005242:	4603      	mov	r3, r0
 8005244:	2b01      	cmp	r3, #1
 8005246:	d002      	beq.n	800524e <osMutexRelease+0x70>
        stat = osErrorResource;
 8005248:	f06f 0302 	mvn.w	r3, #2
 800524c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800524e:	697b      	ldr	r3, [r7, #20]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af02      	add	r7, sp, #8
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005264:	2300      	movs	r3, #0
 8005266:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005268:	f3ef 8305 	mrs	r3, IPSR
 800526c:	613b      	str	r3, [r7, #16]
  return(result);
 800526e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005270:	2b00      	cmp	r3, #0
 8005272:	d15f      	bne.n	8005334 <osMessageQueueNew+0xdc>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d05c      	beq.n	8005334 <osMessageQueueNew+0xdc>
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d059      	beq.n	8005334 <osMessageQueueNew+0xdc>
    mem = -1;
 8005280:	f04f 33ff 	mov.w	r3, #4294967295
 8005284:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d029      	beq.n	80052e0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d012      	beq.n	80052ba <osMessageQueueNew+0x62>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	2b4f      	cmp	r3, #79	; 0x4f
 800529a:	d90e      	bls.n	80052ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	695a      	ldr	r2, [r3, #20]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d302      	bcc.n	80052ba <osMessageQueueNew+0x62>
        mem = 1;
 80052b4:	2301      	movs	r3, #1
 80052b6:	61bb      	str	r3, [r7, #24]
 80052b8:	e014      	b.n	80052e4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d110      	bne.n	80052e4 <osMessageQueueNew+0x8c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10c      	bne.n	80052e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d108      	bne.n	80052e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d104      	bne.n	80052e4 <osMessageQueueNew+0x8c>
          mem = 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	e001      	b.n	80052e4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d10b      	bne.n	8005302 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691a      	ldr	r2, [r3, #16]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	2100      	movs	r1, #0
 80052f4:	9100      	str	r1, [sp, #0]
 80052f6:	68b9      	ldr	r1, [r7, #8]
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 fc1d 	bl	8005b38 <xQueueGenericCreateStatic>
 80052fe:	61f8      	str	r0, [r7, #28]
 8005300:	e008      	b.n	8005314 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d105      	bne.n	8005314 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005308:	2200      	movs	r2, #0
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 fc8b 	bl	8005c28 <xQueueGenericCreate>
 8005312:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00c      	beq.n	8005334 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	e001      	b.n	800532c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005328:	2300      	movs	r3, #0
 800532a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800532c:	6979      	ldr	r1, [r7, #20]
 800532e:	69f8      	ldr	r0, [r7, #28]
 8005330:	f001 fabc 	bl	80068ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005334:	69fb      	ldr	r3, [r7, #28]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3720      	adds	r7, #32
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	4613      	mov	r3, r2
 800534e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005354:	2300      	movs	r3, #0
 8005356:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005358:	f3ef 8305 	mrs	r3, IPSR
 800535c:	617b      	str	r3, [r7, #20]
  return(result);
 800535e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005360:	2b00      	cmp	r3, #0
 8005362:	d028      	beq.n	80053b6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d005      	beq.n	8005376 <osMessageQueuePut+0x36>
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <osMessageQueuePut+0x36>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005376:	f06f 0303 	mvn.w	r3, #3
 800537a:	61fb      	str	r3, [r7, #28]
 800537c:	e038      	b.n	80053f0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800537e:	2300      	movs	r3, #0
 8005380:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005382:	f107 0210 	add.w	r2, r7, #16
 8005386:	2300      	movs	r3, #0
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	69b8      	ldr	r0, [r7, #24]
 800538c:	f000 fe5e 	bl	800604c <xQueueGenericSendFromISR>
 8005390:	4603      	mov	r3, r0
 8005392:	2b01      	cmp	r3, #1
 8005394:	d003      	beq.n	800539e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005396:	f06f 0302 	mvn.w	r3, #2
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	e028      	b.n	80053f0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d025      	beq.n	80053f0 <osMessageQueuePut+0xb0>
 80053a4:	4b15      	ldr	r3, [pc, #84]	; (80053fc <osMessageQueuePut+0xbc>)
 80053a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	e01c      	b.n	80053f0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <osMessageQueuePut+0x82>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d103      	bne.n	80053ca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80053c2:	f06f 0303 	mvn.w	r3, #3
 80053c6:	61fb      	str	r3, [r7, #28]
 80053c8:	e012      	b.n	80053f0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80053ca:	2300      	movs	r3, #0
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	69b8      	ldr	r0, [r7, #24]
 80053d2:	f000 fd3d 	bl	8005e50 <xQueueGenericSend>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d009      	beq.n	80053f0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80053e2:	f06f 0301 	mvn.w	r3, #1
 80053e6:	61fb      	str	r3, [r7, #28]
 80053e8:	e002      	b.n	80053f0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80053ea:	f06f 0302 	mvn.w	r3, #2
 80053ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80053f0:	69fb      	ldr	r3, [r7, #28]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3720      	adds	r7, #32
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	e000ed04 	.word	0xe000ed04

08005400 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005412:	2300      	movs	r3, #0
 8005414:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005416:	f3ef 8305 	mrs	r3, IPSR
 800541a:	617b      	str	r3, [r7, #20]
  return(result);
 800541c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800541e:	2b00      	cmp	r3, #0
 8005420:	d028      	beq.n	8005474 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <osMessageQueueGet+0x34>
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <osMessageQueueGet+0x34>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005434:	f06f 0303 	mvn.w	r3, #3
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	e037      	b.n	80054ac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800543c:	2300      	movs	r3, #0
 800543e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005440:	f107 0310 	add.w	r3, r7, #16
 8005444:	461a      	mov	r2, r3
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	69b8      	ldr	r0, [r7, #24]
 800544a:	f001 f887 	bl	800655c <xQueueReceiveFromISR>
 800544e:	4603      	mov	r3, r0
 8005450:	2b01      	cmp	r3, #1
 8005452:	d003      	beq.n	800545c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005454:	f06f 0302 	mvn.w	r3, #2
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	e027      	b.n	80054ac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d024      	beq.n	80054ac <osMessageQueueGet+0xac>
 8005462:	4b15      	ldr	r3, [pc, #84]	; (80054b8 <osMessageQueueGet+0xb8>)
 8005464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	e01b      	b.n	80054ac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <osMessageQueueGet+0x80>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d103      	bne.n	8005488 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005480:	f06f 0303 	mvn.w	r3, #3
 8005484:	61fb      	str	r3, [r7, #28]
 8005486:	e011      	b.n	80054ac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	69b8      	ldr	r0, [r7, #24]
 800548e:	f000 fe79 	bl	8006184 <xQueueReceive>
 8005492:	4603      	mov	r3, r0
 8005494:	2b01      	cmp	r3, #1
 8005496:	d009      	beq.n	80054ac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800549e:	f06f 0301 	mvn.w	r3, #1
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	e002      	b.n	80054ac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80054a6:	f06f 0302 	mvn.w	r3, #2
 80054aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80054ac:	69fb      	ldr	r3, [r7, #28]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3720      	adds	r7, #32
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4a07      	ldr	r2, [pc, #28]	; (80054e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80054cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	4a06      	ldr	r2, [pc, #24]	; (80054ec <vApplicationGetIdleTaskMemory+0x30>)
 80054d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2280      	movs	r2, #128	; 0x80
 80054d8:	601a      	str	r2, [r3, #0]
}
 80054da:	bf00      	nop
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	200000b0 	.word	0x200000b0
 80054ec:	2000016c 	.word	0x2000016c

080054f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4a07      	ldr	r2, [pc, #28]	; (800551c <vApplicationGetTimerTaskMemory+0x2c>)
 8005500:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4a06      	ldr	r2, [pc, #24]	; (8005520 <vApplicationGetTimerTaskMemory+0x30>)
 8005506:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800550e:	601a      	str	r2, [r3, #0]
}
 8005510:	bf00      	nop
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	2000036c 	.word	0x2000036c
 8005520:	20000428 	.word	0x20000428

08005524 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005544:	bf00      	nop
 8005546:	e7fe      	b.n	8005546 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005548:	2320      	movs	r3, #32
 800554a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b20      	cmp	r3, #32
 8005550:	d00a      	beq.n	8005568 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	60fb      	str	r3, [r7, #12]
}
 8005564:	bf00      	nop
 8005566:	e7fe      	b.n	8005566 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	3304      	adds	r3, #4
 800557c:	4618      	mov	r0, r3
 800557e:	f000 f9bf 	bl	8005900 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2201      	movs	r2, #1
 8005586:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005588:	697b      	ldr	r3, [r7, #20]
	}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005598:	2020      	movs	r0, #32
 800559a:	f003 f88d 	bl	80086b8 <pvPortMalloc>
 800559e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 f9a5 	bl	8005900 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80055bc:	687b      	ldr	r3, [r7, #4]
	}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b090      	sub	sp, #64	; 0x40
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80055da:	2300      	movs	r3, #0
 80055dc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80055de:	2300      	movs	r3, #0
 80055e0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <xEventGroupWaitBits+0x36>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	623b      	str	r3, [r7, #32]
}
 80055fa:	bf00      	nop
 80055fc:	e7fe      	b.n	80055fc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <xEventGroupWaitBits+0x56>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	61fb      	str	r3, [r7, #28]
}
 800561a:	bf00      	nop
 800561c:	e7fe      	b.n	800561c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10a      	bne.n	800563a <xEventGroupWaitBits+0x72>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	61bb      	str	r3, [r7, #24]
}
 8005636:	bf00      	nop
 8005638:	e7fe      	b.n	8005638 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800563a:	f002 f88b 	bl	8007754 <xTaskGetSchedulerState>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d102      	bne.n	800564a <xEventGroupWaitBits+0x82>
 8005644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <xEventGroupWaitBits+0x86>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <xEventGroupWaitBits+0x88>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10a      	bne.n	800566a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	617b      	str	r3, [r7, #20]
}
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800566a:	f001 fbd9 	bl	8006e20 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800567a:	f000 f90b 	bl	8005894 <prvTestWaitCondition>
 800567e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00e      	beq.n	80056a4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800568a:	2300      	movs	r3, #0
 800568c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d028      	beq.n	80056e6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	43db      	mvns	r3, r3
 800569c:	401a      	ands	r2, r3
 800569e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	e020      	b.n	80056e6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80056a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d104      	bne.n	80056b4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80056ae:	2301      	movs	r3, #1
 80056b0:	633b      	str	r3, [r7, #48]	; 0x30
 80056b2:	e018      	b.n	80056e6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056c0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056ce:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80056d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d2:	1d18      	adds	r0, r3, #4
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	4313      	orrs	r3, r2
 80056da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056dc:	4619      	mov	r1, r3
 80056de:	f001 fd9d 	bl	800721c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80056e6:	f001 fba9 	bl	8006e3c <xTaskResumeAll>
 80056ea:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80056ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d031      	beq.n	8005756 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d107      	bne.n	8005708 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80056f8:	4b19      	ldr	r3, [pc, #100]	; (8005760 <xEventGroupWaitBits+0x198>)
 80056fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005708:	f002 f99a 	bl	8007a40 <uxTaskResetEventItemValue>
 800570c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800570e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d11a      	bne.n	800574e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8005718:	f002 feac 	bl	8008474 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800571c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	68b9      	ldr	r1, [r7, #8]
 8005726:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005728:	f000 f8b4 	bl	8005894 <prvTestWaitCondition>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d006      	beq.n	8005746 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	43db      	mvns	r3, r3
 8005740:	401a      	ands	r2, r3
 8005742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005744:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005746:	2301      	movs	r3, #1
 8005748:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800574a:	f002 fec3 	bl	80084d4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800574e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005750:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005754:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005758:	4618      	mov	r0, r3
 800575a:	3740      	adds	r7, #64	; 0x40
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	e000ed04 	.word	0xe000ed04

08005764 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08e      	sub	sp, #56	; 0x38
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800576e:	2300      	movs	r3, #0
 8005770:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005776:	2300      	movs	r3, #0
 8005778:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <xEventGroupSetBits+0x32>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	613b      	str	r3, [r7, #16]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <xEventGroupSetBits+0x52>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	60fb      	str	r3, [r7, #12]
}
 80057b2:	bf00      	nop
 80057b4:	e7fe      	b.n	80057b4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	3304      	adds	r3, #4
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	3308      	adds	r3, #8
 80057c0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80057c2:	f001 fb2d 	bl	8006e20 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80057d8:	e03c      	b.n	8005854 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80057da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80057e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80057f0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057f8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d108      	bne.n	8005816 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	4013      	ands	r3, r2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00b      	beq.n	8005828 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005810:	2301      	movs	r3, #1
 8005812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005814:	e008      	b.n	8005828 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	429a      	cmp	r2, r3
 8005822:	d101      	bne.n	8005828 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005824:	2301      	movs	r3, #1
 8005826:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d010      	beq.n	8005850 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	4313      	orrs	r3, r2
 800583e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005848:	4619      	mov	r1, r3
 800584a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800584c:	f001 fdb2 	bl	80073b4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	429a      	cmp	r2, r3
 800585a:	d1be      	bne.n	80057da <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	43db      	mvns	r3, r3
 8005864:	401a      	ands	r2, r3
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800586a:	f001 fae7 	bl	8006e3c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	681b      	ldr	r3, [r3, #0]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3738      	adds	r7, #56	; 0x38
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005884:	6839      	ldr	r1, [r7, #0]
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff ff6c 	bl	8005764 <xEventGroupSetBits>
}
 800588c:	bf00      	nop
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d107      	bne.n	80058ba <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00a      	beq.n	80058ca <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	e007      	b.n	80058ca <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4013      	ands	r3, r2
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d101      	bne.n	80058ca <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80058c6:	2301      	movs	r3, #1
 80058c8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80058ca:	697b      	ldr	r3, [r7, #20]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	68f9      	ldr	r1, [r7, #12]
 80058ea:	4804      	ldr	r0, [pc, #16]	; (80058fc <xEventGroupSetBitsFromISR+0x24>)
 80058ec:	f002 fc76 	bl	80081dc <xTimerPendFunctionCallFromISR>
 80058f0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80058f2:	697b      	ldr	r3, [r7, #20]
	}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	0800587b 	.word	0x0800587b

08005900 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f103 0208 	add.w	r2, r3, #8
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f04f 32ff 	mov.w	r2, #4294967295
 8005918:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f103 0208 	add.w	r2, r3, #8
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f103 0208 	add.w	r2, r3, #8
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800595a:	b480      	push	{r7}
 800595c:	b085      	sub	sp, #20
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	601a      	str	r2, [r3, #0]
}
 8005996:	bf00      	nop
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059a2:	b480      	push	{r7}
 80059a4:	b085      	sub	sp, #20
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b8:	d103      	bne.n	80059c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	e00c      	b.n	80059dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3308      	adds	r3, #8
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	e002      	b.n	80059d0 <vListInsert+0x2e>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d2f6      	bcs.n	80059ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	601a      	str	r2, [r3, #0]
}
 8005a08:	bf00      	nop
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6892      	ldr	r2, [r2, #8]
 8005a2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6852      	ldr	r2, [r2, #4]
 8005a34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d103      	bne.n	8005a48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	1e5a      	subs	r2, r3, #1
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <xQueueGenericReset+0x2a>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	60bb      	str	r3, [r7, #8]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a92:	f002 fcef 	bl	8008474 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9e:	68f9      	ldr	r1, [r7, #12]
 8005aa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005aa2:	fb01 f303 	mul.w	r3, r1, r3
 8005aa6:	441a      	add	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	68f9      	ldr	r1, [r7, #12]
 8005ac6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ac8:	fb01 f303 	mul.w	r3, r1, r3
 8005acc:	441a      	add	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	22ff      	movs	r2, #255	; 0xff
 8005ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	22ff      	movs	r2, #255	; 0xff
 8005ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d114      	bne.n	8005b12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01a      	beq.n	8005b26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3310      	adds	r3, #16
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 fbf9 	bl	80072ec <xTaskRemoveFromEventList>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d012      	beq.n	8005b26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b00:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <xQueueGenericReset+0xcc>)
 8005b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	e009      	b.n	8005b26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3310      	adds	r3, #16
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7ff fef2 	bl	8005900 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3324      	adds	r3, #36	; 0x24
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff feed 	bl	8005900 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b26:	f002 fcd5 	bl	80084d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b2a:	2301      	movs	r3, #1
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	e000ed04 	.word	0xe000ed04

08005b38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08e      	sub	sp, #56	; 0x38
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10a      	bne.n	8005b62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b7a:	bf00      	nop
 8005b7c:	e7fe      	b.n	8005b7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <xQueueGenericCreateStatic+0x52>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <xQueueGenericCreateStatic+0x56>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e000      	b.n	8005b90 <xQueueGenericCreateStatic+0x58>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10a      	bne.n	8005baa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	623b      	str	r3, [r7, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d102      	bne.n	8005bb6 <xQueueGenericCreateStatic+0x7e>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <xQueueGenericCreateStatic+0x82>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <xQueueGenericCreateStatic+0x84>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	61fb      	str	r3, [r7, #28]
}
 8005bd2:	bf00      	nop
 8005bd4:	e7fe      	b.n	8005bd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005bd6:	2350      	movs	r3, #80	; 0x50
 8005bd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b50      	cmp	r3, #80	; 0x50
 8005bde:	d00a      	beq.n	8005bf6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	61bb      	str	r3, [r7, #24]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005bf6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00d      	beq.n	8005c1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	4613      	mov	r3, r2
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	68b9      	ldr	r1, [r7, #8]
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f83f 	bl	8005c9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3730      	adds	r7, #48	; 0x30
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	; 0x28
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	4613      	mov	r3, r2
 8005c34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	613b      	str	r3, [r7, #16]
}
 8005c4e:	bf00      	nop
 8005c50:	e7fe      	b.n	8005c50 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	fb02 f303 	mul.w	r3, r2, r3
 8005c5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	3350      	adds	r3, #80	; 0x50
 8005c60:	4618      	mov	r0, r3
 8005c62:	f002 fd29 	bl	80086b8 <pvPortMalloc>
 8005c66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d011      	beq.n	8005c92 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	3350      	adds	r3, #80	; 0x50
 8005c76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c80:	79fa      	ldrb	r2, [r7, #7]
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	4613      	mov	r3, r2
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	68b9      	ldr	r1, [r7, #8]
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 f805 	bl	8005c9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c92:	69bb      	ldr	r3, [r7, #24]
	}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3720      	adds	r7, #32
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d103      	bne.n	8005cb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	e002      	b.n	8005cbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005cca:	2101      	movs	r1, #1
 8005ccc:	69b8      	ldr	r0, [r7, #24]
 8005cce:	f7ff fecb 	bl	8005a68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	78fa      	ldrb	r2, [r7, #3]
 8005cd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005cda:	bf00      	nop
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00e      	beq.n	8005d0e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005d02:	2300      	movs	r3, #0
 8005d04:	2200      	movs	r2, #0
 8005d06:	2100      	movs	r1, #0
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f8a1 	bl	8005e50 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005d0e:	bf00      	nop
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b086      	sub	sp, #24
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005d20:	2301      	movs	r3, #1
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	2300      	movs	r3, #0
 8005d26:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005d28:	79fb      	ldrb	r3, [r7, #7]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	6939      	ldr	r1, [r7, #16]
 8005d2e:	6978      	ldr	r0, [r7, #20]
 8005d30:	f7ff ff7a 	bl	8005c28 <xQueueGenericCreate>
 8005d34:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f7ff ffd3 	bl	8005ce2 <prvInitialiseMutex>

		return xNewQueue;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
	}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b088      	sub	sp, #32
 8005d4a:	af02      	add	r7, sp, #8
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	6039      	str	r1, [r7, #0]
 8005d50:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005d52:	2301      	movs	r3, #1
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	2300      	movs	r3, #0
 8005d58:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2200      	movs	r2, #0
 8005d62:	6939      	ldr	r1, [r7, #16]
 8005d64:	6978      	ldr	r0, [r7, #20]
 8005d66:	f7ff fee7 	bl	8005b38 <xQueueGenericCreateStatic>
 8005d6a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f7ff ffb8 	bl	8005ce2 <prvInitialiseMutex>

		return xNewQueue;
 8005d72:	68fb      	ldr	r3, [r7, #12]
	}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005d7c:	b590      	push	{r4, r7, lr}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10a      	bne.n	8005da4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	60fb      	str	r3, [r7, #12]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	689c      	ldr	r4, [r3, #8]
 8005da8:	f001 fcc4 	bl	8007734 <xTaskGetCurrentTaskHandle>
 8005dac:	4603      	mov	r3, r0
 8005dae:	429c      	cmp	r4, r3
 8005db0:	d111      	bne.n	8005dd6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	1e5a      	subs	r2, r3, #1
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d105      	bne.n	8005dd0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2100      	movs	r1, #0
 8005dca:	6938      	ldr	r0, [r7, #16]
 8005dcc:	f000 f840 	bl	8005e50 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	e001      	b.n	8005dda <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005dda:	697b      	ldr	r3, [r7, #20]
	}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	371c      	adds	r7, #28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd90      	pop	{r4, r7, pc}

08005de4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005de4:	b590      	push	{r4, r7, lr}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10a      	bne.n	8005e0e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	60fb      	str	r3, [r7, #12]
}
 8005e0a:	bf00      	nop
 8005e0c:	e7fe      	b.n	8005e0c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	689c      	ldr	r4, [r3, #8]
 8005e12:	f001 fc8f 	bl	8007734 <xTaskGetCurrentTaskHandle>
 8005e16:	4603      	mov	r3, r0
 8005e18:	429c      	cmp	r4, r3
 8005e1a:	d107      	bne.n	8005e2c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005e26:	2301      	movs	r3, #1
 8005e28:	617b      	str	r3, [r7, #20]
 8005e2a:	e00c      	b.n	8005e46 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6938      	ldr	r0, [r7, #16]
 8005e30:	f000 fa88 	bl	8006344 <xQueueSemaphoreTake>
 8005e34:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d004      	beq.n	8005e46 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	1c5a      	adds	r2, r3, #1
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005e46:	697b      	ldr	r3, [r7, #20]
	}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	371c      	adds	r7, #28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd90      	pop	{r4, r7, pc}

08005e50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08e      	sub	sp, #56	; 0x38
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10a      	bne.n	8005e82 <xQueueGenericSend+0x32>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d103      	bne.n	8005e90 <xQueueGenericSend+0x40>
 8005e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <xQueueGenericSend+0x44>
 8005e90:	2301      	movs	r3, #1
 8005e92:	e000      	b.n	8005e96 <xQueueGenericSend+0x46>
 8005e94:	2300      	movs	r3, #0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <xQueueGenericSend+0x60>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d103      	bne.n	8005ebe <xQueueGenericSend+0x6e>
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <xQueueGenericSend+0x72>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <xQueueGenericSend+0x74>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <xQueueGenericSend+0x8e>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	623b      	str	r3, [r7, #32]
}
 8005eda:	bf00      	nop
 8005edc:	e7fe      	b.n	8005edc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ede:	f001 fc39 	bl	8007754 <xTaskGetSchedulerState>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d102      	bne.n	8005eee <xQueueGenericSend+0x9e>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <xQueueGenericSend+0xa2>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <xQueueGenericSend+0xa4>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10a      	bne.n	8005f0e <xQueueGenericSend+0xbe>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	61fb      	str	r3, [r7, #28]
}
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f0e:	f002 fab1 	bl	8008474 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d302      	bcc.n	8005f24 <xQueueGenericSend+0xd4>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d129      	bne.n	8005f78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	68b9      	ldr	r1, [r7, #8]
 8005f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f2a:	f000 fbaf 	bl	800668c <prvCopyDataToQueue>
 8005f2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d010      	beq.n	8005f5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3a:	3324      	adds	r3, #36	; 0x24
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f001 f9d5 	bl	80072ec <xTaskRemoveFromEventList>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d013      	beq.n	8005f70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f48:	4b3f      	ldr	r3, [pc, #252]	; (8006048 <xQueueGenericSend+0x1f8>)
 8005f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	e00a      	b.n	8005f70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d007      	beq.n	8005f70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f60:	4b39      	ldr	r3, [pc, #228]	; (8006048 <xQueueGenericSend+0x1f8>)
 8005f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f70:	f002 fab0 	bl	80084d4 <vPortExitCritical>
				return pdPASS;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e063      	b.n	8006040 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d103      	bne.n	8005f86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f7e:	f002 faa9 	bl	80084d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	e05c      	b.n	8006040 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d106      	bne.n	8005f9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f8c:	f107 0314 	add.w	r3, r7, #20
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 fa71 	bl	8007478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f96:	2301      	movs	r3, #1
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f9a:	f002 fa9b 	bl	80084d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f9e:	f000 ff3f 	bl	8006e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fa2:	f002 fa67 	bl	8008474 <vPortEnterCritical>
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fac:	b25b      	sxtb	r3, r3
 8005fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb2:	d103      	bne.n	8005fbc <xQueueGenericSend+0x16c>
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fc2:	b25b      	sxtb	r3, r3
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc8:	d103      	bne.n	8005fd2 <xQueueGenericSend+0x182>
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fd2:	f002 fa7f 	bl	80084d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fd6:	1d3a      	adds	r2, r7, #4
 8005fd8:	f107 0314 	add.w	r3, r7, #20
 8005fdc:	4611      	mov	r1, r2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f001 fa60 	bl	80074a4 <xTaskCheckForTimeOut>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d124      	bne.n	8006034 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fec:	f000 fc46 	bl	800687c <prvIsQueueFull>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d018      	beq.n	8006028 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	3310      	adds	r3, #16
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 f8e8 	bl	80071d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006006:	f000 fbd1 	bl	80067ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800600a:	f000 ff17 	bl	8006e3c <xTaskResumeAll>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	f47f af7c 	bne.w	8005f0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006016:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <xQueueGenericSend+0x1f8>)
 8006018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	e772      	b.n	8005f0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800602a:	f000 fbbf 	bl	80067ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800602e:	f000 ff05 	bl	8006e3c <xTaskResumeAll>
 8006032:	e76c      	b.n	8005f0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006036:	f000 fbb9 	bl	80067ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800603a:	f000 feff 	bl	8006e3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800603e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006040:	4618      	mov	r0, r3
 8006042:	3738      	adds	r7, #56	; 0x38
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	e000ed04 	.word	0xe000ed04

0800604c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b090      	sub	sp, #64	; 0x40
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800605e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10a      	bne.n	800607a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006076:	bf00      	nop
 8006078:	e7fe      	b.n	8006078 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d103      	bne.n	8006088 <xQueueGenericSendFromISR+0x3c>
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <xQueueGenericSendFromISR+0x40>
 8006088:	2301      	movs	r3, #1
 800608a:	e000      	b.n	800608e <xQueueGenericSendFromISR+0x42>
 800608c:	2300      	movs	r3, #0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10a      	bne.n	80060a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060a4:	bf00      	nop
 80060a6:	e7fe      	b.n	80060a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d103      	bne.n	80060b6 <xQueueGenericSendFromISR+0x6a>
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d101      	bne.n	80060ba <xQueueGenericSendFromISR+0x6e>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <xQueueGenericSendFromISR+0x70>
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	623b      	str	r3, [r7, #32]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060d6:	f002 faaf 	bl	8008638 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060da:	f3ef 8211 	mrs	r2, BASEPRI
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	61fa      	str	r2, [r7, #28]
 80060f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80060f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fe:	429a      	cmp	r2, r3
 8006100:	d302      	bcc.n	8006108 <xQueueGenericSendFromISR+0xbc>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b02      	cmp	r3, #2
 8006106:	d12f      	bne.n	8006168 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800610e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800611e:	f000 fab5 	bl	800668c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006122:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612a:	d112      	bne.n	8006152 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800612c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	2b00      	cmp	r3, #0
 8006132:	d016      	beq.n	8006162 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006136:	3324      	adds	r3, #36	; 0x24
 8006138:	4618      	mov	r0, r3
 800613a:	f001 f8d7 	bl	80072ec <xTaskRemoveFromEventList>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00e      	beq.n	8006162 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00b      	beq.n	8006162 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	e007      	b.n	8006162 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006152:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006156:	3301      	adds	r3, #1
 8006158:	b2db      	uxtb	r3, r3
 800615a:	b25a      	sxtb	r2, r3
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006162:	2301      	movs	r3, #1
 8006164:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006166:	e001      	b.n	800616c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006168:	2300      	movs	r3, #0
 800616a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800616c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006176:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800617a:	4618      	mov	r0, r3
 800617c:	3740      	adds	r7, #64	; 0x40
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08c      	sub	sp, #48	; 0x30
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006190:	2300      	movs	r3, #0
 8006192:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10a      	bne.n	80061b4 <xQueueReceive+0x30>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	623b      	str	r3, [r7, #32]
}
 80061b0:	bf00      	nop
 80061b2:	e7fe      	b.n	80061b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d103      	bne.n	80061c2 <xQueueReceive+0x3e>
 80061ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <xQueueReceive+0x42>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e000      	b.n	80061c8 <xQueueReceive+0x44>
 80061c6:	2300      	movs	r3, #0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10a      	bne.n	80061e2 <xQueueReceive+0x5e>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	61fb      	str	r3, [r7, #28]
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061e2:	f001 fab7 	bl	8007754 <xTaskGetSchedulerState>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d102      	bne.n	80061f2 <xQueueReceive+0x6e>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <xQueueReceive+0x72>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <xQueueReceive+0x74>
 80061f6:	2300      	movs	r3, #0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10a      	bne.n	8006212 <xQueueReceive+0x8e>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	61bb      	str	r3, [r7, #24]
}
 800620e:	bf00      	nop
 8006210:	e7fe      	b.n	8006210 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006212:	f002 f92f 	bl	8008474 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01f      	beq.n	8006262 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006222:	68b9      	ldr	r1, [r7, #8]
 8006224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006226:	f000 fa9b 	bl	8006760 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	1e5a      	subs	r2, r3, #1
 800622e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006230:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00f      	beq.n	800625a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800623a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623c:	3310      	adds	r3, #16
 800623e:	4618      	mov	r0, r3
 8006240:	f001 f854 	bl	80072ec <xTaskRemoveFromEventList>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d007      	beq.n	800625a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800624a:	4b3d      	ldr	r3, [pc, #244]	; (8006340 <xQueueReceive+0x1bc>)
 800624c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800625a:	f002 f93b 	bl	80084d4 <vPortExitCritical>
				return pdPASS;
 800625e:	2301      	movs	r3, #1
 8006260:	e069      	b.n	8006336 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d103      	bne.n	8006270 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006268:	f002 f934 	bl	80084d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800626c:	2300      	movs	r3, #0
 800626e:	e062      	b.n	8006336 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006272:	2b00      	cmp	r3, #0
 8006274:	d106      	bne.n	8006284 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006276:	f107 0310 	add.w	r3, r7, #16
 800627a:	4618      	mov	r0, r3
 800627c:	f001 f8fc 	bl	8007478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006280:	2301      	movs	r3, #1
 8006282:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006284:	f002 f926 	bl	80084d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006288:	f000 fdca 	bl	8006e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800628c:	f002 f8f2 	bl	8008474 <vPortEnterCritical>
 8006290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006292:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006296:	b25b      	sxtb	r3, r3
 8006298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629c:	d103      	bne.n	80062a6 <xQueueReceive+0x122>
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ac:	b25b      	sxtb	r3, r3
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	d103      	bne.n	80062bc <xQueueReceive+0x138>
 80062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062bc:	f002 f90a 	bl	80084d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062c0:	1d3a      	adds	r2, r7, #4
 80062c2:	f107 0310 	add.w	r3, r7, #16
 80062c6:	4611      	mov	r1, r2
 80062c8:	4618      	mov	r0, r3
 80062ca:	f001 f8eb 	bl	80074a4 <xTaskCheckForTimeOut>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d123      	bne.n	800631c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062d6:	f000 fabb 	bl	8006850 <prvIsQueueEmpty>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d017      	beq.n	8006310 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	3324      	adds	r3, #36	; 0x24
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	4611      	mov	r1, r2
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 ff73 	bl	80071d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062f0:	f000 fa5c 	bl	80067ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062f4:	f000 fda2 	bl	8006e3c <xTaskResumeAll>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d189      	bne.n	8006212 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80062fe:	4b10      	ldr	r3, [pc, #64]	; (8006340 <xQueueReceive+0x1bc>)
 8006300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	e780      	b.n	8006212 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006312:	f000 fa4b 	bl	80067ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006316:	f000 fd91 	bl	8006e3c <xTaskResumeAll>
 800631a:	e77a      	b.n	8006212 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800631c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800631e:	f000 fa45 	bl	80067ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006322:	f000 fd8b 	bl	8006e3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006328:	f000 fa92 	bl	8006850 <prvIsQueueEmpty>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	f43f af6f 	beq.w	8006212 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006334:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006336:	4618      	mov	r0, r3
 8006338:	3730      	adds	r7, #48	; 0x30
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	e000ed04 	.word	0xe000ed04

08006344 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08e      	sub	sp, #56	; 0x38
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800634e:	2300      	movs	r3, #0
 8006350:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006356:	2300      	movs	r3, #0
 8006358:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800635a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10a      	bne.n	8006376 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	623b      	str	r3, [r7, #32]
}
 8006372:	bf00      	nop
 8006374:	e7fe      	b.n	8006374 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	61fb      	str	r3, [r7, #28]
}
 8006390:	bf00      	nop
 8006392:	e7fe      	b.n	8006392 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006394:	f001 f9de 	bl	8007754 <xTaskGetSchedulerState>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d102      	bne.n	80063a4 <xQueueSemaphoreTake+0x60>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <xQueueSemaphoreTake+0x64>
 80063a4:	2301      	movs	r3, #1
 80063a6:	e000      	b.n	80063aa <xQueueSemaphoreTake+0x66>
 80063a8:	2300      	movs	r3, #0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10a      	bne.n	80063c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	61bb      	str	r3, [r7, #24]
}
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063c4:	f002 f856 	bl	8008474 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d024      	beq.n	800641e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	1e5a      	subs	r2, r3, #1
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d104      	bne.n	80063ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80063e4:	f001 fb44 	bl	8007a70 <pvTaskIncrementMutexHeldCount>
 80063e8:	4602      	mov	r2, r0
 80063ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00f      	beq.n	8006416 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f8:	3310      	adds	r3, #16
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 ff76 	bl	80072ec <xTaskRemoveFromEventList>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d007      	beq.n	8006416 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006406:	4b54      	ldr	r3, [pc, #336]	; (8006558 <xQueueSemaphoreTake+0x214>)
 8006408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006416:	f002 f85d 	bl	80084d4 <vPortExitCritical>
				return pdPASS;
 800641a:	2301      	movs	r3, #1
 800641c:	e097      	b.n	800654e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d111      	bne.n	8006448 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	617b      	str	r3, [r7, #20]
}
 800643c:	bf00      	nop
 800643e:	e7fe      	b.n	800643e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006440:	f002 f848 	bl	80084d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006444:	2300      	movs	r3, #0
 8006446:	e082      	b.n	800654e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800644e:	f107 030c 	add.w	r3, r7, #12
 8006452:	4618      	mov	r0, r3
 8006454:	f001 f810 	bl	8007478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006458:	2301      	movs	r3, #1
 800645a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800645c:	f002 f83a 	bl	80084d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006460:	f000 fcde 	bl	8006e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006464:	f002 f806 	bl	8008474 <vPortEnterCritical>
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800646e:	b25b      	sxtb	r3, r3
 8006470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006474:	d103      	bne.n	800647e <xQueueSemaphoreTake+0x13a>
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006484:	b25b      	sxtb	r3, r3
 8006486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648a:	d103      	bne.n	8006494 <xQueueSemaphoreTake+0x150>
 800648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006494:	f002 f81e 	bl	80084d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006498:	463a      	mov	r2, r7
 800649a:	f107 030c 	add.w	r3, r7, #12
 800649e:	4611      	mov	r1, r2
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 ffff 	bl	80074a4 <xTaskCheckForTimeOut>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d132      	bne.n	8006512 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064ae:	f000 f9cf 	bl	8006850 <prvIsQueueEmpty>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d026      	beq.n	8006506 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d109      	bne.n	80064d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80064c0:	f001 ffd8 	bl	8008474 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f001 f961 	bl	8007790 <xTaskPriorityInherit>
 80064ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80064d0:	f002 f800 	bl	80084d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d6:	3324      	adds	r3, #36	; 0x24
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	4611      	mov	r1, r2
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 fe79 	bl	80071d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064e4:	f000 f962 	bl	80067ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064e8:	f000 fca8 	bl	8006e3c <xTaskResumeAll>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f47f af68 	bne.w	80063c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80064f4:	4b18      	ldr	r3, [pc, #96]	; (8006558 <xQueueSemaphoreTake+0x214>)
 80064f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	e75e      	b.n	80063c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006508:	f000 f950 	bl	80067ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800650c:	f000 fc96 	bl	8006e3c <xTaskResumeAll>
 8006510:	e758      	b.n	80063c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006514:	f000 f94a 	bl	80067ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006518:	f000 fc90 	bl	8006e3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800651c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800651e:	f000 f997 	bl	8006850 <prvIsQueueEmpty>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	f43f af4d 	beq.w	80063c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00d      	beq.n	800654c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006530:	f001 ffa0 	bl	8008474 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006536:	f000 f891 	bl	800665c <prvGetDisinheritPriorityAfterTimeout>
 800653a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800653c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006542:	4618      	mov	r0, r3
 8006544:	f001 f9fa 	bl	800793c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006548:	f001 ffc4 	bl	80084d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800654c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800654e:	4618      	mov	r0, r3
 8006550:	3738      	adds	r7, #56	; 0x38
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	e000ed04 	.word	0xe000ed04

0800655c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08e      	sub	sp, #56	; 0x38
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10a      	bne.n	8006588 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	623b      	str	r3, [r7, #32]
}
 8006584:	bf00      	nop
 8006586:	e7fe      	b.n	8006586 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d103      	bne.n	8006596 <xQueueReceiveFromISR+0x3a>
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <xQueueReceiveFromISR+0x3e>
 8006596:	2301      	movs	r3, #1
 8006598:	e000      	b.n	800659c <xQueueReceiveFromISR+0x40>
 800659a:	2300      	movs	r3, #0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10a      	bne.n	80065b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	61fb      	str	r3, [r7, #28]
}
 80065b2:	bf00      	nop
 80065b4:	e7fe      	b.n	80065b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065b6:	f002 f83f 	bl	8008638 <vPortValidateInterruptPriority>
	__asm volatile
 80065ba:	f3ef 8211 	mrs	r2, BASEPRI
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	61ba      	str	r2, [r7, #24]
 80065d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80065d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d02f      	beq.n	8006642 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065ec:	68b9      	ldr	r1, [r7, #8]
 80065ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065f0:	f000 f8b6 	bl	8006760 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	1e5a      	subs	r2, r3, #1
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80065fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006604:	d112      	bne.n	800662c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d016      	beq.n	800663c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	3310      	adds	r3, #16
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fe6a 	bl	80072ec <xTaskRemoveFromEventList>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00e      	beq.n	800663c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00b      	beq.n	800663c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	e007      	b.n	800663c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800662c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006630:	3301      	adds	r3, #1
 8006632:	b2db      	uxtb	r3, r3
 8006634:	b25a      	sxtb	r2, r3
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800663c:	2301      	movs	r3, #1
 800663e:	637b      	str	r3, [r7, #52]	; 0x34
 8006640:	e001      	b.n	8006646 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006642:	2300      	movs	r3, #0
 8006644:	637b      	str	r3, [r7, #52]	; 0x34
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	613b      	str	r3, [r7, #16]
	__asm volatile
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	f383 8811 	msr	BASEPRI, r3
}
 8006650:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006654:	4618      	mov	r0, r3
 8006656:	3738      	adds	r7, #56	; 0x38
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	2b00      	cmp	r3, #0
 800666a:	d006      	beq.n	800667a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	e001      	b.n	800667e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800667a:	2300      	movs	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800667e:	68fb      	ldr	r3, [r7, #12]
	}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006698:	2300      	movs	r3, #0
 800669a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10d      	bne.n	80066c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d14d      	bne.n	800674e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f001 f8d2 	bl	8007860 <xTaskPriorityDisinherit>
 80066bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	609a      	str	r2, [r3, #8]
 80066c4:	e043      	b.n	800674e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d119      	bne.n	8006700 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6858      	ldr	r0, [r3, #4]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d4:	461a      	mov	r2, r3
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	f002 fa04 	bl	8008ae4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	441a      	add	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d32b      	bcc.n	800674e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	605a      	str	r2, [r3, #4]
 80066fe:	e026      	b.n	800674e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	68d8      	ldr	r0, [r3, #12]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006708:	461a      	mov	r2, r3
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	f002 f9ea 	bl	8008ae4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	425b      	negs	r3, r3
 800671a:	441a      	add	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	429a      	cmp	r2, r3
 800672a:	d207      	bcs.n	800673c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006734:	425b      	negs	r3, r3
 8006736:	441a      	add	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b02      	cmp	r3, #2
 8006740:	d105      	bne.n	800674e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	3b01      	subs	r3, #1
 800674c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006756:	697b      	ldr	r3, [r7, #20]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	2b00      	cmp	r3, #0
 8006770:	d018      	beq.n	80067a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	441a      	add	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	429a      	cmp	r2, r3
 800678a:	d303      	bcc.n	8006794 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68d9      	ldr	r1, [r3, #12]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679c:	461a      	mov	r2, r3
 800679e:	6838      	ldr	r0, [r7, #0]
 80067a0:	f002 f9a0 	bl	8008ae4 <memcpy>
	}
}
 80067a4:	bf00      	nop
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067b4:	f001 fe5e 	bl	8008474 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067c0:	e011      	b.n	80067e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d012      	beq.n	80067f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3324      	adds	r3, #36	; 0x24
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fd8c 	bl	80072ec <xTaskRemoveFromEventList>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067da:	f000 fec5 	bl	8007568 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067de:	7bfb      	ldrb	r3, [r7, #15]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	dce9      	bgt.n	80067c2 <prvUnlockQueue+0x16>
 80067ee:	e000      	b.n	80067f2 <prvUnlockQueue+0x46>
					break;
 80067f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	22ff      	movs	r2, #255	; 0xff
 80067f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067fa:	f001 fe6b 	bl	80084d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067fe:	f001 fe39 	bl	8008474 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006808:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800680a:	e011      	b.n	8006830 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d012      	beq.n	800683a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3310      	adds	r3, #16
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fd67 	bl	80072ec <xTaskRemoveFromEventList>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006824:	f000 fea0 	bl	8007568 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006828:	7bbb      	ldrb	r3, [r7, #14]
 800682a:	3b01      	subs	r3, #1
 800682c:	b2db      	uxtb	r3, r3
 800682e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006830:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006834:	2b00      	cmp	r3, #0
 8006836:	dce9      	bgt.n	800680c <prvUnlockQueue+0x60>
 8006838:	e000      	b.n	800683c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800683a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	22ff      	movs	r2, #255	; 0xff
 8006840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006844:	f001 fe46 	bl	80084d4 <vPortExitCritical>
}
 8006848:	bf00      	nop
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006858:	f001 fe0c 	bl	8008474 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	2b00      	cmp	r3, #0
 8006862:	d102      	bne.n	800686a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006864:	2301      	movs	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	e001      	b.n	800686e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800686e:	f001 fe31 	bl	80084d4 <vPortExitCritical>

	return xReturn;
 8006872:	68fb      	ldr	r3, [r7, #12]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006884:	f001 fdf6 	bl	8008474 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006890:	429a      	cmp	r2, r3
 8006892:	d102      	bne.n	800689a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006894:	2301      	movs	r3, #1
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	e001      	b.n	800689e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800689a:	2300      	movs	r3, #0
 800689c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800689e:	f001 fe19 	bl	80084d4 <vPortExitCritical>

	return xReturn;
 80068a2:	68fb      	ldr	r3, [r7, #12]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068b6:	2300      	movs	r3, #0
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	e014      	b.n	80068e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068bc:	4a0f      	ldr	r2, [pc, #60]	; (80068fc <vQueueAddToRegistry+0x50>)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10b      	bne.n	80068e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068c8:	490c      	ldr	r1, [pc, #48]	; (80068fc <vQueueAddToRegistry+0x50>)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068d2:	4a0a      	ldr	r2, [pc, #40]	; (80068fc <vQueueAddToRegistry+0x50>)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	4413      	add	r3, r2
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068de:	e006      	b.n	80068ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3301      	adds	r3, #1
 80068e4:	60fb      	str	r3, [r7, #12]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b07      	cmp	r3, #7
 80068ea:	d9e7      	bls.n	80068bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068ec:	bf00      	nop
 80068ee:	bf00      	nop
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	20004cdc 	.word	0x20004cdc

08006900 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006910:	f001 fdb0 	bl	8008474 <vPortEnterCritical>
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800691a:	b25b      	sxtb	r3, r3
 800691c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006920:	d103      	bne.n	800692a <vQueueWaitForMessageRestricted+0x2a>
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006930:	b25b      	sxtb	r3, r3
 8006932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006936:	d103      	bne.n	8006940 <vQueueWaitForMessageRestricted+0x40>
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006940:	f001 fdc8 	bl	80084d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	2b00      	cmp	r3, #0
 800694a:	d106      	bne.n	800695a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	3324      	adds	r3, #36	; 0x24
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fc9d 	bl	8007294 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800695a:	6978      	ldr	r0, [r7, #20]
 800695c:	f7ff ff26 	bl	80067ac <prvUnlockQueue>
	}
 8006960:	bf00      	nop
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08e      	sub	sp, #56	; 0x38
 800696c:	af04      	add	r7, sp, #16
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10a      	bne.n	8006992 <xTaskCreateStatic+0x2a>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	623b      	str	r3, [r7, #32]
}
 800698e:	bf00      	nop
 8006990:	e7fe      	b.n	8006990 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10a      	bne.n	80069ae <xTaskCreateStatic+0x46>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	61fb      	str	r3, [r7, #28]
}
 80069aa:	bf00      	nop
 80069ac:	e7fe      	b.n	80069ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069ae:	23bc      	movs	r3, #188	; 0xbc
 80069b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2bbc      	cmp	r3, #188	; 0xbc
 80069b6:	d00a      	beq.n	80069ce <xTaskCreateStatic+0x66>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	61bb      	str	r3, [r7, #24]
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d01e      	beq.n	8006a14 <xTaskCreateStatic+0xac>
 80069d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d01b      	beq.n	8006a14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	2202      	movs	r2, #2
 80069ea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069ee:	2300      	movs	r3, #0
 80069f0:	9303      	str	r3, [sp, #12]
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	9302      	str	r3, [sp, #8]
 80069f6:	f107 0314 	add.w	r3, r7, #20
 80069fa:	9301      	str	r3, [sp, #4]
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	68b9      	ldr	r1, [r7, #8]
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 f850 	bl	8006aac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a0e:	f000 f8f3 	bl	8006bf8 <prvAddNewTaskToReadyList>
 8006a12:	e001      	b.n	8006a18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a14:	2300      	movs	r3, #0
 8006a16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a18:	697b      	ldr	r3, [r7, #20]
	}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3728      	adds	r7, #40	; 0x28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b08c      	sub	sp, #48	; 0x30
 8006a26:	af04      	add	r7, sp, #16
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	603b      	str	r3, [r7, #0]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a32:	88fb      	ldrh	r3, [r7, #6]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4618      	mov	r0, r3
 8006a38:	f001 fe3e 	bl	80086b8 <pvPortMalloc>
 8006a3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00e      	beq.n	8006a62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a44:	20bc      	movs	r0, #188	; 0xbc
 8006a46:	f001 fe37 	bl	80086b8 <pvPortMalloc>
 8006a4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	631a      	str	r2, [r3, #48]	; 0x30
 8006a58:	e005      	b.n	8006a66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a5a:	6978      	ldr	r0, [r7, #20]
 8006a5c:	f001 fef8 	bl	8008850 <vPortFree>
 8006a60:	e001      	b.n	8006a66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a62:	2300      	movs	r3, #0
 8006a64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d017      	beq.n	8006a9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a74:	88fa      	ldrh	r2, [r7, #6]
 8006a76:	2300      	movs	r3, #0
 8006a78:	9303      	str	r3, [sp, #12]
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	9302      	str	r3, [sp, #8]
 8006a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 f80e 	bl	8006aac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a90:	69f8      	ldr	r0, [r7, #28]
 8006a92:	f000 f8b1 	bl	8006bf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a96:	2301      	movs	r3, #1
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	e002      	b.n	8006aa2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006aa2:	69bb      	ldr	r3, [r7, #24]
	}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3720      	adds	r7, #32
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
 8006ab8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	21a5      	movs	r1, #165	; 0xa5
 8006ac6:	f002 f81b 	bl	8008b00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4413      	add	r3, r2
 8006ada:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	f023 0307 	bic.w	r3, r3, #7
 8006ae2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	617b      	str	r3, [r7, #20]
}
 8006b00:	bf00      	nop
 8006b02:	e7fe      	b.n	8006b02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d01f      	beq.n	8006b4a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61fb      	str	r3, [r7, #28]
 8006b0e:	e012      	b.n	8006b36 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	4413      	add	r3, r2
 8006b16:	7819      	ldrb	r1, [r3, #0]
 8006b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	3334      	adds	r3, #52	; 0x34
 8006b20:	460a      	mov	r2, r1
 8006b22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	4413      	add	r3, r2
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d006      	beq.n	8006b3e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	3301      	adds	r3, #1
 8006b34:	61fb      	str	r3, [r7, #28]
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	2b0f      	cmp	r3, #15
 8006b3a:	d9e9      	bls.n	8006b10 <prvInitialiseNewTask+0x64>
 8006b3c:	e000      	b.n	8006b40 <prvInitialiseNewTask+0x94>
			{
				break;
 8006b3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b48:	e003      	b.n	8006b52 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	2b37      	cmp	r3, #55	; 0x37
 8006b56:	d901      	bls.n	8006b5c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b58:	2337      	movs	r3, #55	; 0x37
 8006b5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	3304      	adds	r3, #4
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fee4 	bl	8005940 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7a:	3318      	adds	r3, #24
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe fedf 	bl	8005940 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	3354      	adds	r3, #84	; 0x54
 8006bac:	2260      	movs	r2, #96	; 0x60
 8006bae:	2100      	movs	r1, #0
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f001 ffa5 	bl	8008b00 <memset>
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	4a0c      	ldr	r2, [pc, #48]	; (8006bec <prvInitialiseNewTask+0x140>)
 8006bba:	659a      	str	r2, [r3, #88]	; 0x58
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	4a0c      	ldr	r2, [pc, #48]	; (8006bf0 <prvInitialiseNewTask+0x144>)
 8006bc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	4a0b      	ldr	r2, [pc, #44]	; (8006bf4 <prvInitialiseNewTask+0x148>)
 8006bc6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	68f9      	ldr	r1, [r7, #12]
 8006bcc:	69b8      	ldr	r0, [r7, #24]
 8006bce:	f001 fb25 	bl	800821c <pxPortInitialiseStack>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006be4:	bf00      	nop
 8006be6:	3720      	adds	r7, #32
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	08009818 	.word	0x08009818
 8006bf0:	08009838 	.word	0x08009838
 8006bf4:	080097f8 	.word	0x080097f8

08006bf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c00:	f001 fc38 	bl	8008474 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c04:	4b2d      	ldr	r3, [pc, #180]	; (8006cbc <prvAddNewTaskToReadyList+0xc4>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	4a2c      	ldr	r2, [pc, #176]	; (8006cbc <prvAddNewTaskToReadyList+0xc4>)
 8006c0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c0e:	4b2c      	ldr	r3, [pc, #176]	; (8006cc0 <prvAddNewTaskToReadyList+0xc8>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d109      	bne.n	8006c2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c16:	4a2a      	ldr	r2, [pc, #168]	; (8006cc0 <prvAddNewTaskToReadyList+0xc8>)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c1c:	4b27      	ldr	r3, [pc, #156]	; (8006cbc <prvAddNewTaskToReadyList+0xc4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d110      	bne.n	8006c46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c24:	f000 fcc4 	bl	80075b0 <prvInitialiseTaskLists>
 8006c28:	e00d      	b.n	8006c46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c2a:	4b26      	ldr	r3, [pc, #152]	; (8006cc4 <prvAddNewTaskToReadyList+0xcc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c32:	4b23      	ldr	r3, [pc, #140]	; (8006cc0 <prvAddNewTaskToReadyList+0xc8>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d802      	bhi.n	8006c46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c40:	4a1f      	ldr	r2, [pc, #124]	; (8006cc0 <prvAddNewTaskToReadyList+0xc8>)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c46:	4b20      	ldr	r3, [pc, #128]	; (8006cc8 <prvAddNewTaskToReadyList+0xd0>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	4a1e      	ldr	r2, [pc, #120]	; (8006cc8 <prvAddNewTaskToReadyList+0xd0>)
 8006c4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c50:	4b1d      	ldr	r3, [pc, #116]	; (8006cc8 <prvAddNewTaskToReadyList+0xd0>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ccc <prvAddNewTaskToReadyList+0xd4>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d903      	bls.n	8006c6c <prvAddNewTaskToReadyList+0x74>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	4a18      	ldr	r2, [pc, #96]	; (8006ccc <prvAddNewTaskToReadyList+0xd4>)
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4a15      	ldr	r2, [pc, #84]	; (8006cd0 <prvAddNewTaskToReadyList+0xd8>)
 8006c7a:	441a      	add	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	3304      	adds	r3, #4
 8006c80:	4619      	mov	r1, r3
 8006c82:	4610      	mov	r0, r2
 8006c84:	f7fe fe69 	bl	800595a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c88:	f001 fc24 	bl	80084d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c8c:	4b0d      	ldr	r3, [pc, #52]	; (8006cc4 <prvAddNewTaskToReadyList+0xcc>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00e      	beq.n	8006cb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c94:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <prvAddNewTaskToReadyList+0xc8>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d207      	bcs.n	8006cb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ca2:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <prvAddNewTaskToReadyList+0xdc>)
 8006ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cb2:	bf00      	nop
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20000cfc 	.word	0x20000cfc
 8006cc0:	20000828 	.word	0x20000828
 8006cc4:	20000d08 	.word	0x20000d08
 8006cc8:	20000d18 	.word	0x20000d18
 8006ccc:	20000d04 	.word	0x20000d04
 8006cd0:	2000082c 	.word	0x2000082c
 8006cd4:	e000ed04 	.word	0xe000ed04

08006cd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d017      	beq.n	8006d1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cea:	4b13      	ldr	r3, [pc, #76]	; (8006d38 <vTaskDelay+0x60>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00a      	beq.n	8006d08 <vTaskDelay+0x30>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	60bb      	str	r3, [r7, #8]
}
 8006d04:	bf00      	nop
 8006d06:	e7fe      	b.n	8006d06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d08:	f000 f88a 	bl	8006e20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fec2 	bl	8007a98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d14:	f000 f892 	bl	8006e3c <xTaskResumeAll>
 8006d18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d107      	bne.n	8006d30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d20:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <vTaskDelay+0x64>)
 8006d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	20000d24 	.word	0x20000d24
 8006d3c:	e000ed04 	.word	0xe000ed04

08006d40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b08a      	sub	sp, #40	; 0x28
 8006d44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d4e:	463a      	mov	r2, r7
 8006d50:	1d39      	adds	r1, r7, #4
 8006d52:	f107 0308 	add.w	r3, r7, #8
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fe fbb0 	bl	80054bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	9202      	str	r2, [sp, #8]
 8006d64:	9301      	str	r3, [sp, #4]
 8006d66:	2300      	movs	r3, #0
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	460a      	mov	r2, r1
 8006d6e:	4924      	ldr	r1, [pc, #144]	; (8006e00 <vTaskStartScheduler+0xc0>)
 8006d70:	4824      	ldr	r0, [pc, #144]	; (8006e04 <vTaskStartScheduler+0xc4>)
 8006d72:	f7ff fdf9 	bl	8006968 <xTaskCreateStatic>
 8006d76:	4603      	mov	r3, r0
 8006d78:	4a23      	ldr	r2, [pc, #140]	; (8006e08 <vTaskStartScheduler+0xc8>)
 8006d7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d7c:	4b22      	ldr	r3, [pc, #136]	; (8006e08 <vTaskStartScheduler+0xc8>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d84:	2301      	movs	r3, #1
 8006d86:	617b      	str	r3, [r7, #20]
 8006d88:	e001      	b.n	8006d8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d102      	bne.n	8006d9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d94:	f000 fed4 	bl	8007b40 <xTimerCreateTimerTask>
 8006d98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d11b      	bne.n	8006dd8 <vTaskStartScheduler+0x98>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	613b      	str	r3, [r7, #16]
}
 8006db2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006db4:	4b15      	ldr	r3, [pc, #84]	; (8006e0c <vTaskStartScheduler+0xcc>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3354      	adds	r3, #84	; 0x54
 8006dba:	4a15      	ldr	r2, [pc, #84]	; (8006e10 <vTaskStartScheduler+0xd0>)
 8006dbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dbe:	4b15      	ldr	r3, [pc, #84]	; (8006e14 <vTaskStartScheduler+0xd4>)
 8006dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006dc6:	4b14      	ldr	r3, [pc, #80]	; (8006e18 <vTaskStartScheduler+0xd8>)
 8006dc8:	2201      	movs	r2, #1
 8006dca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006dcc:	4b13      	ldr	r3, [pc, #76]	; (8006e1c <vTaskStartScheduler+0xdc>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dd2:	f001 faad 	bl	8008330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dd6:	e00e      	b.n	8006df6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dde:	d10a      	bne.n	8006df6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	60fb      	str	r3, [r7, #12]
}
 8006df2:	bf00      	nop
 8006df4:	e7fe      	b.n	8006df4 <vTaskStartScheduler+0xb4>
}
 8006df6:	bf00      	nop
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	08009680 	.word	0x08009680
 8006e04:	08007581 	.word	0x08007581
 8006e08:	20000d20 	.word	0x20000d20
 8006e0c:	20000828 	.word	0x20000828
 8006e10:	20000018 	.word	0x20000018
 8006e14:	20000d1c 	.word	0x20000d1c
 8006e18:	20000d08 	.word	0x20000d08
 8006e1c:	20000d00 	.word	0x20000d00

08006e20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e24:	4b04      	ldr	r3, [pc, #16]	; (8006e38 <vTaskSuspendAll+0x18>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	4a03      	ldr	r2, [pc, #12]	; (8006e38 <vTaskSuspendAll+0x18>)
 8006e2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e2e:	bf00      	nop
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	20000d24 	.word	0x20000d24

08006e3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e46:	2300      	movs	r3, #0
 8006e48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e4a:	4b42      	ldr	r3, [pc, #264]	; (8006f54 <xTaskResumeAll+0x118>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10a      	bne.n	8006e68 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	603b      	str	r3, [r7, #0]
}
 8006e64:	bf00      	nop
 8006e66:	e7fe      	b.n	8006e66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e68:	f001 fb04 	bl	8008474 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e6c:	4b39      	ldr	r3, [pc, #228]	; (8006f54 <xTaskResumeAll+0x118>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	4a38      	ldr	r2, [pc, #224]	; (8006f54 <xTaskResumeAll+0x118>)
 8006e74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e76:	4b37      	ldr	r3, [pc, #220]	; (8006f54 <xTaskResumeAll+0x118>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d162      	bne.n	8006f44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e7e:	4b36      	ldr	r3, [pc, #216]	; (8006f58 <xTaskResumeAll+0x11c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d05e      	beq.n	8006f44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e86:	e02f      	b.n	8006ee8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e88:	4b34      	ldr	r3, [pc, #208]	; (8006f5c <xTaskResumeAll+0x120>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3318      	adds	r3, #24
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7fe fdbd 	bl	8005a14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe fdb8 	bl	8005a14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea8:	4b2d      	ldr	r3, [pc, #180]	; (8006f60 <xTaskResumeAll+0x124>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d903      	bls.n	8006eb8 <xTaskResumeAll+0x7c>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	4a2a      	ldr	r2, [pc, #168]	; (8006f60 <xTaskResumeAll+0x124>)
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4a27      	ldr	r2, [pc, #156]	; (8006f64 <xTaskResumeAll+0x128>)
 8006ec6:	441a      	add	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f7fe fd43 	bl	800595a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed8:	4b23      	ldr	r3, [pc, #140]	; (8006f68 <xTaskResumeAll+0x12c>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d302      	bcc.n	8006ee8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ee2:	4b22      	ldr	r3, [pc, #136]	; (8006f6c <xTaskResumeAll+0x130>)
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ee8:	4b1c      	ldr	r3, [pc, #112]	; (8006f5c <xTaskResumeAll+0x120>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1cb      	bne.n	8006e88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ef6:	f000 fbfd 	bl	80076f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006efa:	4b1d      	ldr	r3, [pc, #116]	; (8006f70 <xTaskResumeAll+0x134>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d010      	beq.n	8006f28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f06:	f000 f847 	bl	8006f98 <xTaskIncrementTick>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f10:	4b16      	ldr	r3, [pc, #88]	; (8006f6c <xTaskResumeAll+0x130>)
 8006f12:	2201      	movs	r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f1      	bne.n	8006f06 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f22:	4b13      	ldr	r3, [pc, #76]	; (8006f70 <xTaskResumeAll+0x134>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f28:	4b10      	ldr	r3, [pc, #64]	; (8006f6c <xTaskResumeAll+0x130>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d009      	beq.n	8006f44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f30:	2301      	movs	r3, #1
 8006f32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f34:	4b0f      	ldr	r3, [pc, #60]	; (8006f74 <xTaskResumeAll+0x138>)
 8006f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f44:	f001 fac6 	bl	80084d4 <vPortExitCritical>

	return xAlreadyYielded;
 8006f48:	68bb      	ldr	r3, [r7, #8]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20000d24 	.word	0x20000d24
 8006f58:	20000cfc 	.word	0x20000cfc
 8006f5c:	20000cbc 	.word	0x20000cbc
 8006f60:	20000d04 	.word	0x20000d04
 8006f64:	2000082c 	.word	0x2000082c
 8006f68:	20000828 	.word	0x20000828
 8006f6c:	20000d10 	.word	0x20000d10
 8006f70:	20000d0c 	.word	0x20000d0c
 8006f74:	e000ed04 	.word	0xe000ed04

08006f78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f7e:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <xTaskGetTickCount+0x1c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f84:	687b      	ldr	r3, [r7, #4]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	20000d00 	.word	0x20000d00

08006f98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fa2:	4b4f      	ldr	r3, [pc, #316]	; (80070e0 <xTaskIncrementTick+0x148>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f040 808f 	bne.w	80070ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fac:	4b4d      	ldr	r3, [pc, #308]	; (80070e4 <xTaskIncrementTick+0x14c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fb4:	4a4b      	ldr	r2, [pc, #300]	; (80070e4 <xTaskIncrementTick+0x14c>)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d120      	bne.n	8007002 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fc0:	4b49      	ldr	r3, [pc, #292]	; (80070e8 <xTaskIncrementTick+0x150>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <xTaskIncrementTick+0x48>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	603b      	str	r3, [r7, #0]
}
 8006fdc:	bf00      	nop
 8006fde:	e7fe      	b.n	8006fde <xTaskIncrementTick+0x46>
 8006fe0:	4b41      	ldr	r3, [pc, #260]	; (80070e8 <xTaskIncrementTick+0x150>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	60fb      	str	r3, [r7, #12]
 8006fe6:	4b41      	ldr	r3, [pc, #260]	; (80070ec <xTaskIncrementTick+0x154>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a3f      	ldr	r2, [pc, #252]	; (80070e8 <xTaskIncrementTick+0x150>)
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	4a3f      	ldr	r2, [pc, #252]	; (80070ec <xTaskIncrementTick+0x154>)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6013      	str	r3, [r2, #0]
 8006ff4:	4b3e      	ldr	r3, [pc, #248]	; (80070f0 <xTaskIncrementTick+0x158>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	4a3d      	ldr	r2, [pc, #244]	; (80070f0 <xTaskIncrementTick+0x158>)
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	f000 fb79 	bl	80076f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007002:	4b3c      	ldr	r3, [pc, #240]	; (80070f4 <xTaskIncrementTick+0x15c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	429a      	cmp	r2, r3
 800700a:	d349      	bcc.n	80070a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800700c:	4b36      	ldr	r3, [pc, #216]	; (80070e8 <xTaskIncrementTick+0x150>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d104      	bne.n	8007020 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007016:	4b37      	ldr	r3, [pc, #220]	; (80070f4 <xTaskIncrementTick+0x15c>)
 8007018:	f04f 32ff 	mov.w	r2, #4294967295
 800701c:	601a      	str	r2, [r3, #0]
					break;
 800701e:	e03f      	b.n	80070a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007020:	4b31      	ldr	r3, [pc, #196]	; (80070e8 <xTaskIncrementTick+0x150>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	429a      	cmp	r2, r3
 8007036:	d203      	bcs.n	8007040 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007038:	4a2e      	ldr	r2, [pc, #184]	; (80070f4 <xTaskIncrementTick+0x15c>)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800703e:	e02f      	b.n	80070a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	3304      	adds	r3, #4
 8007044:	4618      	mov	r0, r3
 8007046:	f7fe fce5 	bl	8005a14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704e:	2b00      	cmp	r3, #0
 8007050:	d004      	beq.n	800705c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	3318      	adds	r3, #24
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fcdc 	bl	8005a14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007060:	4b25      	ldr	r3, [pc, #148]	; (80070f8 <xTaskIncrementTick+0x160>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d903      	bls.n	8007070 <xTaskIncrementTick+0xd8>
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	4a22      	ldr	r2, [pc, #136]	; (80070f8 <xTaskIncrementTick+0x160>)
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4a1f      	ldr	r2, [pc, #124]	; (80070fc <xTaskIncrementTick+0x164>)
 800707e:	441a      	add	r2, r3
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f7fe fc67 	bl	800595a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007090:	4b1b      	ldr	r3, [pc, #108]	; (8007100 <xTaskIncrementTick+0x168>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	429a      	cmp	r2, r3
 8007098:	d3b8      	bcc.n	800700c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800709a:	2301      	movs	r3, #1
 800709c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800709e:	e7b5      	b.n	800700c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070a0:	4b17      	ldr	r3, [pc, #92]	; (8007100 <xTaskIncrementTick+0x168>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a6:	4915      	ldr	r1, [pc, #84]	; (80070fc <xTaskIncrementTick+0x164>)
 80070a8:	4613      	mov	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	440b      	add	r3, r1
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d901      	bls.n	80070bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80070b8:	2301      	movs	r3, #1
 80070ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070bc:	4b11      	ldr	r3, [pc, #68]	; (8007104 <xTaskIncrementTick+0x16c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d007      	beq.n	80070d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80070c4:	2301      	movs	r3, #1
 80070c6:	617b      	str	r3, [r7, #20]
 80070c8:	e004      	b.n	80070d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070ca:	4b0f      	ldr	r3, [pc, #60]	; (8007108 <xTaskIncrementTick+0x170>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3301      	adds	r3, #1
 80070d0:	4a0d      	ldr	r2, [pc, #52]	; (8007108 <xTaskIncrementTick+0x170>)
 80070d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070d4:	697b      	ldr	r3, [r7, #20]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000d24 	.word	0x20000d24
 80070e4:	20000d00 	.word	0x20000d00
 80070e8:	20000cb4 	.word	0x20000cb4
 80070ec:	20000cb8 	.word	0x20000cb8
 80070f0:	20000d14 	.word	0x20000d14
 80070f4:	20000d1c 	.word	0x20000d1c
 80070f8:	20000d04 	.word	0x20000d04
 80070fc:	2000082c 	.word	0x2000082c
 8007100:	20000828 	.word	0x20000828
 8007104:	20000d10 	.word	0x20000d10
 8007108:	20000d0c 	.word	0x20000d0c

0800710c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007112:	4b2a      	ldr	r3, [pc, #168]	; (80071bc <vTaskSwitchContext+0xb0>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800711a:	4b29      	ldr	r3, [pc, #164]	; (80071c0 <vTaskSwitchContext+0xb4>)
 800711c:	2201      	movs	r2, #1
 800711e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007120:	e046      	b.n	80071b0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007122:	4b27      	ldr	r3, [pc, #156]	; (80071c0 <vTaskSwitchContext+0xb4>)
 8007124:	2200      	movs	r2, #0
 8007126:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007128:	4b26      	ldr	r3, [pc, #152]	; (80071c4 <vTaskSwitchContext+0xb8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	60fb      	str	r3, [r7, #12]
 800712e:	e010      	b.n	8007152 <vTaskSwitchContext+0x46>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10a      	bne.n	800714c <vTaskSwitchContext+0x40>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	607b      	str	r3, [r7, #4]
}
 8007148:	bf00      	nop
 800714a:	e7fe      	b.n	800714a <vTaskSwitchContext+0x3e>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3b01      	subs	r3, #1
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	491d      	ldr	r1, [pc, #116]	; (80071c8 <vTaskSwitchContext+0xbc>)
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4613      	mov	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	440b      	add	r3, r1
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0e4      	beq.n	8007130 <vTaskSwitchContext+0x24>
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4a15      	ldr	r2, [pc, #84]	; (80071c8 <vTaskSwitchContext+0xbc>)
 8007172:	4413      	add	r3, r2
 8007174:	60bb      	str	r3, [r7, #8]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	605a      	str	r2, [r3, #4]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	3308      	adds	r3, #8
 8007188:	429a      	cmp	r2, r3
 800718a:	d104      	bne.n	8007196 <vTaskSwitchContext+0x8a>
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	605a      	str	r2, [r3, #4]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	4a0b      	ldr	r2, [pc, #44]	; (80071cc <vTaskSwitchContext+0xc0>)
 800719e:	6013      	str	r3, [r2, #0]
 80071a0:	4a08      	ldr	r2, [pc, #32]	; (80071c4 <vTaskSwitchContext+0xb8>)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071a6:	4b09      	ldr	r3, [pc, #36]	; (80071cc <vTaskSwitchContext+0xc0>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3354      	adds	r3, #84	; 0x54
 80071ac:	4a08      	ldr	r2, [pc, #32]	; (80071d0 <vTaskSwitchContext+0xc4>)
 80071ae:	6013      	str	r3, [r2, #0]
}
 80071b0:	bf00      	nop
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	20000d24 	.word	0x20000d24
 80071c0:	20000d10 	.word	0x20000d10
 80071c4:	20000d04 	.word	0x20000d04
 80071c8:	2000082c 	.word	0x2000082c
 80071cc:	20000828 	.word	0x20000828
 80071d0:	20000018 	.word	0x20000018

080071d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10a      	bne.n	80071fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	60fb      	str	r3, [r7, #12]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071fa:	4b07      	ldr	r3, [pc, #28]	; (8007218 <vTaskPlaceOnEventList+0x44>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3318      	adds	r3, #24
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fe fbcd 	bl	80059a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007208:	2101      	movs	r1, #1
 800720a:	6838      	ldr	r0, [r7, #0]
 800720c:	f000 fc44 	bl	8007a98 <prvAddCurrentTaskToDelayedList>
}
 8007210:	bf00      	nop
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	20000828 	.word	0x20000828

0800721c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10a      	bne.n	8007244 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	617b      	str	r3, [r7, #20]
}
 8007240:	bf00      	nop
 8007242:	e7fe      	b.n	8007242 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007244:	4b11      	ldr	r3, [pc, #68]	; (800728c <vTaskPlaceOnUnorderedEventList+0x70>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10a      	bne.n	8007262 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	613b      	str	r3, [r7, #16]
}
 800725e:	bf00      	nop
 8007260:	e7fe      	b.n	8007260 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007262:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <vTaskPlaceOnUnorderedEventList+0x74>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800726c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800726e:	4b08      	ldr	r3, [pc, #32]	; (8007290 <vTaskPlaceOnUnorderedEventList+0x74>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3318      	adds	r3, #24
 8007274:	4619      	mov	r1, r3
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f7fe fb6f 	bl	800595a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800727c:	2101      	movs	r1, #1
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fc0a 	bl	8007a98 <prvAddCurrentTaskToDelayedList>
}
 8007284:	bf00      	nop
 8007286:	3718      	adds	r7, #24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20000d24 	.word	0x20000d24
 8007290:	20000828 	.word	0x20000828

08007294 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10a      	bne.n	80072bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	617b      	str	r3, [r7, #20]
}
 80072b8:	bf00      	nop
 80072ba:	e7fe      	b.n	80072ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3318      	adds	r3, #24
 80072c2:	4619      	mov	r1, r3
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f7fe fb48 	bl	800595a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80072d0:	f04f 33ff 	mov.w	r3, #4294967295
 80072d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	68b8      	ldr	r0, [r7, #8]
 80072da:	f000 fbdd 	bl	8007a98 <prvAddCurrentTaskToDelayedList>
	}
 80072de:	bf00      	nop
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	20000828 	.word	0x20000828

080072ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10a      	bne.n	8007318 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	60fb      	str	r3, [r7, #12]
}
 8007314:	bf00      	nop
 8007316:	e7fe      	b.n	8007316 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	3318      	adds	r3, #24
 800731c:	4618      	mov	r0, r3
 800731e:	f7fe fb79 	bl	8005a14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007322:	4b1e      	ldr	r3, [pc, #120]	; (800739c <xTaskRemoveFromEventList+0xb0>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d11d      	bne.n	8007366 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	3304      	adds	r3, #4
 800732e:	4618      	mov	r0, r3
 8007330:	f7fe fb70 	bl	8005a14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007338:	4b19      	ldr	r3, [pc, #100]	; (80073a0 <xTaskRemoveFromEventList+0xb4>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	429a      	cmp	r2, r3
 800733e:	d903      	bls.n	8007348 <xTaskRemoveFromEventList+0x5c>
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007344:	4a16      	ldr	r2, [pc, #88]	; (80073a0 <xTaskRemoveFromEventList+0xb4>)
 8007346:	6013      	str	r3, [r2, #0]
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734c:	4613      	mov	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4a13      	ldr	r2, [pc, #76]	; (80073a4 <xTaskRemoveFromEventList+0xb8>)
 8007356:	441a      	add	r2, r3
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	3304      	adds	r3, #4
 800735c:	4619      	mov	r1, r3
 800735e:	4610      	mov	r0, r2
 8007360:	f7fe fafb 	bl	800595a <vListInsertEnd>
 8007364:	e005      	b.n	8007372 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	3318      	adds	r3, #24
 800736a:	4619      	mov	r1, r3
 800736c:	480e      	ldr	r0, [pc, #56]	; (80073a8 <xTaskRemoveFromEventList+0xbc>)
 800736e:	f7fe faf4 	bl	800595a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007376:	4b0d      	ldr	r3, [pc, #52]	; (80073ac <xTaskRemoveFromEventList+0xc0>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	429a      	cmp	r2, r3
 800737e:	d905      	bls.n	800738c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007380:	2301      	movs	r3, #1
 8007382:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007384:	4b0a      	ldr	r3, [pc, #40]	; (80073b0 <xTaskRemoveFromEventList+0xc4>)
 8007386:	2201      	movs	r2, #1
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	e001      	b.n	8007390 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800738c:	2300      	movs	r3, #0
 800738e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007390:	697b      	ldr	r3, [r7, #20]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000d24 	.word	0x20000d24
 80073a0:	20000d04 	.word	0x20000d04
 80073a4:	2000082c 	.word	0x2000082c
 80073a8:	20000cbc 	.word	0x20000cbc
 80073ac:	20000828 	.word	0x20000828
 80073b0:	20000d10 	.word	0x20000d10

080073b4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80073be:	4b29      	ldr	r3, [pc, #164]	; (8007464 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10a      	bne.n	80073dc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	613b      	str	r3, [r7, #16]
}
 80073d8:	bf00      	nop
 80073da:	e7fe      	b.n	80073da <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10a      	bne.n	8007408 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	60fb      	str	r3, [r7, #12]
}
 8007404:	bf00      	nop
 8007406:	e7fe      	b.n	8007406 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7fe fb03 	bl	8005a14 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	3304      	adds	r3, #4
 8007412:	4618      	mov	r0, r3
 8007414:	f7fe fafe 	bl	8005a14 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741c:	4b12      	ldr	r3, [pc, #72]	; (8007468 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	429a      	cmp	r2, r3
 8007422:	d903      	bls.n	800742c <vTaskRemoveFromUnorderedEventList+0x78>
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	4a0f      	ldr	r2, [pc, #60]	; (8007468 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007430:	4613      	mov	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4a0c      	ldr	r2, [pc, #48]	; (800746c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800743a:	441a      	add	r2, r3
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	3304      	adds	r3, #4
 8007440:	4619      	mov	r1, r3
 8007442:	4610      	mov	r0, r2
 8007444:	f7fe fa89 	bl	800595a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744c:	4b08      	ldr	r3, [pc, #32]	; (8007470 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007452:	429a      	cmp	r2, r3
 8007454:	d902      	bls.n	800745c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007456:	4b07      	ldr	r3, [pc, #28]	; (8007474 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007458:	2201      	movs	r2, #1
 800745a:	601a      	str	r2, [r3, #0]
	}
}
 800745c:	bf00      	nop
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	20000d24 	.word	0x20000d24
 8007468:	20000d04 	.word	0x20000d04
 800746c:	2000082c 	.word	0x2000082c
 8007470:	20000828 	.word	0x20000828
 8007474:	20000d10 	.word	0x20000d10

08007478 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007480:	4b06      	ldr	r3, [pc, #24]	; (800749c <vTaskInternalSetTimeOutState+0x24>)
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007488:	4b05      	ldr	r3, [pc, #20]	; (80074a0 <vTaskInternalSetTimeOutState+0x28>)
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	605a      	str	r2, [r3, #4]
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	20000d14 	.word	0x20000d14
 80074a0:	20000d00 	.word	0x20000d00

080074a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b088      	sub	sp, #32
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10a      	bne.n	80074ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80074b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	613b      	str	r3, [r7, #16]
}
 80074c6:	bf00      	nop
 80074c8:	e7fe      	b.n	80074c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	60fb      	str	r3, [r7, #12]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80074e6:	f000 ffc5 	bl	8008474 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074ea:	4b1d      	ldr	r3, [pc, #116]	; (8007560 <xTaskCheckForTimeOut+0xbc>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007502:	d102      	bne.n	800750a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007504:	2300      	movs	r3, #0
 8007506:	61fb      	str	r3, [r7, #28]
 8007508:	e023      	b.n	8007552 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	4b15      	ldr	r3, [pc, #84]	; (8007564 <xTaskCheckForTimeOut+0xc0>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d007      	beq.n	8007526 <xTaskCheckForTimeOut+0x82>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	69ba      	ldr	r2, [r7, #24]
 800751c:	429a      	cmp	r2, r3
 800751e:	d302      	bcc.n	8007526 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007520:	2301      	movs	r3, #1
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	e015      	b.n	8007552 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	429a      	cmp	r2, r3
 800752e:	d20b      	bcs.n	8007548 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	1ad2      	subs	r2, r2, r3
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff ff9b 	bl	8007478 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007542:	2300      	movs	r3, #0
 8007544:	61fb      	str	r3, [r7, #28]
 8007546:	e004      	b.n	8007552 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2200      	movs	r2, #0
 800754c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800754e:	2301      	movs	r3, #1
 8007550:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007552:	f000 ffbf 	bl	80084d4 <vPortExitCritical>

	return xReturn;
 8007556:	69fb      	ldr	r3, [r7, #28]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3720      	adds	r7, #32
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	20000d00 	.word	0x20000d00
 8007564:	20000d14 	.word	0x20000d14

08007568 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800756c:	4b03      	ldr	r3, [pc, #12]	; (800757c <vTaskMissedYield+0x14>)
 800756e:	2201      	movs	r2, #1
 8007570:	601a      	str	r2, [r3, #0]
}
 8007572:	bf00      	nop
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	20000d10 	.word	0x20000d10

08007580 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007588:	f000 f852 	bl	8007630 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800758c:	4b06      	ldr	r3, [pc, #24]	; (80075a8 <prvIdleTask+0x28>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d9f9      	bls.n	8007588 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007594:	4b05      	ldr	r3, [pc, #20]	; (80075ac <prvIdleTask+0x2c>)
 8007596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075a4:	e7f0      	b.n	8007588 <prvIdleTask+0x8>
 80075a6:	bf00      	nop
 80075a8:	2000082c 	.word	0x2000082c
 80075ac:	e000ed04 	.word	0xe000ed04

080075b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075b6:	2300      	movs	r3, #0
 80075b8:	607b      	str	r3, [r7, #4]
 80075ba:	e00c      	b.n	80075d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4a12      	ldr	r2, [pc, #72]	; (8007610 <prvInitialiseTaskLists+0x60>)
 80075c8:	4413      	add	r3, r2
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe f998 	bl	8005900 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3301      	adds	r3, #1
 80075d4:	607b      	str	r3, [r7, #4]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b37      	cmp	r3, #55	; 0x37
 80075da:	d9ef      	bls.n	80075bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075dc:	480d      	ldr	r0, [pc, #52]	; (8007614 <prvInitialiseTaskLists+0x64>)
 80075de:	f7fe f98f 	bl	8005900 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075e2:	480d      	ldr	r0, [pc, #52]	; (8007618 <prvInitialiseTaskLists+0x68>)
 80075e4:	f7fe f98c 	bl	8005900 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075e8:	480c      	ldr	r0, [pc, #48]	; (800761c <prvInitialiseTaskLists+0x6c>)
 80075ea:	f7fe f989 	bl	8005900 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075ee:	480c      	ldr	r0, [pc, #48]	; (8007620 <prvInitialiseTaskLists+0x70>)
 80075f0:	f7fe f986 	bl	8005900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075f4:	480b      	ldr	r0, [pc, #44]	; (8007624 <prvInitialiseTaskLists+0x74>)
 80075f6:	f7fe f983 	bl	8005900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075fa:	4b0b      	ldr	r3, [pc, #44]	; (8007628 <prvInitialiseTaskLists+0x78>)
 80075fc:	4a05      	ldr	r2, [pc, #20]	; (8007614 <prvInitialiseTaskLists+0x64>)
 80075fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007600:	4b0a      	ldr	r3, [pc, #40]	; (800762c <prvInitialiseTaskLists+0x7c>)
 8007602:	4a05      	ldr	r2, [pc, #20]	; (8007618 <prvInitialiseTaskLists+0x68>)
 8007604:	601a      	str	r2, [r3, #0]
}
 8007606:	bf00      	nop
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	2000082c 	.word	0x2000082c
 8007614:	20000c8c 	.word	0x20000c8c
 8007618:	20000ca0 	.word	0x20000ca0
 800761c:	20000cbc 	.word	0x20000cbc
 8007620:	20000cd0 	.word	0x20000cd0
 8007624:	20000ce8 	.word	0x20000ce8
 8007628:	20000cb4 	.word	0x20000cb4
 800762c:	20000cb8 	.word	0x20000cb8

08007630 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007636:	e019      	b.n	800766c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007638:	f000 ff1c 	bl	8008474 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800763c:	4b10      	ldr	r3, [pc, #64]	; (8007680 <prvCheckTasksWaitingTermination+0x50>)
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	3304      	adds	r3, #4
 8007648:	4618      	mov	r0, r3
 800764a:	f7fe f9e3 	bl	8005a14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800764e:	4b0d      	ldr	r3, [pc, #52]	; (8007684 <prvCheckTasksWaitingTermination+0x54>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3b01      	subs	r3, #1
 8007654:	4a0b      	ldr	r2, [pc, #44]	; (8007684 <prvCheckTasksWaitingTermination+0x54>)
 8007656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007658:	4b0b      	ldr	r3, [pc, #44]	; (8007688 <prvCheckTasksWaitingTermination+0x58>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3b01      	subs	r3, #1
 800765e:	4a0a      	ldr	r2, [pc, #40]	; (8007688 <prvCheckTasksWaitingTermination+0x58>)
 8007660:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007662:	f000 ff37 	bl	80084d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f810 	bl	800768c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800766c:	4b06      	ldr	r3, [pc, #24]	; (8007688 <prvCheckTasksWaitingTermination+0x58>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e1      	bne.n	8007638 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20000cd0 	.word	0x20000cd0
 8007684:	20000cfc 	.word	0x20000cfc
 8007688:	20000ce4 	.word	0x20000ce4

0800768c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	3354      	adds	r3, #84	; 0x54
 8007698:	4618      	mov	r0, r3
 800769a:	f001 faa1 	bl	8008be0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d108      	bne.n	80076ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ac:	4618      	mov	r0, r3
 80076ae:	f001 f8cf 	bl	8008850 <vPortFree>
				vPortFree( pxTCB );
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f001 f8cc 	bl	8008850 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076b8:	e018      	b.n	80076ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d103      	bne.n	80076cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 f8c3 	bl	8008850 <vPortFree>
	}
 80076ca:	e00f      	b.n	80076ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d00a      	beq.n	80076ec <prvDeleteTCB+0x60>
	__asm volatile
 80076d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	60fb      	str	r3, [r7, #12]
}
 80076e8:	bf00      	nop
 80076ea:	e7fe      	b.n	80076ea <prvDeleteTCB+0x5e>
	}
 80076ec:	bf00      	nop
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076fa:	4b0c      	ldr	r3, [pc, #48]	; (800772c <prvResetNextTaskUnblockTime+0x38>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d104      	bne.n	800770e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007704:	4b0a      	ldr	r3, [pc, #40]	; (8007730 <prvResetNextTaskUnblockTime+0x3c>)
 8007706:	f04f 32ff 	mov.w	r2, #4294967295
 800770a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800770c:	e008      	b.n	8007720 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800770e:	4b07      	ldr	r3, [pc, #28]	; (800772c <prvResetNextTaskUnblockTime+0x38>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	4a04      	ldr	r2, [pc, #16]	; (8007730 <prvResetNextTaskUnblockTime+0x3c>)
 800771e:	6013      	str	r3, [r2, #0]
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	20000cb4 	.word	0x20000cb4
 8007730:	20000d1c 	.word	0x20000d1c

08007734 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800773a:	4b05      	ldr	r3, [pc, #20]	; (8007750 <xTaskGetCurrentTaskHandle+0x1c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007740:	687b      	ldr	r3, [r7, #4]
	}
 8007742:	4618      	mov	r0, r3
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	20000828 	.word	0x20000828

08007754 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800775a:	4b0b      	ldr	r3, [pc, #44]	; (8007788 <xTaskGetSchedulerState+0x34>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d102      	bne.n	8007768 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007762:	2301      	movs	r3, #1
 8007764:	607b      	str	r3, [r7, #4]
 8007766:	e008      	b.n	800777a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007768:	4b08      	ldr	r3, [pc, #32]	; (800778c <xTaskGetSchedulerState+0x38>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d102      	bne.n	8007776 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007770:	2302      	movs	r3, #2
 8007772:	607b      	str	r3, [r7, #4]
 8007774:	e001      	b.n	800777a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007776:	2300      	movs	r3, #0
 8007778:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800777a:	687b      	ldr	r3, [r7, #4]
	}
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	20000d08 	.word	0x20000d08
 800778c:	20000d24 	.word	0x20000d24

08007790 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800779c:	2300      	movs	r3, #0
 800779e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d051      	beq.n	800784a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077aa:	4b2a      	ldr	r3, [pc, #168]	; (8007854 <xTaskPriorityInherit+0xc4>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d241      	bcs.n	8007838 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	db06      	blt.n	80077ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077bc:	4b25      	ldr	r3, [pc, #148]	; (8007854 <xTaskPriorityInherit+0xc4>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	6959      	ldr	r1, [r3, #20]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d2:	4613      	mov	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4a1f      	ldr	r2, [pc, #124]	; (8007858 <xTaskPriorityInherit+0xc8>)
 80077dc:	4413      	add	r3, r2
 80077de:	4299      	cmp	r1, r3
 80077e0:	d122      	bne.n	8007828 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	3304      	adds	r3, #4
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fe f914 	bl	8005a14 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80077ec:	4b19      	ldr	r3, [pc, #100]	; (8007854 <xTaskPriorityInherit+0xc4>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fa:	4b18      	ldr	r3, [pc, #96]	; (800785c <xTaskPriorityInherit+0xcc>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d903      	bls.n	800780a <xTaskPriorityInherit+0x7a>
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007806:	4a15      	ldr	r2, [pc, #84]	; (800785c <xTaskPriorityInherit+0xcc>)
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780e:	4613      	mov	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4a10      	ldr	r2, [pc, #64]	; (8007858 <xTaskPriorityInherit+0xc8>)
 8007818:	441a      	add	r2, r3
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	3304      	adds	r3, #4
 800781e:	4619      	mov	r1, r3
 8007820:	4610      	mov	r0, r2
 8007822:	f7fe f89a 	bl	800595a <vListInsertEnd>
 8007826:	e004      	b.n	8007832 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007828:	4b0a      	ldr	r3, [pc, #40]	; (8007854 <xTaskPriorityInherit+0xc4>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007832:	2301      	movs	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]
 8007836:	e008      	b.n	800784a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800783c:	4b05      	ldr	r3, [pc, #20]	; (8007854 <xTaskPriorityInherit+0xc4>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	429a      	cmp	r2, r3
 8007844:	d201      	bcs.n	800784a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007846:	2301      	movs	r3, #1
 8007848:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800784a:	68fb      	ldr	r3, [r7, #12]
	}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	20000828 	.word	0x20000828
 8007858:	2000082c 	.word	0x2000082c
 800785c:	20000d04 	.word	0x20000d04

08007860 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800786c:	2300      	movs	r3, #0
 800786e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d056      	beq.n	8007924 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007876:	4b2e      	ldr	r3, [pc, #184]	; (8007930 <xTaskPriorityDisinherit+0xd0>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	429a      	cmp	r2, r3
 800787e:	d00a      	beq.n	8007896 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	60fb      	str	r3, [r7, #12]
}
 8007892:	bf00      	nop
 8007894:	e7fe      	b.n	8007894 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10a      	bne.n	80078b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800789e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	60bb      	str	r3, [r7, #8]
}
 80078b0:	bf00      	nop
 80078b2:	e7fe      	b.n	80078b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078b8:	1e5a      	subs	r2, r3, #1
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d02c      	beq.n	8007924 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d128      	bne.n	8007924 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fe f89c 	bl	8005a14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f4:	4b0f      	ldr	r3, [pc, #60]	; (8007934 <xTaskPriorityDisinherit+0xd4>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d903      	bls.n	8007904 <xTaskPriorityDisinherit+0xa4>
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007900:	4a0c      	ldr	r2, [pc, #48]	; (8007934 <xTaskPriorityDisinherit+0xd4>)
 8007902:	6013      	str	r3, [r2, #0]
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007908:	4613      	mov	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4a09      	ldr	r2, [pc, #36]	; (8007938 <xTaskPriorityDisinherit+0xd8>)
 8007912:	441a      	add	r2, r3
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	3304      	adds	r3, #4
 8007918:	4619      	mov	r1, r3
 800791a:	4610      	mov	r0, r2
 800791c:	f7fe f81d 	bl	800595a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007920:	2301      	movs	r3, #1
 8007922:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007924:	697b      	ldr	r3, [r7, #20]
	}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	20000828 	.word	0x20000828
 8007934:	20000d04 	.word	0x20000d04
 8007938:	2000082c 	.word	0x2000082c

0800793c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800793c:	b580      	push	{r7, lr}
 800793e:	b088      	sub	sp, #32
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800794a:	2301      	movs	r3, #1
 800794c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d06a      	beq.n	8007a2a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10a      	bne.n	8007972 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	60fb      	str	r3, [r7, #12]
}
 800796e:	bf00      	nop
 8007970:	e7fe      	b.n	8007970 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	429a      	cmp	r2, r3
 800797a:	d902      	bls.n	8007982 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	61fb      	str	r3, [r7, #28]
 8007980:	e002      	b.n	8007988 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007986:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798c:	69fa      	ldr	r2, [r7, #28]
 800798e:	429a      	cmp	r2, r3
 8007990:	d04b      	beq.n	8007a2a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	429a      	cmp	r2, r3
 800799a:	d146      	bne.n	8007a2a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800799c:	4b25      	ldr	r3, [pc, #148]	; (8007a34 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d10a      	bne.n	80079bc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	60bb      	str	r3, [r7, #8]
}
 80079b8:	bf00      	nop
 80079ba:	e7fe      	b.n	80079ba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	69fa      	ldr	r2, [r7, #28]
 80079c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	db04      	blt.n	80079da <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	6959      	ldr	r1, [r3, #20]
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	4613      	mov	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4a13      	ldr	r2, [pc, #76]	; (8007a38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80079ea:	4413      	add	r3, r2
 80079ec:	4299      	cmp	r1, r3
 80079ee:	d11c      	bne.n	8007a2a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fe f80d 	bl	8005a14 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fe:	4b0f      	ldr	r3, [pc, #60]	; (8007a3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d903      	bls.n	8007a0e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0a:	4a0c      	ldr	r2, [pc, #48]	; (8007a3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4a07      	ldr	r2, [pc, #28]	; (8007a38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007a1c:	441a      	add	r2, r3
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	3304      	adds	r3, #4
 8007a22:	4619      	mov	r1, r3
 8007a24:	4610      	mov	r0, r2
 8007a26:	f7fd ff98 	bl	800595a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a2a:	bf00      	nop
 8007a2c:	3720      	adds	r7, #32
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	20000828 	.word	0x20000828
 8007a38:	2000082c 	.word	0x2000082c
 8007a3c:	20000d04 	.word	0x20000d04

08007a40 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007a46:	4b09      	ldr	r3, [pc, #36]	; (8007a6c <uxTaskResetEventItemValue+0x2c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a4e:	4b07      	ldr	r3, [pc, #28]	; (8007a6c <uxTaskResetEventItemValue+0x2c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a54:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <uxTaskResetEventItemValue+0x2c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007a5c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007a5e:	687b      	ldr	r3, [r7, #4]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	20000828 	.word	0x20000828

08007a70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007a70:	b480      	push	{r7}
 8007a72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007a74:	4b07      	ldr	r3, [pc, #28]	; (8007a94 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d004      	beq.n	8007a86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a7c:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a82:	3201      	adds	r2, #1
 8007a84:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007a86:	4b03      	ldr	r3, [pc, #12]	; (8007a94 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a88:	681b      	ldr	r3, [r3, #0]
	}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr
 8007a94:	20000828 	.word	0x20000828

08007a98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007aa2:	4b21      	ldr	r3, [pc, #132]	; (8007b28 <prvAddCurrentTaskToDelayedList+0x90>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007aa8:	4b20      	ldr	r3, [pc, #128]	; (8007b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3304      	adds	r3, #4
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fd ffb0 	bl	8005a14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aba:	d10a      	bne.n	8007ad2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d007      	beq.n	8007ad2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ac2:	4b1a      	ldr	r3, [pc, #104]	; (8007b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	4619      	mov	r1, r3
 8007aca:	4819      	ldr	r0, [pc, #100]	; (8007b30 <prvAddCurrentTaskToDelayedList+0x98>)
 8007acc:	f7fd ff45 	bl	800595a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ad0:	e026      	b.n	8007b20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ada:	4b14      	ldr	r3, [pc, #80]	; (8007b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d209      	bcs.n	8007afe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aea:	4b12      	ldr	r3, [pc, #72]	; (8007b34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	4b0f      	ldr	r3, [pc, #60]	; (8007b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3304      	adds	r3, #4
 8007af4:	4619      	mov	r1, r3
 8007af6:	4610      	mov	r0, r2
 8007af8:	f7fd ff53 	bl	80059a2 <vListInsert>
}
 8007afc:	e010      	b.n	8007b20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007afe:	4b0e      	ldr	r3, [pc, #56]	; (8007b38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	4b0a      	ldr	r3, [pc, #40]	; (8007b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3304      	adds	r3, #4
 8007b08:	4619      	mov	r1, r3
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	f7fd ff49 	bl	80059a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b10:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d202      	bcs.n	8007b20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007b1a:	4a08      	ldr	r2, [pc, #32]	; (8007b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	6013      	str	r3, [r2, #0]
}
 8007b20:	bf00      	nop
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	20000d00 	.word	0x20000d00
 8007b2c:	20000828 	.word	0x20000828
 8007b30:	20000ce8 	.word	0x20000ce8
 8007b34:	20000cb8 	.word	0x20000cb8
 8007b38:	20000cb4 	.word	0x20000cb4
 8007b3c:	20000d1c 	.word	0x20000d1c

08007b40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08a      	sub	sp, #40	; 0x28
 8007b44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b46:	2300      	movs	r3, #0
 8007b48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b4a:	f000 fb07 	bl	800815c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b4e:	4b1c      	ldr	r3, [pc, #112]	; (8007bc0 <xTimerCreateTimerTask+0x80>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d021      	beq.n	8007b9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b5e:	1d3a      	adds	r2, r7, #4
 8007b60:	f107 0108 	add.w	r1, r7, #8
 8007b64:	f107 030c 	add.w	r3, r7, #12
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7fd fcc1 	bl	80054f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b6e:	6879      	ldr	r1, [r7, #4]
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	9202      	str	r2, [sp, #8]
 8007b76:	9301      	str	r3, [sp, #4]
 8007b78:	2302      	movs	r3, #2
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	460a      	mov	r2, r1
 8007b80:	4910      	ldr	r1, [pc, #64]	; (8007bc4 <xTimerCreateTimerTask+0x84>)
 8007b82:	4811      	ldr	r0, [pc, #68]	; (8007bc8 <xTimerCreateTimerTask+0x88>)
 8007b84:	f7fe fef0 	bl	8006968 <xTaskCreateStatic>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	4a10      	ldr	r2, [pc, #64]	; (8007bcc <xTimerCreateTimerTask+0x8c>)
 8007b8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b8e:	4b0f      	ldr	r3, [pc, #60]	; (8007bcc <xTimerCreateTimerTask+0x8c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b96:	2301      	movs	r3, #1
 8007b98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	613b      	str	r3, [r7, #16]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007bb6:	697b      	ldr	r3, [r7, #20]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	20000d58 	.word	0x20000d58
 8007bc4:	08009688 	.word	0x08009688
 8007bc8:	08007d05 	.word	0x08007d05
 8007bcc:	20000d5c 	.word	0x20000d5c

08007bd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08a      	sub	sp, #40	; 0x28
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10a      	bne.n	8007bfe <xTimerGenericCommand+0x2e>
	__asm volatile
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	623b      	str	r3, [r7, #32]
}
 8007bfa:	bf00      	nop
 8007bfc:	e7fe      	b.n	8007bfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007bfe:	4b1a      	ldr	r3, [pc, #104]	; (8007c68 <xTimerGenericCommand+0x98>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d02a      	beq.n	8007c5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b05      	cmp	r3, #5
 8007c16:	dc18      	bgt.n	8007c4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c18:	f7ff fd9c 	bl	8007754 <xTaskGetSchedulerState>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d109      	bne.n	8007c36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c22:	4b11      	ldr	r3, [pc, #68]	; (8007c68 <xTimerGenericCommand+0x98>)
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	f107 0110 	add.w	r1, r7, #16
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c2e:	f7fe f90f 	bl	8005e50 <xQueueGenericSend>
 8007c32:	6278      	str	r0, [r7, #36]	; 0x24
 8007c34:	e012      	b.n	8007c5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c36:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <xTimerGenericCommand+0x98>)
 8007c38:	6818      	ldr	r0, [r3, #0]
 8007c3a:	f107 0110 	add.w	r1, r7, #16
 8007c3e:	2300      	movs	r3, #0
 8007c40:	2200      	movs	r2, #0
 8007c42:	f7fe f905 	bl	8005e50 <xQueueGenericSend>
 8007c46:	6278      	str	r0, [r7, #36]	; 0x24
 8007c48:	e008      	b.n	8007c5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c4a:	4b07      	ldr	r3, [pc, #28]	; (8007c68 <xTimerGenericCommand+0x98>)
 8007c4c:	6818      	ldr	r0, [r3, #0]
 8007c4e:	f107 0110 	add.w	r1, r7, #16
 8007c52:	2300      	movs	r3, #0
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	f7fe f9f9 	bl	800604c <xQueueGenericSendFromISR>
 8007c5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3728      	adds	r7, #40	; 0x28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	20000d58 	.word	0x20000d58

08007c6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b088      	sub	sp, #32
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c76:	4b22      	ldr	r3, [pc, #136]	; (8007d00 <prvProcessExpiredTimer+0x94>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	3304      	adds	r3, #4
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fd fec5 	bl	8005a14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d022      	beq.n	8007cde <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	699a      	ldr	r2, [r3, #24]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	18d1      	adds	r1, r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	6978      	ldr	r0, [r7, #20]
 8007ca6:	f000 f8d1 	bl	8007e4c <prvInsertTimerInActiveList>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d01f      	beq.n	8007cf0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	2100      	movs	r1, #0
 8007cba:	6978      	ldr	r0, [r7, #20]
 8007cbc:	f7ff ff88 	bl	8007bd0 <xTimerGenericCommand>
 8007cc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d113      	bne.n	8007cf0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	60fb      	str	r3, [r7, #12]
}
 8007cda:	bf00      	nop
 8007cdc:	e7fe      	b.n	8007cdc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ce4:	f023 0301 	bic.w	r3, r3, #1
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
 8007cf4:	6978      	ldr	r0, [r7, #20]
 8007cf6:	4798      	blx	r3
}
 8007cf8:	bf00      	nop
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	20000d50 	.word	0x20000d50

08007d04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d0c:	f107 0308 	add.w	r3, r7, #8
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 f857 	bl	8007dc4 <prvGetNextExpireTime>
 8007d16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 f803 	bl	8007d28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d22:	f000 f8d5 	bl	8007ed0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d26:	e7f1      	b.n	8007d0c <prvTimerTask+0x8>

08007d28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d32:	f7ff f875 	bl	8006e20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d36:	f107 0308 	add.w	r3, r7, #8
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 f866 	bl	8007e0c <prvSampleTimeNow>
 8007d40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d130      	bne.n	8007daa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10a      	bne.n	8007d64 <prvProcessTimerOrBlockTask+0x3c>
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d806      	bhi.n	8007d64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d56:	f7ff f871 	bl	8006e3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d5a:	68f9      	ldr	r1, [r7, #12]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7ff ff85 	bl	8007c6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d62:	e024      	b.n	8007dae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d008      	beq.n	8007d7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d6a:	4b13      	ldr	r3, [pc, #76]	; (8007db8 <prvProcessTimerOrBlockTask+0x90>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <prvProcessTimerOrBlockTask+0x50>
 8007d74:	2301      	movs	r3, #1
 8007d76:	e000      	b.n	8007d7a <prvProcessTimerOrBlockTask+0x52>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d7c:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <prvProcessTimerOrBlockTask+0x94>)
 8007d7e:	6818      	ldr	r0, [r3, #0]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	f7fe fdb9 	bl	8006900 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d8e:	f7ff f855 	bl	8006e3c <xTaskResumeAll>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10a      	bne.n	8007dae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d98:	4b09      	ldr	r3, [pc, #36]	; (8007dc0 <prvProcessTimerOrBlockTask+0x98>)
 8007d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	f3bf 8f6f 	isb	sy
}
 8007da8:	e001      	b.n	8007dae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007daa:	f7ff f847 	bl	8006e3c <xTaskResumeAll>
}
 8007dae:	bf00      	nop
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20000d54 	.word	0x20000d54
 8007dbc:	20000d58 	.word	0x20000d58
 8007dc0:	e000ed04 	.word	0xe000ed04

08007dc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007dcc:	4b0e      	ldr	r3, [pc, #56]	; (8007e08 <prvGetNextExpireTime+0x44>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <prvGetNextExpireTime+0x16>
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	e000      	b.n	8007ddc <prvGetNextExpireTime+0x18>
 8007dda:	2200      	movs	r2, #0
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d105      	bne.n	8007df4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007de8:	4b07      	ldr	r3, [pc, #28]	; (8007e08 <prvGetNextExpireTime+0x44>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	e001      	b.n	8007df8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007df8:	68fb      	ldr	r3, [r7, #12]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	20000d50 	.word	0x20000d50

08007e0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e14:	f7ff f8b0 	bl	8006f78 <xTaskGetTickCount>
 8007e18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e1a:	4b0b      	ldr	r3, [pc, #44]	; (8007e48 <prvSampleTimeNow+0x3c>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d205      	bcs.n	8007e30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e24:	f000 f936 	bl	8008094 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	e002      	b.n	8007e36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e36:	4a04      	ldr	r2, [pc, #16]	; (8007e48 <prvSampleTimeNow+0x3c>)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000d60 	.word	0x20000d60

08007e4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
 8007e58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d812      	bhi.n	8007e98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	1ad2      	subs	r2, r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d302      	bcc.n	8007e86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e80:	2301      	movs	r3, #1
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	e01b      	b.n	8007ebe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e86:	4b10      	ldr	r3, [pc, #64]	; (8007ec8 <prvInsertTimerInActiveList+0x7c>)
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	4619      	mov	r1, r3
 8007e90:	4610      	mov	r0, r2
 8007e92:	f7fd fd86 	bl	80059a2 <vListInsert>
 8007e96:	e012      	b.n	8007ebe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d206      	bcs.n	8007eae <prvInsertTimerInActiveList+0x62>
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d302      	bcc.n	8007eae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	617b      	str	r3, [r7, #20]
 8007eac:	e007      	b.n	8007ebe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007eae:	4b07      	ldr	r3, [pc, #28]	; (8007ecc <prvInsertTimerInActiveList+0x80>)
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	4610      	mov	r0, r2
 8007eba:	f7fd fd72 	bl	80059a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ebe:	697b      	ldr	r3, [r7, #20]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	20000d54 	.word	0x20000d54
 8007ecc:	20000d50 	.word	0x20000d50

08007ed0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b08e      	sub	sp, #56	; 0x38
 8007ed4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ed6:	e0ca      	b.n	800806e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	da18      	bge.n	8007f10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ede:	1d3b      	adds	r3, r7, #4
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d10a      	bne.n	8007f00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	61fb      	str	r3, [r7, #28]
}
 8007efc:	bf00      	nop
 8007efe:	e7fe      	b.n	8007efe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f06:	6850      	ldr	r0, [r2, #4]
 8007f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f0a:	6892      	ldr	r2, [r2, #8]
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f2c0 80aa 	blt.w	800806c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d004      	beq.n	8007f2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f26:	3304      	adds	r3, #4
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fd fd73 	bl	8005a14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f2e:	463b      	mov	r3, r7
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7ff ff6b 	bl	8007e0c <prvSampleTimeNow>
 8007f36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b09      	cmp	r3, #9
 8007f3c:	f200 8097 	bhi.w	800806e <prvProcessReceivedCommands+0x19e>
 8007f40:	a201      	add	r2, pc, #4	; (adr r2, 8007f48 <prvProcessReceivedCommands+0x78>)
 8007f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f46:	bf00      	nop
 8007f48:	08007f71 	.word	0x08007f71
 8007f4c:	08007f71 	.word	0x08007f71
 8007f50:	08007f71 	.word	0x08007f71
 8007f54:	08007fe5 	.word	0x08007fe5
 8007f58:	08007ff9 	.word	0x08007ff9
 8007f5c:	08008043 	.word	0x08008043
 8007f60:	08007f71 	.word	0x08007f71
 8007f64:	08007f71 	.word	0x08007f71
 8007f68:	08007fe5 	.word	0x08007fe5
 8007f6c:	08007ff9 	.word	0x08007ff9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f76:	f043 0301 	orr.w	r3, r3, #1
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	18d1      	adds	r1, r2, r3
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f90:	f7ff ff5c 	bl	8007e4c <prvInsertTimerInActiveList>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d069      	beq.n	800806e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fa0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d05e      	beq.n	800806e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	441a      	add	r2, r3
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fc2:	f7ff fe05 	bl	8007bd0 <xTimerGenericCommand>
 8007fc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d14f      	bne.n	800806e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	61bb      	str	r3, [r7, #24]
}
 8007fe0:	bf00      	nop
 8007fe2:	e7fe      	b.n	8007fe2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fea:	f023 0301 	bic.w	r3, r3, #1
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007ff6:	e03a      	b.n	800806e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ffe:	f043 0301 	orr.w	r3, r3, #1
 8008002:	b2da      	uxtb	r2, r3
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10a      	bne.n	800802e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	617b      	str	r3, [r7, #20]
}
 800802a:	bf00      	nop
 800802c:	e7fe      	b.n	800802c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800802e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008030:	699a      	ldr	r2, [r3, #24]
 8008032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008034:	18d1      	adds	r1, r2, r3
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800803a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800803c:	f7ff ff06 	bl	8007e4c <prvInsertTimerInActiveList>
					break;
 8008040:	e015      	b.n	800806e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d103      	bne.n	8008058 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008052:	f000 fbfd 	bl	8008850 <vPortFree>
 8008056:	e00a      	b.n	800806e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800805e:	f023 0301 	bic.w	r3, r3, #1
 8008062:	b2da      	uxtb	r2, r3
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800806a:	e000      	b.n	800806e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800806c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800806e:	4b08      	ldr	r3, [pc, #32]	; (8008090 <prvProcessReceivedCommands+0x1c0>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	1d39      	adds	r1, r7, #4
 8008074:	2200      	movs	r2, #0
 8008076:	4618      	mov	r0, r3
 8008078:	f7fe f884 	bl	8006184 <xQueueReceive>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	f47f af2a 	bne.w	8007ed8 <prvProcessReceivedCommands+0x8>
	}
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop
 8008088:	3730      	adds	r7, #48	; 0x30
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	20000d58 	.word	0x20000d58

08008094 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b088      	sub	sp, #32
 8008098:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800809a:	e048      	b.n	800812e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800809c:	4b2d      	ldr	r3, [pc, #180]	; (8008154 <prvSwitchTimerLists+0xc0>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a6:	4b2b      	ldr	r3, [pc, #172]	; (8008154 <prvSwitchTimerLists+0xc0>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fd fcad 	bl	8005a14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d02e      	beq.n	800812e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	4413      	add	r3, r2
 80080d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d90e      	bls.n	8008100 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080ee:	4b19      	ldr	r3, [pc, #100]	; (8008154 <prvSwitchTimerLists+0xc0>)
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3304      	adds	r3, #4
 80080f6:	4619      	mov	r1, r3
 80080f8:	4610      	mov	r0, r2
 80080fa:	f7fd fc52 	bl	80059a2 <vListInsert>
 80080fe:	e016      	b.n	800812e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008100:	2300      	movs	r3, #0
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	2300      	movs	r3, #0
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	2100      	movs	r1, #0
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f7ff fd60 	bl	8007bd0 <xTimerGenericCommand>
 8008110:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10a      	bne.n	800812e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	603b      	str	r3, [r7, #0]
}
 800812a:	bf00      	nop
 800812c:	e7fe      	b.n	800812c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800812e:	4b09      	ldr	r3, [pc, #36]	; (8008154 <prvSwitchTimerLists+0xc0>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1b1      	bne.n	800809c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008138:	4b06      	ldr	r3, [pc, #24]	; (8008154 <prvSwitchTimerLists+0xc0>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800813e:	4b06      	ldr	r3, [pc, #24]	; (8008158 <prvSwitchTimerLists+0xc4>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a04      	ldr	r2, [pc, #16]	; (8008154 <prvSwitchTimerLists+0xc0>)
 8008144:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008146:	4a04      	ldr	r2, [pc, #16]	; (8008158 <prvSwitchTimerLists+0xc4>)
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	6013      	str	r3, [r2, #0]
}
 800814c:	bf00      	nop
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	20000d50 	.word	0x20000d50
 8008158:	20000d54 	.word	0x20000d54

0800815c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008162:	f000 f987 	bl	8008474 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008166:	4b15      	ldr	r3, [pc, #84]	; (80081bc <prvCheckForValidListAndQueue+0x60>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d120      	bne.n	80081b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800816e:	4814      	ldr	r0, [pc, #80]	; (80081c0 <prvCheckForValidListAndQueue+0x64>)
 8008170:	f7fd fbc6 	bl	8005900 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008174:	4813      	ldr	r0, [pc, #76]	; (80081c4 <prvCheckForValidListAndQueue+0x68>)
 8008176:	f7fd fbc3 	bl	8005900 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800817a:	4b13      	ldr	r3, [pc, #76]	; (80081c8 <prvCheckForValidListAndQueue+0x6c>)
 800817c:	4a10      	ldr	r2, [pc, #64]	; (80081c0 <prvCheckForValidListAndQueue+0x64>)
 800817e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008180:	4b12      	ldr	r3, [pc, #72]	; (80081cc <prvCheckForValidListAndQueue+0x70>)
 8008182:	4a10      	ldr	r2, [pc, #64]	; (80081c4 <prvCheckForValidListAndQueue+0x68>)
 8008184:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008186:	2300      	movs	r3, #0
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	4b11      	ldr	r3, [pc, #68]	; (80081d0 <prvCheckForValidListAndQueue+0x74>)
 800818c:	4a11      	ldr	r2, [pc, #68]	; (80081d4 <prvCheckForValidListAndQueue+0x78>)
 800818e:	2110      	movs	r1, #16
 8008190:	200a      	movs	r0, #10
 8008192:	f7fd fcd1 	bl	8005b38 <xQueueGenericCreateStatic>
 8008196:	4603      	mov	r3, r0
 8008198:	4a08      	ldr	r2, [pc, #32]	; (80081bc <prvCheckForValidListAndQueue+0x60>)
 800819a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800819c:	4b07      	ldr	r3, [pc, #28]	; (80081bc <prvCheckForValidListAndQueue+0x60>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d005      	beq.n	80081b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80081a4:	4b05      	ldr	r3, [pc, #20]	; (80081bc <prvCheckForValidListAndQueue+0x60>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	490b      	ldr	r1, [pc, #44]	; (80081d8 <prvCheckForValidListAndQueue+0x7c>)
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fe fb7e 	bl	80068ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081b0:	f000 f990 	bl	80084d4 <vPortExitCritical>
}
 80081b4:	bf00      	nop
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20000d58 	.word	0x20000d58
 80081c0:	20000d28 	.word	0x20000d28
 80081c4:	20000d3c 	.word	0x20000d3c
 80081c8:	20000d50 	.word	0x20000d50
 80081cc:	20000d54 	.word	0x20000d54
 80081d0:	20000e04 	.word	0x20000e04
 80081d4:	20000d64 	.word	0x20000d64
 80081d8:	08009690 	.word	0x08009690

080081dc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08a      	sub	sp, #40	; 0x28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
 80081e8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80081ea:	f06f 0301 	mvn.w	r3, #1
 80081ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80081fc:	4b06      	ldr	r3, [pc, #24]	; (8008218 <xTimerPendFunctionCallFromISR+0x3c>)
 80081fe:	6818      	ldr	r0, [r3, #0]
 8008200:	f107 0114 	add.w	r1, r7, #20
 8008204:	2300      	movs	r3, #0
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	f7fd ff20 	bl	800604c <xQueueGenericSendFromISR>
 800820c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008210:	4618      	mov	r0, r3
 8008212:	3728      	adds	r7, #40	; 0x28
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	20000d58 	.word	0x20000d58

0800821c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	3b04      	subs	r3, #4
 800822c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3b04      	subs	r3, #4
 800823a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f023 0201 	bic.w	r2, r3, #1
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	3b04      	subs	r3, #4
 800824a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800824c:	4a0c      	ldr	r2, [pc, #48]	; (8008280 <pxPortInitialiseStack+0x64>)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3b14      	subs	r3, #20
 8008256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3b04      	subs	r3, #4
 8008262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f06f 0202 	mvn.w	r2, #2
 800826a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	3b20      	subs	r3, #32
 8008270:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008272:	68fb      	ldr	r3, [r7, #12]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	08008285 	.word	0x08008285

08008284 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800828e:	4b12      	ldr	r3, [pc, #72]	; (80082d8 <prvTaskExitError+0x54>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008296:	d00a      	beq.n	80082ae <prvTaskExitError+0x2a>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829c:	f383 8811 	msr	BASEPRI, r3
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	60fb      	str	r3, [r7, #12]
}
 80082aa:	bf00      	nop
 80082ac:	e7fe      	b.n	80082ac <prvTaskExitError+0x28>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	60bb      	str	r3, [r7, #8]
}
 80082c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082c2:	bf00      	nop
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d0fc      	beq.n	80082c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082ca:	bf00      	nop
 80082cc:	bf00      	nop
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	20000014 	.word	0x20000014
 80082dc:	00000000 	.word	0x00000000

080082e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082e0:	4b07      	ldr	r3, [pc, #28]	; (8008300 <pxCurrentTCBConst2>)
 80082e2:	6819      	ldr	r1, [r3, #0]
 80082e4:	6808      	ldr	r0, [r1, #0]
 80082e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ea:	f380 8809 	msr	PSP, r0
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f04f 0000 	mov.w	r0, #0
 80082f6:	f380 8811 	msr	BASEPRI, r0
 80082fa:	4770      	bx	lr
 80082fc:	f3af 8000 	nop.w

08008300 <pxCurrentTCBConst2>:
 8008300:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008304:	bf00      	nop
 8008306:	bf00      	nop

08008308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008308:	4808      	ldr	r0, [pc, #32]	; (800832c <prvPortStartFirstTask+0x24>)
 800830a:	6800      	ldr	r0, [r0, #0]
 800830c:	6800      	ldr	r0, [r0, #0]
 800830e:	f380 8808 	msr	MSP, r0
 8008312:	f04f 0000 	mov.w	r0, #0
 8008316:	f380 8814 	msr	CONTROL, r0
 800831a:	b662      	cpsie	i
 800831c:	b661      	cpsie	f
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	df00      	svc	0
 8008328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800832a:	bf00      	nop
 800832c:	e000ed08 	.word	0xe000ed08

08008330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008336:	4b46      	ldr	r3, [pc, #280]	; (8008450 <xPortStartScheduler+0x120>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a46      	ldr	r2, [pc, #280]	; (8008454 <xPortStartScheduler+0x124>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d10a      	bne.n	8008356 <xPortStartScheduler+0x26>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	613b      	str	r3, [r7, #16]
}
 8008352:	bf00      	nop
 8008354:	e7fe      	b.n	8008354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008356:	4b3e      	ldr	r3, [pc, #248]	; (8008450 <xPortStartScheduler+0x120>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a3f      	ldr	r2, [pc, #252]	; (8008458 <xPortStartScheduler+0x128>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d10a      	bne.n	8008376 <xPortStartScheduler+0x46>
	__asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	60fb      	str	r3, [r7, #12]
}
 8008372:	bf00      	nop
 8008374:	e7fe      	b.n	8008374 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008376:	4b39      	ldr	r3, [pc, #228]	; (800845c <xPortStartScheduler+0x12c>)
 8008378:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	22ff      	movs	r2, #255	; 0xff
 8008386:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	b2db      	uxtb	r3, r3
 800838e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008390:	78fb      	ldrb	r3, [r7, #3]
 8008392:	b2db      	uxtb	r3, r3
 8008394:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008398:	b2da      	uxtb	r2, r3
 800839a:	4b31      	ldr	r3, [pc, #196]	; (8008460 <xPortStartScheduler+0x130>)
 800839c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800839e:	4b31      	ldr	r3, [pc, #196]	; (8008464 <xPortStartScheduler+0x134>)
 80083a0:	2207      	movs	r2, #7
 80083a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083a4:	e009      	b.n	80083ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80083a6:	4b2f      	ldr	r3, [pc, #188]	; (8008464 <xPortStartScheduler+0x134>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	4a2d      	ldr	r2, [pc, #180]	; (8008464 <xPortStartScheduler+0x134>)
 80083ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80083b0:	78fb      	ldrb	r3, [r7, #3]
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083ba:	78fb      	ldrb	r3, [r7, #3]
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c2:	2b80      	cmp	r3, #128	; 0x80
 80083c4:	d0ef      	beq.n	80083a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80083c6:	4b27      	ldr	r3, [pc, #156]	; (8008464 <xPortStartScheduler+0x134>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f1c3 0307 	rsb	r3, r3, #7
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d00a      	beq.n	80083e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	60bb      	str	r3, [r7, #8]
}
 80083e4:	bf00      	nop
 80083e6:	e7fe      	b.n	80083e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083e8:	4b1e      	ldr	r3, [pc, #120]	; (8008464 <xPortStartScheduler+0x134>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	021b      	lsls	r3, r3, #8
 80083ee:	4a1d      	ldr	r2, [pc, #116]	; (8008464 <xPortStartScheduler+0x134>)
 80083f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80083f2:	4b1c      	ldr	r3, [pc, #112]	; (8008464 <xPortStartScheduler+0x134>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083fa:	4a1a      	ldr	r2, [pc, #104]	; (8008464 <xPortStartScheduler+0x134>)
 80083fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	b2da      	uxtb	r2, r3
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008406:	4b18      	ldr	r3, [pc, #96]	; (8008468 <xPortStartScheduler+0x138>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a17      	ldr	r2, [pc, #92]	; (8008468 <xPortStartScheduler+0x138>)
 800840c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008410:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008412:	4b15      	ldr	r3, [pc, #84]	; (8008468 <xPortStartScheduler+0x138>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a14      	ldr	r2, [pc, #80]	; (8008468 <xPortStartScheduler+0x138>)
 8008418:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800841c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800841e:	f000 f8dd 	bl	80085dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008422:	4b12      	ldr	r3, [pc, #72]	; (800846c <xPortStartScheduler+0x13c>)
 8008424:	2200      	movs	r2, #0
 8008426:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008428:	f000 f8fc 	bl	8008624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800842c:	4b10      	ldr	r3, [pc, #64]	; (8008470 <xPortStartScheduler+0x140>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a0f      	ldr	r2, [pc, #60]	; (8008470 <xPortStartScheduler+0x140>)
 8008432:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008436:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008438:	f7ff ff66 	bl	8008308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800843c:	f7fe fe66 	bl	800710c <vTaskSwitchContext>
	prvTaskExitError();
 8008440:	f7ff ff20 	bl	8008284 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3718      	adds	r7, #24
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	e000ed00 	.word	0xe000ed00
 8008454:	410fc271 	.word	0x410fc271
 8008458:	410fc270 	.word	0x410fc270
 800845c:	e000e400 	.word	0xe000e400
 8008460:	20000e54 	.word	0x20000e54
 8008464:	20000e58 	.word	0x20000e58
 8008468:	e000ed20 	.word	0xe000ed20
 800846c:	20000014 	.word	0x20000014
 8008470:	e000ef34 	.word	0xe000ef34

08008474 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	607b      	str	r3, [r7, #4]
}
 800848c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800848e:	4b0f      	ldr	r3, [pc, #60]	; (80084cc <vPortEnterCritical+0x58>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3301      	adds	r3, #1
 8008494:	4a0d      	ldr	r2, [pc, #52]	; (80084cc <vPortEnterCritical+0x58>)
 8008496:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008498:	4b0c      	ldr	r3, [pc, #48]	; (80084cc <vPortEnterCritical+0x58>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d10f      	bne.n	80084c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80084a0:	4b0b      	ldr	r3, [pc, #44]	; (80084d0 <vPortEnterCritical+0x5c>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00a      	beq.n	80084c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	603b      	str	r3, [r7, #0]
}
 80084bc:	bf00      	nop
 80084be:	e7fe      	b.n	80084be <vPortEnterCritical+0x4a>
	}
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	20000014 	.word	0x20000014
 80084d0:	e000ed04 	.word	0xe000ed04

080084d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80084da:	4b12      	ldr	r3, [pc, #72]	; (8008524 <vPortExitCritical+0x50>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10a      	bne.n	80084f8 <vPortExitCritical+0x24>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	607b      	str	r3, [r7, #4]
}
 80084f4:	bf00      	nop
 80084f6:	e7fe      	b.n	80084f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80084f8:	4b0a      	ldr	r3, [pc, #40]	; (8008524 <vPortExitCritical+0x50>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3b01      	subs	r3, #1
 80084fe:	4a09      	ldr	r2, [pc, #36]	; (8008524 <vPortExitCritical+0x50>)
 8008500:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008502:	4b08      	ldr	r3, [pc, #32]	; (8008524 <vPortExitCritical+0x50>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d105      	bne.n	8008516 <vPortExitCritical+0x42>
 800850a:	2300      	movs	r3, #0
 800850c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	f383 8811 	msr	BASEPRI, r3
}
 8008514:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	20000014 	.word	0x20000014
	...

08008530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008530:	f3ef 8009 	mrs	r0, PSP
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	4b15      	ldr	r3, [pc, #84]	; (8008590 <pxCurrentTCBConst>)
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	f01e 0f10 	tst.w	lr, #16
 8008540:	bf08      	it	eq
 8008542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854a:	6010      	str	r0, [r2, #0]
 800854c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008550:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008554:	f380 8811 	msr	BASEPRI, r0
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f7fe fdd4 	bl	800710c <vTaskSwitchContext>
 8008564:	f04f 0000 	mov.w	r0, #0
 8008568:	f380 8811 	msr	BASEPRI, r0
 800856c:	bc09      	pop	{r0, r3}
 800856e:	6819      	ldr	r1, [r3, #0]
 8008570:	6808      	ldr	r0, [r1, #0]
 8008572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008576:	f01e 0f10 	tst.w	lr, #16
 800857a:	bf08      	it	eq
 800857c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008580:	f380 8809 	msr	PSP, r0
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	f3af 8000 	nop.w

08008590 <pxCurrentTCBConst>:
 8008590:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop

08008598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	607b      	str	r3, [r7, #4]
}
 80085b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80085b2:	f7fe fcf1 	bl	8006f98 <xTaskIncrementTick>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80085bc:	4b06      	ldr	r3, [pc, #24]	; (80085d8 <xPortSysTickHandler+0x40>)
 80085be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	2300      	movs	r3, #0
 80085c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	f383 8811 	msr	BASEPRI, r3
}
 80085ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80085d0:	bf00      	nop
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	e000ed04 	.word	0xe000ed04

080085dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80085dc:	b480      	push	{r7}
 80085de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80085e0:	4b0b      	ldr	r3, [pc, #44]	; (8008610 <vPortSetupTimerInterrupt+0x34>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80085e6:	4b0b      	ldr	r3, [pc, #44]	; (8008614 <vPortSetupTimerInterrupt+0x38>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80085ec:	4b0a      	ldr	r3, [pc, #40]	; (8008618 <vPortSetupTimerInterrupt+0x3c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a0a      	ldr	r2, [pc, #40]	; (800861c <vPortSetupTimerInterrupt+0x40>)
 80085f2:	fba2 2303 	umull	r2, r3, r2, r3
 80085f6:	099b      	lsrs	r3, r3, #6
 80085f8:	4a09      	ldr	r2, [pc, #36]	; (8008620 <vPortSetupTimerInterrupt+0x44>)
 80085fa:	3b01      	subs	r3, #1
 80085fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80085fe:	4b04      	ldr	r3, [pc, #16]	; (8008610 <vPortSetupTimerInterrupt+0x34>)
 8008600:	2207      	movs	r2, #7
 8008602:	601a      	str	r2, [r3, #0]
}
 8008604:	bf00      	nop
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	e000e010 	.word	0xe000e010
 8008614:	e000e018 	.word	0xe000e018
 8008618:	20000008 	.word	0x20000008
 800861c:	10624dd3 	.word	0x10624dd3
 8008620:	e000e014 	.word	0xe000e014

08008624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008624:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008634 <vPortEnableVFP+0x10>
 8008628:	6801      	ldr	r1, [r0, #0]
 800862a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800862e:	6001      	str	r1, [r0, #0]
 8008630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008632:	bf00      	nop
 8008634:	e000ed88 	.word	0xe000ed88

08008638 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800863e:	f3ef 8305 	mrs	r3, IPSR
 8008642:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2b0f      	cmp	r3, #15
 8008648:	d914      	bls.n	8008674 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800864a:	4a17      	ldr	r2, [pc, #92]	; (80086a8 <vPortValidateInterruptPriority+0x70>)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	4413      	add	r3, r2
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008654:	4b15      	ldr	r3, [pc, #84]	; (80086ac <vPortValidateInterruptPriority+0x74>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	7afa      	ldrb	r2, [r7, #11]
 800865a:	429a      	cmp	r2, r3
 800865c:	d20a      	bcs.n	8008674 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	607b      	str	r3, [r7, #4]
}
 8008670:	bf00      	nop
 8008672:	e7fe      	b.n	8008672 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008674:	4b0e      	ldr	r3, [pc, #56]	; (80086b0 <vPortValidateInterruptPriority+0x78>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800867c:	4b0d      	ldr	r3, [pc, #52]	; (80086b4 <vPortValidateInterruptPriority+0x7c>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	429a      	cmp	r2, r3
 8008682:	d90a      	bls.n	800869a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	603b      	str	r3, [r7, #0]
}
 8008696:	bf00      	nop
 8008698:	e7fe      	b.n	8008698 <vPortValidateInterruptPriority+0x60>
	}
 800869a:	bf00      	nop
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	e000e3f0 	.word	0xe000e3f0
 80086ac:	20000e54 	.word	0x20000e54
 80086b0:	e000ed0c 	.word	0xe000ed0c
 80086b4:	20000e58 	.word	0x20000e58

080086b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08a      	sub	sp, #40	; 0x28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80086c0:	2300      	movs	r3, #0
 80086c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80086c4:	f7fe fbac 	bl	8006e20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80086c8:	4b5b      	ldr	r3, [pc, #364]	; (8008838 <pvPortMalloc+0x180>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80086d0:	f000 f920 	bl	8008914 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80086d4:	4b59      	ldr	r3, [pc, #356]	; (800883c <pvPortMalloc+0x184>)
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4013      	ands	r3, r2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f040 8093 	bne.w	8008808 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d01d      	beq.n	8008724 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80086e8:	2208      	movs	r2, #8
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4413      	add	r3, r2
 80086ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f003 0307 	and.w	r3, r3, #7
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d014      	beq.n	8008724 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f023 0307 	bic.w	r3, r3, #7
 8008700:	3308      	adds	r3, #8
 8008702:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f003 0307 	and.w	r3, r3, #7
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <pvPortMalloc+0x6c>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	617b      	str	r3, [r7, #20]
}
 8008720:	bf00      	nop
 8008722:	e7fe      	b.n	8008722 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d06e      	beq.n	8008808 <pvPortMalloc+0x150>
 800872a:	4b45      	ldr	r3, [pc, #276]	; (8008840 <pvPortMalloc+0x188>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	429a      	cmp	r2, r3
 8008732:	d869      	bhi.n	8008808 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008734:	4b43      	ldr	r3, [pc, #268]	; (8008844 <pvPortMalloc+0x18c>)
 8008736:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008738:	4b42      	ldr	r3, [pc, #264]	; (8008844 <pvPortMalloc+0x18c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800873e:	e004      	b.n	800874a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	429a      	cmp	r2, r3
 8008752:	d903      	bls.n	800875c <pvPortMalloc+0xa4>
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1f1      	bne.n	8008740 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800875c:	4b36      	ldr	r3, [pc, #216]	; (8008838 <pvPortMalloc+0x180>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008762:	429a      	cmp	r2, r3
 8008764:	d050      	beq.n	8008808 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2208      	movs	r2, #8
 800876c:	4413      	add	r3, r2
 800876e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	685a      	ldr	r2, [r3, #4]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	1ad2      	subs	r2, r2, r3
 8008780:	2308      	movs	r3, #8
 8008782:	005b      	lsls	r3, r3, #1
 8008784:	429a      	cmp	r2, r3
 8008786:	d91f      	bls.n	80087c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4413      	add	r3, r2
 800878e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	f003 0307 	and.w	r3, r3, #7
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <pvPortMalloc+0xf8>
	__asm volatile
 800879a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879e:	f383 8811 	msr	BASEPRI, r3
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	613b      	str	r3, [r7, #16]
}
 80087ac:	bf00      	nop
 80087ae:	e7fe      	b.n	80087ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	1ad2      	subs	r2, r2, r3
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80087c2:	69b8      	ldr	r0, [r7, #24]
 80087c4:	f000 f908 	bl	80089d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087c8:	4b1d      	ldr	r3, [pc, #116]	; (8008840 <pvPortMalloc+0x188>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	4a1b      	ldr	r2, [pc, #108]	; (8008840 <pvPortMalloc+0x188>)
 80087d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087d6:	4b1a      	ldr	r3, [pc, #104]	; (8008840 <pvPortMalloc+0x188>)
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	4b1b      	ldr	r3, [pc, #108]	; (8008848 <pvPortMalloc+0x190>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d203      	bcs.n	80087ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087e2:	4b17      	ldr	r3, [pc, #92]	; (8008840 <pvPortMalloc+0x188>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a18      	ldr	r2, [pc, #96]	; (8008848 <pvPortMalloc+0x190>)
 80087e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	4b13      	ldr	r3, [pc, #76]	; (800883c <pvPortMalloc+0x184>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	431a      	orrs	r2, r3
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80087f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fa:	2200      	movs	r2, #0
 80087fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80087fe:	4b13      	ldr	r3, [pc, #76]	; (800884c <pvPortMalloc+0x194>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3301      	adds	r3, #1
 8008804:	4a11      	ldr	r2, [pc, #68]	; (800884c <pvPortMalloc+0x194>)
 8008806:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008808:	f7fe fb18 	bl	8006e3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	f003 0307 	and.w	r3, r3, #7
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00a      	beq.n	800882c <pvPortMalloc+0x174>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	60fb      	str	r3, [r7, #12]
}
 8008828:	bf00      	nop
 800882a:	e7fe      	b.n	800882a <pvPortMalloc+0x172>
	return pvReturn;
 800882c:	69fb      	ldr	r3, [r7, #28]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3728      	adds	r7, #40	; 0x28
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	20004a64 	.word	0x20004a64
 800883c:	20004a78 	.word	0x20004a78
 8008840:	20004a68 	.word	0x20004a68
 8008844:	20004a5c 	.word	0x20004a5c
 8008848:	20004a6c 	.word	0x20004a6c
 800884c:	20004a70 	.word	0x20004a70

08008850 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d04d      	beq.n	80088fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008862:	2308      	movs	r3, #8
 8008864:	425b      	negs	r3, r3
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	4413      	add	r3, r2
 800886a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	685a      	ldr	r2, [r3, #4]
 8008874:	4b24      	ldr	r3, [pc, #144]	; (8008908 <vPortFree+0xb8>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4013      	ands	r3, r2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10a      	bne.n	8008894 <vPortFree+0x44>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	60fb      	str	r3, [r7, #12]
}
 8008890:	bf00      	nop
 8008892:	e7fe      	b.n	8008892 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00a      	beq.n	80088b2 <vPortFree+0x62>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	60bb      	str	r3, [r7, #8]
}
 80088ae:	bf00      	nop
 80088b0:	e7fe      	b.n	80088b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	4b14      	ldr	r3, [pc, #80]	; (8008908 <vPortFree+0xb8>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4013      	ands	r3, r2
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d01e      	beq.n	80088fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d11a      	bne.n	80088fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	4b0e      	ldr	r3, [pc, #56]	; (8008908 <vPortFree+0xb8>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	43db      	mvns	r3, r3
 80088d2:	401a      	ands	r2, r3
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80088d8:	f7fe faa2 	bl	8006e20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	685a      	ldr	r2, [r3, #4]
 80088e0:	4b0a      	ldr	r3, [pc, #40]	; (800890c <vPortFree+0xbc>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4413      	add	r3, r2
 80088e6:	4a09      	ldr	r2, [pc, #36]	; (800890c <vPortFree+0xbc>)
 80088e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80088ea:	6938      	ldr	r0, [r7, #16]
 80088ec:	f000 f874 	bl	80089d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80088f0:	4b07      	ldr	r3, [pc, #28]	; (8008910 <vPortFree+0xc0>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3301      	adds	r3, #1
 80088f6:	4a06      	ldr	r2, [pc, #24]	; (8008910 <vPortFree+0xc0>)
 80088f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80088fa:	f7fe fa9f 	bl	8006e3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80088fe:	bf00      	nop
 8008900:	3718      	adds	r7, #24
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	20004a78 	.word	0x20004a78
 800890c:	20004a68 	.word	0x20004a68
 8008910:	20004a74 	.word	0x20004a74

08008914 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800891a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800891e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008920:	4b27      	ldr	r3, [pc, #156]	; (80089c0 <prvHeapInit+0xac>)
 8008922:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f003 0307 	and.w	r3, r3, #7
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00c      	beq.n	8008948 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3307      	adds	r3, #7
 8008932:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f023 0307 	bic.w	r3, r3, #7
 800893a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	4a1f      	ldr	r2, [pc, #124]	; (80089c0 <prvHeapInit+0xac>)
 8008944:	4413      	add	r3, r2
 8008946:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800894c:	4a1d      	ldr	r2, [pc, #116]	; (80089c4 <prvHeapInit+0xb0>)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008952:	4b1c      	ldr	r3, [pc, #112]	; (80089c4 <prvHeapInit+0xb0>)
 8008954:	2200      	movs	r2, #0
 8008956:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	4413      	add	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008960:	2208      	movs	r2, #8
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	1a9b      	subs	r3, r3, r2
 8008966:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f023 0307 	bic.w	r3, r3, #7
 800896e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4a15      	ldr	r2, [pc, #84]	; (80089c8 <prvHeapInit+0xb4>)
 8008974:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008976:	4b14      	ldr	r3, [pc, #80]	; (80089c8 <prvHeapInit+0xb4>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2200      	movs	r2, #0
 800897c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800897e:	4b12      	ldr	r3, [pc, #72]	; (80089c8 <prvHeapInit+0xb4>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	1ad2      	subs	r2, r2, r3
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008994:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <prvHeapInit+0xb4>)
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	4a0a      	ldr	r2, [pc, #40]	; (80089cc <prvHeapInit+0xb8>)
 80089a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	4a09      	ldr	r2, [pc, #36]	; (80089d0 <prvHeapInit+0xbc>)
 80089aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089ac:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <prvHeapInit+0xc0>)
 80089ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80089b2:	601a      	str	r2, [r3, #0]
}
 80089b4:	bf00      	nop
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	20000e5c 	.word	0x20000e5c
 80089c4:	20004a5c 	.word	0x20004a5c
 80089c8:	20004a64 	.word	0x20004a64
 80089cc:	20004a6c 	.word	0x20004a6c
 80089d0:	20004a68 	.word	0x20004a68
 80089d4:	20004a78 	.word	0x20004a78

080089d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089e0:	4b28      	ldr	r3, [pc, #160]	; (8008a84 <prvInsertBlockIntoFreeList+0xac>)
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	e002      	b.n	80089ec <prvInsertBlockIntoFreeList+0x14>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	60fb      	str	r3, [r7, #12]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d8f7      	bhi.n	80089e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	4413      	add	r3, r2
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d108      	bne.n	8008a1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	441a      	add	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	441a      	add	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d118      	bne.n	8008a60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	4b15      	ldr	r3, [pc, #84]	; (8008a88 <prvInsertBlockIntoFreeList+0xb0>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d00d      	beq.n	8008a56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	441a      	add	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	601a      	str	r2, [r3, #0]
 8008a54:	e008      	b.n	8008a68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a56:	4b0c      	ldr	r3, [pc, #48]	; (8008a88 <prvInsertBlockIntoFreeList+0xb0>)
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	e003      	b.n	8008a68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d002      	beq.n	8008a76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a76:	bf00      	nop
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	20004a5c 	.word	0x20004a5c
 8008a88:	20004a64 	.word	0x20004a64

08008a8c <__errno>:
 8008a8c:	4b01      	ldr	r3, [pc, #4]	; (8008a94 <__errno+0x8>)
 8008a8e:	6818      	ldr	r0, [r3, #0]
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	20000018 	.word	0x20000018

08008a98 <__libc_init_array>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	4d0d      	ldr	r5, [pc, #52]	; (8008ad0 <__libc_init_array+0x38>)
 8008a9c:	4c0d      	ldr	r4, [pc, #52]	; (8008ad4 <__libc_init_array+0x3c>)
 8008a9e:	1b64      	subs	r4, r4, r5
 8008aa0:	10a4      	asrs	r4, r4, #2
 8008aa2:	2600      	movs	r6, #0
 8008aa4:	42a6      	cmp	r6, r4
 8008aa6:	d109      	bne.n	8008abc <__libc_init_array+0x24>
 8008aa8:	4d0b      	ldr	r5, [pc, #44]	; (8008ad8 <__libc_init_array+0x40>)
 8008aaa:	4c0c      	ldr	r4, [pc, #48]	; (8008adc <__libc_init_array+0x44>)
 8008aac:	f000 fcb8 	bl	8009420 <_init>
 8008ab0:	1b64      	subs	r4, r4, r5
 8008ab2:	10a4      	asrs	r4, r4, #2
 8008ab4:	2600      	movs	r6, #0
 8008ab6:	42a6      	cmp	r6, r4
 8008ab8:	d105      	bne.n	8008ac6 <__libc_init_array+0x2e>
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac0:	4798      	blx	r3
 8008ac2:	3601      	adds	r6, #1
 8008ac4:	e7ee      	b.n	8008aa4 <__libc_init_array+0xc>
 8008ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aca:	4798      	blx	r3
 8008acc:	3601      	adds	r6, #1
 8008ace:	e7f2      	b.n	8008ab6 <__libc_init_array+0x1e>
 8008ad0:	08009894 	.word	0x08009894
 8008ad4:	08009894 	.word	0x08009894
 8008ad8:	08009894 	.word	0x08009894
 8008adc:	08009898 	.word	0x08009898

08008ae0 <__retarget_lock_acquire_recursive>:
 8008ae0:	4770      	bx	lr

08008ae2 <__retarget_lock_release_recursive>:
 8008ae2:	4770      	bx	lr

08008ae4 <memcpy>:
 8008ae4:	440a      	add	r2, r1
 8008ae6:	4291      	cmp	r1, r2
 8008ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008aec:	d100      	bne.n	8008af0 <memcpy+0xc>
 8008aee:	4770      	bx	lr
 8008af0:	b510      	push	{r4, lr}
 8008af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008af6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008afa:	4291      	cmp	r1, r2
 8008afc:	d1f9      	bne.n	8008af2 <memcpy+0xe>
 8008afe:	bd10      	pop	{r4, pc}

08008b00 <memset>:
 8008b00:	4402      	add	r2, r0
 8008b02:	4603      	mov	r3, r0
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d100      	bne.n	8008b0a <memset+0xa>
 8008b08:	4770      	bx	lr
 8008b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b0e:	e7f9      	b.n	8008b04 <memset+0x4>

08008b10 <_malloc_r>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	1ccd      	adds	r5, r1, #3
 8008b14:	f025 0503 	bic.w	r5, r5, #3
 8008b18:	3508      	adds	r5, #8
 8008b1a:	2d0c      	cmp	r5, #12
 8008b1c:	bf38      	it	cc
 8008b1e:	250c      	movcc	r5, #12
 8008b20:	2d00      	cmp	r5, #0
 8008b22:	4606      	mov	r6, r0
 8008b24:	db01      	blt.n	8008b2a <_malloc_r+0x1a>
 8008b26:	42a9      	cmp	r1, r5
 8008b28:	d903      	bls.n	8008b32 <_malloc_r+0x22>
 8008b2a:	230c      	movs	r3, #12
 8008b2c:	6033      	str	r3, [r6, #0]
 8008b2e:	2000      	movs	r0, #0
 8008b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b32:	f000 f8e1 	bl	8008cf8 <__malloc_lock>
 8008b36:	4921      	ldr	r1, [pc, #132]	; (8008bbc <_malloc_r+0xac>)
 8008b38:	680a      	ldr	r2, [r1, #0]
 8008b3a:	4614      	mov	r4, r2
 8008b3c:	b99c      	cbnz	r4, 8008b66 <_malloc_r+0x56>
 8008b3e:	4f20      	ldr	r7, [pc, #128]	; (8008bc0 <_malloc_r+0xb0>)
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	b923      	cbnz	r3, 8008b4e <_malloc_r+0x3e>
 8008b44:	4621      	mov	r1, r4
 8008b46:	4630      	mov	r0, r6
 8008b48:	f000 f8a6 	bl	8008c98 <_sbrk_r>
 8008b4c:	6038      	str	r0, [r7, #0]
 8008b4e:	4629      	mov	r1, r5
 8008b50:	4630      	mov	r0, r6
 8008b52:	f000 f8a1 	bl	8008c98 <_sbrk_r>
 8008b56:	1c43      	adds	r3, r0, #1
 8008b58:	d123      	bne.n	8008ba2 <_malloc_r+0x92>
 8008b5a:	230c      	movs	r3, #12
 8008b5c:	6033      	str	r3, [r6, #0]
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f000 f8d0 	bl	8008d04 <__malloc_unlock>
 8008b64:	e7e3      	b.n	8008b2e <_malloc_r+0x1e>
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	1b5b      	subs	r3, r3, r5
 8008b6a:	d417      	bmi.n	8008b9c <_malloc_r+0x8c>
 8008b6c:	2b0b      	cmp	r3, #11
 8008b6e:	d903      	bls.n	8008b78 <_malloc_r+0x68>
 8008b70:	6023      	str	r3, [r4, #0]
 8008b72:	441c      	add	r4, r3
 8008b74:	6025      	str	r5, [r4, #0]
 8008b76:	e004      	b.n	8008b82 <_malloc_r+0x72>
 8008b78:	6863      	ldr	r3, [r4, #4]
 8008b7a:	42a2      	cmp	r2, r4
 8008b7c:	bf0c      	ite	eq
 8008b7e:	600b      	streq	r3, [r1, #0]
 8008b80:	6053      	strne	r3, [r2, #4]
 8008b82:	4630      	mov	r0, r6
 8008b84:	f000 f8be 	bl	8008d04 <__malloc_unlock>
 8008b88:	f104 000b 	add.w	r0, r4, #11
 8008b8c:	1d23      	adds	r3, r4, #4
 8008b8e:	f020 0007 	bic.w	r0, r0, #7
 8008b92:	1ac2      	subs	r2, r0, r3
 8008b94:	d0cc      	beq.n	8008b30 <_malloc_r+0x20>
 8008b96:	1a1b      	subs	r3, r3, r0
 8008b98:	50a3      	str	r3, [r4, r2]
 8008b9a:	e7c9      	b.n	8008b30 <_malloc_r+0x20>
 8008b9c:	4622      	mov	r2, r4
 8008b9e:	6864      	ldr	r4, [r4, #4]
 8008ba0:	e7cc      	b.n	8008b3c <_malloc_r+0x2c>
 8008ba2:	1cc4      	adds	r4, r0, #3
 8008ba4:	f024 0403 	bic.w	r4, r4, #3
 8008ba8:	42a0      	cmp	r0, r4
 8008baa:	d0e3      	beq.n	8008b74 <_malloc_r+0x64>
 8008bac:	1a21      	subs	r1, r4, r0
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f000 f872 	bl	8008c98 <_sbrk_r>
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	d1dd      	bne.n	8008b74 <_malloc_r+0x64>
 8008bb8:	e7cf      	b.n	8008b5a <_malloc_r+0x4a>
 8008bba:	bf00      	nop
 8008bbc:	20004a7c 	.word	0x20004a7c
 8008bc0:	20004a80 	.word	0x20004a80

08008bc4 <cleanup_glue>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	460c      	mov	r4, r1
 8008bc8:	6809      	ldr	r1, [r1, #0]
 8008bca:	4605      	mov	r5, r0
 8008bcc:	b109      	cbz	r1, 8008bd2 <cleanup_glue+0xe>
 8008bce:	f7ff fff9 	bl	8008bc4 <cleanup_glue>
 8008bd2:	4621      	mov	r1, r4
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bda:	f000 b899 	b.w	8008d10 <_free_r>
	...

08008be0 <_reclaim_reent>:
 8008be0:	4b2c      	ldr	r3, [pc, #176]	; (8008c94 <_reclaim_reent+0xb4>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4283      	cmp	r3, r0
 8008be6:	b570      	push	{r4, r5, r6, lr}
 8008be8:	4604      	mov	r4, r0
 8008bea:	d051      	beq.n	8008c90 <_reclaim_reent+0xb0>
 8008bec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008bee:	b143      	cbz	r3, 8008c02 <_reclaim_reent+0x22>
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d14a      	bne.n	8008c8c <_reclaim_reent+0xac>
 8008bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bf8:	6819      	ldr	r1, [r3, #0]
 8008bfa:	b111      	cbz	r1, 8008c02 <_reclaim_reent+0x22>
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f000 f887 	bl	8008d10 <_free_r>
 8008c02:	6961      	ldr	r1, [r4, #20]
 8008c04:	b111      	cbz	r1, 8008c0c <_reclaim_reent+0x2c>
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 f882 	bl	8008d10 <_free_r>
 8008c0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008c0e:	b111      	cbz	r1, 8008c16 <_reclaim_reent+0x36>
 8008c10:	4620      	mov	r0, r4
 8008c12:	f000 f87d 	bl	8008d10 <_free_r>
 8008c16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008c18:	b111      	cbz	r1, 8008c20 <_reclaim_reent+0x40>
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f000 f878 	bl	8008d10 <_free_r>
 8008c20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008c22:	b111      	cbz	r1, 8008c2a <_reclaim_reent+0x4a>
 8008c24:	4620      	mov	r0, r4
 8008c26:	f000 f873 	bl	8008d10 <_free_r>
 8008c2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008c2c:	b111      	cbz	r1, 8008c34 <_reclaim_reent+0x54>
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 f86e 	bl	8008d10 <_free_r>
 8008c34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008c36:	b111      	cbz	r1, 8008c3e <_reclaim_reent+0x5e>
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f000 f869 	bl	8008d10 <_free_r>
 8008c3e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008c40:	b111      	cbz	r1, 8008c48 <_reclaim_reent+0x68>
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 f864 	bl	8008d10 <_free_r>
 8008c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c4a:	b111      	cbz	r1, 8008c52 <_reclaim_reent+0x72>
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f000 f85f 	bl	8008d10 <_free_r>
 8008c52:	69a3      	ldr	r3, [r4, #24]
 8008c54:	b1e3      	cbz	r3, 8008c90 <_reclaim_reent+0xb0>
 8008c56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c58:	4620      	mov	r0, r4
 8008c5a:	4798      	blx	r3
 8008c5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008c5e:	b1b9      	cbz	r1, 8008c90 <_reclaim_reent+0xb0>
 8008c60:	4620      	mov	r0, r4
 8008c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c66:	f7ff bfad 	b.w	8008bc4 <cleanup_glue>
 8008c6a:	5949      	ldr	r1, [r1, r5]
 8008c6c:	b941      	cbnz	r1, 8008c80 <_reclaim_reent+0xa0>
 8008c6e:	3504      	adds	r5, #4
 8008c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c72:	2d80      	cmp	r5, #128	; 0x80
 8008c74:	68d9      	ldr	r1, [r3, #12]
 8008c76:	d1f8      	bne.n	8008c6a <_reclaim_reent+0x8a>
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 f849 	bl	8008d10 <_free_r>
 8008c7e:	e7ba      	b.n	8008bf6 <_reclaim_reent+0x16>
 8008c80:	680e      	ldr	r6, [r1, #0]
 8008c82:	4620      	mov	r0, r4
 8008c84:	f000 f844 	bl	8008d10 <_free_r>
 8008c88:	4631      	mov	r1, r6
 8008c8a:	e7ef      	b.n	8008c6c <_reclaim_reent+0x8c>
 8008c8c:	2500      	movs	r5, #0
 8008c8e:	e7ef      	b.n	8008c70 <_reclaim_reent+0x90>
 8008c90:	bd70      	pop	{r4, r5, r6, pc}
 8008c92:	bf00      	nop
 8008c94:	20000018 	.word	0x20000018

08008c98 <_sbrk_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d06      	ldr	r5, [pc, #24]	; (8008cb4 <_sbrk_r+0x1c>)
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	4608      	mov	r0, r1
 8008ca2:	602b      	str	r3, [r5, #0]
 8008ca4:	f7f9 f8a6 	bl	8001df4 <_sbrk>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	d102      	bne.n	8008cb2 <_sbrk_r+0x1a>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	b103      	cbz	r3, 8008cb2 <_sbrk_r+0x1a>
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	bd38      	pop	{r3, r4, r5, pc}
 8008cb4:	20004d28 	.word	0x20004d28

08008cb8 <siprintf>:
 8008cb8:	b40e      	push	{r1, r2, r3}
 8008cba:	b500      	push	{lr}
 8008cbc:	b09c      	sub	sp, #112	; 0x70
 8008cbe:	ab1d      	add	r3, sp, #116	; 0x74
 8008cc0:	9002      	str	r0, [sp, #8]
 8008cc2:	9006      	str	r0, [sp, #24]
 8008cc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cc8:	4809      	ldr	r0, [pc, #36]	; (8008cf0 <siprintf+0x38>)
 8008cca:	9107      	str	r1, [sp, #28]
 8008ccc:	9104      	str	r1, [sp, #16]
 8008cce:	4909      	ldr	r1, [pc, #36]	; (8008cf4 <siprintf+0x3c>)
 8008cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd4:	9105      	str	r1, [sp, #20]
 8008cd6:	6800      	ldr	r0, [r0, #0]
 8008cd8:	9301      	str	r3, [sp, #4]
 8008cda:	a902      	add	r1, sp, #8
 8008cdc:	f000 f8c4 	bl	8008e68 <_svfiprintf_r>
 8008ce0:	9b02      	ldr	r3, [sp, #8]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	701a      	strb	r2, [r3, #0]
 8008ce6:	b01c      	add	sp, #112	; 0x70
 8008ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cec:	b003      	add	sp, #12
 8008cee:	4770      	bx	lr
 8008cf0:	20000018 	.word	0x20000018
 8008cf4:	ffff0208 	.word	0xffff0208

08008cf8 <__malloc_lock>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	; (8008d00 <__malloc_lock+0x8>)
 8008cfa:	f7ff bef1 	b.w	8008ae0 <__retarget_lock_acquire_recursive>
 8008cfe:	bf00      	nop
 8008d00:	20004d20 	.word	0x20004d20

08008d04 <__malloc_unlock>:
 8008d04:	4801      	ldr	r0, [pc, #4]	; (8008d0c <__malloc_unlock+0x8>)
 8008d06:	f7ff beec 	b.w	8008ae2 <__retarget_lock_release_recursive>
 8008d0a:	bf00      	nop
 8008d0c:	20004d20 	.word	0x20004d20

08008d10 <_free_r>:
 8008d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d12:	2900      	cmp	r1, #0
 8008d14:	d048      	beq.n	8008da8 <_free_r+0x98>
 8008d16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d1a:	9001      	str	r0, [sp, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f1a1 0404 	sub.w	r4, r1, #4
 8008d22:	bfb8      	it	lt
 8008d24:	18e4      	addlt	r4, r4, r3
 8008d26:	f7ff ffe7 	bl	8008cf8 <__malloc_lock>
 8008d2a:	4a20      	ldr	r2, [pc, #128]	; (8008dac <_free_r+0x9c>)
 8008d2c:	9801      	ldr	r0, [sp, #4]
 8008d2e:	6813      	ldr	r3, [r2, #0]
 8008d30:	4615      	mov	r5, r2
 8008d32:	b933      	cbnz	r3, 8008d42 <_free_r+0x32>
 8008d34:	6063      	str	r3, [r4, #4]
 8008d36:	6014      	str	r4, [r2, #0]
 8008d38:	b003      	add	sp, #12
 8008d3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d3e:	f7ff bfe1 	b.w	8008d04 <__malloc_unlock>
 8008d42:	42a3      	cmp	r3, r4
 8008d44:	d90b      	bls.n	8008d5e <_free_r+0x4e>
 8008d46:	6821      	ldr	r1, [r4, #0]
 8008d48:	1862      	adds	r2, r4, r1
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	bf04      	itt	eq
 8008d4e:	681a      	ldreq	r2, [r3, #0]
 8008d50:	685b      	ldreq	r3, [r3, #4]
 8008d52:	6063      	str	r3, [r4, #4]
 8008d54:	bf04      	itt	eq
 8008d56:	1852      	addeq	r2, r2, r1
 8008d58:	6022      	streq	r2, [r4, #0]
 8008d5a:	602c      	str	r4, [r5, #0]
 8008d5c:	e7ec      	b.n	8008d38 <_free_r+0x28>
 8008d5e:	461a      	mov	r2, r3
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	b10b      	cbz	r3, 8008d68 <_free_r+0x58>
 8008d64:	42a3      	cmp	r3, r4
 8008d66:	d9fa      	bls.n	8008d5e <_free_r+0x4e>
 8008d68:	6811      	ldr	r1, [r2, #0]
 8008d6a:	1855      	adds	r5, r2, r1
 8008d6c:	42a5      	cmp	r5, r4
 8008d6e:	d10b      	bne.n	8008d88 <_free_r+0x78>
 8008d70:	6824      	ldr	r4, [r4, #0]
 8008d72:	4421      	add	r1, r4
 8008d74:	1854      	adds	r4, r2, r1
 8008d76:	42a3      	cmp	r3, r4
 8008d78:	6011      	str	r1, [r2, #0]
 8008d7a:	d1dd      	bne.n	8008d38 <_free_r+0x28>
 8008d7c:	681c      	ldr	r4, [r3, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	6053      	str	r3, [r2, #4]
 8008d82:	4421      	add	r1, r4
 8008d84:	6011      	str	r1, [r2, #0]
 8008d86:	e7d7      	b.n	8008d38 <_free_r+0x28>
 8008d88:	d902      	bls.n	8008d90 <_free_r+0x80>
 8008d8a:	230c      	movs	r3, #12
 8008d8c:	6003      	str	r3, [r0, #0]
 8008d8e:	e7d3      	b.n	8008d38 <_free_r+0x28>
 8008d90:	6825      	ldr	r5, [r4, #0]
 8008d92:	1961      	adds	r1, r4, r5
 8008d94:	428b      	cmp	r3, r1
 8008d96:	bf04      	itt	eq
 8008d98:	6819      	ldreq	r1, [r3, #0]
 8008d9a:	685b      	ldreq	r3, [r3, #4]
 8008d9c:	6063      	str	r3, [r4, #4]
 8008d9e:	bf04      	itt	eq
 8008da0:	1949      	addeq	r1, r1, r5
 8008da2:	6021      	streq	r1, [r4, #0]
 8008da4:	6054      	str	r4, [r2, #4]
 8008da6:	e7c7      	b.n	8008d38 <_free_r+0x28>
 8008da8:	b003      	add	sp, #12
 8008daa:	bd30      	pop	{r4, r5, pc}
 8008dac:	20004a7c 	.word	0x20004a7c

08008db0 <__ssputs_r>:
 8008db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db4:	688e      	ldr	r6, [r1, #8]
 8008db6:	429e      	cmp	r6, r3
 8008db8:	4682      	mov	sl, r0
 8008dba:	460c      	mov	r4, r1
 8008dbc:	4690      	mov	r8, r2
 8008dbe:	461f      	mov	r7, r3
 8008dc0:	d838      	bhi.n	8008e34 <__ssputs_r+0x84>
 8008dc2:	898a      	ldrh	r2, [r1, #12]
 8008dc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dc8:	d032      	beq.n	8008e30 <__ssputs_r+0x80>
 8008dca:	6825      	ldr	r5, [r4, #0]
 8008dcc:	6909      	ldr	r1, [r1, #16]
 8008dce:	eba5 0901 	sub.w	r9, r5, r1
 8008dd2:	6965      	ldr	r5, [r4, #20]
 8008dd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ddc:	3301      	adds	r3, #1
 8008dde:	444b      	add	r3, r9
 8008de0:	106d      	asrs	r5, r5, #1
 8008de2:	429d      	cmp	r5, r3
 8008de4:	bf38      	it	cc
 8008de6:	461d      	movcc	r5, r3
 8008de8:	0553      	lsls	r3, r2, #21
 8008dea:	d531      	bpl.n	8008e50 <__ssputs_r+0xa0>
 8008dec:	4629      	mov	r1, r5
 8008dee:	f7ff fe8f 	bl	8008b10 <_malloc_r>
 8008df2:	4606      	mov	r6, r0
 8008df4:	b950      	cbnz	r0, 8008e0c <__ssputs_r+0x5c>
 8008df6:	230c      	movs	r3, #12
 8008df8:	f8ca 3000 	str.w	r3, [sl]
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e02:	81a3      	strh	r3, [r4, #12]
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295
 8008e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0c:	6921      	ldr	r1, [r4, #16]
 8008e0e:	464a      	mov	r2, r9
 8008e10:	f7ff fe68 	bl	8008ae4 <memcpy>
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e1e:	81a3      	strh	r3, [r4, #12]
 8008e20:	6126      	str	r6, [r4, #16]
 8008e22:	6165      	str	r5, [r4, #20]
 8008e24:	444e      	add	r6, r9
 8008e26:	eba5 0509 	sub.w	r5, r5, r9
 8008e2a:	6026      	str	r6, [r4, #0]
 8008e2c:	60a5      	str	r5, [r4, #8]
 8008e2e:	463e      	mov	r6, r7
 8008e30:	42be      	cmp	r6, r7
 8008e32:	d900      	bls.n	8008e36 <__ssputs_r+0x86>
 8008e34:	463e      	mov	r6, r7
 8008e36:	4632      	mov	r2, r6
 8008e38:	6820      	ldr	r0, [r4, #0]
 8008e3a:	4641      	mov	r1, r8
 8008e3c:	f000 faa8 	bl	8009390 <memmove>
 8008e40:	68a3      	ldr	r3, [r4, #8]
 8008e42:	6822      	ldr	r2, [r4, #0]
 8008e44:	1b9b      	subs	r3, r3, r6
 8008e46:	4432      	add	r2, r6
 8008e48:	60a3      	str	r3, [r4, #8]
 8008e4a:	6022      	str	r2, [r4, #0]
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	e7db      	b.n	8008e08 <__ssputs_r+0x58>
 8008e50:	462a      	mov	r2, r5
 8008e52:	f000 fab7 	bl	80093c4 <_realloc_r>
 8008e56:	4606      	mov	r6, r0
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d1e1      	bne.n	8008e20 <__ssputs_r+0x70>
 8008e5c:	6921      	ldr	r1, [r4, #16]
 8008e5e:	4650      	mov	r0, sl
 8008e60:	f7ff ff56 	bl	8008d10 <_free_r>
 8008e64:	e7c7      	b.n	8008df6 <__ssputs_r+0x46>
	...

08008e68 <_svfiprintf_r>:
 8008e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6c:	4698      	mov	r8, r3
 8008e6e:	898b      	ldrh	r3, [r1, #12]
 8008e70:	061b      	lsls	r3, r3, #24
 8008e72:	b09d      	sub	sp, #116	; 0x74
 8008e74:	4607      	mov	r7, r0
 8008e76:	460d      	mov	r5, r1
 8008e78:	4614      	mov	r4, r2
 8008e7a:	d50e      	bpl.n	8008e9a <_svfiprintf_r+0x32>
 8008e7c:	690b      	ldr	r3, [r1, #16]
 8008e7e:	b963      	cbnz	r3, 8008e9a <_svfiprintf_r+0x32>
 8008e80:	2140      	movs	r1, #64	; 0x40
 8008e82:	f7ff fe45 	bl	8008b10 <_malloc_r>
 8008e86:	6028      	str	r0, [r5, #0]
 8008e88:	6128      	str	r0, [r5, #16]
 8008e8a:	b920      	cbnz	r0, 8008e96 <_svfiprintf_r+0x2e>
 8008e8c:	230c      	movs	r3, #12
 8008e8e:	603b      	str	r3, [r7, #0]
 8008e90:	f04f 30ff 	mov.w	r0, #4294967295
 8008e94:	e0d1      	b.n	800903a <_svfiprintf_r+0x1d2>
 8008e96:	2340      	movs	r3, #64	; 0x40
 8008e98:	616b      	str	r3, [r5, #20]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e9e:	2320      	movs	r3, #32
 8008ea0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ea4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ea8:	2330      	movs	r3, #48	; 0x30
 8008eaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009054 <_svfiprintf_r+0x1ec>
 8008eae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008eb2:	f04f 0901 	mov.w	r9, #1
 8008eb6:	4623      	mov	r3, r4
 8008eb8:	469a      	mov	sl, r3
 8008eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ebe:	b10a      	cbz	r2, 8008ec4 <_svfiprintf_r+0x5c>
 8008ec0:	2a25      	cmp	r2, #37	; 0x25
 8008ec2:	d1f9      	bne.n	8008eb8 <_svfiprintf_r+0x50>
 8008ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ec8:	d00b      	beq.n	8008ee2 <_svfiprintf_r+0x7a>
 8008eca:	465b      	mov	r3, fp
 8008ecc:	4622      	mov	r2, r4
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	f7ff ff6d 	bl	8008db0 <__ssputs_r>
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	f000 80aa 	beq.w	8009030 <_svfiprintf_r+0x1c8>
 8008edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ede:	445a      	add	r2, fp
 8008ee0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 80a2 	beq.w	8009030 <_svfiprintf_r+0x1c8>
 8008eec:	2300      	movs	r3, #0
 8008eee:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ef6:	f10a 0a01 	add.w	sl, sl, #1
 8008efa:	9304      	str	r3, [sp, #16]
 8008efc:	9307      	str	r3, [sp, #28]
 8008efe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f02:	931a      	str	r3, [sp, #104]	; 0x68
 8008f04:	4654      	mov	r4, sl
 8008f06:	2205      	movs	r2, #5
 8008f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f0c:	4851      	ldr	r0, [pc, #324]	; (8009054 <_svfiprintf_r+0x1ec>)
 8008f0e:	f7f7 f967 	bl	80001e0 <memchr>
 8008f12:	9a04      	ldr	r2, [sp, #16]
 8008f14:	b9d8      	cbnz	r0, 8008f4e <_svfiprintf_r+0xe6>
 8008f16:	06d0      	lsls	r0, r2, #27
 8008f18:	bf44      	itt	mi
 8008f1a:	2320      	movmi	r3, #32
 8008f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f20:	0711      	lsls	r1, r2, #28
 8008f22:	bf44      	itt	mi
 8008f24:	232b      	movmi	r3, #43	; 0x2b
 8008f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f30:	d015      	beq.n	8008f5e <_svfiprintf_r+0xf6>
 8008f32:	9a07      	ldr	r2, [sp, #28]
 8008f34:	4654      	mov	r4, sl
 8008f36:	2000      	movs	r0, #0
 8008f38:	f04f 0c0a 	mov.w	ip, #10
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f42:	3b30      	subs	r3, #48	; 0x30
 8008f44:	2b09      	cmp	r3, #9
 8008f46:	d94e      	bls.n	8008fe6 <_svfiprintf_r+0x17e>
 8008f48:	b1b0      	cbz	r0, 8008f78 <_svfiprintf_r+0x110>
 8008f4a:	9207      	str	r2, [sp, #28]
 8008f4c:	e014      	b.n	8008f78 <_svfiprintf_r+0x110>
 8008f4e:	eba0 0308 	sub.w	r3, r0, r8
 8008f52:	fa09 f303 	lsl.w	r3, r9, r3
 8008f56:	4313      	orrs	r3, r2
 8008f58:	9304      	str	r3, [sp, #16]
 8008f5a:	46a2      	mov	sl, r4
 8008f5c:	e7d2      	b.n	8008f04 <_svfiprintf_r+0x9c>
 8008f5e:	9b03      	ldr	r3, [sp, #12]
 8008f60:	1d19      	adds	r1, r3, #4
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	9103      	str	r1, [sp, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	bfbb      	ittet	lt
 8008f6a:	425b      	neglt	r3, r3
 8008f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8008f70:	9307      	strge	r3, [sp, #28]
 8008f72:	9307      	strlt	r3, [sp, #28]
 8008f74:	bfb8      	it	lt
 8008f76:	9204      	strlt	r2, [sp, #16]
 8008f78:	7823      	ldrb	r3, [r4, #0]
 8008f7a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f7c:	d10c      	bne.n	8008f98 <_svfiprintf_r+0x130>
 8008f7e:	7863      	ldrb	r3, [r4, #1]
 8008f80:	2b2a      	cmp	r3, #42	; 0x2a
 8008f82:	d135      	bne.n	8008ff0 <_svfiprintf_r+0x188>
 8008f84:	9b03      	ldr	r3, [sp, #12]
 8008f86:	1d1a      	adds	r2, r3, #4
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	9203      	str	r2, [sp, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	bfb8      	it	lt
 8008f90:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f94:	3402      	adds	r4, #2
 8008f96:	9305      	str	r3, [sp, #20]
 8008f98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009064 <_svfiprintf_r+0x1fc>
 8008f9c:	7821      	ldrb	r1, [r4, #0]
 8008f9e:	2203      	movs	r2, #3
 8008fa0:	4650      	mov	r0, sl
 8008fa2:	f7f7 f91d 	bl	80001e0 <memchr>
 8008fa6:	b140      	cbz	r0, 8008fba <_svfiprintf_r+0x152>
 8008fa8:	2340      	movs	r3, #64	; 0x40
 8008faa:	eba0 000a 	sub.w	r0, r0, sl
 8008fae:	fa03 f000 	lsl.w	r0, r3, r0
 8008fb2:	9b04      	ldr	r3, [sp, #16]
 8008fb4:	4303      	orrs	r3, r0
 8008fb6:	3401      	adds	r4, #1
 8008fb8:	9304      	str	r3, [sp, #16]
 8008fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fbe:	4826      	ldr	r0, [pc, #152]	; (8009058 <_svfiprintf_r+0x1f0>)
 8008fc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fc4:	2206      	movs	r2, #6
 8008fc6:	f7f7 f90b 	bl	80001e0 <memchr>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d038      	beq.n	8009040 <_svfiprintf_r+0x1d8>
 8008fce:	4b23      	ldr	r3, [pc, #140]	; (800905c <_svfiprintf_r+0x1f4>)
 8008fd0:	bb1b      	cbnz	r3, 800901a <_svfiprintf_r+0x1b2>
 8008fd2:	9b03      	ldr	r3, [sp, #12]
 8008fd4:	3307      	adds	r3, #7
 8008fd6:	f023 0307 	bic.w	r3, r3, #7
 8008fda:	3308      	adds	r3, #8
 8008fdc:	9303      	str	r3, [sp, #12]
 8008fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe0:	4433      	add	r3, r6
 8008fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe4:	e767      	b.n	8008eb6 <_svfiprintf_r+0x4e>
 8008fe6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fea:	460c      	mov	r4, r1
 8008fec:	2001      	movs	r0, #1
 8008fee:	e7a5      	b.n	8008f3c <_svfiprintf_r+0xd4>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	3401      	adds	r4, #1
 8008ff4:	9305      	str	r3, [sp, #20]
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	f04f 0c0a 	mov.w	ip, #10
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009002:	3a30      	subs	r2, #48	; 0x30
 8009004:	2a09      	cmp	r2, #9
 8009006:	d903      	bls.n	8009010 <_svfiprintf_r+0x1a8>
 8009008:	2b00      	cmp	r3, #0
 800900a:	d0c5      	beq.n	8008f98 <_svfiprintf_r+0x130>
 800900c:	9105      	str	r1, [sp, #20]
 800900e:	e7c3      	b.n	8008f98 <_svfiprintf_r+0x130>
 8009010:	fb0c 2101 	mla	r1, ip, r1, r2
 8009014:	4604      	mov	r4, r0
 8009016:	2301      	movs	r3, #1
 8009018:	e7f0      	b.n	8008ffc <_svfiprintf_r+0x194>
 800901a:	ab03      	add	r3, sp, #12
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	462a      	mov	r2, r5
 8009020:	4b0f      	ldr	r3, [pc, #60]	; (8009060 <_svfiprintf_r+0x1f8>)
 8009022:	a904      	add	r1, sp, #16
 8009024:	4638      	mov	r0, r7
 8009026:	f3af 8000 	nop.w
 800902a:	1c42      	adds	r2, r0, #1
 800902c:	4606      	mov	r6, r0
 800902e:	d1d6      	bne.n	8008fde <_svfiprintf_r+0x176>
 8009030:	89ab      	ldrh	r3, [r5, #12]
 8009032:	065b      	lsls	r3, r3, #25
 8009034:	f53f af2c 	bmi.w	8008e90 <_svfiprintf_r+0x28>
 8009038:	9809      	ldr	r0, [sp, #36]	; 0x24
 800903a:	b01d      	add	sp, #116	; 0x74
 800903c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009040:	ab03      	add	r3, sp, #12
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	462a      	mov	r2, r5
 8009046:	4b06      	ldr	r3, [pc, #24]	; (8009060 <_svfiprintf_r+0x1f8>)
 8009048:	a904      	add	r1, sp, #16
 800904a:	4638      	mov	r0, r7
 800904c:	f000 f87a 	bl	8009144 <_printf_i>
 8009050:	e7eb      	b.n	800902a <_svfiprintf_r+0x1c2>
 8009052:	bf00      	nop
 8009054:	08009858 	.word	0x08009858
 8009058:	08009862 	.word	0x08009862
 800905c:	00000000 	.word	0x00000000
 8009060:	08008db1 	.word	0x08008db1
 8009064:	0800985e 	.word	0x0800985e

08009068 <_printf_common>:
 8009068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800906c:	4616      	mov	r6, r2
 800906e:	4699      	mov	r9, r3
 8009070:	688a      	ldr	r2, [r1, #8]
 8009072:	690b      	ldr	r3, [r1, #16]
 8009074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009078:	4293      	cmp	r3, r2
 800907a:	bfb8      	it	lt
 800907c:	4613      	movlt	r3, r2
 800907e:	6033      	str	r3, [r6, #0]
 8009080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009084:	4607      	mov	r7, r0
 8009086:	460c      	mov	r4, r1
 8009088:	b10a      	cbz	r2, 800908e <_printf_common+0x26>
 800908a:	3301      	adds	r3, #1
 800908c:	6033      	str	r3, [r6, #0]
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	0699      	lsls	r1, r3, #26
 8009092:	bf42      	ittt	mi
 8009094:	6833      	ldrmi	r3, [r6, #0]
 8009096:	3302      	addmi	r3, #2
 8009098:	6033      	strmi	r3, [r6, #0]
 800909a:	6825      	ldr	r5, [r4, #0]
 800909c:	f015 0506 	ands.w	r5, r5, #6
 80090a0:	d106      	bne.n	80090b0 <_printf_common+0x48>
 80090a2:	f104 0a19 	add.w	sl, r4, #25
 80090a6:	68e3      	ldr	r3, [r4, #12]
 80090a8:	6832      	ldr	r2, [r6, #0]
 80090aa:	1a9b      	subs	r3, r3, r2
 80090ac:	42ab      	cmp	r3, r5
 80090ae:	dc26      	bgt.n	80090fe <_printf_common+0x96>
 80090b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090b4:	1e13      	subs	r3, r2, #0
 80090b6:	6822      	ldr	r2, [r4, #0]
 80090b8:	bf18      	it	ne
 80090ba:	2301      	movne	r3, #1
 80090bc:	0692      	lsls	r2, r2, #26
 80090be:	d42b      	bmi.n	8009118 <_printf_common+0xb0>
 80090c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090c4:	4649      	mov	r1, r9
 80090c6:	4638      	mov	r0, r7
 80090c8:	47c0      	blx	r8
 80090ca:	3001      	adds	r0, #1
 80090cc:	d01e      	beq.n	800910c <_printf_common+0xa4>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	68e5      	ldr	r5, [r4, #12]
 80090d2:	6832      	ldr	r2, [r6, #0]
 80090d4:	f003 0306 	and.w	r3, r3, #6
 80090d8:	2b04      	cmp	r3, #4
 80090da:	bf08      	it	eq
 80090dc:	1aad      	subeq	r5, r5, r2
 80090de:	68a3      	ldr	r3, [r4, #8]
 80090e0:	6922      	ldr	r2, [r4, #16]
 80090e2:	bf0c      	ite	eq
 80090e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090e8:	2500      	movne	r5, #0
 80090ea:	4293      	cmp	r3, r2
 80090ec:	bfc4      	itt	gt
 80090ee:	1a9b      	subgt	r3, r3, r2
 80090f0:	18ed      	addgt	r5, r5, r3
 80090f2:	2600      	movs	r6, #0
 80090f4:	341a      	adds	r4, #26
 80090f6:	42b5      	cmp	r5, r6
 80090f8:	d11a      	bne.n	8009130 <_printf_common+0xc8>
 80090fa:	2000      	movs	r0, #0
 80090fc:	e008      	b.n	8009110 <_printf_common+0xa8>
 80090fe:	2301      	movs	r3, #1
 8009100:	4652      	mov	r2, sl
 8009102:	4649      	mov	r1, r9
 8009104:	4638      	mov	r0, r7
 8009106:	47c0      	blx	r8
 8009108:	3001      	adds	r0, #1
 800910a:	d103      	bne.n	8009114 <_printf_common+0xac>
 800910c:	f04f 30ff 	mov.w	r0, #4294967295
 8009110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009114:	3501      	adds	r5, #1
 8009116:	e7c6      	b.n	80090a6 <_printf_common+0x3e>
 8009118:	18e1      	adds	r1, r4, r3
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	2030      	movs	r0, #48	; 0x30
 800911e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009122:	4422      	add	r2, r4
 8009124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800912c:	3302      	adds	r3, #2
 800912e:	e7c7      	b.n	80090c0 <_printf_common+0x58>
 8009130:	2301      	movs	r3, #1
 8009132:	4622      	mov	r2, r4
 8009134:	4649      	mov	r1, r9
 8009136:	4638      	mov	r0, r7
 8009138:	47c0      	blx	r8
 800913a:	3001      	adds	r0, #1
 800913c:	d0e6      	beq.n	800910c <_printf_common+0xa4>
 800913e:	3601      	adds	r6, #1
 8009140:	e7d9      	b.n	80090f6 <_printf_common+0x8e>
	...

08009144 <_printf_i>:
 8009144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009148:	460c      	mov	r4, r1
 800914a:	4691      	mov	r9, r2
 800914c:	7e27      	ldrb	r7, [r4, #24]
 800914e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009150:	2f78      	cmp	r7, #120	; 0x78
 8009152:	4680      	mov	r8, r0
 8009154:	469a      	mov	sl, r3
 8009156:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800915a:	d807      	bhi.n	800916c <_printf_i+0x28>
 800915c:	2f62      	cmp	r7, #98	; 0x62
 800915e:	d80a      	bhi.n	8009176 <_printf_i+0x32>
 8009160:	2f00      	cmp	r7, #0
 8009162:	f000 80d8 	beq.w	8009316 <_printf_i+0x1d2>
 8009166:	2f58      	cmp	r7, #88	; 0x58
 8009168:	f000 80a3 	beq.w	80092b2 <_printf_i+0x16e>
 800916c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009174:	e03a      	b.n	80091ec <_printf_i+0xa8>
 8009176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800917a:	2b15      	cmp	r3, #21
 800917c:	d8f6      	bhi.n	800916c <_printf_i+0x28>
 800917e:	a001      	add	r0, pc, #4	; (adr r0, 8009184 <_printf_i+0x40>)
 8009180:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009184:	080091dd 	.word	0x080091dd
 8009188:	080091f1 	.word	0x080091f1
 800918c:	0800916d 	.word	0x0800916d
 8009190:	0800916d 	.word	0x0800916d
 8009194:	0800916d 	.word	0x0800916d
 8009198:	0800916d 	.word	0x0800916d
 800919c:	080091f1 	.word	0x080091f1
 80091a0:	0800916d 	.word	0x0800916d
 80091a4:	0800916d 	.word	0x0800916d
 80091a8:	0800916d 	.word	0x0800916d
 80091ac:	0800916d 	.word	0x0800916d
 80091b0:	080092fd 	.word	0x080092fd
 80091b4:	08009221 	.word	0x08009221
 80091b8:	080092df 	.word	0x080092df
 80091bc:	0800916d 	.word	0x0800916d
 80091c0:	0800916d 	.word	0x0800916d
 80091c4:	0800931f 	.word	0x0800931f
 80091c8:	0800916d 	.word	0x0800916d
 80091cc:	08009221 	.word	0x08009221
 80091d0:	0800916d 	.word	0x0800916d
 80091d4:	0800916d 	.word	0x0800916d
 80091d8:	080092e7 	.word	0x080092e7
 80091dc:	680b      	ldr	r3, [r1, #0]
 80091de:	1d1a      	adds	r2, r3, #4
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	600a      	str	r2, [r1, #0]
 80091e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091ec:	2301      	movs	r3, #1
 80091ee:	e0a3      	b.n	8009338 <_printf_i+0x1f4>
 80091f0:	6825      	ldr	r5, [r4, #0]
 80091f2:	6808      	ldr	r0, [r1, #0]
 80091f4:	062e      	lsls	r6, r5, #24
 80091f6:	f100 0304 	add.w	r3, r0, #4
 80091fa:	d50a      	bpl.n	8009212 <_printf_i+0xce>
 80091fc:	6805      	ldr	r5, [r0, #0]
 80091fe:	600b      	str	r3, [r1, #0]
 8009200:	2d00      	cmp	r5, #0
 8009202:	da03      	bge.n	800920c <_printf_i+0xc8>
 8009204:	232d      	movs	r3, #45	; 0x2d
 8009206:	426d      	negs	r5, r5
 8009208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800920c:	485e      	ldr	r0, [pc, #376]	; (8009388 <_printf_i+0x244>)
 800920e:	230a      	movs	r3, #10
 8009210:	e019      	b.n	8009246 <_printf_i+0x102>
 8009212:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009216:	6805      	ldr	r5, [r0, #0]
 8009218:	600b      	str	r3, [r1, #0]
 800921a:	bf18      	it	ne
 800921c:	b22d      	sxthne	r5, r5
 800921e:	e7ef      	b.n	8009200 <_printf_i+0xbc>
 8009220:	680b      	ldr	r3, [r1, #0]
 8009222:	6825      	ldr	r5, [r4, #0]
 8009224:	1d18      	adds	r0, r3, #4
 8009226:	6008      	str	r0, [r1, #0]
 8009228:	0628      	lsls	r0, r5, #24
 800922a:	d501      	bpl.n	8009230 <_printf_i+0xec>
 800922c:	681d      	ldr	r5, [r3, #0]
 800922e:	e002      	b.n	8009236 <_printf_i+0xf2>
 8009230:	0669      	lsls	r1, r5, #25
 8009232:	d5fb      	bpl.n	800922c <_printf_i+0xe8>
 8009234:	881d      	ldrh	r5, [r3, #0]
 8009236:	4854      	ldr	r0, [pc, #336]	; (8009388 <_printf_i+0x244>)
 8009238:	2f6f      	cmp	r7, #111	; 0x6f
 800923a:	bf0c      	ite	eq
 800923c:	2308      	moveq	r3, #8
 800923e:	230a      	movne	r3, #10
 8009240:	2100      	movs	r1, #0
 8009242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009246:	6866      	ldr	r6, [r4, #4]
 8009248:	60a6      	str	r6, [r4, #8]
 800924a:	2e00      	cmp	r6, #0
 800924c:	bfa2      	ittt	ge
 800924e:	6821      	ldrge	r1, [r4, #0]
 8009250:	f021 0104 	bicge.w	r1, r1, #4
 8009254:	6021      	strge	r1, [r4, #0]
 8009256:	b90d      	cbnz	r5, 800925c <_printf_i+0x118>
 8009258:	2e00      	cmp	r6, #0
 800925a:	d04d      	beq.n	80092f8 <_printf_i+0x1b4>
 800925c:	4616      	mov	r6, r2
 800925e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009262:	fb03 5711 	mls	r7, r3, r1, r5
 8009266:	5dc7      	ldrb	r7, [r0, r7]
 8009268:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800926c:	462f      	mov	r7, r5
 800926e:	42bb      	cmp	r3, r7
 8009270:	460d      	mov	r5, r1
 8009272:	d9f4      	bls.n	800925e <_printf_i+0x11a>
 8009274:	2b08      	cmp	r3, #8
 8009276:	d10b      	bne.n	8009290 <_printf_i+0x14c>
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	07df      	lsls	r7, r3, #31
 800927c:	d508      	bpl.n	8009290 <_printf_i+0x14c>
 800927e:	6923      	ldr	r3, [r4, #16]
 8009280:	6861      	ldr	r1, [r4, #4]
 8009282:	4299      	cmp	r1, r3
 8009284:	bfde      	ittt	le
 8009286:	2330      	movle	r3, #48	; 0x30
 8009288:	f806 3c01 	strble.w	r3, [r6, #-1]
 800928c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009290:	1b92      	subs	r2, r2, r6
 8009292:	6122      	str	r2, [r4, #16]
 8009294:	f8cd a000 	str.w	sl, [sp]
 8009298:	464b      	mov	r3, r9
 800929a:	aa03      	add	r2, sp, #12
 800929c:	4621      	mov	r1, r4
 800929e:	4640      	mov	r0, r8
 80092a0:	f7ff fee2 	bl	8009068 <_printf_common>
 80092a4:	3001      	adds	r0, #1
 80092a6:	d14c      	bne.n	8009342 <_printf_i+0x1fe>
 80092a8:	f04f 30ff 	mov.w	r0, #4294967295
 80092ac:	b004      	add	sp, #16
 80092ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b2:	4835      	ldr	r0, [pc, #212]	; (8009388 <_printf_i+0x244>)
 80092b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092b8:	6823      	ldr	r3, [r4, #0]
 80092ba:	680e      	ldr	r6, [r1, #0]
 80092bc:	061f      	lsls	r7, r3, #24
 80092be:	f856 5b04 	ldr.w	r5, [r6], #4
 80092c2:	600e      	str	r6, [r1, #0]
 80092c4:	d514      	bpl.n	80092f0 <_printf_i+0x1ac>
 80092c6:	07d9      	lsls	r1, r3, #31
 80092c8:	bf44      	itt	mi
 80092ca:	f043 0320 	orrmi.w	r3, r3, #32
 80092ce:	6023      	strmi	r3, [r4, #0]
 80092d0:	b91d      	cbnz	r5, 80092da <_printf_i+0x196>
 80092d2:	6823      	ldr	r3, [r4, #0]
 80092d4:	f023 0320 	bic.w	r3, r3, #32
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	2310      	movs	r3, #16
 80092dc:	e7b0      	b.n	8009240 <_printf_i+0xfc>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	f043 0320 	orr.w	r3, r3, #32
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	2378      	movs	r3, #120	; 0x78
 80092e8:	4828      	ldr	r0, [pc, #160]	; (800938c <_printf_i+0x248>)
 80092ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092ee:	e7e3      	b.n	80092b8 <_printf_i+0x174>
 80092f0:	065e      	lsls	r6, r3, #25
 80092f2:	bf48      	it	mi
 80092f4:	b2ad      	uxthmi	r5, r5
 80092f6:	e7e6      	b.n	80092c6 <_printf_i+0x182>
 80092f8:	4616      	mov	r6, r2
 80092fa:	e7bb      	b.n	8009274 <_printf_i+0x130>
 80092fc:	680b      	ldr	r3, [r1, #0]
 80092fe:	6826      	ldr	r6, [r4, #0]
 8009300:	6960      	ldr	r0, [r4, #20]
 8009302:	1d1d      	adds	r5, r3, #4
 8009304:	600d      	str	r5, [r1, #0]
 8009306:	0635      	lsls	r5, r6, #24
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	d501      	bpl.n	8009310 <_printf_i+0x1cc>
 800930c:	6018      	str	r0, [r3, #0]
 800930e:	e002      	b.n	8009316 <_printf_i+0x1d2>
 8009310:	0671      	lsls	r1, r6, #25
 8009312:	d5fb      	bpl.n	800930c <_printf_i+0x1c8>
 8009314:	8018      	strh	r0, [r3, #0]
 8009316:	2300      	movs	r3, #0
 8009318:	6123      	str	r3, [r4, #16]
 800931a:	4616      	mov	r6, r2
 800931c:	e7ba      	b.n	8009294 <_printf_i+0x150>
 800931e:	680b      	ldr	r3, [r1, #0]
 8009320:	1d1a      	adds	r2, r3, #4
 8009322:	600a      	str	r2, [r1, #0]
 8009324:	681e      	ldr	r6, [r3, #0]
 8009326:	6862      	ldr	r2, [r4, #4]
 8009328:	2100      	movs	r1, #0
 800932a:	4630      	mov	r0, r6
 800932c:	f7f6 ff58 	bl	80001e0 <memchr>
 8009330:	b108      	cbz	r0, 8009336 <_printf_i+0x1f2>
 8009332:	1b80      	subs	r0, r0, r6
 8009334:	6060      	str	r0, [r4, #4]
 8009336:	6863      	ldr	r3, [r4, #4]
 8009338:	6123      	str	r3, [r4, #16]
 800933a:	2300      	movs	r3, #0
 800933c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009340:	e7a8      	b.n	8009294 <_printf_i+0x150>
 8009342:	6923      	ldr	r3, [r4, #16]
 8009344:	4632      	mov	r2, r6
 8009346:	4649      	mov	r1, r9
 8009348:	4640      	mov	r0, r8
 800934a:	47d0      	blx	sl
 800934c:	3001      	adds	r0, #1
 800934e:	d0ab      	beq.n	80092a8 <_printf_i+0x164>
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	079b      	lsls	r3, r3, #30
 8009354:	d413      	bmi.n	800937e <_printf_i+0x23a>
 8009356:	68e0      	ldr	r0, [r4, #12]
 8009358:	9b03      	ldr	r3, [sp, #12]
 800935a:	4298      	cmp	r0, r3
 800935c:	bfb8      	it	lt
 800935e:	4618      	movlt	r0, r3
 8009360:	e7a4      	b.n	80092ac <_printf_i+0x168>
 8009362:	2301      	movs	r3, #1
 8009364:	4632      	mov	r2, r6
 8009366:	4649      	mov	r1, r9
 8009368:	4640      	mov	r0, r8
 800936a:	47d0      	blx	sl
 800936c:	3001      	adds	r0, #1
 800936e:	d09b      	beq.n	80092a8 <_printf_i+0x164>
 8009370:	3501      	adds	r5, #1
 8009372:	68e3      	ldr	r3, [r4, #12]
 8009374:	9903      	ldr	r1, [sp, #12]
 8009376:	1a5b      	subs	r3, r3, r1
 8009378:	42ab      	cmp	r3, r5
 800937a:	dcf2      	bgt.n	8009362 <_printf_i+0x21e>
 800937c:	e7eb      	b.n	8009356 <_printf_i+0x212>
 800937e:	2500      	movs	r5, #0
 8009380:	f104 0619 	add.w	r6, r4, #25
 8009384:	e7f5      	b.n	8009372 <_printf_i+0x22e>
 8009386:	bf00      	nop
 8009388:	08009869 	.word	0x08009869
 800938c:	0800987a 	.word	0x0800987a

08009390 <memmove>:
 8009390:	4288      	cmp	r0, r1
 8009392:	b510      	push	{r4, lr}
 8009394:	eb01 0402 	add.w	r4, r1, r2
 8009398:	d902      	bls.n	80093a0 <memmove+0x10>
 800939a:	4284      	cmp	r4, r0
 800939c:	4623      	mov	r3, r4
 800939e:	d807      	bhi.n	80093b0 <memmove+0x20>
 80093a0:	1e43      	subs	r3, r0, #1
 80093a2:	42a1      	cmp	r1, r4
 80093a4:	d008      	beq.n	80093b8 <memmove+0x28>
 80093a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093ae:	e7f8      	b.n	80093a2 <memmove+0x12>
 80093b0:	4402      	add	r2, r0
 80093b2:	4601      	mov	r1, r0
 80093b4:	428a      	cmp	r2, r1
 80093b6:	d100      	bne.n	80093ba <memmove+0x2a>
 80093b8:	bd10      	pop	{r4, pc}
 80093ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093c2:	e7f7      	b.n	80093b4 <memmove+0x24>

080093c4 <_realloc_r>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	4607      	mov	r7, r0
 80093c8:	4614      	mov	r4, r2
 80093ca:	460e      	mov	r6, r1
 80093cc:	b921      	cbnz	r1, 80093d8 <_realloc_r+0x14>
 80093ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093d2:	4611      	mov	r1, r2
 80093d4:	f7ff bb9c 	b.w	8008b10 <_malloc_r>
 80093d8:	b922      	cbnz	r2, 80093e4 <_realloc_r+0x20>
 80093da:	f7ff fc99 	bl	8008d10 <_free_r>
 80093de:	4625      	mov	r5, r4
 80093e0:	4628      	mov	r0, r5
 80093e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093e4:	f000 f814 	bl	8009410 <_malloc_usable_size_r>
 80093e8:	42a0      	cmp	r0, r4
 80093ea:	d20f      	bcs.n	800940c <_realloc_r+0x48>
 80093ec:	4621      	mov	r1, r4
 80093ee:	4638      	mov	r0, r7
 80093f0:	f7ff fb8e 	bl	8008b10 <_malloc_r>
 80093f4:	4605      	mov	r5, r0
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d0f2      	beq.n	80093e0 <_realloc_r+0x1c>
 80093fa:	4631      	mov	r1, r6
 80093fc:	4622      	mov	r2, r4
 80093fe:	f7ff fb71 	bl	8008ae4 <memcpy>
 8009402:	4631      	mov	r1, r6
 8009404:	4638      	mov	r0, r7
 8009406:	f7ff fc83 	bl	8008d10 <_free_r>
 800940a:	e7e9      	b.n	80093e0 <_realloc_r+0x1c>
 800940c:	4635      	mov	r5, r6
 800940e:	e7e7      	b.n	80093e0 <_realloc_r+0x1c>

08009410 <_malloc_usable_size_r>:
 8009410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009414:	1f18      	subs	r0, r3, #4
 8009416:	2b00      	cmp	r3, #0
 8009418:	bfbc      	itt	lt
 800941a:	580b      	ldrlt	r3, [r1, r0]
 800941c:	18c0      	addlt	r0, r0, r3
 800941e:	4770      	bx	lr

08009420 <_init>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	bf00      	nop
 8009424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009426:	bc08      	pop	{r3}
 8009428:	469e      	mov	lr, r3
 800942a:	4770      	bx	lr

0800942c <_fini>:
 800942c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942e:	bf00      	nop
 8009430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009432:	bc08      	pop	{r3}
 8009434:	469e      	mov	lr, r3
 8009436:	4770      	bx	lr
