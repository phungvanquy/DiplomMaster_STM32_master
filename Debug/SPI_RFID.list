
SPI_RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08009790  08009790  00019790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c9c  08009c9c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009c9c  08009c9c  00019c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ca4  08009ca4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ca4  08009ca4  00019ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ca8  08009ca8  00019ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b54  2000007c  08009d28  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bd0  08009d28  00024bd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020bca  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003da5  00000000  00000000  00040c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  00044a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001728  00000000  00000000  000462a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000054e5  00000000  00000000  000479c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019dbe  00000000  00000000  0004cead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cd90  00000000  00000000  00066c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001039fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072b8  00000000  00000000  00103a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009778 	.word	0x08009778

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08009778 	.word	0x08009778

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <spi_transfer>:
uchar MFRC522_Auth(uchar, uchar, uchar*, uchar*);
uchar MFRC522_Read(uchar, uchar*);
uchar MFRC522_Write(uchar, uchar*);
void MFRC522_Halt(void);

uint8_t spi_transfer(uint8_t byte_s) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af02      	add	r7, sp, #8
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	uint8_t rx;
	HAL_SPI_TransmitReceive(&hspi3, &byte_s, &rx, 1, 0xffffffff);
 8000582:	f107 020f 	add.w	r2, r7, #15
 8000586:	1df9      	adds	r1, r7, #7
 8000588:	f04f 33ff 	mov.w	r3, #4294967295
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <spi_transfer+0x28>)
 8000592:	f002 fb16 	bl	8002bc2 <HAL_SPI_TransmitReceive>
	return rx;
 8000596:	7bfb      	ldrb	r3, [r7, #15]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	200049c8 	.word	0x200049c8

080005a4 <Write_MFRC522>:
	values[index] = spi_transfer(0);// Read the final byte. Send 0 to stop reading.
	cs_set(1);

} // End PCD_ReadRegister()

void Write_MFRC522(uchar addr, uchar val) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	460a      	mov	r2, r1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	4613      	mov	r3, r2
 80005b2:	71bb      	strb	r3, [r7, #6]

	cs_clr(1);
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <Write_MFRC522+0x4c>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <Write_MFRC522+0x4c>)
 80005ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80005be:	6153      	str	r3, [r2, #20]
	spi_transfer(((addr << 1) & 0x7E));
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ffd3 	bl	8000578 <spi_transfer>
	spi_transfer(val);
 80005d2:	79bb      	ldrb	r3, [r7, #6]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffcf 	bl	8000578 <spi_transfer>
	cs_set(1);
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <Write_MFRC522+0x4c>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <Write_MFRC522+0x4c>)
 80005e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005e4:	6153      	str	r3, [r2, #20]

}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40020400 	.word	0x40020400

080005f4 <Read_MFRC522>:

uchar Read_MFRC522(uchar addr) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]

	int value;
	cs_clr(1);
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <Read_MFRC522+0x54>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a11      	ldr	r2, [pc, #68]	; (8000648 <Read_MFRC522+0x54>)
 8000604:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000608:	6153      	str	r3, [r2, #20]
	spi_transfer((((addr << 1) & 0x7E) | 0x80));
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	b25b      	sxtb	r3, r3
 8000610:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000614:	b25b      	sxtb	r3, r3
 8000616:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800061a:	b25b      	sxtb	r3, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ffaa 	bl	8000578 <spi_transfer>
	value = spi_transfer(0x00);
 8000624:	2000      	movs	r0, #0
 8000626:	f7ff ffa7 	bl	8000578 <spi_transfer>
 800062a:	4603      	mov	r3, r0
 800062c:	60fb      	str	r3, [r7, #12]
	cs_set(1);
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <Read_MFRC522+0x54>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <Read_MFRC522+0x54>)
 8000634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000638:	6153      	str	r3, [r2, #20]

	return value;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	b2db      	uxtb	r3, r3
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40020400 	.word	0x40020400

0800064c <MFRC522_Reset>:
 * Function Name: ResetMFRC522
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000650:	210f      	movs	r1, #15
 8000652:	2001      	movs	r0, #1
 8000654:	f7ff ffa6 	bl	80005a4 <Write_MFRC522>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}

0800065c <MFRC522_Init>:
 * Function Name:InitMFRC522
 * Description: Initialize RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Init(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8000660:	f7ff fff4 	bl	800064c <MFRC522_Reset>

	// Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);     // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000664:	218d      	movs	r1, #141	; 0x8d
 8000666:	202a      	movs	r0, #42	; 0x2a
 8000668:	f7ff ff9c 	bl	80005a4 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E); // TModeReg[3..0] + TPrescalerReg
 800066c:	213e      	movs	r1, #62	; 0x3e
 800066e:	202b      	movs	r0, #43	; 0x2b
 8000670:	f7ff ff98 	bl	80005a4 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8000674:	211e      	movs	r1, #30
 8000676:	202d      	movs	r0, #45	; 0x2d
 8000678:	f7ff ff94 	bl	80005a4 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 800067c:	2100      	movs	r1, #0
 800067e:	202c      	movs	r0, #44	; 0x2c
 8000680:	f7ff ff90 	bl	80005a4 <Write_MFRC522>
	Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 8000684:	2140      	movs	r1, #64	; 0x40
 8000686:	2015      	movs	r0, #21
 8000688:	f7ff ff8c 	bl	80005a4 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 800068c:	213d      	movs	r1, #61	; 0x3d
 800068e:	2011      	movs	r0, #17
 8000690:	f7ff ff88 	bl	80005a4 <Write_MFRC522>
	// interrupts, still playing with these
	// Write_MFRC522(CommIEnReg, 0xFF);
	// Write_MFRC522(DivlEnReg, 0xFF);

	// turn antenna on
	AntennaOn();
 8000694:	f000 f802 	bl	800069c <AntennaOn>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <AntennaOn>:
 * Function Name:AntennaOn
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	SetBitMask(TxControlReg, 0x03);
 80006a0:	2103      	movs	r1, #3
 80006a2:	2014      	movs	r0, #20
 80006a4:	f000 f802 	bl	80006ac <SetBitMask>
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <SetBitMask>:
 * Function Name:SetBitMask
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	460a      	mov	r2, r1
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	4613      	mov	r3, r2
 80006ba:	71bb      	strb	r3, [r7, #6]
	uchar tmp;
	tmp = Read_MFRC522(reg);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff98 	bl	80005f4 <Read_MFRC522>
 80006c4:	4603      	mov	r3, r0
 80006c6:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp | mask);  // set bit mask
 80006c8:	7bfa      	ldrb	r2, [r7, #15]
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	4611      	mov	r1, r2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff65 	bl	80005a4 <Write_MFRC522>
}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <MFRC522_Request>:
 *    0x0200 = Mifare_One(S70)
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b086      	sub	sp, #24
 80006e6:	af02      	add	r7, sp, #8
 80006e8:	4603      	mov	r3, r0
 80006ea:	6039      	str	r1, [r7, #0]
 80006ec:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits; // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);
 80006ee:	2107      	movs	r1, #7
 80006f0:	200d      	movs	r0, #13
 80006f2:	f7ff ff57 	bl	80005a4 <Write_MFRC522>
	// TxLastBists = BitFramingReg[2..0]

	TagType[0] = reqMode;
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	79fa      	ldrb	r2, [r7, #7]
 80006fa:	701a      	strb	r2, [r3, #0]

	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	2201      	movs	r2, #1
 8000706:	6839      	ldr	r1, [r7, #0]
 8000708:	200c      	movs	r0, #12
 800070a:	f000 f80f 	bl	800072c <MFRC522_ToCard>
 800070e:	4603      	mov	r3, r0
 8000710:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d102      	bne.n	800071e <MFRC522_Request+0x3c>
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	2b10      	cmp	r3, #16
 800071c:	d001      	beq.n	8000722 <MFRC522_Request+0x40>
		status = MI_ERR;
 800071e:	2302      	movs	r3, #2
 8000720:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000722:	7bfb      	ldrb	r3, [r7, #15]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen,
		uchar *backData, uint *backLen) {
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b089      	sub	sp, #36	; 0x24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	73fb      	strb	r3, [r7, #15]
 800073a:	4613      	mov	r3, r2
 800073c:	73bb      	strb	r3, [r7, #14]
	uchar status = MI_ERR;
 800073e:	2302      	movs	r3, #2
 8000740:	77fb      	strb	r3, [r7, #31]
	uchar irqEn = 0x00;
 8000742:	2300      	movs	r3, #0
 8000744:	77bb      	strb	r3, [r7, #30]
	uchar waitIRq = 0x00;
 8000746:	2300      	movs	r3, #0
 8000748:	777b      	strb	r3, [r7, #29]
	uchar lastBits;
	uchar n;
	uint i;

	switch (command) {
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	2b0c      	cmp	r3, #12
 800074e:	d006      	beq.n	800075e <MFRC522_ToCard+0x32>
 8000750:	2b0e      	cmp	r3, #14
 8000752:	d109      	bne.n	8000768 <MFRC522_ToCard+0x3c>
	case PCD_AUTHENT:     // Certification cards close
	{
		irqEn = 0x12;
 8000754:	2312      	movs	r3, #18
 8000756:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x10;
 8000758:	2310      	movs	r3, #16
 800075a:	777b      	strb	r3, [r7, #29]
		break;
 800075c:	e005      	b.n	800076a <MFRC522_ToCard+0x3e>
	}
	case PCD_TRANSCEIVE:  // Transmit FIFO data
	{
		irqEn = 0x77;
 800075e:	2377      	movs	r3, #119	; 0x77
 8000760:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x30;
 8000762:	2330      	movs	r3, #48	; 0x30
 8000764:	777b      	strb	r3, [r7, #29]
		break;
 8000766:	e000      	b.n	800076a <MFRC522_ToCard+0x3e>
	}
	default:
		break;
 8000768:	bf00      	nop
	}

	Write_MFRC522(CommIEnReg, irqEn | 0x80);  // Interrupt request
 800076a:	7fbb      	ldrb	r3, [r7, #30]
 800076c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4619      	mov	r1, r3
 8000774:	2002      	movs	r0, #2
 8000776:	f7ff ff15 	bl	80005a4 <Write_MFRC522>
	ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 800077a:	2180      	movs	r1, #128	; 0x80
 800077c:	2004      	movs	r0, #4
 800077e:	f000 f8b3 	bl	80008e8 <ClearBitMask>
	SetBitMask(FIFOLevelReg, 0x80);        // FlushBuffer=1, FIFO Initialization
 8000782:	2180      	movs	r1, #128	; 0x80
 8000784:	200a      	movs	r0, #10
 8000786:	f7ff ff91 	bl	80006ac <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE); // NO action; Cancel the current command
 800078a:	2100      	movs	r1, #0
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff ff09 	bl	80005a4 <Write_MFRC522>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
 8000796:	e00a      	b.n	80007ae <MFRC522_ToCard+0x82>
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000798:	68ba      	ldr	r2, [r7, #8]
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	2009      	movs	r0, #9
 80007a4:	f7ff fefe 	bl	80005a4 <Write_MFRC522>
	for (i = 0; i < sendLen; i++) {
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	3301      	adds	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	7bbb      	ldrb	r3, [r7, #14]
 80007b0:	69ba      	ldr	r2, [r7, #24]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d3f0      	bcc.n	8000798 <MFRC522_ToCard+0x6c>
	}

	// Execute the command
	Write_MFRC522(CommandReg, command);
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	4619      	mov	r1, r3
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff fef2 	bl	80005a4 <Write_MFRC522>
	if (command == PCD_TRANSCEIVE) {
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	2b0c      	cmp	r3, #12
 80007c4:	d103      	bne.n	80007ce <MFRC522_ToCard+0xa2>
		SetBitMask(BitFramingReg, 0x80); // StartSend=1,transmission of data starts  
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	200d      	movs	r0, #13
 80007ca:	f7ff ff6f 	bl	80006ac <SetBitMask>
	}

	// Waiting to receive data to complete
	i = 2000;// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80007ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007d2:	61bb      	str	r3, [r7, #24]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = Read_MFRC522(CommIrqReg);
 80007d4:	2004      	movs	r0, #4
 80007d6:	f7ff ff0d 	bl	80005f4 <Read_MFRC522>
 80007da:	4603      	mov	r3, r0
 80007dc:	773b      	strb	r3, [r7, #28]
		i--;
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d00a      	beq.n	8000800 <MFRC522_ToCard+0xd4>
 80007ea:	7f3b      	ldrb	r3, [r7, #28]
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d105      	bne.n	8000800 <MFRC522_ToCard+0xd4>
 80007f4:	7f3a      	ldrb	r2, [r7, #28]
 80007f6:	7f7b      	ldrb	r3, [r7, #29]
 80007f8:	4013      	ands	r3, r2
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0e9      	beq.n	80007d4 <MFRC522_ToCard+0xa8>
	ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	200d      	movs	r0, #13
 8000804:	f000 f870 	bl	80008e8 <ClearBitMask>
	if (i != 0) {
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d05a      	beq.n	80008c4 <MFRC522_ToCard+0x198>
		if (!(Read_MFRC522(ErrorReg) & 0x1B)) // BufferOvfl Collerr CRCErr ProtecolErr
 800080e:	2006      	movs	r0, #6
 8000810:	f7ff fef0 	bl	80005f4 <Read_MFRC522>
 8000814:	4603      	mov	r3, r0
 8000816:	f003 031b 	and.w	r3, r3, #27
 800081a:	2b00      	cmp	r3, #0
 800081c:	d148      	bne.n	80008b0 <MFRC522_ToCard+0x184>
		{
			status = MI_OK;
 800081e:	2300      	movs	r3, #0
 8000820:	77fb      	strb	r3, [r7, #31]
			if (n & irqEn & 0x01) {
 8000822:	7f3a      	ldrb	r2, [r7, #28]
 8000824:	7fbb      	ldrb	r3, [r7, #30]
 8000826:	4013      	ands	r3, r2
 8000828:	b2db      	uxtb	r3, r3
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MFRC522_ToCard+0x10a>
				status = MI_NOTAGERR;             // ??
 8000832:	2301      	movs	r3, #1
 8000834:	77fb      	strb	r3, [r7, #31]
			}

			if (command == PCD_TRANSCEIVE) {
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	2b0c      	cmp	r3, #12
 800083a:	d14a      	bne.n	80008d2 <MFRC522_ToCard+0x1a6>
				n = Read_MFRC522(FIFOLevelReg);
 800083c:	200a      	movs	r0, #10
 800083e:	f7ff fed9 	bl	80005f4 <Read_MFRC522>
 8000842:	4603      	mov	r3, r0
 8000844:	773b      	strb	r3, [r7, #28]
				lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000846:	200c      	movs	r0, #12
 8000848:	f7ff fed4 	bl	80005f4 <Read_MFRC522>
 800084c:	4603      	mov	r3, r0
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	75fb      	strb	r3, [r7, #23]
				if (lastBits) {
 8000854:	7dfb      	ldrb	r3, [r7, #23]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d008      	beq.n	800086c <MFRC522_ToCard+0x140>
					*backLen = (n - 1) * 8 + lastBits;
 800085a:	7f3b      	ldrb	r3, [r7, #28]
 800085c:	3b01      	subs	r3, #1
 800085e:	00da      	lsls	r2, r3, #3
 8000860:	7dfb      	ldrb	r3, [r7, #23]
 8000862:	4413      	add	r3, r2
 8000864:	461a      	mov	r2, r3
 8000866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	e004      	b.n	8000876 <MFRC522_ToCard+0x14a>
				} else {
					*backLen = n * 8;
 800086c:	7f3b      	ldrb	r3, [r7, #28]
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	461a      	mov	r2, r3
 8000872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000874:	601a      	str	r2, [r3, #0]
				}

				if (n == 0) {
 8000876:	7f3b      	ldrb	r3, [r7, #28]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d101      	bne.n	8000880 <MFRC522_ToCard+0x154>
					n = 1;
 800087c:	2301      	movs	r3, #1
 800087e:	773b      	strb	r3, [r7, #28]
				}
				if (n > MAX_LEN) {
 8000880:	7f3b      	ldrb	r3, [r7, #28]
 8000882:	2b10      	cmp	r3, #16
 8000884:	d901      	bls.n	800088a <MFRC522_ToCard+0x15e>
					n = MAX_LEN;
 8000886:	2310      	movs	r3, #16
 8000888:	773b      	strb	r3, [r7, #28]
				}

				// Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
 800088e:	e00a      	b.n	80008a6 <MFRC522_ToCard+0x17a>
					backData[i] = Read_MFRC522(FIFODataReg);
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	18d4      	adds	r4, r2, r3
 8000896:	2009      	movs	r0, #9
 8000898:	f7ff feac 	bl	80005f4 <Read_MFRC522>
 800089c:	4603      	mov	r3, r0
 800089e:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	3301      	adds	r3, #1
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	7f3b      	ldrb	r3, [r7, #28]
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d3f0      	bcc.n	8000890 <MFRC522_ToCard+0x164>
 80008ae:	e010      	b.n	80008d2 <MFRC522_ToCard+0x1a6>
				}
			}
		} else {
			//printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
			HAL_UART_Transmit(&huart2,
 80008b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80008b4:	2236      	movs	r2, #54	; 0x36
 80008b6:	4909      	ldr	r1, [pc, #36]	; (80008dc <MFRC522_ToCard+0x1b0>)
 80008b8:	4809      	ldr	r0, [pc, #36]	; (80008e0 <MFRC522_ToCard+0x1b4>)
 80008ba:	f002 febc 	bl	8003636 <HAL_UART_Transmit>
					(uchar*) "~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n",
					54, 5000);
			status = MI_ERR;
 80008be:	2302      	movs	r3, #2
 80008c0:	77fb      	strb	r3, [r7, #31]
 80008c2:	e006      	b.n	80008d2 <MFRC522_ToCard+0x1a6>
		}
	} else {
		//printf("~~~ request timed out\r\n");
		HAL_UART_Transmit(&huart2, (uchar*) "~~~ request timed out\r\n", 23,
 80008c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80008c8:	2217      	movs	r2, #23
 80008ca:	4906      	ldr	r1, [pc, #24]	; (80008e4 <MFRC522_ToCard+0x1b8>)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MFRC522_ToCard+0x1b4>)
 80008ce:	f002 feb2 	bl	8003636 <HAL_UART_Transmit>
				5000);

	}

	return status;
 80008d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3724      	adds	r7, #36	; 0x24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd90      	pop	{r4, r7, pc}
 80008dc:	08009790 	.word	0x08009790
 80008e0:	20004ae8 	.word	0x20004ae8
 80008e4:	080097c8 	.word	0x080097c8

080008e8 <ClearBitMask>:
 * Function Name: ClearBitMask
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
 */
void ClearBitMask(uchar reg, uchar mask) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	460a      	mov	r2, r1
 80008f2:	71fb      	strb	r3, [r7, #7]
 80008f4:	4613      	mov	r3, r2
 80008f6:	71bb      	strb	r3, [r7, #6]
	uchar tmp;
	tmp = Read_MFRC522(reg);
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fe7a 	bl	80005f4 <Read_MFRC522>
 8000900:	4603      	mov	r3, r0
 8000902:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000904:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000908:	43db      	mvns	r3, r3
 800090a:	b25a      	sxtb	r2, r3
 800090c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000910:	4013      	ands	r3, r2
 8000912:	b25b      	sxtb	r3, r3
 8000914:	b2da      	uxtb	r2, r3
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	4611      	mov	r1, r2
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fe42 	bl	80005a4 <Write_MFRC522>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <MFRC522_Anticoll>:
 * Function Name: MFRC522_Anticoll
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af02      	add	r7, sp, #8
 800092e:	6078      	str	r0, [r7, #4]
	uchar status;
	uchar i;
	uchar serNumCheck = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	737b      	strb	r3, [r7, #13]
	uint unLen;

	//ClearBitMask(Status2Reg, 0x08);		//TempSensclear
	//ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000934:	2100      	movs	r1, #0
 8000936:	200d      	movs	r0, #13
 8000938:	f7ff fe34 	bl	80005a4 <Write_MFRC522>

	serNum[0] = PICC_ANTICOLL;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2293      	movs	r2, #147	; 0x93
 8000940:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3301      	adds	r3, #1
 8000946:	2220      	movs	r2, #32
 8000948:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2202      	movs	r2, #2
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	200c      	movs	r0, #12
 8000958:	f7ff fee8 	bl	800072c <MFRC522_ToCard>
 800095c:	4603      	mov	r3, r0
 800095e:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d118      	bne.n	8000998 <MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8000966:	2300      	movs	r3, #0
 8000968:	73bb      	strb	r3, [r7, #14]
 800096a:	e009      	b.n	8000980 <MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 800096c:	7bbb      	ldrb	r3, [r7, #14]
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	781a      	ldrb	r2, [r3, #0]
 8000974:	7b7b      	ldrb	r3, [r7, #13]
 8000976:	4053      	eors	r3, r2
 8000978:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	3301      	adds	r3, #1
 800097e:	73bb      	strb	r3, [r7, #14]
 8000980:	7bbb      	ldrb	r3, [r7, #14]
 8000982:	2b03      	cmp	r3, #3
 8000984:	d9f2      	bls.n	800096c <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8000986:	7bbb      	ldrb	r3, [r7, #14]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	7b7a      	ldrb	r2, [r7, #13]
 8000990:	429a      	cmp	r2, r3
 8000992:	d001      	beq.n	8000998 <MFRC522_Anticoll+0x70>
			status = MI_ERR;
 8000994:	2302      	movs	r3, #2
 8000996:	73fb      	strb	r3, [r7, #15]
		}
	}

	//SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

	return status;
 8000998:	7bfb      	ldrb	r3, [r7, #15]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <MFRC522_Read>:
 * Function Name: MFRC522_Read
 * Description: Read block data
 * Input parameters: blockAddr - block address; recvData - read block data
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Read(uchar blockAddr, uchar *recvData) {
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af02      	add	r7, sp, #8
 80009a8:	4603      	mov	r3, r0
 80009aa:	6039      	str	r1, [r7, #0]
 80009ac:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint unLen;

	recvData[0] = PICC_READ;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	2230      	movs	r2, #48	; 0x30
 80009b2:	701a      	strb	r2, [r3, #0]
	recvData[1] = blockAddr;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	79fa      	ldrb	r2, [r7, #7]
 80009ba:	701a      	strb	r2, [r3, #0]
	CalulateCRC(recvData, 2, &recvData[2]);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	3302      	adds	r3, #2
 80009c0:	461a      	mov	r2, r3
 80009c2:	2102      	movs	r1, #2
 80009c4:	6838      	ldr	r0, [r7, #0]
 80009c6:	f000 f818 	bl	80009fa <CalulateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	2204      	movs	r2, #4
 80009d4:	6839      	ldr	r1, [r7, #0]
 80009d6:	200c      	movs	r0, #12
 80009d8:	f7ff fea8 	bl	800072c <MFRC522_ToCard>
 80009dc:	4603      	mov	r3, r0
 80009de:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (unLen != 0x90)) {
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d102      	bne.n	80009ec <MFRC522_Read+0x4a>
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	2b90      	cmp	r3, #144	; 0x90
 80009ea:	d001      	beq.n	80009f0 <MFRC522_Read+0x4e>
		status = MI_ERR;
 80009ec:	2302      	movs	r3, #2
 80009ee:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <CalulateCRC>:
 * Function Name: CalulateCRC
 * Description: CRC calculation with MF522
 * Input parameters: pIndata - To read the CRC data, len - the data length, pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC(uchar *pIndata, uchar len, uchar *pOutData) {
 80009fa:	b590      	push	{r4, r7, lr}
 80009fc:	b087      	sub	sp, #28
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	460b      	mov	r3, r1
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	72fb      	strb	r3, [r7, #11]
	uchar i, n;

	ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 8000a08:	2104      	movs	r1, #4
 8000a0a:	2005      	movs	r0, #5
 8000a0c:	f7ff ff6c 	bl	80008e8 <ClearBitMask>
	SetBitMask(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	200a      	movs	r0, #10
 8000a14:	f7ff fe4a 	bl	80006ac <SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	75fb      	strb	r3, [r7, #23]
 8000a1c:	e00a      	b.n	8000a34 <CalulateCRC+0x3a>
		Write_MFRC522(FIFODataReg, *(pIndata + i));
 8000a1e:	7dfb      	ldrb	r3, [r7, #23]
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	4619      	mov	r1, r3
 8000a28:	2009      	movs	r0, #9
 8000a2a:	f7ff fdbb 	bl	80005a4 <Write_MFRC522>
	for (i = 0; i < len; i++) {
 8000a2e:	7dfb      	ldrb	r3, [r7, #23]
 8000a30:	3301      	adds	r3, #1
 8000a32:	75fb      	strb	r3, [r7, #23]
 8000a34:	7dfa      	ldrb	r2, [r7, #23]
 8000a36:	7afb      	ldrb	r3, [r7, #11]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d3f0      	bcc.n	8000a1e <CalulateCRC+0x24>
	}
	Write_MFRC522(CommandReg, PCD_CALCCRC);
 8000a3c:	2103      	movs	r1, #3
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f7ff fdb0 	bl	80005a4 <Write_MFRC522>

	//Wait CRC calculation is complete
	i = 0xFF;
 8000a44:	23ff      	movs	r3, #255	; 0xff
 8000a46:	75fb      	strb	r3, [r7, #23]
	do {
		n = Read_MFRC522(DivIrqReg);
 8000a48:	2005      	movs	r0, #5
 8000a4a:	f7ff fdd3 	bl	80005f4 <Read_MFRC522>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	75bb      	strb	r3, [r7, #22]
		i--;
 8000a52:	7dfb      	ldrb	r3, [r7, #23]
 8000a54:	3b01      	subs	r3, #1
 8000a56:	75fb      	strb	r3, [r7, #23]
	} while ((i != 0) && !(n & 0x04));			//CRCIrq = 1
 8000a58:	7dfb      	ldrb	r3, [r7, #23]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d004      	beq.n	8000a68 <CalulateCRC+0x6e>
 8000a5e:	7dbb      	ldrb	r3, [r7, #22]
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d0ef      	beq.n	8000a48 <CalulateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = Read_MFRC522(CRCResultRegL);
 8000a68:	2022      	movs	r0, #34	; 0x22
 8000a6a:	f7ff fdc3 	bl	80005f4 <Read_MFRC522>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	461a      	mov	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	701a      	strb	r2, [r3, #0]
	pOutData[1] = Read_MFRC522(CRCResultRegM);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	1c5c      	adds	r4, r3, #1
 8000a7a:	2021      	movs	r0, #33	; 0x21
 8000a7c:	f7ff fdba 	bl	80005f4 <Read_MFRC522>
 8000a80:	4603      	mov	r3, r0
 8000a82:	7023      	strb	r3, [r4, #0]
}
 8000a84:	bf00      	nop
 8000a86:	371c      	adds	r7, #28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd90      	pop	{r4, r7, pc}

08000a8c <MFRC522_SelectTag>:
 * Function Name: MFRC522_SelectTag
 * Description: election card, read the card memory capacity
 * Input parameters: serNum - Incoming card serial number
 * Return value: the successful return of card capacity
 */
uchar MFRC522_SelectTag(uchar *serNum) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	6078      	str	r0, [r7, #4]
	uint recvBits;
	uchar buffer[9];

	//ClearBitMask(Status2Reg, 0x08);			//MFCrypto1On=0

	buffer[0] = PICC_SElECTTAG;
 8000a94:	2393      	movs	r3, #147	; 0x93
 8000a96:	733b      	strb	r3, [r7, #12]
	buffer[1] = 0x70;
 8000a98:	2370      	movs	r3, #112	; 0x70
 8000a9a:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < 5; i++) {
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	77fb      	strb	r3, [r7, #31]
 8000aa0:	e00d      	b.n	8000abe <MFRC522_SelectTag+0x32>
		buffer[i + 2] = *(serNum + i);
 8000aa2:	7ffb      	ldrb	r3, [r7, #31]
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	441a      	add	r2, r3
 8000aa8:	7ffb      	ldrb	r3, [r7, #31]
 8000aaa:	3302      	adds	r3, #2
 8000aac:	7812      	ldrb	r2, [r2, #0]
 8000aae:	f107 0120 	add.w	r1, r7, #32
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 5; i++) {
 8000ab8:	7ffb      	ldrb	r3, [r7, #31]
 8000aba:	3301      	adds	r3, #1
 8000abc:	77fb      	strb	r3, [r7, #31]
 8000abe:	7ffb      	ldrb	r3, [r7, #31]
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d9ee      	bls.n	8000aa2 <MFRC522_SelectTag+0x16>
	}
	CalulateCRC(buffer, 7, &buffer[7]);		//??
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	1dda      	adds	r2, r3, #7
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	2107      	movs	r1, #7
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff92 	bl	80009fa <CalulateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 8000ad6:	f107 020c 	add.w	r2, r7, #12
 8000ada:	f107 010c 	add.w	r1, r7, #12
 8000ade:	f107 0318 	add.w	r3, r7, #24
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	2209      	movs	r2, #9
 8000ae8:	200c      	movs	r0, #12
 8000aea:	f7ff fe1f 	bl	800072c <MFRC522_ToCard>
 8000aee:	4603      	mov	r3, r0
 8000af0:	777b      	strb	r3, [r7, #29]

	if ((status == MI_OK) && (recvBits == 0x18)) {
 8000af2:	7f7b      	ldrb	r3, [r7, #29]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d105      	bne.n	8000b04 <MFRC522_SelectTag+0x78>
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	2b18      	cmp	r3, #24
 8000afc:	d102      	bne.n	8000b04 <MFRC522_SelectTag+0x78>
		size = buffer[0];
 8000afe:	7b3b      	ldrb	r3, [r7, #12]
 8000b00:	77bb      	strb	r3, [r7, #30]
 8000b02:	e001      	b.n	8000b08 <MFRC522_SelectTag+0x7c>
	} else {
		size = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	77bb      	strb	r3, [r7, #30]
	}

	return size;
 8000b08:	7fbb      	ldrb	r3, [r7, #30]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3720      	adds	r7, #32
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <MFRC522_Auth>:
 Sectorkey--Sector password
 serNum--Card serial number, 4-byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Auth(uchar authMode, uchar BlockAddr, uchar *Sectorkey,
		uchar *serNum) {
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b08c      	sub	sp, #48	; 0x30
 8000b16:	af02      	add	r7, sp, #8
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]
 8000b20:	460b      	mov	r3, r1
 8000b22:	73bb      	strb	r3, [r7, #14]
	uint recvBits;
	uchar i;
	uchar buff[12];

	//Verify the command block address + sector + password + card serial number
	buff[0] = authMode;
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	753b      	strb	r3, [r7, #20]
	buff[1] = BlockAddr;
 8000b28:	7bbb      	ldrb	r3, [r7, #14]
 8000b2a:	757b      	strb	r3, [r7, #21]
	for (i = 0; i < 6; i++) {
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b32:	e011      	b.n	8000b58 <MFRC522_Auth+0x46>
		buff[i + 2] = *(Sectorkey + i);
 8000b34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	441a      	add	r2, r3
 8000b3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b40:	3302      	adds	r3, #2
 8000b42:	7812      	ldrb	r2, [r2, #0]
 8000b44:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b48:	440b      	add	r3, r1
 8000b4a:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 6; i++) {
 8000b4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b52:	3301      	adds	r3, #1
 8000b54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b5c:	2b05      	cmp	r3, #5
 8000b5e:	d9e9      	bls.n	8000b34 <MFRC522_Auth+0x22>
	}
	for (i = 0; i < 4; i++) {
 8000b60:	2300      	movs	r3, #0
 8000b62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b66:	e011      	b.n	8000b8c <MFRC522_Auth+0x7a>
		buff[i + 8] = *(serNum + i);
 8000b68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	441a      	add	r2, r3
 8000b70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b74:	3308      	adds	r3, #8
 8000b76:	7812      	ldrb	r2, [r2, #0]
 8000b78:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b7c:	440b      	add	r3, r1
 8000b7e:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 4; i++) {
 8000b82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b86:	3301      	adds	r3, #1
 8000b88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d9e9      	bls.n	8000b68 <MFRC522_Auth+0x56>
	}
	status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 8000b94:	f107 0214 	add.w	r2, r7, #20
 8000b98:	f107 0114 	add.w	r1, r7, #20
 8000b9c:	f107 0320 	add.w	r3, r7, #32
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	220c      	movs	r2, #12
 8000ba6:	200e      	movs	r0, #14
 8000ba8:	f7ff fdc0 	bl	800072c <MFRC522_ToCard>
 8000bac:	4603      	mov	r3, r0
 8000bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((status != MI_OK) || (!(Read_MFRC522(Status2Reg) & 0x08))) {
 8000bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d107      	bne.n	8000bca <MFRC522_Auth+0xb8>
 8000bba:	2008      	movs	r0, #8
 8000bbc:	f7ff fd1a 	bl	80005f4 <Read_MFRC522>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d102      	bne.n	8000bd0 <MFRC522_Auth+0xbe>
		status = MI_ERR;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return status;
 8000bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <MFRC522_Halt>:
 * Function Name: MFRC522_Halt
 * Description: Command card into hibernation
 * Input: None
 * Return value: None
 */
void MFRC522_Halt(void) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af02      	add	r7, sp, #8
	uint unLen;
	uchar buff[4];

	buff[0] = PICC_HALT;
 8000be2:	2350      	movs	r3, #80	; 0x50
 8000be4:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	707b      	strb	r3, [r7, #1]
	CalulateCRC(buff, 2, &buff[2]);
 8000bea:	463b      	mov	r3, r7
 8000bec:	1c9a      	adds	r2, r3, #2
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff01 	bl	80009fa <CalulateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8000bf8:	463a      	mov	r2, r7
 8000bfa:	4639      	mov	r1, r7
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	4613      	mov	r3, r2
 8000c02:	2204      	movs	r2, #4
 8000c04:	200c      	movs	r0, #12
 8000c06:	f7ff fd91 	bl	800072c <MFRC522_ToCard>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <ScanCardAndGetDataFromBlock>:
 * 		blockAddr: block number desired to Read
 * 		receivedData: pointer to Data Returned after reading
 * 		keyValue: Value of KEY_A or KEY_B
 * Return value: MI_OK or MI_ERR
 */
uint8_t ScanCardAndGetDataFromBlock(uint8_t blockAddr, uchar* receivedData, uchar* keyValue) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	73fb      	strb	r3, [r7, #15]
	uchar str[16];

	/*** 1. Start RFID Reader ***/
	MFRC522_Init();
 8000c22:	f7ff fd1b 	bl	800065c <MFRC522_Init>

	/*** 2. Make request and receive Card type ***/
	if (MFRC522_Request(PICC_REQIDL, str) != MI_OK) {
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	2026      	movs	r0, #38	; 0x26
 8000c2e:	f7ff fd58 	bl	80006e2 <MFRC522_Request>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <ScanCardAndGetDataFromBlock+0x28>
		return MI_ERR;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	e04e      	b.n	8000cda <ScanCardAndGetDataFromBlock+0xc6>
	}

	/*** 3. Anti-collision loop***/
	if (MFRC522_Anticoll(str) == MI_OK) {
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fe71 	bl	8000928 <MFRC522_Anticoll>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d143      	bne.n	8000cd4 <ScanCardAndGetDataFromBlock+0xc0>

	/*** 4. Select Card ***/
		MFRC522_SelectTag(str);
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff1b 	bl	8000a8c <MFRC522_SelectTag>

	/*** 5. Pass authentication on every sector ***/
		// First, we try to use KeyA authentication (COMMAND CODE: 0x60 - KeyA, 0x61 - KeyB)
		if (MI_OK == MFRC522_Auth(0x60, blockAddr, keyValue, str)) {
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	7bf9      	ldrb	r1, [r7, #15]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	2060      	movs	r0, #96	; 0x60
 8000c60:	f7ff ff57 	bl	8000b12 <MFRC522_Auth>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d111      	bne.n	8000c8e <ScanCardAndGetDataFromBlock+0x7a>
				//Read Data
			if (MFRC522_Read(blockAddr, receivedData) == MI_OK) {
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fe97 	bl	80009a2 <MFRC522_Read>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <ScanCardAndGetDataFromBlock+0x6a>
				return MI_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e02d      	b.n	8000cda <ScanCardAndGetDataFromBlock+0xc6>
			} else {
				// Print error if READ is not OK
				HAL_UART_Transmit(&huart2,
 8000c7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c82:	221a      	movs	r2, #26
 8000c84:	4917      	ldr	r1, [pc, #92]	; (8000ce4 <ScanCardAndGetDataFromBlock+0xd0>)
 8000c86:	4818      	ldr	r0, [pc, #96]	; (8000ce8 <ScanCardAndGetDataFromBlock+0xd4>)
 8000c88:	f002 fcd5 	bl	8003636 <HAL_UART_Transmit>
 8000c8c:	e022      	b.n	8000cd4 <ScanCardAndGetDataFromBlock+0xc0>
						(uint8_t*) "Error: Can not read data",
						strlen("Error: Can not read data\n\r"), 5000);
			}
		}
		// Second, we try to use KeyB authentication
		else if (MI_OK == MFRC522_Auth(0x61, blockAddr, keyValue, str)) {
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	7bf9      	ldrb	r1, [r7, #15]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	2061      	movs	r0, #97	; 0x61
 8000c98:	f7ff ff3b 	bl	8000b12 <MFRC522_Auth>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d111      	bne.n	8000cc6 <ScanCardAndGetDataFromBlock+0xb2>
				// Read Data
			if (MFRC522_Read(blockAddr, receivedData) == MI_OK) {
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	68b9      	ldr	r1, [r7, #8]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fe7b 	bl	80009a2 <MFRC522_Read>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <ScanCardAndGetDataFromBlock+0xa2>
				return MI_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e011      	b.n	8000cda <ScanCardAndGetDataFromBlock+0xc6>
			} else {
				// Print error if READ is not ok
				HAL_UART_Transmit(&huart2,
 8000cb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cba:	221a      	movs	r2, #26
 8000cbc:	4909      	ldr	r1, [pc, #36]	; (8000ce4 <ScanCardAndGetDataFromBlock+0xd0>)
 8000cbe:	480a      	ldr	r0, [pc, #40]	; (8000ce8 <ScanCardAndGetDataFromBlock+0xd4>)
 8000cc0:	f002 fcb9 	bl	8003636 <HAL_UART_Transmit>
 8000cc4:	e006      	b.n	8000cd4 <ScanCardAndGetDataFromBlock+0xc0>
						strlen("Error: Can not read data\n\r"), 5000);
			}
		}
		// If KeyA and KeyB authentications don't work, they must be a wrong key
		else {
			HAL_UART_Transmit(&huart2, (uchar*) "\n\rKeys are wrong.\n\r", 19,
 8000cc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cca:	2213      	movs	r2, #19
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <ScanCardAndGetDataFromBlock+0xd8>)
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <ScanCardAndGetDataFromBlock+0xd4>)
 8000cd0:	f002 fcb1 	bl	8003636 <HAL_UART_Transmit>
					5000);
		}
	}

	/*** 6. HALT ***/
	MFRC522_Halt();
 8000cd4:	f7ff ff82 	bl	8000bdc <MFRC522_Halt>

	return MI_ERR;
 8000cd8:	2302      	movs	r3, #2
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3720      	adds	r7, #32
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	08009868 	.word	0x08009868
 8000ce8:	20004ae8 	.word	0x20004ae8
 8000cec:	08009894 	.word	0x08009894

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	wareHouse_1.index = 1;
 8000cf4:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <main+0xfc>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]
	wareHouse_2.index = 2;
 8000cfa:	4b3d      	ldr	r3, [pc, #244]	; (8000df0 <main+0x100>)
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	601a      	str	r2, [r3, #0]
	wareHouse_3.index = 3;
 8000d00:	4b3c      	ldr	r3, [pc, #240]	; (8000df4 <main+0x104>)
 8000d02:	2203      	movs	r2, #3
 8000d04:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d06:	f000 fed9 	bl	8001abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0a:	f000 f8b5 	bl	8000e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0e:	f000 f99b 	bl	8001048 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d12:	f000 f945 	bl	8000fa0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000d16:	f000 f90d 	bl	8000f34 <MX_SPI3_Init>
  MX_USART6_UART_Init();
 8000d1a:	f000 f96b 	bl	8000ff4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000d1e:	f7ff fc9d 	bl	800065c <MFRC522_Init>
  HAL_UART_Transmit(&huart2, (uchar*) "\n\rSerial Connected...\n\r", 23, 5000);
 8000d22:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d26:	2217      	movs	r2, #23
 8000d28:	4933      	ldr	r1, [pc, #204]	; (8000df8 <main+0x108>)
 8000d2a:	4834      	ldr	r0, [pc, #208]	; (8000dfc <main+0x10c>)
 8000d2c:	f002 fc83 	bl	8003636 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d30:	f003 fc40 	bl	80045b4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutex_uart2 */
  mutex_uart2Handle = osMutexNew(&mutex_uart2_attributes);
 8000d34:	4832      	ldr	r0, [pc, #200]	; (8000e00 <main+0x110>)
 8000d36:	f003 fe1d 	bl	8004974 <osMutexNew>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4a31      	ldr	r2, [pc, #196]	; (8000e04 <main+0x114>)
 8000d3e:	6013      	str	r3, [r2, #0]

  /* creation of mutex_uart6 */
  mutex_uart6Handle = osMutexNew(&mutex_uart6_attributes);
 8000d40:	4831      	ldr	r0, [pc, #196]	; (8000e08 <main+0x118>)
 8000d42:	f003 fe17 	bl	8004974 <osMutexNew>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4a30      	ldr	r2, [pc, #192]	; (8000e0c <main+0x11c>)
 8000d4a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of cardID_Queue */
  cardID_QueueHandle = osMessageQueueNew (1, sizeof(WareHouse_t), &cardID_Queue_attributes);
 8000d4c:	4a30      	ldr	r2, [pc, #192]	; (8000e10 <main+0x120>)
 8000d4e:	211c      	movs	r1, #28
 8000d50:	2001      	movs	r0, #1
 8000d52:	f003 ff1d 	bl	8004b90 <osMessageQueueNew>
 8000d56:	4603      	mov	r3, r0
 8000d58:	4a2e      	ldr	r2, [pc, #184]	; (8000e14 <main+0x124>)
 8000d5a:	6013      	str	r3, [r2, #0]

  /* creation of sensorData_Queue */
  sensorData_QueueHandle = osMessageQueueNew (3, sizeof(WareHouse_t), &sensorData_Queue_attributes);
 8000d5c:	4a2e      	ldr	r2, [pc, #184]	; (8000e18 <main+0x128>)
 8000d5e:	211c      	movs	r1, #28
 8000d60:	2003      	movs	r0, #3
 8000d62:	f003 ff15 	bl	8004b90 <osMessageQueueNew>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4a2c      	ldr	r2, [pc, #176]	; (8000e1c <main+0x12c>)
 8000d6a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CmdParsing */
  CmdParsingHandle = osThreadNew(CmdParsing_Task, NULL, &CmdParsing_attributes);
 8000d6c:	4a2c      	ldr	r2, [pc, #176]	; (8000e20 <main+0x130>)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	482c      	ldr	r0, [pc, #176]	; (8000e24 <main+0x134>)
 8000d72:	f003 fc69 	bl	8004648 <osThreadNew>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4a2b      	ldr	r2, [pc, #172]	; (8000e28 <main+0x138>)
 8000d7a:	6013      	str	r3, [r2, #0]

  /* creation of ToggleLed */
  ToggleLedHandle = osThreadNew(ToggleLed_Task, NULL, &ToggleLed_attributes);
 8000d7c:	4a2b      	ldr	r2, [pc, #172]	; (8000e2c <main+0x13c>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	482b      	ldr	r0, [pc, #172]	; (8000e30 <main+0x140>)
 8000d82:	f003 fc61 	bl	8004648 <osThreadNew>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a2a      	ldr	r2, [pc, #168]	; (8000e34 <main+0x144>)
 8000d8a:	6013      	str	r3, [r2, #0]

  /* creation of ScanCard */
  ScanCardHandle = osThreadNew(ScanCard_Task, NULL, &ScanCard_attributes);
 8000d8c:	4a2a      	ldr	r2, [pc, #168]	; (8000e38 <main+0x148>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	482a      	ldr	r0, [pc, #168]	; (8000e3c <main+0x14c>)
 8000d92:	f003 fc59 	bl	8004648 <osThreadNew>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a29      	ldr	r2, [pc, #164]	; (8000e40 <main+0x150>)
 8000d9a:	6013      	str	r3, [r2, #0]

  /* creation of SensorMeasuring */
  SensorMeasuringHandle = osThreadNew(SensorMeasuring_Task, NULL, &SensorMeasuring_attributes);
 8000d9c:	4a29      	ldr	r2, [pc, #164]	; (8000e44 <main+0x154>)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4829      	ldr	r0, [pc, #164]	; (8000e48 <main+0x158>)
 8000da2:	f003 fc51 	bl	8004648 <osThreadNew>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4a28      	ldr	r2, [pc, #160]	; (8000e4c <main+0x15c>)
 8000daa:	6013      	str	r3, [r2, #0]

  /* creation of SendCardID */
  SendCardIDHandle = osThreadNew(SendCardID_Task, NULL, &SendCardID_attributes);
 8000dac:	4a28      	ldr	r2, [pc, #160]	; (8000e50 <main+0x160>)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4828      	ldr	r0, [pc, #160]	; (8000e54 <main+0x164>)
 8000db2:	f003 fc49 	bl	8004648 <osThreadNew>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <main+0x168>)
 8000dba:	6013      	str	r3, [r2, #0]

  /* creation of SendSensorData */
  SendSensorDataHandle = osThreadNew(SendSensorData_Task, NULL, &SendSensorData_attributes);
 8000dbc:	4a27      	ldr	r2, [pc, #156]	; (8000e5c <main+0x16c>)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4827      	ldr	r0, [pc, #156]	; (8000e60 <main+0x170>)
 8000dc2:	f003 fc41 	bl	8004648 <osThreadNew>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4a26      	ldr	r2, [pc, #152]	; (8000e64 <main+0x174>)
 8000dca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of scanCardAvailable */
  scanCardAvailableHandle = osEventFlagsNew(&scanCardAvailable_attributes);
 8000dcc:	4826      	ldr	r0, [pc, #152]	; (8000e68 <main+0x178>)
 8000dce:	f003 fce8 	bl	80047a2 <osEventFlagsNew>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a25      	ldr	r2, [pc, #148]	; (8000e6c <main+0x17c>)
 8000dd6:	6013      	str	r3, [r2, #0]

  /* creation of parsingCMDAvailable */
  parsingCMDAvailableHandle = osEventFlagsNew(&parsingCMDAvailable_attributes);
 8000dd8:	4825      	ldr	r0, [pc, #148]	; (8000e70 <main+0x180>)
 8000dda:	f003 fce2 	bl	80047a2 <osEventFlagsNew>
 8000dde:	4603      	mov	r3, r0
 8000de0:	4a24      	ldr	r2, [pc, #144]	; (8000e74 <main+0x184>)
 8000de2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000de4:	f003 fc0a 	bl	80045fc <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  HAL_UART_Receive_IT(&huart6, (uint8_t*)receivedDataFromServer, 8);
//	HAL_TIM_Base_Start_IT(&htim3);

	while (1) {
 8000de8:	e7fe      	b.n	8000de8 <main+0xf8>
 8000dea:	bf00      	nop
 8000dec:	20004a20 	.word	0x20004a20
 8000df0:	20004a84 	.word	0x20004a84
 8000df4:	20004a4c 	.word	0x20004a4c
 8000df8:	080099b4 	.word	0x080099b4
 8000dfc:	20004ae8 	.word	0x20004ae8
 8000e00:	08009af8 	.word	0x08009af8
 8000e04:	200049bc 	.word	0x200049bc
 8000e08:	08009b08 	.word	0x08009b08
 8000e0c:	200049c4 	.word	0x200049c4
 8000e10:	08009ac8 	.word	0x08009ac8
 8000e14:	20004a40 	.word	0x20004a40
 8000e18:	08009ae0 	.word	0x08009ae0
 8000e1c:	200049c0 	.word	0x200049c0
 8000e20:	080099f0 	.word	0x080099f0
 8000e24:	0800136d 	.word	0x0800136d
 8000e28:	20004a48 	.word	0x20004a48
 8000e2c:	08009a14 	.word	0x08009a14
 8000e30:	080013e1 	.word	0x080013e1
 8000e34:	20004a3c 	.word	0x20004a3c
 8000e38:	08009a38 	.word	0x08009a38
 8000e3c:	080013f1 	.word	0x080013f1
 8000e40:	20004a70 	.word	0x20004a70
 8000e44:	08009a5c 	.word	0x08009a5c
 8000e48:	08001445 	.word	0x08001445
 8000e4c:	20004ae4 	.word	0x20004ae4
 8000e50:	08009a80 	.word	0x08009a80
 8000e54:	080014a9 	.word	0x080014a9
 8000e58:	20004a68 	.word	0x20004a68
 8000e5c:	08009aa4 	.word	0x08009aa4
 8000e60:	080014f9 	.word	0x080014f9
 8000e64:	20004a6c 	.word	0x20004a6c
 8000e68:	08009b18 	.word	0x08009b18
 8000e6c:	20004a44 	.word	0x20004a44
 8000e70:	08009b28 	.word	0x08009b28
 8000e74:	20004b2c 	.word	0x20004b2c

08000e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b094      	sub	sp, #80	; 0x50
 8000e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7e:	f107 0320 	add.w	r3, r7, #32
 8000e82:	2230      	movs	r2, #48	; 0x30
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f007 faa8 	bl	80083dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <SystemClock_Config+0xb4>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	4a21      	ldr	r2, [pc, #132]	; (8000f2c <SystemClock_Config+0xb4>)
 8000ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <SystemClock_Config+0xb4>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <SystemClock_Config+0xb8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	; (8000f30 <SystemClock_Config+0xb8>)
 8000ec2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <SystemClock_Config+0xb8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000edc:	2310      	movs	r3, #16
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee4:	f107 0320 	add.w	r3, r7, #32
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 f93b 	bl	8002164 <HAL_RCC_OscConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ef4:	f000 fb3a 	bl	800156c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef8:	230f      	movs	r3, #15
 8000efa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 fb9d 	bl	8002654 <HAL_RCC_ClockConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f20:	f000 fb24 	bl	800156c <Error_Handler>
  }
}
 8000f24:	bf00      	nop
 8000f26:	3750      	adds	r7, #80	; 0x50
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40007000 	.word	0x40007000

08000f34 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_SPI3_Init+0x64>)
 8000f3a:	4a18      	ldr	r2, [pc, #96]	; (8000f9c <MX_SPI3_Init+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_SPI3_Init+0x64>)
 8000f40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f44:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_SPI3_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_SPI3_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_SPI3_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_SPI3_Init+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_SPI3_Init+0x64>)
 8000f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f64:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_SPI3_Init+0x64>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <MX_SPI3_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_SPI3_Init+0x64>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <MX_SPI3_Init+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_SPI3_Init+0x64>)
 8000f80:	220a      	movs	r2, #10
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <MX_SPI3_Init+0x64>)
 8000f86:	f001 fd93 	bl	8002ab0 <HAL_SPI_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000f90:	f000 faec 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200049c8 	.word	0x200049c8
 8000f9c:	40003c00 	.word	0x40003c00

08000fa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <MX_USART2_UART_Init+0x50>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_USART2_UART_Init+0x4c>)
 8000fd8:	f002 fae0 	bl	800359c <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fe2:	f000 fac3 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20004ae8 	.word	0x20004ae8
 8000ff0:	40004400 	.word	0x40004400

08000ff4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <MX_USART6_UART_Init+0x50>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_USART6_UART_Init+0x4c>)
 800102c:	f002 fab6 	bl	800359c <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001036:	f000 fa99 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20004aa0 	.word	0x20004aa0
 8001044:	40011400 	.word	0x40011400

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	4b45      	ldr	r3, [pc, #276]	; (8001178 <MX_GPIO_Init+0x130>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a44      	ldr	r2, [pc, #272]	; (8001178 <MX_GPIO_Init+0x130>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b42      	ldr	r3, [pc, #264]	; (8001178 <MX_GPIO_Init+0x130>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <MX_GPIO_Init+0x130>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a3d      	ldr	r2, [pc, #244]	; (8001178 <MX_GPIO_Init+0x130>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <MX_GPIO_Init+0x130>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	4b37      	ldr	r3, [pc, #220]	; (8001178 <MX_GPIO_Init+0x130>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a36      	ldr	r2, [pc, #216]	; (8001178 <MX_GPIO_Init+0x130>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b34      	ldr	r3, [pc, #208]	; (8001178 <MX_GPIO_Init+0x130>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b30      	ldr	r3, [pc, #192]	; (8001178 <MX_GPIO_Init+0x130>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <MX_GPIO_Init+0x130>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <MX_GPIO_Init+0x130>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2120      	movs	r1, #32
 80010d2:	482a      	ldr	r0, [pc, #168]	; (800117c <MX_GPIO_Init+0x134>)
 80010d4:	f001 f82c 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_SS3_Pin|SPI_SS2_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 41c6 	mov.w	r1, #25344	; 0x6300
 80010de:	4828      	ldr	r0, [pc, #160]	; (8001180 <MX_GPIO_Init+0x138>)
 80010e0:	f001 f826 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_SS_GPIO_Port, SPI3_SS_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ea:	4825      	ldr	r0, [pc, #148]	; (8001180 <MX_GPIO_Init+0x138>)
 80010ec:	f001 f820 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f6:	4823      	ldr	r0, [pc, #140]	; (8001184 <MX_GPIO_Init+0x13c>)
 80010f8:	f001 f81a 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001102:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	481c      	ldr	r0, [pc, #112]	; (8001184 <MX_GPIO_Init+0x13c>)
 8001114:	f000 fe88 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001118:	2320      	movs	r3, #32
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	2301      	movs	r3, #1
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	4813      	ldr	r0, [pc, #76]	; (800117c <MX_GPIO_Init+0x134>)
 8001130:	f000 fe7a 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_SS3_Pin SPI_SS2_Pin SPI3_SS_Pin LED_YELLOW_Pin
                           LED_GREEN_Pin */
  GPIO_InitStruct.Pin = SPI_SS3_Pin|SPI_SS2_Pin|SPI3_SS_Pin|LED_YELLOW_Pin
 8001134:	f44f 4363 	mov.w	r3, #58112	; 0xe300
 8001138:	617b      	str	r3, [r7, #20]
                          |LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	480c      	ldr	r0, [pc, #48]	; (8001180 <MX_GPIO_Init+0x138>)
 800114e:	f000 fe6b 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001152:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	4806      	ldr	r0, [pc, #24]	; (8001184 <MX_GPIO_Init+0x13c>)
 800116c:	f000 fe5c 	bl	8001e28 <HAL_GPIO_Init>

}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800
 800117c:	40020000 	.word	0x40020000
 8001180:	40020400 	.word	0x40020400
 8001184:	40020800 	.word	0x40020800

08001188 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	if (huart == &huart6){
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <HAL_UART_RxCpltCallback+0x30>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d105      	bne.n	80011a4 <HAL_UART_RxCpltCallback+0x1c>
		osEventFlagsSet(parsingCMDAvailableHandle, 0x00000001U);
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_UART_RxCpltCallback+0x34>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2101      	movs	r1, #1
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 fb3e 	bl	8004820 <osEventFlagsSet>
	}
	HAL_UART_Receive_IT(&huart6, (uint8_t*)receivedDataFromServer, 8);
 80011a4:	2208      	movs	r2, #8
 80011a6:	4906      	ldr	r1, [pc, #24]	; (80011c0 <HAL_UART_RxCpltCallback+0x38>)
 80011a8:	4803      	ldr	r0, [pc, #12]	; (80011b8 <HAL_UART_RxCpltCallback+0x30>)
 80011aa:	f002 fad6 	bl	800375a <HAL_UART_Receive_IT>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20004aa0 	.word	0x20004aa0
 80011bc:	20004b2c 	.word	0x20004b2c
 80011c0:	20000098 	.word	0x20000098

080011c4 <sendDataToServer>:


void sendDataToServer(volatile WareHouse_t* wareHouse, uint8_t typeOfData){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	70fb      	strb	r3, [r7, #3]

	uchar dataToSend[18]={0};
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	819a      	strh	r2, [r3, #12]

	switch(typeOfData){
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	2b05      	cmp	r3, #5
 80011e6:	d002      	beq.n	80011ee <sendDataToServer+0x2a>
 80011e8:	2b06      	cmp	r3, #6
 80011ea:	d00d      	beq.n	8001208 <sendDataToServer+0x44>
 80011ec:	e026      	b.n	800123c <sendDataToServer+0x78>
		case Sensor_DATA:
			dataToSend[0] = wareHouse->temperature;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	723b      	strb	r3, [r7, #8]
			dataToSend[1] = wareHouse->humidity;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	727b      	strb	r3, [r7, #9]
			dataToSend[17] = wareHouse->index;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	767b      	strb	r3, [r7, #25]
			break;
 8001206:	e019      	b.n	800123c <sendDataToServer+0x78>
		case CardID_DATA:
			for(int i = 0; i<16; i++){
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
 800120c:	e00e      	b.n	800122c <sendDataToServer+0x68>
				dataToSend[i]=wareHouse->idOfScannedCard[i];
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	4413      	add	r3, r2
 8001214:	3304      	adds	r3, #4
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2d9      	uxtb	r1, r3
 800121a:	f107 0208 	add.w	r2, r7, #8
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	4413      	add	r3, r2
 8001222:	460a      	mov	r2, r1
 8001224:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<16; i++){
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3301      	adds	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	dded      	ble.n	800120e <sendDataToServer+0x4a>
			}
			dataToSend[17] = wareHouse->index;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	767b      	strb	r3, [r7, #25]
			break;
 800123a:	bf00      	nop
	}

	dataToSend[16] = typeOfData;
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	763b      	strb	r3, [r7, #24]
	HAL_UART_Transmit(&huart6, dataToSend, 18, HAL_MAX_DELAY);
 8001240:	f107 0108 	add.w	r1, r7, #8
 8001244:	f04f 33ff 	mov.w	r3, #4294967295
 8001248:	2212      	movs	r2, #18
 800124a:	4803      	ldr	r0, [pc, #12]	; (8001258 <sendDataToServer+0x94>)
 800124c:	f002 f9f3 	bl	8003636 <HAL_UART_Transmit>
}
 8001250:	bf00      	nop
 8001252:	3720      	adds	r7, #32
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20004aa0 	.word	0x20004aa0

0800125c <scanCardIdHandle>:



void scanCardIdHandle(uint8_t wareHouseId){
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
	switch(wareHouseId){
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d135      	bne.n	80012d8 <scanCardIdHandle+0x7c>
	case 1:
		while(1){
			if( ScanCardAndGetDataFromBlock(0, wareHouse_1.idOfScannedCard, keyA) == MI_OK){
 800126c:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <scanCardIdHandle+0x84>)
 800126e:	491d      	ldr	r1, [pc, #116]	; (80012e4 <scanCardIdHandle+0x88>)
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff fccf 	bl	8000c14 <ScanCardAndGetDataFromBlock>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f7      	bne.n	800126c <scanCardIdHandle+0x10>
					for(int i = 0; i<16; i++){
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	e017      	b.n	80012b2 <scanCardIdHandle+0x56>
						uchar temp[3];
						sprintf((char*)temp, (const char*)"%02x ", (char)wareHouse_1.idOfScannedCard[i]);
 8001282:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <scanCardIdHandle+0x8c>)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	3304      	adds	r3, #4
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	461a      	mov	r2, r3
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	4915      	ldr	r1, [pc, #84]	; (80012ec <scanCardIdHandle+0x90>)
 8001296:	4618      	mov	r0, r3
 8001298:	f007 f8e8 	bl	800846c <siprintf>
						HAL_UART_Transmit(&huart2, temp, 3, HAL_MAX_DELAY);
 800129c:	f107 0108 	add.w	r1, r7, #8
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	2203      	movs	r2, #3
 80012a6:	4812      	ldr	r0, [pc, #72]	; (80012f0 <scanCardIdHandle+0x94>)
 80012a8:	f002 f9c5 	bl	8003636 <HAL_UART_Transmit>
					for(int i = 0; i<16; i++){
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	3301      	adds	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	dde4      	ble.n	8001282 <scanCardIdHandle+0x26>
					}
					HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295
 80012bc:	2202      	movs	r2, #2
 80012be:	490d      	ldr	r1, [pc, #52]	; (80012f4 <scanCardIdHandle+0x98>)
 80012c0:	480b      	ldr	r0, [pc, #44]	; (80012f0 <scanCardIdHandle+0x94>)
 80012c2:	f002 f9b8 	bl	8003636 <HAL_UART_Transmit>

					// Send cardID to the cardID_Queue
					osMessageQueuePut(cardID_QueueHandle, &wareHouse_1, 0U, osWaitForever);
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <scanCardIdHandle+0x9c>)
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	2200      	movs	r2, #0
 80012d0:	4905      	ldr	r1, [pc, #20]	; (80012e8 <scanCardIdHandle+0x8c>)
 80012d2:	f003 fcd1 	bl	8004c78 <osMessageQueuePut>
					return;
 80012d6:	e000      	b.n	80012da <scanCardIdHandle+0x7e>
				}
		}
		break;
	default:
		break;
 80012d8:	bf00      	nop
	}
}
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000000 	.word	0x20000000
 80012e4:	20004a24 	.word	0x20004a24
 80012e8:	20004a20 	.word	0x20004a20
 80012ec:	080099cc 	.word	0x080099cc
 80012f0:	20004ae8 	.word	0x20004ae8
 80012f4:	080099d4 	.word	0x080099d4
 80012f8:	20004a40 	.word	0x20004a40

080012fc <toggleLEDHanlde>:

void toggleLEDHanlde(uint8_t wareHouseId, uint8_t ledId, uint8_t state){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
 8001306:	460b      	mov	r3, r1
 8001308:	71bb      	strb	r3, [r7, #6]
 800130a:	4613      	mov	r3, r2
 800130c:	717b      	strb	r3, [r7, #5]

	switch(wareHouseId){
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d120      	bne.n	8001356 <toggleLEDHanlde+0x5a>
		case 1:
			if(ledId == 1){
 8001314:	79bb      	ldrb	r3, [r7, #6]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d107      	bne.n	800132a <toggleLEDHanlde+0x2e>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, state);
 800131a:	797b      	ldrb	r3, [r7, #5]
 800131c:	461a      	mov	r2, r3
 800131e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001322:	4810      	ldr	r0, [pc, #64]	; (8001364 <toggleLEDHanlde+0x68>)
 8001324:	f000 ff04 	bl	8002130 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, state);
			}else if(ledId == 3){
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, state);
			}

			break;
 8001328:	e017      	b.n	800135a <toggleLEDHanlde+0x5e>
			}else if(ledId == 2){
 800132a:	79bb      	ldrb	r3, [r7, #6]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d107      	bne.n	8001340 <toggleLEDHanlde+0x44>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, state);
 8001330:	797b      	ldrb	r3, [r7, #5]
 8001332:	461a      	mov	r2, r3
 8001334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001338:	480a      	ldr	r0, [pc, #40]	; (8001364 <toggleLEDHanlde+0x68>)
 800133a:	f000 fef9 	bl	8002130 <HAL_GPIO_WritePin>
			break;
 800133e:	e00c      	b.n	800135a <toggleLEDHanlde+0x5e>
			}else if(ledId == 3){
 8001340:	79bb      	ldrb	r3, [r7, #6]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d109      	bne.n	800135a <toggleLEDHanlde+0x5e>
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, state);
 8001346:	797b      	ldrb	r3, [r7, #5]
 8001348:	461a      	mov	r2, r3
 800134a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800134e:	4806      	ldr	r0, [pc, #24]	; (8001368 <toggleLEDHanlde+0x6c>)
 8001350:	f000 feee 	bl	8002130 <HAL_GPIO_WritePin>
			break;
 8001354:	e001      	b.n	800135a <toggleLEDHanlde+0x5e>
		default:
			break;
 8001356:	bf00      	nop
 8001358:	e000      	b.n	800135c <toggleLEDHanlde+0x60>
			break;
 800135a:	bf00      	nop
		}
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40020400 	.word	0x40020400
 8001368:	40020800 	.word	0x40020800

0800136c <CmdParsing_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_CmdParsing_Task */
void CmdParsing_Task(void *argument)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  HAL_UART_Receive_IT(&huart6, (uint8_t*)receivedDataFromServer, 8);
 8001374:	2208      	movs	r2, #8
 8001376:	4916      	ldr	r1, [pc, #88]	; (80013d0 <CmdParsing_Task+0x64>)
 8001378:	4816      	ldr	r0, [pc, #88]	; (80013d4 <CmdParsing_Task+0x68>)
 800137a:	f002 f9ee 	bl	800375a <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
	// Wait for flag to parsing comming CMD
	osEventFlagsWait(parsingCMDAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <CmdParsing_Task+0x6c>)
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	2200      	movs	r2, #0
 8001388:	2101      	movs	r1, #1
 800138a:	f003 fa8d 	bl	80048a8 <osEventFlagsWait>

	// Parsing CMD
	switch(receivedDataFromServer[0]){
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <CmdParsing_Task+0x64>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b01      	cmp	r3, #1
 8001396:	d002      	beq.n	800139e <CmdParsing_Task+0x32>
 8001398:	2b02      	cmp	r3, #2
 800139a:	d007      	beq.n	80013ac <CmdParsing_Task+0x40>
 800139c:	e013      	b.n	80013c6 <CmdParsing_Task+0x5a>
	case SCAN_CARDID:
		osEventFlagsSet(scanCardAvailableHandle, 0x00000001U);
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <CmdParsing_Task+0x70>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2101      	movs	r1, #1
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 fa3b 	bl	8004820 <osEventFlagsSet>
		break;
 80013aa:	e00c      	b.n	80013c6 <CmdParsing_Task+0x5a>
	case TOGGLE_LED:
		toggleLEDHanlde(receivedDataFromServer[1], receivedDataFromServer[2], receivedDataFromServer[3]);
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <CmdParsing_Task+0x64>)
 80013ae:	785b      	ldrb	r3, [r3, #1]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <CmdParsing_Task+0x64>)
 80013b4:	7892      	ldrb	r2, [r2, #2]
 80013b6:	b2d1      	uxtb	r1, r2
 80013b8:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <CmdParsing_Task+0x64>)
 80013ba:	78d2      	ldrb	r2, [r2, #3]
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff9c 	bl	80012fc <toggleLEDHanlde>
		break;
 80013c4:	bf00      	nop
	}

    osDelay(1);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f003 f9d0 	bl	800476c <osDelay>
	osEventFlagsWait(parsingCMDAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 80013cc:	e7d7      	b.n	800137e <CmdParsing_Task+0x12>
 80013ce:	bf00      	nop
 80013d0:	20000098 	.word	0x20000098
 80013d4:	20004aa0 	.word	0x20004aa0
 80013d8:	20004b2c 	.word	0x20004b2c
 80013dc:	20004a44 	.word	0x20004a44

080013e0 <ToggleLed_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ToggleLed_Task */
void ToggleLed_Task(void *argument)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ToggleLed_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013e8:	2001      	movs	r0, #1
 80013ea:	f003 f9bf 	bl	800476c <osDelay>
 80013ee:	e7fb      	b.n	80013e8 <ToggleLed_Task+0x8>

080013f0 <ScanCard_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ScanCard_Task */
void ScanCard_Task(void *argument)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	// Wait for scan flag
	osEventFlagsWait(scanCardAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <ScanCard_Task+0x48>)
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	2200      	movs	r2, #0
 8001402:	2101      	movs	r1, #1
 8001404:	f003 fa50 	bl	80048a8 <osEventFlagsWait>

	// Mutex protect for uart2 start
	osMutexAcquire(mutex_uart2Handle, osWaitForever);
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <ScanCard_Task+0x4c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fb35 	bl	8004a80 <osMutexAcquire>

	// Scan card id in ware house (id = receivedDataFromServer[1]) and send data to queue to SendCardID_Task
	scanCardIdHandle(receivedDataFromServer[1]);
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <ScanCard_Task+0x50>)
 8001418:	785b      	ldrb	r3, [r3, #1]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff1d 	bl	800125c <scanCardIdHandle>

	// Mutex protect for uart2 end
	osMutexRelease(mutex_uart2Handle);
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <ScanCard_Task+0x4c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f003 fb75 	bl	8004b16 <osMutexRelease>

    osDelay(1000);
 800142c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001430:	f003 f99c 	bl	800476c <osDelay>
	osEventFlagsWait(scanCardAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 8001434:	e7e0      	b.n	80013f8 <ScanCard_Task+0x8>
 8001436:	bf00      	nop
 8001438:	20004a44 	.word	0x20004a44
 800143c:	200049bc 	.word	0x200049bc
 8001440:	20000098 	.word	0x20000098

08001444 <SensorMeasuring_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SensorMeasuring_Task */
void SensorMeasuring_Task(void *argument)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SensorMeasuring_Task */
  /* Infinite loop */
  for(;;)
  {
	wareHouse_1.humidity = rand()%2 + 95;
 800144c:	f006 ffce 	bl	80083ec <rand>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	bfb8      	it	lt
 800145a:	425b      	neglt	r3, r3
 800145c:	335f      	adds	r3, #95	; 0x5f
 800145e:	4a0f      	ldr	r2, [pc, #60]	; (800149c <SensorMeasuring_Task+0x58>)
 8001460:	6193      	str	r3, [r2, #24]
	wareHouse_1.temperature = rand()%3 + 22;
 8001462:	f006 ffc3 	bl	80083ec <rand>
 8001466:	4601      	mov	r1, r0
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <SensorMeasuring_Task+0x5c>)
 800146a:	fb83 3201 	smull	r3, r2, r3, r1
 800146e:	17cb      	asrs	r3, r1, #31
 8001470:	1ad2      	subs	r2, r2, r3
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	1aca      	subs	r2, r1, r3
 800147a:	f102 0316 	add.w	r3, r2, #22
 800147e:	4a07      	ldr	r2, [pc, #28]	; (800149c <SensorMeasuring_Task+0x58>)
 8001480:	6153      	str	r3, [r2, #20]
	osMessageQueuePut(sensorData_QueueHandle, &wareHouse_1, NULL, osWaitForever);
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <SensorMeasuring_Task+0x60>)
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	2200      	movs	r2, #0
 800148c:	4903      	ldr	r1, [pc, #12]	; (800149c <SensorMeasuring_Task+0x58>)
 800148e:	f003 fbf3 	bl	8004c78 <osMessageQueuePut>
    osDelay(1000);
 8001492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001496:	f003 f969 	bl	800476c <osDelay>
	wareHouse_1.humidity = rand()%2 + 95;
 800149a:	e7d7      	b.n	800144c <SensorMeasuring_Task+0x8>
 800149c:	20004a20 	.word	0x20004a20
 80014a0:	55555556 	.word	0x55555556
 80014a4:	200049c0 	.word	0x200049c0

080014a8 <SendCardID_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SendCardID_Task */
void SendCardID_Task(void *argument)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	WareHouse_t wareHouse;
  /* Infinite loop */
  for(;;)
  {
	// wait for data from queue
	osMessageQueueGet(cardID_QueueHandle, &wareHouse, NULL, osWaitForever);
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <SendCardID_Task+0x48>)
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	f107 010c 	add.w	r1, r7, #12
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
 80014bc:	2200      	movs	r2, #0
 80014be:	f003 fc3b 	bl	8004d38 <osMessageQueueGet>

	// Mutex protect for uart6 (connect to Esp) start
	osMutexAcquire(mutex_uart6Handle, osWaitForever);
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <SendCardID_Task+0x4c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f04f 31ff 	mov.w	r1, #4294967295
 80014ca:	4618      	mov	r0, r3
 80014cc:	f003 fad8 	bl	8004a80 <osMutexAcquire>

	// send Data to ESP8266 -> Sever
	sendDataToServer(&wareHouse, CardID_DATA);
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	2106      	movs	r1, #6
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fe74 	bl	80011c4 <sendDataToServer>

	// Mutex protect for uart6 end
	osMutexRelease(mutex_uart6Handle);
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <SendCardID_Task+0x4c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 fb18 	bl	8004b16 <osMutexRelease>

    osDelay(1);
 80014e6:	2001      	movs	r0, #1
 80014e8:	f003 f940 	bl	800476c <osDelay>
	osMessageQueueGet(cardID_QueueHandle, &wareHouse, NULL, osWaitForever);
 80014ec:	e7e0      	b.n	80014b0 <SendCardID_Task+0x8>
 80014ee:	bf00      	nop
 80014f0:	20004a40 	.word	0x20004a40
 80014f4:	200049c4 	.word	0x200049c4

080014f8 <SendSensorData_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SendSensorData_Task */
void SendSensorData_Task(void *argument)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	// wait for data from queue
	osMessageQueueGet(sensorData_QueueHandle, &wareHouse, NULL, osWaitForever);
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <SendSensorData_Task+0x48>)
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	f107 010c 	add.w	r1, r7, #12
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	2200      	movs	r2, #0
 800150e:	f003 fc13 	bl	8004d38 <osMessageQueueGet>

	// Mutex protect for uart6 (connect to Esp) start
	osMutexAcquire(mutex_uart6Handle, osWaitForever);
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <SendSensorData_Task+0x4c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f04f 31ff 	mov.w	r1, #4294967295
 800151a:	4618      	mov	r0, r3
 800151c:	f003 fab0 	bl	8004a80 <osMutexAcquire>

	// send Data to ESP8266 -> Sever
	sendDataToServer(&wareHouse, Sensor_DATA);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	2105      	movs	r1, #5
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fe4c 	bl	80011c4 <sendDataToServer>

	// Mutex protect for uart6 end
	osMutexRelease(mutex_uart6Handle);
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <SendSensorData_Task+0x4c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f003 faf0 	bl	8004b16 <osMutexRelease>

    osDelay(1);
 8001536:	2001      	movs	r0, #1
 8001538:	f003 f918 	bl	800476c <osDelay>
	osMessageQueueGet(sensorData_QueueHandle, &wareHouse, NULL, osWaitForever);
 800153c:	e7e0      	b.n	8001500 <SendSensorData_Task+0x8>
 800153e:	bf00      	nop
 8001540:	200049c0 	.word	0x200049c0
 8001544:	200049c4 	.word	0x200049c4

08001548 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800155a:	f000 fad1 	bl	8001b00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40000800 	.word	0x40000800

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001574:	e7fe      	b.n	8001574 <Error_Handler+0x8>
	...

08001578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_MspInit+0x54>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <HAL_MspInit+0x54>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_MspInit+0x54>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_MspInit+0x54>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_MspInit+0x54>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_MspInit+0x54>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	210f      	movs	r1, #15
 80015ba:	f06f 0001 	mvn.w	r0, #1
 80015be:	f000 fb77 	bl	8001cb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a29      	ldr	r2, [pc, #164]	; (8001694 <HAL_SPI_MspInit+0xc4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d14b      	bne.n	800168a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b28      	ldr	r3, [pc, #160]	; (8001698 <HAL_SPI_MspInit+0xc8>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a27      	ldr	r2, [pc, #156]	; (8001698 <HAL_SPI_MspInit+0xc8>)
 80015fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b25      	ldr	r3, [pc, #148]	; (8001698 <HAL_SPI_MspInit+0xc8>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <HAL_SPI_MspInit+0xc8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a20      	ldr	r2, [pc, #128]	; (8001698 <HAL_SPI_MspInit+0xc8>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <HAL_SPI_MspInit+0xc8>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_SPI_MspInit+0xc8>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a19      	ldr	r2, [pc, #100]	; (8001698 <HAL_SPI_MspInit+0xc8>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_SPI_MspInit+0xc8>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB12     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001658:	2307      	movs	r3, #7
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	480e      	ldr	r0, [pc, #56]	; (800169c <HAL_SPI_MspInit+0xcc>)
 8001664:	f000 fbe0 	bl	8001e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001668:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800167a:	2306      	movs	r3, #6
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	4806      	ldr	r0, [pc, #24]	; (80016a0 <HAL_SPI_MspInit+0xd0>)
 8001686:	f000 fbcf 	bl	8001e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	; 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40003c00 	.word	0x40003c00
 8001698:	40023800 	.word	0x40023800
 800169c:	40020400 	.word	0x40020400
 80016a0:	40020800 	.word	0x40020800

080016a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08c      	sub	sp, #48	; 0x30
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a36      	ldr	r2, [pc, #216]	; (800179c <HAL_UART_MspInit+0xf8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d12c      	bne.n	8001720 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <HAL_UART_MspInit+0xfc>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a34      	ldr	r2, [pc, #208]	; (80017a0 <HAL_UART_MspInit+0xfc>)
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <HAL_UART_MspInit+0xfc>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	61bb      	str	r3, [r7, #24]
 80016e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <HAL_UART_MspInit+0xfc>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a2d      	ldr	r2, [pc, #180]	; (80017a0 <HAL_UART_MspInit+0xfc>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <HAL_UART_MspInit+0xfc>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016fe:	230c      	movs	r3, #12
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800170e:	2307      	movs	r3, #7
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	4822      	ldr	r0, [pc, #136]	; (80017a4 <HAL_UART_MspInit+0x100>)
 800171a:	f000 fb85 	bl	8001e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800171e:	e038      	b.n	8001792 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <HAL_UART_MspInit+0x104>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d133      	bne.n	8001792 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_UART_MspInit+0xfc>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <HAL_UART_MspInit+0xfc>)
 8001734:	f043 0320 	orr.w	r3, r3, #32
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_UART_MspInit+0xfc>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f003 0320 	and.w	r3, r3, #32
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_UART_MspInit+0xfc>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <HAL_UART_MspInit+0xfc>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_UART_MspInit+0xfc>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001762:	23c0      	movs	r3, #192	; 0xc0
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176e:	2303      	movs	r3, #3
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001772:	2308      	movs	r3, #8
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	4619      	mov	r1, r3
 800177c:	480b      	ldr	r0, [pc, #44]	; (80017ac <HAL_UART_MspInit+0x108>)
 800177e:	f000 fb53 	bl	8001e28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2105      	movs	r1, #5
 8001786:	2047      	movs	r0, #71	; 0x47
 8001788:	f000 fa92 	bl	8001cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800178c:	2047      	movs	r0, #71	; 0x47
 800178e:	f000 faab 	bl	8001ce8 <HAL_NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3730      	adds	r7, #48	; 0x30
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40004400 	.word	0x40004400
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40011400 	.word	0x40011400
 80017ac:	40020800 	.word	0x40020800

080017b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	; 0x30
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	201e      	movs	r0, #30
 80017c6:	f000 fa73 	bl	8001cb0 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017ca:	201e      	movs	r0, #30
 80017cc:	f000 fa8c 	bl	8001ce8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <HAL_InitTick+0xa4>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	4a1e      	ldr	r2, [pc, #120]	; (8001854 <HAL_InitTick+0xa4>)
 80017da:	f043 0304 	orr.w	r3, r3, #4
 80017de:	6413      	str	r3, [r2, #64]	; 0x40
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <HAL_InitTick+0xa4>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017ec:	f107 0210 	add.w	r2, r7, #16
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f001 f928 	bl	8002a4c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80017fc:	f001 f8fe 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8001800:	4603      	mov	r3, r0
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	4a13      	ldr	r2, [pc, #76]	; (8001858 <HAL_InitTick+0xa8>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	0c9b      	lsrs	r3, r3, #18
 8001810:	3b01      	subs	r3, #1
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_InitTick+0xac>)
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <HAL_InitTick+0xb0>)
 8001818:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_InitTick+0xac>)
 800181c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001820:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <HAL_InitTick+0xac>)
 8001824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001826:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_InitTick+0xac>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_InitTick+0xac>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001834:	4809      	ldr	r0, [pc, #36]	; (800185c <HAL_InitTick+0xac>)
 8001836:	f001 fc31 	bl	800309c <HAL_TIM_Base_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d104      	bne.n	800184a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001840:	4806      	ldr	r0, [pc, #24]	; (800185c <HAL_InitTick+0xac>)
 8001842:	f001 fc85 	bl	8003150 <HAL_TIM_Base_Start_IT>
 8001846:	4603      	mov	r3, r0
 8001848:	e000      	b.n	800184c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	3730      	adds	r7, #48	; 0x30
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	431bde83 	.word	0x431bde83
 800185c:	20004b34 	.word	0x20004b34
 8001860:	40000800 	.word	0x40000800

08001864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <NMI_Handler+0x4>

0800186a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <HardFault_Handler+0x4>

08001870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <MemManage_Handler+0x4>

08001876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <BusFault_Handler+0x4>

0800187c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <UsageFault_Handler+0x4>

08001882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <TIM4_IRQHandler+0x10>)
 8001896:	f001 fcbd 	bl	8003214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20004b34 	.word	0x20004b34

080018a4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <USART6_IRQHandler+0x10>)
 80018aa:	f001 ff87 	bl	80037bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20004aa0 	.word	0x20004aa0

080018b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
	return 1;
 80018bc:	2301      	movs	r3, #1
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_kill>:

int _kill(int pid, int sig)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018d2:	f006 fd4b 	bl	800836c <__errno>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2216      	movs	r2, #22
 80018da:	601a      	str	r2, [r3, #0]
	return -1;
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_exit>:

void _exit (int status)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ffe7 	bl	80018c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018fa:	e7fe      	b.n	80018fa <_exit+0x12>

080018fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	e00a      	b.n	8001924 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800190e:	f3af 8000 	nop.w
 8001912:	4601      	mov	r1, r0
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	1c5a      	adds	r2, r3, #1
 8001918:	60ba      	str	r2, [r7, #8]
 800191a:	b2ca      	uxtb	r2, r1
 800191c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	429a      	cmp	r2, r3
 800192a:	dbf0      	blt.n	800190e <_read+0x12>
	}

return len;
 800192c:	687b      	ldr	r3, [r7, #4]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	e009      	b.n	800195c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	60ba      	str	r2, [r7, #8]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	dbf1      	blt.n	8001948 <_write+0x12>
	}
	return len;
 8001964:	687b      	ldr	r3, [r7, #4]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_close>:

int _close(int file)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
	return -1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001996:	605a      	str	r2, [r3, #4]
	return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_isatty>:

int _isatty(int file)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	return 1;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
	return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e0:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <_sbrk+0x5c>)
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <_sbrk+0x60>)
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <_sbrk+0x64>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <_sbrk+0x68>)
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d207      	bcs.n	8001a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a08:	f006 fcb0 	bl	800836c <__errno>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	220c      	movs	r2, #12
 8001a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	e009      	b.n	8001a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <_sbrk+0x64>)
 8001a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20020000 	.word	0x20020000
 8001a38:	00000400 	.word	0x00000400
 8001a3c:	200000a0 	.word	0x200000a0
 8001a40:	20004bd0 	.word	0x20004bd0

08001a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <SystemInit+0x20>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <SystemInit+0x20>)
 8001a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a6e:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a70:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a74:	e002      	b.n	8001a7c <LoopCopyDataInit>

08001a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7a:	3304      	adds	r3, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a80:	d3f9      	bcc.n	8001a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a82:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a84:	4c0b      	ldr	r4, [pc, #44]	; (8001ab4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a88:	e001      	b.n	8001a8e <LoopFillZerobss>

08001a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a8c:	3204      	adds	r2, #4

08001a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a90:	d3fb      	bcc.n	8001a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a92:	f7ff ffd7 	bl	8001a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a96:	f006 fc6f 	bl	8008378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9a:	f7ff f929 	bl	8000cf0 <main>
  bx  lr    
 8001a9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001aac:	08009cac 	.word	0x08009cac
  ldr r2, =_sbss
 8001ab0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001ab4:	20004bd0 	.word	0x20004bd0

08001ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC_IRQHandler>
	...

08001abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_Init+0x40>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <HAL_Init+0x40>)
 8001ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_Init+0x40>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <HAL_Init+0x40>)
 8001ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_Init+0x40>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_Init+0x40>)
 8001ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f000 f8d8 	bl	8001c9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aea:	200f      	movs	r0, #15
 8001aec:	f7ff fe60 	bl	80017b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af0:	f7ff fd42 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023c00 	.word	0x40023c00

08001b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x20>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x24>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_IncTick+0x24>)
 8001b12:	6013      	str	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000010 	.word	0x20000010
 8001b24:	20004b7c 	.word	0x20004b7c

08001b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_GetTick+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20004b7c 	.word	0x20004b7c

08001b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b72:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	60d3      	str	r3, [r2, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0307 	and.w	r3, r3, #7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db0b      	blt.n	8001bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	4907      	ldr	r1, [pc, #28]	; (8001bdc <__NVIC_EnableIRQ+0x38>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100

08001be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	db0a      	blt.n	8001c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	490c      	ldr	r1, [pc, #48]	; (8001c2c <__NVIC_SetPriority+0x4c>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c08:	e00a      	b.n	8001c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4908      	ldr	r1, [pc, #32]	; (8001c30 <__NVIC_SetPriority+0x50>)
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3b04      	subs	r3, #4
 8001c18:	0112      	lsls	r2, r2, #4
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	761a      	strb	r2, [r3, #24]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f1c3 0307 	rsb	r3, r3, #7
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	bf28      	it	cs
 8001c52:	2304      	movcs	r3, #4
 8001c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d902      	bls.n	8001c64 <NVIC_EncodePriority+0x30>
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3b03      	subs	r3, #3
 8001c62:	e000      	b.n	8001c66 <NVIC_EncodePriority+0x32>
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	401a      	ands	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	43d9      	mvns	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	4313      	orrs	r3, r2
         );
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ff4c 	bl	8001b40 <__NVIC_SetPriorityGrouping>
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc2:	f7ff ff61 	bl	8001b88 <__NVIC_GetPriorityGrouping>
 8001cc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	68b9      	ldr	r1, [r7, #8]
 8001ccc:	6978      	ldr	r0, [r7, #20]
 8001cce:	f7ff ffb1 	bl	8001c34 <NVIC_EncodePriority>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd8:	4611      	mov	r1, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff80 	bl	8001be0 <__NVIC_SetPriority>
}
 8001ce0:	bf00      	nop
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff54 	bl	8001ba4 <__NVIC_EnableIRQ>
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d12:	f7ff ff09 	bl	8001b28 <HAL_GetTick>
 8001d16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d008      	beq.n	8001d36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2280      	movs	r2, #128	; 0x80
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e052      	b.n	8001ddc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0216 	bic.w	r2, r2, #22
 8001d44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695a      	ldr	r2, [r3, #20]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d103      	bne.n	8001d66 <HAL_DMA_Abort+0x62>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d007      	beq.n	8001d76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0208 	bic.w	r2, r2, #8
 8001d74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0201 	bic.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d86:	e013      	b.n	8001db0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d88:	f7ff fece 	bl	8001b28 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b05      	cmp	r3, #5
 8001d94:	d90c      	bls.n	8001db0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2203      	movs	r2, #3
 8001da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e015      	b.n	8001ddc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1e4      	bne.n	8001d88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	223f      	movs	r2, #63	; 0x3f
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d004      	beq.n	8001e02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00c      	b.n	8001e1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2205      	movs	r2, #5
 8001e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	e159      	b.n	80020f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e44:	2201      	movs	r2, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	f040 8148 	bne.w	80020f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d005      	beq.n	8001e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d130      	bne.n	8001edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	2203      	movs	r2, #3
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f003 0201 	and.w	r2, r3, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d017      	beq.n	8001f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d123      	bne.n	8001f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	08da      	lsrs	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	08da      	lsrs	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3208      	adds	r2, #8
 8001f66:	69b9      	ldr	r1, [r7, #24]
 8001f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0203 	and.w	r2, r3, #3
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80a2 	beq.w	80020f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	4b57      	ldr	r3, [pc, #348]	; (8002110 <HAL_GPIO_Init+0x2e8>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	4a56      	ldr	r2, [pc, #344]	; (8002110 <HAL_GPIO_Init+0x2e8>)
 8001fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fbe:	4b54      	ldr	r3, [pc, #336]	; (8002110 <HAL_GPIO_Init+0x2e8>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fca:	4a52      	ldr	r2, [pc, #328]	; (8002114 <HAL_GPIO_Init+0x2ec>)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a49      	ldr	r2, [pc, #292]	; (8002118 <HAL_GPIO_Init+0x2f0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d019      	beq.n	800202a <HAL_GPIO_Init+0x202>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a48      	ldr	r2, [pc, #288]	; (800211c <HAL_GPIO_Init+0x2f4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_GPIO_Init+0x1fe>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a47      	ldr	r2, [pc, #284]	; (8002120 <HAL_GPIO_Init+0x2f8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00d      	beq.n	8002022 <HAL_GPIO_Init+0x1fa>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a46      	ldr	r2, [pc, #280]	; (8002124 <HAL_GPIO_Init+0x2fc>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d007      	beq.n	800201e <HAL_GPIO_Init+0x1f6>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a45      	ldr	r2, [pc, #276]	; (8002128 <HAL_GPIO_Init+0x300>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d101      	bne.n	800201a <HAL_GPIO_Init+0x1f2>
 8002016:	2304      	movs	r3, #4
 8002018:	e008      	b.n	800202c <HAL_GPIO_Init+0x204>
 800201a:	2307      	movs	r3, #7
 800201c:	e006      	b.n	800202c <HAL_GPIO_Init+0x204>
 800201e:	2303      	movs	r3, #3
 8002020:	e004      	b.n	800202c <HAL_GPIO_Init+0x204>
 8002022:	2302      	movs	r3, #2
 8002024:	e002      	b.n	800202c <HAL_GPIO_Init+0x204>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_GPIO_Init+0x204>
 800202a:	2300      	movs	r3, #0
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	f002 0203 	and.w	r2, r2, #3
 8002032:	0092      	lsls	r2, r2, #2
 8002034:	4093      	lsls	r3, r2
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800203c:	4935      	ldr	r1, [pc, #212]	; (8002114 <HAL_GPIO_Init+0x2ec>)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	3302      	adds	r3, #2
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800204a:	4b38      	ldr	r3, [pc, #224]	; (800212c <HAL_GPIO_Init+0x304>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800206e:	4a2f      	ldr	r2, [pc, #188]	; (800212c <HAL_GPIO_Init+0x304>)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002074:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_GPIO_Init+0x304>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002098:	4a24      	ldr	r2, [pc, #144]	; (800212c <HAL_GPIO_Init+0x304>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800209e:	4b23      	ldr	r3, [pc, #140]	; (800212c <HAL_GPIO_Init+0x304>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020c2:	4a1a      	ldr	r2, [pc, #104]	; (800212c <HAL_GPIO_Init+0x304>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_GPIO_Init+0x304>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020ec:	4a0f      	ldr	r2, [pc, #60]	; (800212c <HAL_GPIO_Init+0x304>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3301      	adds	r3, #1
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2b0f      	cmp	r3, #15
 80020fc:	f67f aea2 	bls.w	8001e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3724      	adds	r7, #36	; 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	40013800 	.word	0x40013800
 8002118:	40020000 	.word	0x40020000
 800211c:	40020400 	.word	0x40020400
 8002120:	40020800 	.word	0x40020800
 8002124:	40020c00 	.word	0x40020c00
 8002128:	40021000 	.word	0x40021000
 800212c:	40013c00 	.word	0x40013c00

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
 800213c:	4613      	mov	r3, r2
 800213e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002140:	787b      	ldrb	r3, [r7, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800214c:	e003      	b.n	8002156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800214e:	887b      	ldrh	r3, [r7, #2]
 8002150:	041a      	lsls	r2, r3, #16
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	619a      	str	r2, [r3, #24]
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e264      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d075      	beq.n	800226e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002182:	4ba3      	ldr	r3, [pc, #652]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b04      	cmp	r3, #4
 800218c:	d00c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218e:	4ba0      	ldr	r3, [pc, #640]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002196:	2b08      	cmp	r3, #8
 8002198:	d112      	bne.n	80021c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800219a:	4b9d      	ldr	r3, [pc, #628]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a6:	d10b      	bne.n	80021c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	4b99      	ldr	r3, [pc, #612]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d05b      	beq.n	800226c <HAL_RCC_OscConfig+0x108>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d157      	bne.n	800226c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e23f      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c8:	d106      	bne.n	80021d8 <HAL_RCC_OscConfig+0x74>
 80021ca:	4b91      	ldr	r3, [pc, #580]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a90      	ldr	r2, [pc, #576]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e01d      	b.n	8002214 <HAL_RCC_OscConfig+0xb0>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0x98>
 80021e2:	4b8b      	ldr	r3, [pc, #556]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a8a      	ldr	r2, [pc, #552]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b88      	ldr	r3, [pc, #544]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a87      	ldr	r2, [pc, #540]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e00b      	b.n	8002214 <HAL_RCC_OscConfig+0xb0>
 80021fc:	4b84      	ldr	r3, [pc, #528]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a83      	ldr	r2, [pc, #524]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b81      	ldr	r3, [pc, #516]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a80      	ldr	r2, [pc, #512]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 800220e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7ff fc84 	bl	8001b28 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002224:	f7ff fc80 	bl	8001b28 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e204      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b76      	ldr	r3, [pc, #472]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0xc0>
 8002242:	e014      	b.n	800226e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002244:	f7ff fc70 	bl	8001b28 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224c:	f7ff fc6c 	bl	8001b28 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1f0      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	4b6c      	ldr	r3, [pc, #432]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0xe8>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d063      	beq.n	8002342 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800227a:	4b65      	ldr	r3, [pc, #404]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00b      	beq.n	800229e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002286:	4b62      	ldr	r3, [pc, #392]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800228e:	2b08      	cmp	r3, #8
 8002290:	d11c      	bne.n	80022cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002292:	4b5f      	ldr	r3, [pc, #380]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d116      	bne.n	80022cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	4b5c      	ldr	r3, [pc, #368]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_RCC_OscConfig+0x152>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d001      	beq.n	80022b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e1c4      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b6:	4b56      	ldr	r3, [pc, #344]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4952      	ldr	r1, [pc, #328]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ca:	e03a      	b.n	8002342 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d020      	beq.n	8002316 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d4:	4b4f      	ldr	r3, [pc, #316]	; (8002414 <HAL_RCC_OscConfig+0x2b0>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022da:	f7ff fc25 	bl	8001b28 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e2:	f7ff fc21 	bl	8001b28 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e1a5      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	4b46      	ldr	r3, [pc, #280]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002300:	4b43      	ldr	r3, [pc, #268]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4940      	ldr	r1, [pc, #256]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	4313      	orrs	r3, r2
 8002312:	600b      	str	r3, [r1, #0]
 8002314:	e015      	b.n	8002342 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002316:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCC_OscConfig+0x2b0>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7ff fc04 	bl	8001b28 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002324:	f7ff fc00 	bl	8001b28 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e184      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	4b36      	ldr	r3, [pc, #216]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d030      	beq.n	80023b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d016      	beq.n	8002384 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002356:	4b30      	ldr	r3, [pc, #192]	; (8002418 <HAL_RCC_OscConfig+0x2b4>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235c:	f7ff fbe4 	bl	8001b28 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002364:	f7ff fbe0 	bl	8001b28 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e164      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x200>
 8002382:	e015      	b.n	80023b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002384:	4b24      	ldr	r3, [pc, #144]	; (8002418 <HAL_RCC_OscConfig+0x2b4>)
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238a:	f7ff fbcd 	bl	8001b28 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002392:	f7ff fbc9 	bl	8001b28 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e14d      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a0 	beq.w	80024fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c2:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10f      	bne.n	80023ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ea:	2301      	movs	r3, #1
 80023ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_OscConfig+0x2b8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d121      	bne.n	800243e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_RCC_OscConfig+0x2b8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a07      	ldr	r2, [pc, #28]	; (800241c <HAL_RCC_OscConfig+0x2b8>)
 8002400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002406:	f7ff fb8f 	bl	8001b28 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	e011      	b.n	8002432 <HAL_RCC_OscConfig+0x2ce>
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	42470000 	.word	0x42470000
 8002418:	42470e80 	.word	0x42470e80
 800241c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002420:	f7ff fb82 	bl	8001b28 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e106      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002432:	4b85      	ldr	r3, [pc, #532]	; (8002648 <HAL_RCC_OscConfig+0x4e4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d106      	bne.n	8002454 <HAL_RCC_OscConfig+0x2f0>
 8002446:	4b81      	ldr	r3, [pc, #516]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244a:	4a80      	ldr	r2, [pc, #512]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6713      	str	r3, [r2, #112]	; 0x70
 8002452:	e01c      	b.n	800248e <HAL_RCC_OscConfig+0x32a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b05      	cmp	r3, #5
 800245a:	d10c      	bne.n	8002476 <HAL_RCC_OscConfig+0x312>
 800245c:	4b7b      	ldr	r3, [pc, #492]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	4a7a      	ldr	r2, [pc, #488]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	6713      	str	r3, [r2, #112]	; 0x70
 8002468:	4b78      	ldr	r3, [pc, #480]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a77      	ldr	r2, [pc, #476]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6713      	str	r3, [r2, #112]	; 0x70
 8002474:	e00b      	b.n	800248e <HAL_RCC_OscConfig+0x32a>
 8002476:	4b75      	ldr	r3, [pc, #468]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a74      	ldr	r2, [pc, #464]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	4b72      	ldr	r3, [pc, #456]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a71      	ldr	r2, [pc, #452]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d015      	beq.n	80024c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7ff fb47 	bl	8001b28 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7ff fb43 	bl	8001b28 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e0c5      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	4b65      	ldr	r3, [pc, #404]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ee      	beq.n	800249e <HAL_RCC_OscConfig+0x33a>
 80024c0:	e014      	b.n	80024ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c2:	f7ff fb31 	bl	8001b28 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c8:	e00a      	b.n	80024e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7ff fb2d 	bl	8001b28 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0af      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e0:	4b5a      	ldr	r3, [pc, #360]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1ee      	bne.n	80024ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d105      	bne.n	80024fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f2:	4b56      	ldr	r3, [pc, #344]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a55      	ldr	r2, [pc, #340]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80024f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 809b 	beq.w	800263e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002508:	4b50      	ldr	r3, [pc, #320]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d05c      	beq.n	80025ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d141      	bne.n	80025a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251c:	4b4c      	ldr	r3, [pc, #304]	; (8002650 <HAL_RCC_OscConfig+0x4ec>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7ff fb01 	bl	8001b28 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252a:	f7ff fafd 	bl	8001b28 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e081      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253c:	4b43      	ldr	r3, [pc, #268]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69da      	ldr	r2, [r3, #28]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	019b      	lsls	r3, r3, #6
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	085b      	lsrs	r3, r3, #1
 8002560:	3b01      	subs	r3, #1
 8002562:	041b      	lsls	r3, r3, #16
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	061b      	lsls	r3, r3, #24
 800256c:	4937      	ldr	r1, [pc, #220]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <HAL_RCC_OscConfig+0x4ec>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff fad6 	bl	8001b28 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002580:	f7ff fad2 	bl	8001b28 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e056      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002592:	4b2e      	ldr	r3, [pc, #184]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x41c>
 800259e:	e04e      	b.n	800263e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a0:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <HAL_RCC_OscConfig+0x4ec>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7ff fabf 	bl	8001b28 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ae:	f7ff fabb 	bl	8001b28 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e03f      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c0:	4b22      	ldr	r3, [pc, #136]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x44a>
 80025cc:	e037      	b.n	800263e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e032      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025da:	4b1c      	ldr	r3, [pc, #112]	; (800264c <HAL_RCC_OscConfig+0x4e8>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d028      	beq.n	800263a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d121      	bne.n	800263a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d11a      	bne.n	800263a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800260a:	4013      	ands	r3, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002610:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002612:	4293      	cmp	r3, r2
 8002614:	d111      	bne.n	800263a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	085b      	lsrs	r3, r3, #1
 8002622:	3b01      	subs	r3, #1
 8002624:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d107      	bne.n	800263a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40007000 	.word	0x40007000
 800264c:	40023800 	.word	0x40023800
 8002650:	42470060 	.word	0x42470060

08002654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0cc      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002668:	4b68      	ldr	r3, [pc, #416]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d90c      	bls.n	8002690 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b65      	ldr	r3, [pc, #404]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b63      	ldr	r3, [pc, #396]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0b8      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a8:	4b59      	ldr	r3, [pc, #356]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4a58      	ldr	r2, [pc, #352]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a52      	ldr	r2, [pc, #328]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026cc:	4b50      	ldr	r3, [pc, #320]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	494d      	ldr	r1, [pc, #308]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d044      	beq.n	8002774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d119      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e07f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d003      	beq.n	8002712 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270e:	2b03      	cmp	r3, #3
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002712:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e06f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002722:	4b3b      	ldr	r3, [pc, #236]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e067      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002732:	4b37      	ldr	r3, [pc, #220]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f023 0203 	bic.w	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4934      	ldr	r1, [pc, #208]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	4313      	orrs	r3, r2
 8002742:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002744:	f7ff f9f0 	bl	8001b28 <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274a:	e00a      	b.n	8002762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800274c:	f7ff f9ec 	bl	8001b28 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	; 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e04f      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 020c 	and.w	r2, r3, #12
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	429a      	cmp	r2, r3
 8002772:	d1eb      	bne.n	800274c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002774:	4b25      	ldr	r3, [pc, #148]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d20c      	bcs.n	800279c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002782:	4b22      	ldr	r3, [pc, #136]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800278a:	4b20      	ldr	r3, [pc, #128]	; (800280c <HAL_RCC_ClockConfig+0x1b8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e032      	b.n	8002802 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4916      	ldr	r1, [pc, #88]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	490e      	ldr	r1, [pc, #56]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027da:	f000 f821 	bl	8002820 <HAL_RCC_GetSysClockFreq>
 80027de:	4602      	mov	r2, r0
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	490a      	ldr	r1, [pc, #40]	; (8002814 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	5ccb      	ldrb	r3, [r1, r3]
 80027ee:	fa22 f303 	lsr.w	r3, r2, r3
 80027f2:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_ClockConfig+0x1c8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe ffd8 	bl	80017b0 <HAL_InitTick>

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40023c00 	.word	0x40023c00
 8002810:	40023800 	.word	0x40023800
 8002814:	08009b38 	.word	0x08009b38
 8002818:	20000008 	.word	0x20000008
 800281c:	2000000c 	.word	0x2000000c

08002820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002820:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	607b      	str	r3, [r7, #4]
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	2300      	movs	r3, #0
 8002832:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002838:	4b67      	ldr	r3, [pc, #412]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b08      	cmp	r3, #8
 8002842:	d00d      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x40>
 8002844:	2b08      	cmp	r3, #8
 8002846:	f200 80bd 	bhi.w	80029c4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x34>
 800284e:	2b04      	cmp	r3, #4
 8002850:	d003      	beq.n	800285a <HAL_RCC_GetSysClockFreq+0x3a>
 8002852:	e0b7      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4b61      	ldr	r3, [pc, #388]	; (80029dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002856:	60bb      	str	r3, [r7, #8]
       break;
 8002858:	e0b7      	b.n	80029ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800285a:	4b61      	ldr	r3, [pc, #388]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800285c:	60bb      	str	r3, [r7, #8]
      break;
 800285e:	e0b4      	b.n	80029ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002860:	4b5d      	ldr	r3, [pc, #372]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002868:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800286a:	4b5b      	ldr	r3, [pc, #364]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d04d      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002876:	4b58      	ldr	r3, [pc, #352]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	099b      	lsrs	r3, r3, #6
 800287c:	461a      	mov	r2, r3
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002886:	f04f 0100 	mov.w	r1, #0
 800288a:	ea02 0800 	and.w	r8, r2, r0
 800288e:	ea03 0901 	and.w	r9, r3, r1
 8002892:	4640      	mov	r0, r8
 8002894:	4649      	mov	r1, r9
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	014b      	lsls	r3, r1, #5
 80028a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028a4:	0142      	lsls	r2, r0, #5
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	ebb0 0008 	subs.w	r0, r0, r8
 80028ae:	eb61 0109 	sbc.w	r1, r1, r9
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	018b      	lsls	r3, r1, #6
 80028bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028c0:	0182      	lsls	r2, r0, #6
 80028c2:	1a12      	subs	r2, r2, r0
 80028c4:	eb63 0301 	sbc.w	r3, r3, r1
 80028c8:	f04f 0000 	mov.w	r0, #0
 80028cc:	f04f 0100 	mov.w	r1, #0
 80028d0:	00d9      	lsls	r1, r3, #3
 80028d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028d6:	00d0      	lsls	r0, r2, #3
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	eb12 0208 	adds.w	r2, r2, r8
 80028e0:	eb43 0309 	adc.w	r3, r3, r9
 80028e4:	f04f 0000 	mov.w	r0, #0
 80028e8:	f04f 0100 	mov.w	r1, #0
 80028ec:	0259      	lsls	r1, r3, #9
 80028ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80028f2:	0250      	lsls	r0, r2, #9
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	461a      	mov	r2, r3
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	f7fd fcbc 	bl	8000280 <__aeabi_uldivmod>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4613      	mov	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	e04a      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002912:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	099b      	lsrs	r3, r3, #6
 8002918:	461a      	mov	r2, r3
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002922:	f04f 0100 	mov.w	r1, #0
 8002926:	ea02 0400 	and.w	r4, r2, r0
 800292a:	ea03 0501 	and.w	r5, r3, r1
 800292e:	4620      	mov	r0, r4
 8002930:	4629      	mov	r1, r5
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	014b      	lsls	r3, r1, #5
 800293c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002940:	0142      	lsls	r2, r0, #5
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	1b00      	subs	r0, r0, r4
 8002948:	eb61 0105 	sbc.w	r1, r1, r5
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	018b      	lsls	r3, r1, #6
 8002956:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800295a:	0182      	lsls	r2, r0, #6
 800295c:	1a12      	subs	r2, r2, r0
 800295e:	eb63 0301 	sbc.w	r3, r3, r1
 8002962:	f04f 0000 	mov.w	r0, #0
 8002966:	f04f 0100 	mov.w	r1, #0
 800296a:	00d9      	lsls	r1, r3, #3
 800296c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002970:	00d0      	lsls	r0, r2, #3
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	1912      	adds	r2, r2, r4
 8002978:	eb45 0303 	adc.w	r3, r5, r3
 800297c:	f04f 0000 	mov.w	r0, #0
 8002980:	f04f 0100 	mov.w	r1, #0
 8002984:	0299      	lsls	r1, r3, #10
 8002986:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800298a:	0290      	lsls	r0, r2, #10
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4610      	mov	r0, r2
 8002992:	4619      	mov	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	461a      	mov	r2, r3
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	f7fd fc70 	bl	8000280 <__aeabi_uldivmod>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4613      	mov	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	3301      	adds	r3, #1
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	60bb      	str	r3, [r7, #8]
      break;
 80029c2:	e002      	b.n	80029ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029c6:	60bb      	str	r3, [r7, #8]
      break;
 80029c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ca:	68bb      	ldr	r3, [r7, #8]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029d6:	bf00      	nop
 80029d8:	40023800 	.word	0x40023800
 80029dc:	00f42400 	.word	0x00f42400
 80029e0:	007a1200 	.word	0x007a1200

080029e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029ea:	681b      	ldr	r3, [r3, #0]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000008 	.word	0x20000008

080029fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a00:	f7ff fff0 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	0a9b      	lsrs	r3, r3, #10
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	4903      	ldr	r1, [pc, #12]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a12:	5ccb      	ldrb	r3, [r1, r3]
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	08009b48 	.word	0x08009b48

08002a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a28:	f7ff ffdc 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	0b5b      	lsrs	r3, r3, #13
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	4903      	ldr	r1, [pc, #12]	; (8002a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a3a:	5ccb      	ldrb	r3, [r1, r3]
 8002a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40023800 	.word	0x40023800
 8002a48:	08009b48 	.word	0x08009b48

08002a4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	220f      	movs	r2, #15
 8002a5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a5c:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0203 	and.w	r2, r3, #3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a68:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a74:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <HAL_RCC_GetClockConfig+0x5c>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	08db      	lsrs	r3, r3, #3
 8002a86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a8e:	4b07      	ldr	r3, [pc, #28]	; (8002aac <HAL_RCC_GetClockConfig+0x60>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0207 	and.w	r2, r3, #7
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	601a      	str	r2, [r3, #0]
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40023c00 	.word	0x40023c00

08002ab0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e07b      	b.n	8002bba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d108      	bne.n	8002adc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ad2:	d009      	beq.n	8002ae8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	61da      	str	r2, [r3, #28]
 8002ada:	e005      	b.n	8002ae8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe fd64 	bl	80015d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	ea42 0103 	orr.w	r1, r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	0c1b      	lsrs	r3, r3, #16
 8002b86:	f003 0104 	and.w	r1, r3, #4
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	f003 0210 	and.w	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ba8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b08c      	sub	sp, #48	; 0x30
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_SPI_TransmitReceive+0x26>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e18a      	b.n	8002efe <HAL_SPI_TransmitReceive+0x33c>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bf0:	f7fe ff9a 	bl	8001b28 <HAL_GetTick>
 8002bf4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c06:	887b      	ldrh	r3, [r7, #2]
 8002c08:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d00f      	beq.n	8002c32 <HAL_SPI_TransmitReceive+0x70>
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c18:	d107      	bne.n	8002c2a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d103      	bne.n	8002c2a <HAL_SPI_TransmitReceive+0x68>
 8002c22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d003      	beq.n	8002c32 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c30:	e15b      	b.n	8002eea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_SPI_TransmitReceive+0x82>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_SPI_TransmitReceive+0x82>
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d103      	bne.n	8002c4c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c4a:	e14e      	b.n	8002eea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d003      	beq.n	8002c60 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2205      	movs	r2, #5
 8002c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	887a      	ldrh	r2, [r7, #2]
 8002c70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	887a      	ldrh	r2, [r7, #2]
 8002c76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	887a      	ldrh	r2, [r7, #2]
 8002c82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	887a      	ldrh	r2, [r7, #2]
 8002c88:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d007      	beq.n	8002cb4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cbc:	d178      	bne.n	8002db0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_SPI_TransmitReceive+0x10a>
 8002cc6:	8b7b      	ldrh	r3, [r7, #26]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d166      	bne.n	8002d9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	881a      	ldrh	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	1c9a      	adds	r2, r3, #2
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cf0:	e053      	b.n	8002d9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d11b      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x176>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d016      	beq.n	8002d38 <HAL_SPI_TransmitReceive+0x176>
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d113      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	881a      	ldrh	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	1c9a      	adds	r2, r3, #2
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d119      	bne.n	8002d7a <HAL_SPI_TransmitReceive+0x1b8>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d014      	beq.n	8002d7a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	b292      	uxth	r2, r2
 8002d5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	1c9a      	adds	r2, r3, #2
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d76:	2301      	movs	r3, #1
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d7a:	f7fe fed5 	bl	8001b28 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d807      	bhi.n	8002d9a <HAL_SPI_TransmitReceive+0x1d8>
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d90:	d003      	beq.n	8002d9a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d98:	e0a7      	b.n	8002eea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1a6      	bne.n	8002cf2 <HAL_SPI_TransmitReceive+0x130>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1a1      	bne.n	8002cf2 <HAL_SPI_TransmitReceive+0x130>
 8002dae:	e07c      	b.n	8002eaa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <HAL_SPI_TransmitReceive+0x1fc>
 8002db8:	8b7b      	ldrh	r3, [r7, #26]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d16b      	bne.n	8002e96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	330c      	adds	r3, #12
 8002dc8:	7812      	ldrb	r2, [r2, #0]
 8002dca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002de4:	e057      	b.n	8002e96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d11c      	bne.n	8002e2e <HAL_SPI_TransmitReceive+0x26c>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d017      	beq.n	8002e2e <HAL_SPI_TransmitReceive+0x26c>
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d114      	bne.n	8002e2e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	330c      	adds	r3, #12
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d119      	bne.n	8002e70 <HAL_SPI_TransmitReceive+0x2ae>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d014      	beq.n	8002e70 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e70:	f7fe fe5a 	bl	8001b28 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d803      	bhi.n	8002e88 <HAL_SPI_TransmitReceive+0x2c6>
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e86:	d102      	bne.n	8002e8e <HAL_SPI_TransmitReceive+0x2cc>
 8002e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e94:	e029      	b.n	8002eea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1a2      	bne.n	8002de6 <HAL_SPI_TransmitReceive+0x224>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d19d      	bne.n	8002de6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f8b2 	bl	8003018 <SPI_EndRxTxTransaction>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ec6:	e010      	b.n	8002eea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10b      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	e000      	b.n	8002eea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002ee8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002efa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3730      	adds	r7, #48	; 0x30
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	4613      	mov	r3, r2
 8002f16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f18:	f7fe fe06 	bl	8001b28 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	4413      	add	r3, r2
 8002f26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f28:	f7fe fdfe 	bl	8001b28 <HAL_GetTick>
 8002f2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f2e:	4b39      	ldr	r3, [pc, #228]	; (8003014 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	015b      	lsls	r3, r3, #5
 8002f34:	0d1b      	lsrs	r3, r3, #20
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	fb02 f303 	mul.w	r3, r2, r3
 8002f3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f3e:	e054      	b.n	8002fea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f46:	d050      	beq.n	8002fea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f48:	f7fe fdee 	bl	8001b28 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d902      	bls.n	8002f5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d13d      	bne.n	8002fda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f76:	d111      	bne.n	8002f9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f80:	d004      	beq.n	8002f8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8a:	d107      	bne.n	8002f9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa4:	d10f      	bne.n	8002fc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e017      	b.n	800300a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	bf0c      	ite	eq
 8002ffa:	2301      	moveq	r3, #1
 8002ffc:	2300      	movne	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	429a      	cmp	r2, r3
 8003006:	d19b      	bne.n	8002f40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3720      	adds	r7, #32
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000008 	.word	0x20000008

08003018 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003024:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <SPI_EndRxTxTransaction+0x7c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1b      	ldr	r2, [pc, #108]	; (8003098 <SPI_EndRxTxTransaction+0x80>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	0d5b      	lsrs	r3, r3, #21
 8003030:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003034:	fb02 f303 	mul.w	r3, r2, r3
 8003038:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003042:	d112      	bne.n	800306a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2200      	movs	r2, #0
 800304c:	2180      	movs	r1, #128	; 0x80
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f7ff ff5a 	bl	8002f08 <SPI_WaitFlagStateUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d016      	beq.n	8003088 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305e:	f043 0220 	orr.w	r2, r3, #32
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e00f      	b.n	800308a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00a      	beq.n	8003086 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	3b01      	subs	r3, #1
 8003074:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003080:	2b80      	cmp	r3, #128	; 0x80
 8003082:	d0f2      	beq.n	800306a <SPI_EndRxTxTransaction+0x52>
 8003084:	e000      	b.n	8003088 <SPI_EndRxTxTransaction+0x70>
        break;
 8003086:	bf00      	nop
  }

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000008 	.word	0x20000008
 8003098:	165e9f81 	.word	0x165e9f81

0800309c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e041      	b.n	8003132 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f839 	bl	800313a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3304      	adds	r3, #4
 80030d8:	4619      	mov	r1, r3
 80030da:	4610      	mov	r0, r2
 80030dc:	f000 f9ca 	bl	8003474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	d001      	beq.n	8003168 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e044      	b.n	80031f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a1e      	ldr	r2, [pc, #120]	; (8003200 <HAL_TIM_Base_Start_IT+0xb0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d018      	beq.n	80031bc <HAL_TIM_Base_Start_IT+0x6c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003192:	d013      	beq.n	80031bc <HAL_TIM_Base_Start_IT+0x6c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a1a      	ldr	r2, [pc, #104]	; (8003204 <HAL_TIM_Base_Start_IT+0xb4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00e      	beq.n	80031bc <HAL_TIM_Base_Start_IT+0x6c>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a19      	ldr	r2, [pc, #100]	; (8003208 <HAL_TIM_Base_Start_IT+0xb8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d009      	beq.n	80031bc <HAL_TIM_Base_Start_IT+0x6c>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a17      	ldr	r2, [pc, #92]	; (800320c <HAL_TIM_Base_Start_IT+0xbc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d004      	beq.n	80031bc <HAL_TIM_Base_Start_IT+0x6c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a16      	ldr	r2, [pc, #88]	; (8003210 <HAL_TIM_Base_Start_IT+0xc0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d111      	bne.n	80031e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b06      	cmp	r3, #6
 80031cc:	d010      	beq.n	80031f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0201 	orr.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031de:	e007      	b.n	80031f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40010000 	.word	0x40010000
 8003204:	40000400 	.word	0x40000400
 8003208:	40000800 	.word	0x40000800
 800320c:	40000c00 	.word	0x40000c00
 8003210:	40014000 	.word	0x40014000

08003214 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b02      	cmp	r3, #2
 8003228:	d122      	bne.n	8003270 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b02      	cmp	r3, #2
 8003236:	d11b      	bne.n	8003270 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0202 	mvn.w	r2, #2
 8003240:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f8ee 	bl	8003438 <HAL_TIM_IC_CaptureCallback>
 800325c:	e005      	b.n	800326a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f8e0 	bl	8003424 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f8f1 	bl	800344c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	2b04      	cmp	r3, #4
 800327c:	d122      	bne.n	80032c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b04      	cmp	r3, #4
 800328a:	d11b      	bne.n	80032c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0204 	mvn.w	r2, #4
 8003294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2202      	movs	r2, #2
 800329a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8c4 	bl	8003438 <HAL_TIM_IC_CaptureCallback>
 80032b0:	e005      	b.n	80032be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f8b6 	bl	8003424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f8c7 	bl	800344c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d122      	bne.n	8003318 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d11b      	bne.n	8003318 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0208 	mvn.w	r2, #8
 80032e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2204      	movs	r2, #4
 80032ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f89a 	bl	8003438 <HAL_TIM_IC_CaptureCallback>
 8003304:	e005      	b.n	8003312 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f88c 	bl	8003424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f89d 	bl	800344c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b10      	cmp	r3, #16
 8003324:	d122      	bne.n	800336c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b10      	cmp	r3, #16
 8003332:	d11b      	bne.n	800336c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0210 	mvn.w	r2, #16
 800333c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2208      	movs	r2, #8
 8003342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f870 	bl	8003438 <HAL_TIM_IC_CaptureCallback>
 8003358:	e005      	b.n	8003366 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f862 	bl	8003424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f873 	bl	800344c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b01      	cmp	r3, #1
 8003378:	d10e      	bne.n	8003398 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b01      	cmp	r3, #1
 8003386:	d107      	bne.n	8003398 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0201 	mvn.w	r2, #1
 8003390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fe f8d8 	bl	8001548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a2:	2b80      	cmp	r3, #128	; 0x80
 80033a4:	d10e      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b0:	2b80      	cmp	r3, #128	; 0x80
 80033b2:	d107      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8e2 	bl	8003588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d10e      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033dc:	2b40      	cmp	r3, #64	; 0x40
 80033de:	d107      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f838 	bl	8003460 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d10e      	bne.n	800341c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0320 	and.w	r3, r3, #32
 8003408:	2b20      	cmp	r3, #32
 800340a:	d107      	bne.n	800341c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0220 	mvn.w	r2, #32
 8003414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f8ac 	bl	8003574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a34      	ldr	r2, [pc, #208]	; (8003558 <TIM_Base_SetConfig+0xe4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00f      	beq.n	80034ac <TIM_Base_SetConfig+0x38>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003492:	d00b      	beq.n	80034ac <TIM_Base_SetConfig+0x38>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a31      	ldr	r2, [pc, #196]	; (800355c <TIM_Base_SetConfig+0xe8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d007      	beq.n	80034ac <TIM_Base_SetConfig+0x38>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a30      	ldr	r2, [pc, #192]	; (8003560 <TIM_Base_SetConfig+0xec>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <TIM_Base_SetConfig+0x38>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a2f      	ldr	r2, [pc, #188]	; (8003564 <TIM_Base_SetConfig+0xf0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d108      	bne.n	80034be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a25      	ldr	r2, [pc, #148]	; (8003558 <TIM_Base_SetConfig+0xe4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d01b      	beq.n	80034fe <TIM_Base_SetConfig+0x8a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034cc:	d017      	beq.n	80034fe <TIM_Base_SetConfig+0x8a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a22      	ldr	r2, [pc, #136]	; (800355c <TIM_Base_SetConfig+0xe8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <TIM_Base_SetConfig+0x8a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a21      	ldr	r2, [pc, #132]	; (8003560 <TIM_Base_SetConfig+0xec>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00f      	beq.n	80034fe <TIM_Base_SetConfig+0x8a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a20      	ldr	r2, [pc, #128]	; (8003564 <TIM_Base_SetConfig+0xf0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00b      	beq.n	80034fe <TIM_Base_SetConfig+0x8a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a1f      	ldr	r2, [pc, #124]	; (8003568 <TIM_Base_SetConfig+0xf4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d007      	beq.n	80034fe <TIM_Base_SetConfig+0x8a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a1e      	ldr	r2, [pc, #120]	; (800356c <TIM_Base_SetConfig+0xf8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d003      	beq.n	80034fe <TIM_Base_SetConfig+0x8a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a1d      	ldr	r2, [pc, #116]	; (8003570 <TIM_Base_SetConfig+0xfc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d108      	bne.n	8003510 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a08      	ldr	r2, [pc, #32]	; (8003558 <TIM_Base_SetConfig+0xe4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d103      	bne.n	8003544 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	615a      	str	r2, [r3, #20]
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40010000 	.word	0x40010000
 800355c:	40000400 	.word	0x40000400
 8003560:	40000800 	.word	0x40000800
 8003564:	40000c00 	.word	0x40000c00
 8003568:	40014000 	.word	0x40014000
 800356c:	40014400 	.word	0x40014400
 8003570:	40014800 	.word	0x40014800

08003574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e03f      	b.n	800362e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fe f86e 	bl	80016a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2224      	movs	r2, #36	; 0x24
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fddb 	bl	800419c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003604:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003614:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b08a      	sub	sp, #40	; 0x28
 800363a:	af02      	add	r7, sp, #8
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	4613      	mov	r3, r2
 8003644:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b20      	cmp	r3, #32
 8003654:	d17c      	bne.n	8003750 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <HAL_UART_Transmit+0x2c>
 800365c:	88fb      	ldrh	r3, [r7, #6]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e075      	b.n	8003752 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_UART_Transmit+0x3e>
 8003670:	2302      	movs	r3, #2
 8003672:	e06e      	b.n	8003752 <HAL_UART_Transmit+0x11c>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2221      	movs	r2, #33	; 0x21
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800368a:	f7fe fa4d 	bl	8001b28 <HAL_GetTick>
 800368e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	88fa      	ldrh	r2, [r7, #6]
 8003694:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	88fa      	ldrh	r2, [r7, #6]
 800369a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a4:	d108      	bne.n	80036b8 <HAL_UART_Transmit+0x82>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d104      	bne.n	80036b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	e003      	b.n	80036c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036c8:	e02a      	b.n	8003720 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2200      	movs	r2, #0
 80036d2:	2180      	movs	r1, #128	; 0x80
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 fb1f 	bl	8003d18 <UART_WaitOnFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e036      	b.n	8003752 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10b      	bne.n	8003702 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	3302      	adds	r3, #2
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	e007      	b.n	8003712 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	781a      	ldrb	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	3301      	adds	r3, #1
 8003710:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003716:	b29b      	uxth	r3, r3
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1cf      	bne.n	80036ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2200      	movs	r2, #0
 8003732:	2140      	movs	r1, #64	; 0x40
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 faef 	bl	8003d18 <UART_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e006      	b.n	8003752 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	e000      	b.n	8003752 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003750:	2302      	movs	r3, #2
  }
}
 8003752:	4618      	mov	r0, r3
 8003754:	3720      	adds	r7, #32
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	4613      	mov	r3, r2
 8003766:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b20      	cmp	r3, #32
 8003772:	d11d      	bne.n	80037b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_UART_Receive_IT+0x26>
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e016      	b.n	80037b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_UART_Receive_IT+0x38>
 800378e:	2302      	movs	r3, #2
 8003790:	e00f      	b.n	80037b2 <HAL_UART_Receive_IT+0x58>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037a0:	88fb      	ldrh	r3, [r7, #6]
 80037a2:	461a      	mov	r2, r3
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 fb24 	bl	8003df4 <UART_Start_Receive_IT>
 80037ac:	4603      	mov	r3, r0
 80037ae:	e000      	b.n	80037b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
  }
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b0ba      	sub	sp, #232	; 0xe8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80037fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10f      	bne.n	8003822 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <HAL_UART_IRQHandler+0x66>
 800380e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fc03 	bl	8004026 <UART_Receive_IT>
      return;
 8003820:	e256      	b.n	8003cd0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80de 	beq.w	80039e8 <HAL_UART_IRQHandler+0x22c>
 800382c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d106      	bne.n	8003846 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800383c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 80d1 	beq.w	80039e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00b      	beq.n	800386a <HAL_UART_IRQHandler+0xae>
 8003852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f043 0201 	orr.w	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800386a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00b      	beq.n	800388e <HAL_UART_IRQHandler+0xd2>
 8003876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f043 0202 	orr.w	r2, r3, #2
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800388e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00b      	beq.n	80038b2 <HAL_UART_IRQHandler+0xf6>
 800389a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f043 0204 	orr.w	r2, r3, #4
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d011      	beq.n	80038e2 <HAL_UART_IRQHandler+0x126>
 80038be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d105      	bne.n	80038d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f043 0208 	orr.w	r2, r3, #8
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 81ed 	beq.w	8003cc6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_UART_IRQHandler+0x14e>
 80038f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fb8e 	bl	8004026 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003914:	2b40      	cmp	r3, #64	; 0x40
 8003916:	bf0c      	ite	eq
 8003918:	2301      	moveq	r3, #1
 800391a:	2300      	movne	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d103      	bne.n	8003936 <HAL_UART_IRQHandler+0x17a>
 800392e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003932:	2b00      	cmp	r3, #0
 8003934:	d04f      	beq.n	80039d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fa96 	bl	8003e68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003946:	2b40      	cmp	r3, #64	; 0x40
 8003948:	d141      	bne.n	80039ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003958:	e853 3f00 	ldrex	r3, [r3]
 800395c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003960:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3314      	adds	r3, #20
 8003972:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003976:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800397a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003982:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800398e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1d9      	bne.n	800394a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	2b00      	cmp	r3, #0
 800399c:	d013      	beq.n	80039c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	4a7d      	ldr	r2, [pc, #500]	; (8003b98 <HAL_UART_IRQHandler+0x3dc>)
 80039a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe fa1a 	bl	8001de4 <HAL_DMA_Abort_IT>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d016      	beq.n	80039e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039c0:	4610      	mov	r0, r2
 80039c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c4:	e00e      	b.n	80039e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f990 	bl	8003cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039cc:	e00a      	b.n	80039e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f98c 	bl	8003cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d4:	e006      	b.n	80039e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f988 	bl	8003cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80039e2:	e170      	b.n	8003cc6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e4:	bf00      	nop
    return;
 80039e6:	e16e      	b.n	8003cc6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	f040 814a 	bne.w	8003c86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 8143 	beq.w	8003c86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 813c 	beq.w	8003c86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	f040 80b4 	bne.w	8003b9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8140 	beq.w	8003cca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a52:	429a      	cmp	r2, r3
 8003a54:	f080 8139 	bcs.w	8003cca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a6a:	f000 8088 	beq.w	8003b7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	330c      	adds	r3, #12
 8003a96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003aa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1d9      	bne.n	8003a6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3314      	adds	r3, #20
 8003ac0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003acc:	f023 0301 	bic.w	r3, r3, #1
 8003ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3314      	adds	r3, #20
 8003ada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ade:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ae2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003aea:	e841 2300 	strex	r3, r2, [r1]
 8003aee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1e1      	bne.n	8003aba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3314      	adds	r3, #20
 8003afc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3314      	adds	r3, #20
 8003b16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e3      	bne.n	8003af6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	330c      	adds	r3, #12
 8003b42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b46:	e853 3f00 	ldrex	r3, [r3]
 8003b4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4e:	f023 0310 	bic.w	r3, r3, #16
 8003b52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	330c      	adds	r3, #12
 8003b5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b60:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e3      	bne.n	8003b3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fe f8c3 	bl	8001d04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f8b6 	bl	8003d00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b94:	e099      	b.n	8003cca <HAL_UART_IRQHandler+0x50e>
 8003b96:	bf00      	nop
 8003b98:	08003f2f 	.word	0x08003f2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 808b 	beq.w	8003cce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 8086 	beq.w	8003cce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	330c      	adds	r3, #12
 8003bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bcc:	e853 3f00 	ldrex	r3, [r3]
 8003bd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	330c      	adds	r3, #12
 8003be2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003be6:	647a      	str	r2, [r7, #68]	; 0x44
 8003be8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bee:	e841 2300 	strex	r3, r2, [r1]
 8003bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1e3      	bne.n	8003bc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3314      	adds	r3, #20
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	e853 3f00 	ldrex	r3, [r3]
 8003c08:	623b      	str	r3, [r7, #32]
   return(result);
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3314      	adds	r3, #20
 8003c1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c1e:	633a      	str	r2, [r7, #48]	; 0x30
 8003c20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e3      	bne.n	8003bfa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	330c      	adds	r3, #12
 8003c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	e853 3f00 	ldrex	r3, [r3]
 8003c4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f023 0310 	bic.w	r3, r3, #16
 8003c56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c64:	61fa      	str	r2, [r7, #28]
 8003c66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	69b9      	ldr	r1, [r7, #24]
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	617b      	str	r3, [r7, #20]
   return(result);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e3      	bne.n	8003c40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f83e 	bl	8003d00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c84:	e023      	b.n	8003cce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x4ea>
 8003c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f959 	bl	8003f56 <UART_Transmit_IT>
    return;
 8003ca4:	e014      	b.n	8003cd0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00e      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x514>
 8003cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f999 	bl	8003ff6 <UART_EndTransmit_IT>
    return;
 8003cc4:	e004      	b.n	8003cd0 <HAL_UART_IRQHandler+0x514>
    return;
 8003cc6:	bf00      	nop
 8003cc8:	e002      	b.n	8003cd0 <HAL_UART_IRQHandler+0x514>
      return;
 8003cca:	bf00      	nop
 8003ccc:	e000      	b.n	8003cd0 <HAL_UART_IRQHandler+0x514>
      return;
 8003cce:	bf00      	nop
  }
}
 8003cd0:	37e8      	adds	r7, #232	; 0xe8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop

08003cd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b090      	sub	sp, #64	; 0x40
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d28:	e050      	b.n	8003dcc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d04c      	beq.n	8003dcc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d007      	beq.n	8003d48 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d38:	f7fd fef6 	bl	8001b28 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d241      	bcs.n	8003dcc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d68:	637a      	str	r2, [r7, #52]	; 0x34
 8003d6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e5      	bne.n	8003d48 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3314      	adds	r3, #20
 8003d82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f023 0301 	bic.w	r3, r3, #1
 8003d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3314      	adds	r3, #20
 8003d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d9c:	623a      	str	r2, [r7, #32]
 8003d9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da0:	69f9      	ldr	r1, [r7, #28]
 8003da2:	6a3a      	ldr	r2, [r7, #32]
 8003da4:	e841 2300 	strex	r3, r2, [r1]
 8003da8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e5      	bne.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e00f      	b.n	8003dec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d09f      	beq.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3740      	adds	r7, #64	; 0x40
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	88fa      	ldrh	r2, [r7, #6]
 8003e0c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	88fa      	ldrh	r2, [r7, #6]
 8003e12:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2222      	movs	r2, #34	; 0x22
 8003e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e38:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695a      	ldr	r2, [r3, #20]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0201 	orr.w	r2, r2, #1
 8003e48:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0220 	orr.w	r2, r2, #32
 8003e58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b095      	sub	sp, #84	; 0x54
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7a:	e853 3f00 	ldrex	r3, [r3]
 8003e7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e90:	643a      	str	r2, [r7, #64]	; 0x40
 8003e92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e5      	bne.n	8003e70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3314      	adds	r3, #20
 8003eaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	e853 3f00 	ldrex	r3, [r3]
 8003eb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f023 0301 	bic.w	r3, r3, #1
 8003eba:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3314      	adds	r3, #20
 8003ec2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ec4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e5      	bne.n	8003ea4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d119      	bne.n	8003f14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	330c      	adds	r3, #12
 8003ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	e853 3f00 	ldrex	r3, [r3]
 8003eee:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f023 0310 	bic.w	r3, r3, #16
 8003ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	330c      	adds	r3, #12
 8003efe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f00:	61ba      	str	r2, [r7, #24]
 8003f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	6979      	ldr	r1, [r7, #20]
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	e841 2300 	strex	r3, r2, [r1]
 8003f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1e5      	bne.n	8003ee0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f22:	bf00      	nop
 8003f24:	3754      	adds	r7, #84	; 0x54
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f7ff fecf 	bl	8003cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f4e:	bf00      	nop
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b085      	sub	sp, #20
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b21      	cmp	r3, #33	; 0x21
 8003f68:	d13e      	bne.n	8003fe8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f72:	d114      	bne.n	8003f9e <UART_Transmit_IT+0x48>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d110      	bne.n	8003f9e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	1c9a      	adds	r2, r3, #2
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	621a      	str	r2, [r3, #32]
 8003f9c:	e008      	b.n	8003fb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	1c59      	adds	r1, r3, #1
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6211      	str	r1, [r2, #32]
 8003fa8:	781a      	ldrb	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10f      	bne.n	8003fe4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fe2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e000      	b.n	8003fea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fe8:	2302      	movs	r3, #2
  }
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800400c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff fe5e 	bl	8003cd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b08c      	sub	sp, #48	; 0x30
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b22      	cmp	r3, #34	; 0x22
 8004038:	f040 80ab 	bne.w	8004192 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004044:	d117      	bne.n	8004076 <UART_Receive_IT+0x50>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d113      	bne.n	8004076 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800404e:	2300      	movs	r3, #0
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	b29b      	uxth	r3, r3
 8004060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004064:	b29a      	uxth	r2, r3
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	1c9a      	adds	r2, r3, #2
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	629a      	str	r2, [r3, #40]	; 0x28
 8004074:	e026      	b.n	80040c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800407c:	2300      	movs	r3, #0
 800407e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004088:	d007      	beq.n	800409a <UART_Receive_IT+0x74>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10a      	bne.n	80040a8 <UART_Receive_IT+0x82>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	701a      	strb	r2, [r3, #0]
 80040a6:	e008      	b.n	80040ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	4619      	mov	r1, r3
 80040d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d15a      	bne.n	800418e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0220 	bic.w	r2, r2, #32
 80040e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0201 	bic.w	r2, r2, #1
 8004106:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	2b01      	cmp	r3, #1
 8004116:	d135      	bne.n	8004184 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	330c      	adds	r3, #12
 8004124:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	613b      	str	r3, [r7, #16]
   return(result);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f023 0310 	bic.w	r3, r3, #16
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413e:	623a      	str	r2, [r7, #32]
 8004140:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	69f9      	ldr	r1, [r7, #28]
 8004144:	6a3a      	ldr	r2, [r7, #32]
 8004146:	e841 2300 	strex	r3, r2, [r1]
 800414a:	61bb      	str	r3, [r7, #24]
   return(result);
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e5      	bne.n	800411e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b10      	cmp	r3, #16
 800415e:	d10a      	bne.n	8004176 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800417a:	4619      	mov	r1, r3
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff fdbf 	bl	8003d00 <HAL_UARTEx_RxEventCallback>
 8004182:	e002      	b.n	800418a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7fc ffff 	bl	8001188 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e002      	b.n	8004194 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e000      	b.n	8004194 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004192:	2302      	movs	r3, #2
  }
}
 8004194:	4618      	mov	r0, r3
 8004196:	3730      	adds	r7, #48	; 0x30
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800419c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a0:	b09f      	sub	sp, #124	; 0x7c
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b2:	68d9      	ldr	r1, [r3, #12]
 80041b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	ea40 0301 	orr.w	r3, r0, r1
 80041bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	431a      	orrs	r2, r3
 80041ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80041d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041e0:	f021 010c 	bic.w	r1, r1, #12
 80041e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041ea:	430b      	orrs	r3, r1
 80041ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fa:	6999      	ldr	r1, [r3, #24]
 80041fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	ea40 0301 	orr.w	r3, r0, r1
 8004204:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4bc5      	ldr	r3, [pc, #788]	; (8004520 <UART_SetConfig+0x384>)
 800420c:	429a      	cmp	r2, r3
 800420e:	d004      	beq.n	800421a <UART_SetConfig+0x7e>
 8004210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4bc3      	ldr	r3, [pc, #780]	; (8004524 <UART_SetConfig+0x388>)
 8004216:	429a      	cmp	r2, r3
 8004218:	d103      	bne.n	8004222 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800421a:	f7fe fc03 	bl	8002a24 <HAL_RCC_GetPCLK2Freq>
 800421e:	6778      	str	r0, [r7, #116]	; 0x74
 8004220:	e002      	b.n	8004228 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004222:	f7fe fbeb 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8004226:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004230:	f040 80b6 	bne.w	80043a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004234:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004236:	461c      	mov	r4, r3
 8004238:	f04f 0500 	mov.w	r5, #0
 800423c:	4622      	mov	r2, r4
 800423e:	462b      	mov	r3, r5
 8004240:	1891      	adds	r1, r2, r2
 8004242:	6439      	str	r1, [r7, #64]	; 0x40
 8004244:	415b      	adcs	r3, r3
 8004246:	647b      	str	r3, [r7, #68]	; 0x44
 8004248:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800424c:	1912      	adds	r2, r2, r4
 800424e:	eb45 0303 	adc.w	r3, r5, r3
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f04f 0100 	mov.w	r1, #0
 800425a:	00d9      	lsls	r1, r3, #3
 800425c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004260:	00d0      	lsls	r0, r2, #3
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	1911      	adds	r1, r2, r4
 8004268:	6639      	str	r1, [r7, #96]	; 0x60
 800426a:	416b      	adcs	r3, r5
 800426c:	667b      	str	r3, [r7, #100]	; 0x64
 800426e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	461a      	mov	r2, r3
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	1891      	adds	r1, r2, r2
 800427a:	63b9      	str	r1, [r7, #56]	; 0x38
 800427c:	415b      	adcs	r3, r3
 800427e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004280:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004284:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004288:	f7fb fffa 	bl	8000280 <__aeabi_uldivmod>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4ba5      	ldr	r3, [pc, #660]	; (8004528 <UART_SetConfig+0x38c>)
 8004292:	fba3 2302 	umull	r2, r3, r3, r2
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	011e      	lsls	r6, r3, #4
 800429a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800429c:	461c      	mov	r4, r3
 800429e:	f04f 0500 	mov.w	r5, #0
 80042a2:	4622      	mov	r2, r4
 80042a4:	462b      	mov	r3, r5
 80042a6:	1891      	adds	r1, r2, r2
 80042a8:	6339      	str	r1, [r7, #48]	; 0x30
 80042aa:	415b      	adcs	r3, r3
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
 80042ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042b2:	1912      	adds	r2, r2, r4
 80042b4:	eb45 0303 	adc.w	r3, r5, r3
 80042b8:	f04f 0000 	mov.w	r0, #0
 80042bc:	f04f 0100 	mov.w	r1, #0
 80042c0:	00d9      	lsls	r1, r3, #3
 80042c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042c6:	00d0      	lsls	r0, r2, #3
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	1911      	adds	r1, r2, r4
 80042ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80042d0:	416b      	adcs	r3, r5
 80042d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	461a      	mov	r2, r3
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	1891      	adds	r1, r2, r2
 80042e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80042e2:	415b      	adcs	r3, r3
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80042ee:	f7fb ffc7 	bl	8000280 <__aeabi_uldivmod>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4b8c      	ldr	r3, [pc, #560]	; (8004528 <UART_SetConfig+0x38c>)
 80042f8:	fba3 1302 	umull	r1, r3, r3, r2
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	2164      	movs	r1, #100	; 0x64
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	3332      	adds	r3, #50	; 0x32
 800430a:	4a87      	ldr	r2, [pc, #540]	; (8004528 <UART_SetConfig+0x38c>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004318:	441e      	add	r6, r3
 800431a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800431c:	4618      	mov	r0, r3
 800431e:	f04f 0100 	mov.w	r1, #0
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	1894      	adds	r4, r2, r2
 8004328:	623c      	str	r4, [r7, #32]
 800432a:	415b      	adcs	r3, r3
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
 800432e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004332:	1812      	adds	r2, r2, r0
 8004334:	eb41 0303 	adc.w	r3, r1, r3
 8004338:	f04f 0400 	mov.w	r4, #0
 800433c:	f04f 0500 	mov.w	r5, #0
 8004340:	00dd      	lsls	r5, r3, #3
 8004342:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004346:	00d4      	lsls	r4, r2, #3
 8004348:	4622      	mov	r2, r4
 800434a:	462b      	mov	r3, r5
 800434c:	1814      	adds	r4, r2, r0
 800434e:	653c      	str	r4, [r7, #80]	; 0x50
 8004350:	414b      	adcs	r3, r1
 8004352:	657b      	str	r3, [r7, #84]	; 0x54
 8004354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	461a      	mov	r2, r3
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	1891      	adds	r1, r2, r2
 8004360:	61b9      	str	r1, [r7, #24]
 8004362:	415b      	adcs	r3, r3
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800436a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800436e:	f7fb ff87 	bl	8000280 <__aeabi_uldivmod>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4b6c      	ldr	r3, [pc, #432]	; (8004528 <UART_SetConfig+0x38c>)
 8004378:	fba3 1302 	umull	r1, r3, r3, r2
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	2164      	movs	r1, #100	; 0x64
 8004380:	fb01 f303 	mul.w	r3, r1, r3
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	3332      	adds	r3, #50	; 0x32
 800438a:	4a67      	ldr	r2, [pc, #412]	; (8004528 <UART_SetConfig+0x38c>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	f003 0207 	and.w	r2, r3, #7
 8004396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4432      	add	r2, r6
 800439c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800439e:	e0b9      	b.n	8004514 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043a2:	461c      	mov	r4, r3
 80043a4:	f04f 0500 	mov.w	r5, #0
 80043a8:	4622      	mov	r2, r4
 80043aa:	462b      	mov	r3, r5
 80043ac:	1891      	adds	r1, r2, r2
 80043ae:	6139      	str	r1, [r7, #16]
 80043b0:	415b      	adcs	r3, r3
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80043b8:	1912      	adds	r2, r2, r4
 80043ba:	eb45 0303 	adc.w	r3, r5, r3
 80043be:	f04f 0000 	mov.w	r0, #0
 80043c2:	f04f 0100 	mov.w	r1, #0
 80043c6:	00d9      	lsls	r1, r3, #3
 80043c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043cc:	00d0      	lsls	r0, r2, #3
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	eb12 0804 	adds.w	r8, r2, r4
 80043d6:	eb43 0905 	adc.w	r9, r3, r5
 80043da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4618      	mov	r0, r3
 80043e0:	f04f 0100 	mov.w	r1, #0
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	008b      	lsls	r3, r1, #2
 80043ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043f2:	0082      	lsls	r2, r0, #2
 80043f4:	4640      	mov	r0, r8
 80043f6:	4649      	mov	r1, r9
 80043f8:	f7fb ff42 	bl	8000280 <__aeabi_uldivmod>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4b49      	ldr	r3, [pc, #292]	; (8004528 <UART_SetConfig+0x38c>)
 8004402:	fba3 2302 	umull	r2, r3, r3, r2
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	011e      	lsls	r6, r3, #4
 800440a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800440c:	4618      	mov	r0, r3
 800440e:	f04f 0100 	mov.w	r1, #0
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	1894      	adds	r4, r2, r2
 8004418:	60bc      	str	r4, [r7, #8]
 800441a:	415b      	adcs	r3, r3
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004422:	1812      	adds	r2, r2, r0
 8004424:	eb41 0303 	adc.w	r3, r1, r3
 8004428:	f04f 0400 	mov.w	r4, #0
 800442c:	f04f 0500 	mov.w	r5, #0
 8004430:	00dd      	lsls	r5, r3, #3
 8004432:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004436:	00d4      	lsls	r4, r2, #3
 8004438:	4622      	mov	r2, r4
 800443a:	462b      	mov	r3, r5
 800443c:	1814      	adds	r4, r2, r0
 800443e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004440:	414b      	adcs	r3, r1
 8004442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4618      	mov	r0, r3
 800444a:	f04f 0100 	mov.w	r1, #0
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	008b      	lsls	r3, r1, #2
 8004458:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800445c:	0082      	lsls	r2, r0, #2
 800445e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004462:	f7fb ff0d 	bl	8000280 <__aeabi_uldivmod>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4b2f      	ldr	r3, [pc, #188]	; (8004528 <UART_SetConfig+0x38c>)
 800446c:	fba3 1302 	umull	r1, r3, r3, r2
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	2164      	movs	r1, #100	; 0x64
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	3332      	adds	r3, #50	; 0x32
 800447e:	4a2a      	ldr	r2, [pc, #168]	; (8004528 <UART_SetConfig+0x38c>)
 8004480:	fba2 2303 	umull	r2, r3, r2, r3
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800448a:	441e      	add	r6, r3
 800448c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800448e:	4618      	mov	r0, r3
 8004490:	f04f 0100 	mov.w	r1, #0
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	1894      	adds	r4, r2, r2
 800449a:	603c      	str	r4, [r7, #0]
 800449c:	415b      	adcs	r3, r3
 800449e:	607b      	str	r3, [r7, #4]
 80044a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044a4:	1812      	adds	r2, r2, r0
 80044a6:	eb41 0303 	adc.w	r3, r1, r3
 80044aa:	f04f 0400 	mov.w	r4, #0
 80044ae:	f04f 0500 	mov.w	r5, #0
 80044b2:	00dd      	lsls	r5, r3, #3
 80044b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044b8:	00d4      	lsls	r4, r2, #3
 80044ba:	4622      	mov	r2, r4
 80044bc:	462b      	mov	r3, r5
 80044be:	eb12 0a00 	adds.w	sl, r2, r0
 80044c2:	eb43 0b01 	adc.w	fp, r3, r1
 80044c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f04f 0100 	mov.w	r1, #0
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	008b      	lsls	r3, r1, #2
 80044da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044de:	0082      	lsls	r2, r0, #2
 80044e0:	4650      	mov	r0, sl
 80044e2:	4659      	mov	r1, fp
 80044e4:	f7fb fecc 	bl	8000280 <__aeabi_uldivmod>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4b0e      	ldr	r3, [pc, #56]	; (8004528 <UART_SetConfig+0x38c>)
 80044ee:	fba3 1302 	umull	r1, r3, r3, r2
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	2164      	movs	r1, #100	; 0x64
 80044f6:	fb01 f303 	mul.w	r3, r1, r3
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	3332      	adds	r3, #50	; 0x32
 8004500:	4a09      	ldr	r2, [pc, #36]	; (8004528 <UART_SetConfig+0x38c>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	f003 020f 	and.w	r2, r3, #15
 800450c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4432      	add	r2, r6
 8004512:	609a      	str	r2, [r3, #8]
}
 8004514:	bf00      	nop
 8004516:	377c      	adds	r7, #124	; 0x7c
 8004518:	46bd      	mov	sp, r7
 800451a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800451e:	bf00      	nop
 8004520:	40011000 	.word	0x40011000
 8004524:	40011400 	.word	0x40011400
 8004528:	51eb851f 	.word	0x51eb851f

0800452c <__NVIC_SetPriority>:
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	6039      	str	r1, [r7, #0]
 8004536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453c:	2b00      	cmp	r3, #0
 800453e:	db0a      	blt.n	8004556 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	490c      	ldr	r1, [pc, #48]	; (8004578 <__NVIC_SetPriority+0x4c>)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	440b      	add	r3, r1
 8004550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004554:	e00a      	b.n	800456c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4908      	ldr	r1, [pc, #32]	; (800457c <__NVIC_SetPriority+0x50>)
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	3b04      	subs	r3, #4
 8004564:	0112      	lsls	r2, r2, #4
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	440b      	add	r3, r1
 800456a:	761a      	strb	r2, [r3, #24]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	e000e100 	.word	0xe000e100
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <SysTick_Handler+0x1c>)
 8004586:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004588:	f002 fd56 	bl	8007038 <xTaskGetSchedulerState>
 800458c:	4603      	mov	r3, r0
 800458e:	2b01      	cmp	r3, #1
 8004590:	d001      	beq.n	8004596 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004592:	f003 fc71 	bl	8007e78 <xPortSysTickHandler>
  }
}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	e000e010 	.word	0xe000e010

080045a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80045a4:	2100      	movs	r1, #0
 80045a6:	f06f 0004 	mvn.w	r0, #4
 80045aa:	f7ff ffbf 	bl	800452c <__NVIC_SetPriority>
#endif
}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045ba:	f3ef 8305 	mrs	r3, IPSR
 80045be:	603b      	str	r3, [r7, #0]
  return(result);
 80045c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80045c6:	f06f 0305 	mvn.w	r3, #5
 80045ca:	607b      	str	r3, [r7, #4]
 80045cc:	e00c      	b.n	80045e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <osKernelInitialize+0x44>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d105      	bne.n	80045e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80045d6:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <osKernelInitialize+0x44>)
 80045d8:	2201      	movs	r2, #1
 80045da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045dc:	2300      	movs	r3, #0
 80045de:	607b      	str	r3, [r7, #4]
 80045e0:	e002      	b.n	80045e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80045e2:	f04f 33ff 	mov.w	r3, #4294967295
 80045e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045e8:	687b      	ldr	r3, [r7, #4]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	200000a4 	.word	0x200000a4

080045fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004602:	f3ef 8305 	mrs	r3, IPSR
 8004606:	603b      	str	r3, [r7, #0]
  return(result);
 8004608:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <osKernelStart+0x1a>
    stat = osErrorISR;
 800460e:	f06f 0305 	mvn.w	r3, #5
 8004612:	607b      	str	r3, [r7, #4]
 8004614:	e010      	b.n	8004638 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004616:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <osKernelStart+0x48>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d109      	bne.n	8004632 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800461e:	f7ff ffbf 	bl	80045a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004622:	4b08      	ldr	r3, [pc, #32]	; (8004644 <osKernelStart+0x48>)
 8004624:	2202      	movs	r2, #2
 8004626:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004628:	f002 f810 	bl	800664c <vTaskStartScheduler>
      stat = osOK;
 800462c:	2300      	movs	r3, #0
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	e002      	b.n	8004638 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004632:	f04f 33ff 	mov.w	r3, #4294967295
 8004636:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004638:	687b      	ldr	r3, [r7, #4]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	200000a4 	.word	0x200000a4

08004648 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004648:	b580      	push	{r7, lr}
 800464a:	b08e      	sub	sp, #56	; 0x38
 800464c:	af04      	add	r7, sp, #16
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004658:	f3ef 8305 	mrs	r3, IPSR
 800465c:	617b      	str	r3, [r7, #20]
  return(result);
 800465e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004660:	2b00      	cmp	r3, #0
 8004662:	d17e      	bne.n	8004762 <osThreadNew+0x11a>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d07b      	beq.n	8004762 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800466a:	2380      	movs	r3, #128	; 0x80
 800466c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800466e:	2318      	movs	r3, #24
 8004670:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004672:	2300      	movs	r3, #0
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004676:	f04f 33ff 	mov.w	r3, #4294967295
 800467a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d045      	beq.n	800470e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <osThreadNew+0x48>
        name = attr->name;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <osThreadNew+0x6e>
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2b38      	cmp	r3, #56	; 0x38
 80046a8:	d805      	bhi.n	80046b6 <osThreadNew+0x6e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <osThreadNew+0x72>
        return (NULL);
 80046b6:	2300      	movs	r3, #0
 80046b8:	e054      	b.n	8004764 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	089b      	lsrs	r3, r3, #2
 80046c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00e      	beq.n	80046f0 <osThreadNew+0xa8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	2b5b      	cmp	r3, #91	; 0x5b
 80046d8:	d90a      	bls.n	80046f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d006      	beq.n	80046f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <osThreadNew+0xa8>
        mem = 1;
 80046ea:	2301      	movs	r3, #1
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e010      	b.n	8004712 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10c      	bne.n	8004712 <osThreadNew+0xca>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d108      	bne.n	8004712 <osThreadNew+0xca>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <osThreadNew+0xca>
          mem = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	e001      	b.n	8004712 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d110      	bne.n	800473a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004720:	9202      	str	r2, [sp, #8]
 8004722:	9301      	str	r3, [sp, #4]
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	6a3a      	ldr	r2, [r7, #32]
 800472c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f001 fdb6 	bl	80062a0 <xTaskCreateStatic>
 8004734:	4603      	mov	r3, r0
 8004736:	613b      	str	r3, [r7, #16]
 8004738:	e013      	b.n	8004762 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d110      	bne.n	8004762 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	b29a      	uxth	r2, r3
 8004744:	f107 0310 	add.w	r3, r7, #16
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f001 fe01 	bl	800635a <xTaskCreate>
 8004758:	4603      	mov	r3, r0
 800475a:	2b01      	cmp	r3, #1
 800475c:	d001      	beq.n	8004762 <osThreadNew+0x11a>
            hTask = NULL;
 800475e:	2300      	movs	r3, #0
 8004760:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004762:	693b      	ldr	r3, [r7, #16]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3728      	adds	r7, #40	; 0x28
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004774:	f3ef 8305 	mrs	r3, IPSR
 8004778:	60bb      	str	r3, [r7, #8]
  return(result);
 800477a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <osDelay+0x1c>
    stat = osErrorISR;
 8004780:	f06f 0305 	mvn.w	r3, #5
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	e007      	b.n	8004798 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f001 ff26 	bl	80065e4 <vTaskDelay>
    }
  }

  return (stat);
 8004798:	68fb      	ldr	r3, [r7, #12]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b086      	sub	sp, #24
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ae:	f3ef 8305 	mrs	r3, IPSR
 80047b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80047b4:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d12d      	bne.n	8004816 <osEventFlagsNew+0x74>
    mem = -1;
 80047ba:	f04f 33ff 	mov.w	r3, #4294967295
 80047be:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d015      	beq.n	80047f2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d006      	beq.n	80047dc <osEventFlagsNew+0x3a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	2b1f      	cmp	r3, #31
 80047d4:	d902      	bls.n	80047dc <osEventFlagsNew+0x3a>
        mem = 1;
 80047d6:	2301      	movs	r3, #1
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	e00c      	b.n	80047f6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d108      	bne.n	80047f6 <osEventFlagsNew+0x54>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d104      	bne.n	80047f6 <osEventFlagsNew+0x54>
          mem = 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	e001      	b.n	80047f6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d106      	bne.n	800480a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fb2b 	bl	8004e5c <xEventGroupCreateStatic>
 8004806:	6178      	str	r0, [r7, #20]
 8004808:	e005      	b.n	8004816 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8004810:	f000 fb5b 	bl	8004eca <xEventGroupCreate>
 8004814:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004816:	697b      	ldr	r3, [r7, #20]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d004      	beq.n	800483e <osEventFlagsSet+0x1e>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800483e:	f06f 0303 	mvn.w	r3, #3
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	e028      	b.n	8004898 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004846:	f3ef 8305 	mrs	r3, IPSR
 800484a:	60fb      	str	r3, [r7, #12]
  return(result);
 800484c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01d      	beq.n	800488e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8004852:	2300      	movs	r3, #0
 8004854:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004856:	f107 0308 	add.w	r3, r7, #8
 800485a:	461a      	mov	r2, r3
 800485c:	6839      	ldr	r1, [r7, #0]
 800485e:	6938      	ldr	r0, [r7, #16]
 8004860:	f000 fcd6 	bl	8005210 <xEventGroupSetBitsFromISR>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d103      	bne.n	8004872 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800486a:	f06f 0302 	mvn.w	r3, #2
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	e012      	b.n	8004898 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00d      	beq.n	8004898 <osEventFlagsSet+0x78>
 800487c:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <osEventFlagsSet+0x84>)
 800487e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	e004      	b.n	8004898 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800488e:	6839      	ldr	r1, [r7, #0]
 8004890:	6938      	ldr	r0, [r7, #16]
 8004892:	f000 fc03 	bl	800509c <xEventGroupSetBits>
 8004896:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004898:	697b      	ldr	r3, [r7, #20]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	e000ed04 	.word	0xe000ed04

080048a8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08c      	sub	sp, #48	; 0x30
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d004      	beq.n	80048ca <osEventFlagsWait+0x22>
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80048ca:	f06f 0303 	mvn.w	r3, #3
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	e04b      	b.n	800496a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048d2:	f3ef 8305 	mrs	r3, IPSR
 80048d6:	617b      	str	r3, [r7, #20]
  return(result);
 80048d8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80048de:	f06f 0305 	mvn.w	r3, #5
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	e041      	b.n	800496a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80048f0:	2301      	movs	r3, #1
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
 80048f4:	e001      	b.n	80048fa <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8004904:	2300      	movs	r3, #0
 8004906:	623b      	str	r3, [r7, #32]
 8004908:	e001      	b.n	800490e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800490a:	2301      	movs	r3, #1
 800490c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	6a3a      	ldr	r2, [r7, #32]
 8004916:	68b9      	ldr	r1, [r7, #8]
 8004918:	69b8      	ldr	r0, [r7, #24]
 800491a:	f000 faf1 	bl	8004f00 <xEventGroupWaitBits>
 800491e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d010      	beq.n	800494c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	4013      	ands	r3, r2
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	429a      	cmp	r2, r3
 8004934:	d019      	beq.n	800496a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800493c:	f06f 0301 	mvn.w	r3, #1
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	e012      	b.n	800496a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004944:	f06f 0302 	mvn.w	r3, #2
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	e00e      	b.n	800496a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800495c:	f06f 0301 	mvn.w	r3, #1
 8004960:	61fb      	str	r3, [r7, #28]
 8004962:	e002      	b.n	800496a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004964:	f06f 0302 	mvn.w	r3, #2
 8004968:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800496a:	69fb      	ldr	r3, [r7, #28]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3728      	adds	r7, #40	; 0x28
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800497c:	2300      	movs	r3, #0
 800497e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004980:	f3ef 8305 	mrs	r3, IPSR
 8004984:	60bb      	str	r3, [r7, #8]
  return(result);
 8004986:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004988:	2b00      	cmp	r3, #0
 800498a:	d174      	bne.n	8004a76 <osMutexNew+0x102>
    if (attr != NULL) {
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <osMutexNew+0x26>
      type = attr->attr_bits;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	61bb      	str	r3, [r7, #24]
 8004998:	e001      	b.n	800499e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <osMutexNew+0x3a>
      rmtx = 1U;
 80049a8:	2301      	movs	r3, #1
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	e001      	b.n	80049b2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d15c      	bne.n	8004a76 <osMutexNew+0x102>
      mem = -1;
 80049bc:	f04f 33ff 	mov.w	r3, #4294967295
 80049c0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d015      	beq.n	80049f4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d006      	beq.n	80049de <osMutexNew+0x6a>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b4f      	cmp	r3, #79	; 0x4f
 80049d6:	d902      	bls.n	80049de <osMutexNew+0x6a>
          mem = 1;
 80049d8:	2301      	movs	r3, #1
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	e00c      	b.n	80049f8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d108      	bne.n	80049f8 <osMutexNew+0x84>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d104      	bne.n	80049f8 <osMutexNew+0x84>
            mem = 0;
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
 80049f2:	e001      	b.n	80049f8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d112      	bne.n	8004a24 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	2004      	movs	r0, #4
 8004a0c:	f000 fe37 	bl	800567e <xQueueCreateMutexStatic>
 8004a10:	61f8      	str	r0, [r7, #28]
 8004a12:	e016      	b.n	8004a42 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	4619      	mov	r1, r3
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	f000 fe2f 	bl	800567e <xQueueCreateMutexStatic>
 8004a20:	61f8      	str	r0, [r7, #28]
 8004a22:	e00e      	b.n	8004a42 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10b      	bne.n	8004a42 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d004      	beq.n	8004a3a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004a30:	2004      	movs	r0, #4
 8004a32:	f000 fe0c 	bl	800564e <xQueueCreateMutex>
 8004a36:	61f8      	str	r0, [r7, #28]
 8004a38:	e003      	b.n	8004a42 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	f000 fe07 	bl	800564e <xQueueCreateMutex>
 8004a40:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00c      	beq.n	8004a62 <osMutexNew+0xee>
        if (attr != NULL) {
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <osMutexNew+0xe2>
          name = attr->name;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e001      	b.n	8004a5a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004a5a:	68f9      	ldr	r1, [r7, #12]
 8004a5c:	69f8      	ldr	r0, [r7, #28]
 8004a5e:	f001 fbc1 	bl	80061e4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d006      	beq.n	8004a76 <osMutexNew+0x102>
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	f043 0301 	orr.w	r3, r3, #1
 8004a74:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004a76:	69fb      	ldr	r3, [r7, #28]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a9e:	f3ef 8305 	mrs	r3, IPSR
 8004aa2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aa4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004aaa:	f06f 0305 	mvn.w	r3, #5
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	e02c      	b.n	8004b0c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d103      	bne.n	8004ac0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004ab8:	f06f 0303 	mvn.w	r3, #3
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e025      	b.n	8004b0c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d011      	beq.n	8004aea <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004ac6:	6839      	ldr	r1, [r7, #0]
 8004ac8:	6938      	ldr	r0, [r7, #16]
 8004aca:	f000 fe27 	bl	800571c <xQueueTakeMutexRecursive>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d01b      	beq.n	8004b0c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004ada:	f06f 0301 	mvn.w	r3, #1
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	e014      	b.n	8004b0c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004ae2:	f06f 0302 	mvn.w	r3, #2
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	e010      	b.n	8004b0c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004aea:	6839      	ldr	r1, [r7, #0]
 8004aec:	6938      	ldr	r0, [r7, #16]
 8004aee:	f001 f8c5 	bl	8005c7c <xQueueSemaphoreTake>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d009      	beq.n	8004b0c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004afe:	f06f 0301 	mvn.w	r3, #1
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e002      	b.n	8004b0c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004b06:	f06f 0302 	mvn.w	r3, #2
 8004b0a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004b0c:	697b      	ldr	r3, [r7, #20]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b086      	sub	sp, #24
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f023 0301 	bic.w	r3, r3, #1
 8004b24:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b32:	f3ef 8305 	mrs	r3, IPSR
 8004b36:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b38:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004b3e:	f06f 0305 	mvn.w	r3, #5
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	e01f      	b.n	8004b86 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d103      	bne.n	8004b54 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004b4c:	f06f 0303 	mvn.w	r3, #3
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	e018      	b.n	8004b86 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004b5a:	6938      	ldr	r0, [r7, #16]
 8004b5c:	f000 fdaa 	bl	80056b4 <xQueueGiveMutexRecursive>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d00f      	beq.n	8004b86 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004b66:	f06f 0302 	mvn.w	r3, #2
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	e00b      	b.n	8004b86 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004b6e:	2300      	movs	r3, #0
 8004b70:	2200      	movs	r2, #0
 8004b72:	2100      	movs	r1, #0
 8004b74:	6938      	ldr	r0, [r7, #16]
 8004b76:	f000 fe07 	bl	8005788 <xQueueGenericSend>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d002      	beq.n	8004b86 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004b80:	f06f 0302 	mvn.w	r3, #2
 8004b84:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004b86:	697b      	ldr	r3, [r7, #20]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	; 0x28
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ba0:	f3ef 8305 	mrs	r3, IPSR
 8004ba4:	613b      	str	r3, [r7, #16]
  return(result);
 8004ba6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d15f      	bne.n	8004c6c <osMessageQueueNew+0xdc>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d05c      	beq.n	8004c6c <osMessageQueueNew+0xdc>
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d059      	beq.n	8004c6c <osMessageQueueNew+0xdc>
    mem = -1;
 8004bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bbc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d029      	beq.n	8004c18 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d012      	beq.n	8004bf2 <osMessageQueueNew+0x62>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b4f      	cmp	r3, #79	; 0x4f
 8004bd2:	d90e      	bls.n	8004bf2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	fb01 f303 	mul.w	r3, r1, r3
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d302      	bcc.n	8004bf2 <osMessageQueueNew+0x62>
        mem = 1;
 8004bec:	2301      	movs	r3, #1
 8004bee:	61bb      	str	r3, [r7, #24]
 8004bf0:	e014      	b.n	8004c1c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d110      	bne.n	8004c1c <osMessageQueueNew+0x8c>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10c      	bne.n	8004c1c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d108      	bne.n	8004c1c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d104      	bne.n	8004c1c <osMessageQueueNew+0x8c>
          mem = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	e001      	b.n	8004c1c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d10b      	bne.n	8004c3a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	9100      	str	r1, [sp, #0]
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 fc1d 	bl	8005470 <xQueueGenericCreateStatic>
 8004c36:	61f8      	str	r0, [r7, #28]
 8004c38:	e008      	b.n	8004c4c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004c40:	2200      	movs	r2, #0
 8004c42:	68b9      	ldr	r1, [r7, #8]
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 fc8b 	bl	8005560 <xQueueGenericCreate>
 8004c4a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00c      	beq.n	8004c6c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	e001      	b.n	8004c64 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004c64:	6979      	ldr	r1, [r7, #20]
 8004c66:	69f8      	ldr	r0, [r7, #28]
 8004c68:	f001 fabc 	bl	80061e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004c6c:	69fb      	ldr	r3, [r7, #28]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3720      	adds	r7, #32
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c90:	f3ef 8305 	mrs	r3, IPSR
 8004c94:	617b      	str	r3, [r7, #20]
  return(result);
 8004c96:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d028      	beq.n	8004cee <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d005      	beq.n	8004cae <osMessageQueuePut+0x36>
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <osMessageQueuePut+0x36>
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004cae:	f06f 0303 	mvn.w	r3, #3
 8004cb2:	61fb      	str	r3, [r7, #28]
 8004cb4:	e038      	b.n	8004d28 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004cba:	f107 0210 	add.w	r2, r7, #16
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	69b8      	ldr	r0, [r7, #24]
 8004cc4:	f000 fe5e 	bl	8005984 <xQueueGenericSendFromISR>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d003      	beq.n	8004cd6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004cce:	f06f 0302 	mvn.w	r3, #2
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	e028      	b.n	8004d28 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d025      	beq.n	8004d28 <osMessageQueuePut+0xb0>
 8004cdc:	4b15      	ldr	r3, [pc, #84]	; (8004d34 <osMessageQueuePut+0xbc>)
 8004cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	e01c      	b.n	8004d28 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <osMessageQueuePut+0x82>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d103      	bne.n	8004d02 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004cfa:	f06f 0303 	mvn.w	r3, #3
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	e012      	b.n	8004d28 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004d02:	2300      	movs	r3, #0
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	69b8      	ldr	r0, [r7, #24]
 8004d0a:	f000 fd3d 	bl	8005788 <xQueueGenericSend>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d009      	beq.n	8004d28 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004d1a:	f06f 0301 	mvn.w	r3, #1
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	e002      	b.n	8004d28 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004d22:	f06f 0302 	mvn.w	r3, #2
 8004d26:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004d28:	69fb      	ldr	r3, [r7, #28]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	e000ed04 	.word	0xe000ed04

08004d38 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d4e:	f3ef 8305 	mrs	r3, IPSR
 8004d52:	617b      	str	r3, [r7, #20]
  return(result);
 8004d54:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d028      	beq.n	8004dac <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <osMessageQueueGet+0x34>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <osMessageQueueGet+0x34>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004d6c:	f06f 0303 	mvn.w	r3, #3
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	e037      	b.n	8004de4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004d78:	f107 0310 	add.w	r3, r7, #16
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	68b9      	ldr	r1, [r7, #8]
 8004d80:	69b8      	ldr	r0, [r7, #24]
 8004d82:	f001 f887 	bl	8005e94 <xQueueReceiveFromISR>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d003      	beq.n	8004d94 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004d8c:	f06f 0302 	mvn.w	r3, #2
 8004d90:	61fb      	str	r3, [r7, #28]
 8004d92:	e027      	b.n	8004de4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d024      	beq.n	8004de4 <osMessageQueueGet+0xac>
 8004d9a:	4b15      	ldr	r3, [pc, #84]	; (8004df0 <osMessageQueueGet+0xb8>)
 8004d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	e01b      	b.n	8004de4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <osMessageQueueGet+0x80>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d103      	bne.n	8004dc0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004db8:	f06f 0303 	mvn.w	r3, #3
 8004dbc:	61fb      	str	r3, [r7, #28]
 8004dbe:	e011      	b.n	8004de4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	69b8      	ldr	r0, [r7, #24]
 8004dc6:	f000 fe79 	bl	8005abc <xQueueReceive>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d009      	beq.n	8004de4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004dd6:	f06f 0301 	mvn.w	r3, #1
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	e002      	b.n	8004de4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004dde:	f06f 0302 	mvn.w	r3, #2
 8004de2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004de4:	69fb      	ldr	r3, [r7, #28]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3720      	adds	r7, #32
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	e000ed04 	.word	0xe000ed04

08004df4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4a07      	ldr	r2, [pc, #28]	; (8004e20 <vApplicationGetIdleTaskMemory+0x2c>)
 8004e04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4a06      	ldr	r2, [pc, #24]	; (8004e24 <vApplicationGetIdleTaskMemory+0x30>)
 8004e0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2280      	movs	r2, #128	; 0x80
 8004e10:	601a      	str	r2, [r3, #0]
}
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	200000a8 	.word	0x200000a8
 8004e24:	20000104 	.word	0x20000104

08004e28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4a07      	ldr	r2, [pc, #28]	; (8004e54 <vApplicationGetTimerTaskMemory+0x2c>)
 8004e38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	4a06      	ldr	r2, [pc, #24]	; (8004e58 <vApplicationGetTimerTaskMemory+0x30>)
 8004e3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e46:	601a      	str	r2, [r3, #0]
}
 8004e48:	bf00      	nop
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	20000304 	.word	0x20000304
 8004e58:	20000360 	.word	0x20000360

08004e5c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10a      	bne.n	8004e80 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e7c:	bf00      	nop
 8004e7e:	e7fe      	b.n	8004e7e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004e80:	2320      	movs	r3, #32
 8004e82:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	d00a      	beq.n	8004ea0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	60fb      	str	r3, [r7, #12]
}
 8004e9c:	bf00      	nop
 8004e9e:	e7fe      	b.n	8004e9e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 f9bf 	bl	8005238 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8004ec0:	697b      	ldr	r3, [r7, #20]
	}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004ed0:	2020      	movs	r0, #32
 8004ed2:	f003 f861 	bl	8007f98 <pvPortMalloc>
 8004ed6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 f9a5 	bl	8005238 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004ef4:	687b      	ldr	r3, [r7, #4]
	}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b090      	sub	sp, #64	; 0x40
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8004f16:	2300      	movs	r3, #0
 8004f18:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10a      	bne.n	8004f36 <xEventGroupWaitBits+0x36>
	__asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	623b      	str	r3, [r7, #32]
}
 8004f32:	bf00      	nop
 8004f34:	e7fe      	b.n	8004f34 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <xEventGroupWaitBits+0x56>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	61fb      	str	r3, [r7, #28]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <xEventGroupWaitBits+0x72>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	61bb      	str	r3, [r7, #24]
}
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f72:	f002 f861 	bl	8007038 <xTaskGetSchedulerState>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d102      	bne.n	8004f82 <xEventGroupWaitBits+0x82>
 8004f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <xEventGroupWaitBits+0x86>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <xEventGroupWaitBits+0x88>
 8004f86:	2300      	movs	r3, #0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	617b      	str	r3, [r7, #20]
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8004fa2:	f001 fbb9 	bl	8006718 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fb2:	f000 f90b 	bl	80051cc <prvTestWaitCondition>
 8004fb6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00e      	beq.n	8004fdc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d028      	beq.n	800501e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	401a      	ands	r2, r3
 8004fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	e020      	b.n	800501e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d104      	bne.n	8004fec <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8004fea:	e018      	b.n	800501e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ff8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005002:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005006:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500a:	1d18      	adds	r0, r3, #4
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	4313      	orrs	r3, r2
 8005012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005014:	4619      	mov	r1, r3
 8005016:	f001 fd77 	bl	8006b08 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800501a:	2300      	movs	r3, #0
 800501c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800501e:	f001 fb89 	bl	8006734 <xTaskResumeAll>
 8005022:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005026:	2b00      	cmp	r3, #0
 8005028:	d031      	beq.n	800508e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	2b00      	cmp	r3, #0
 800502e:	d107      	bne.n	8005040 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8005030:	4b19      	ldr	r3, [pc, #100]	; (8005098 <xEventGroupWaitBits+0x198>)
 8005032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005040:	f002 f970 	bl	8007324 <uxTaskResetEventItemValue>
 8005044:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d11a      	bne.n	8005086 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8005050:	f002 fe80 	bl	8007d54 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005060:	f000 f8b4 	bl	80051cc <prvTestWaitCondition>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d009      	beq.n	800507e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d006      	beq.n	800507e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	43db      	mvns	r3, r3
 8005078:	401a      	ands	r2, r3
 800507a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800507e:	2301      	movs	r3, #1
 8005080:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8005082:	f002 fe97 	bl	8007db4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005088:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800508c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800508e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005090:	4618      	mov	r0, r3
 8005092:	3740      	adds	r7, #64	; 0x40
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08e      	sub	sp, #56	; 0x38
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80050a6:	2300      	movs	r3, #0
 80050a8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <xEventGroupSetBits+0x32>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	613b      	str	r3, [r7, #16]
}
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <xEventGroupSetBits+0x52>
	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	60fb      	str	r3, [r7, #12]
}
 80050ea:	bf00      	nop
 80050ec:	e7fe      	b.n	80050ec <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f0:	3304      	adds	r3, #4
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	3308      	adds	r3, #8
 80050f8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80050fa:	f001 fb0d 	bl	8006718 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	431a      	orrs	r2, r3
 800510c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005110:	e03c      	b.n	800518c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800511e:	2300      	movs	r3, #0
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005128:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005130:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d108      	bne.n	800514e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	4013      	ands	r3, r2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00b      	beq.n	8005160 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005148:	2301      	movs	r3, #1
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800514c:	e008      	b.n	8005160 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	4013      	ands	r3, r2
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	429a      	cmp	r2, r3
 800515a:	d101      	bne.n	8005160 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800515c:	2301      	movs	r3, #1
 800515e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005162:	2b00      	cmp	r3, #0
 8005164:	d010      	beq.n	8005188 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	4313      	orrs	r3, r2
 8005176:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005180:	4619      	mov	r1, r3
 8005182:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005184:	f001 fd8c 	bl	8006ca0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800518c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	429a      	cmp	r2, r3
 8005192:	d1be      	bne.n	8005112 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	43db      	mvns	r3, r3
 800519c:	401a      	ands	r2, r3
 800519e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80051a2:	f001 fac7 	bl	8006734 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	681b      	ldr	r3, [r3, #0]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3738      	adds	r7, #56	; 0x38
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff ff6c 	bl	800509c <xEventGroupSetBits>
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d107      	bne.n	80051f2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80051ec:	2301      	movs	r3, #1
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	e007      	b.n	8005202 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4013      	ands	r3, r2
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d101      	bne.n	8005202 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80051fe:	2301      	movs	r3, #1
 8005200:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005202:	697b      	ldr	r3, [r7, #20]
}
 8005204:	4618      	mov	r0, r3
 8005206:	371c      	adds	r7, #28
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	68f9      	ldr	r1, [r7, #12]
 8005222:	4804      	ldr	r0, [pc, #16]	; (8005234 <xEventGroupSetBitsFromISR+0x24>)
 8005224:	f002 fc4c 	bl	8007ac0 <xTimerPendFunctionCallFromISR>
 8005228:	6178      	str	r0, [r7, #20]

		return xReturn;
 800522a:	697b      	ldr	r3, [r7, #20]
	}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	080051b3 	.word	0x080051b3

08005238 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f103 0208 	add.w	r2, r3, #8
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f04f 32ff 	mov.w	r2, #4294967295
 8005250:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f103 0208 	add.w	r2, r3, #8
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f103 0208 	add.w	r2, r3, #8
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005292:	b480      	push	{r7}
 8005294:	b085      	sub	sp, #20
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	601a      	str	r2, [r3, #0]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d103      	bne.n	80052fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e00c      	b.n	8005314 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3308      	adds	r3, #8
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	e002      	b.n	8005308 <vListInsert+0x2e>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	429a      	cmp	r2, r3
 8005312:	d2f6      	bcs.n	8005302 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	601a      	str	r2, [r3, #0]
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6892      	ldr	r2, [r2, #8]
 8005362:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6852      	ldr	r2, [r2, #4]
 800536c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d103      	bne.n	8005380 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	1e5a      	subs	r2, r3, #1
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10a      	bne.n	80053ca <xQueueGenericReset+0x2a>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	60bb      	str	r3, [r7, #8]
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053ca:	f002 fcc3 	bl	8007d54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053da:	fb01 f303 	mul.w	r3, r1, r3
 80053de:	441a      	add	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	3b01      	subs	r3, #1
 80053fc:	68f9      	ldr	r1, [r7, #12]
 80053fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	441a      	add	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	22ff      	movs	r2, #255	; 0xff
 800540e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	22ff      	movs	r2, #255	; 0xff
 8005416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d114      	bne.n	800544a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01a      	beq.n	800545e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3310      	adds	r3, #16
 800542c:	4618      	mov	r0, r3
 800542e:	f001 fbd3 	bl	8006bd8 <xTaskRemoveFromEventList>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d012      	beq.n	800545e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005438:	4b0c      	ldr	r3, [pc, #48]	; (800546c <xQueueGenericReset+0xcc>)
 800543a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	e009      	b.n	800545e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3310      	adds	r3, #16
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff fef2 	bl	8005238 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3324      	adds	r3, #36	; 0x24
 8005458:	4618      	mov	r0, r3
 800545a:	f7ff feed 	bl	8005238 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800545e:	f002 fca9 	bl	8007db4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005462:	2301      	movs	r3, #1
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	e000ed04 	.word	0xe000ed04

08005470 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08e      	sub	sp, #56	; 0x38
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10a      	bne.n	80054b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054b2:	bf00      	nop
 80054b4:	e7fe      	b.n	80054b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <xQueueGenericCreateStatic+0x52>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <xQueueGenericCreateStatic+0x56>
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <xQueueGenericCreateStatic+0x58>
 80054c6:	2300      	movs	r3, #0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	623b      	str	r3, [r7, #32]
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <xQueueGenericCreateStatic+0x7e>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <xQueueGenericCreateStatic+0x82>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <xQueueGenericCreateStatic+0x84>
 80054f2:	2300      	movs	r3, #0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	61fb      	str	r3, [r7, #28]
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800550e:	2350      	movs	r3, #80	; 0x50
 8005510:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b50      	cmp	r3, #80	; 0x50
 8005516:	d00a      	beq.n	800552e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	61bb      	str	r3, [r7, #24]
}
 800552a:	bf00      	nop
 800552c:	e7fe      	b.n	800552c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800552e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00d      	beq.n	8005556 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005542:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	4613      	mov	r3, r2
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f83f 	bl	80055d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005558:	4618      	mov	r0, r3
 800555a:	3730      	adds	r7, #48	; 0x30
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	; 0x28
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	4613      	mov	r3, r2
 800556c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	613b      	str	r3, [r7, #16]
}
 8005586:	bf00      	nop
 8005588:	e7fe      	b.n	8005588 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	fb02 f303 	mul.w	r3, r2, r3
 8005592:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	3350      	adds	r3, #80	; 0x50
 8005598:	4618      	mov	r0, r3
 800559a:	f002 fcfd 	bl	8007f98 <pvPortMalloc>
 800559e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d011      	beq.n	80055ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	3350      	adds	r3, #80	; 0x50
 80055ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055b8:	79fa      	ldrb	r2, [r7, #7]
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	4613      	mov	r3, r2
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f805 	bl	80055d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055ca:	69bb      	ldr	r3, [r7, #24]
	}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d103      	bne.n	80055f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	e002      	b.n	80055f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005602:	2101      	movs	r1, #1
 8005604:	69b8      	ldr	r0, [r7, #24]
 8005606:	f7ff fecb 	bl	80053a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	78fa      	ldrb	r2, [r7, #3]
 800560e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800561a:	b580      	push	{r7, lr}
 800561c:	b082      	sub	sp, #8
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00e      	beq.n	8005646 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800563a:	2300      	movs	r3, #0
 800563c:	2200      	movs	r2, #0
 800563e:	2100      	movs	r1, #0
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f8a1 	bl	8005788 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800564e:	b580      	push	{r7, lr}
 8005650:	b086      	sub	sp, #24
 8005652:	af00      	add	r7, sp, #0
 8005654:	4603      	mov	r3, r0
 8005656:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005658:	2301      	movs	r3, #1
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	2300      	movs	r3, #0
 800565e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	461a      	mov	r2, r3
 8005664:	6939      	ldr	r1, [r7, #16]
 8005666:	6978      	ldr	r0, [r7, #20]
 8005668:	f7ff ff7a 	bl	8005560 <xQueueGenericCreate>
 800566c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f7ff ffd3 	bl	800561a <prvInitialiseMutex>

		return xNewQueue;
 8005674:	68fb      	ldr	r3, [r7, #12]
	}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800567e:	b580      	push	{r7, lr}
 8005680:	b088      	sub	sp, #32
 8005682:	af02      	add	r7, sp, #8
 8005684:	4603      	mov	r3, r0
 8005686:	6039      	str	r1, [r7, #0]
 8005688:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800568a:	2301      	movs	r3, #1
 800568c:	617b      	str	r3, [r7, #20]
 800568e:	2300      	movs	r3, #0
 8005690:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2200      	movs	r2, #0
 800569a:	6939      	ldr	r1, [r7, #16]
 800569c:	6978      	ldr	r0, [r7, #20]
 800569e:	f7ff fee7 	bl	8005470 <xQueueGenericCreateStatic>
 80056a2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f7ff ffb8 	bl	800561a <prvInitialiseMutex>

		return xNewQueue;
 80056aa:	68fb      	ldr	r3, [r7, #12]
	}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80056b4:	b590      	push	{r4, r7, lr}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10a      	bne.n	80056dc <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	60fb      	str	r3, [r7, #12]
}
 80056d8:	bf00      	nop
 80056da:	e7fe      	b.n	80056da <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	689c      	ldr	r4, [r3, #8]
 80056e0:	f001 fc9a 	bl	8007018 <xTaskGetCurrentTaskHandle>
 80056e4:	4603      	mov	r3, r0
 80056e6:	429c      	cmp	r4, r3
 80056e8:	d111      	bne.n	800570e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	1e5a      	subs	r2, r3, #1
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d105      	bne.n	8005708 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80056fc:	2300      	movs	r3, #0
 80056fe:	2200      	movs	r2, #0
 8005700:	2100      	movs	r1, #0
 8005702:	6938      	ldr	r0, [r7, #16]
 8005704:	f000 f840 	bl	8005788 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005708:	2301      	movs	r3, #1
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e001      	b.n	8005712 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005712:	697b      	ldr	r3, [r7, #20]
	}
 8005714:	4618      	mov	r0, r3
 8005716:	371c      	adds	r7, #28
 8005718:	46bd      	mov	sp, r7
 800571a:	bd90      	pop	{r4, r7, pc}

0800571c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800571c:	b590      	push	{r4, r7, lr}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10a      	bne.n	8005746 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	60fb      	str	r3, [r7, #12]
}
 8005742:	bf00      	nop
 8005744:	e7fe      	b.n	8005744 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	689c      	ldr	r4, [r3, #8]
 800574a:	f001 fc65 	bl	8007018 <xTaskGetCurrentTaskHandle>
 800574e:	4603      	mov	r3, r0
 8005750:	429c      	cmp	r4, r3
 8005752:	d107      	bne.n	8005764 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800575e:	2301      	movs	r3, #1
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	e00c      	b.n	800577e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005764:	6839      	ldr	r1, [r7, #0]
 8005766:	6938      	ldr	r0, [r7, #16]
 8005768:	f000 fa88 	bl	8005c7c <xQueueSemaphoreTake>
 800576c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d004      	beq.n	800577e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800577e:	697b      	ldr	r3, [r7, #20]
	}
 8005780:	4618      	mov	r0, r3
 8005782:	371c      	adds	r7, #28
 8005784:	46bd      	mov	sp, r7
 8005786:	bd90      	pop	{r4, r7, pc}

08005788 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08e      	sub	sp, #56	; 0x38
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005796:	2300      	movs	r3, #0
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <xQueueGenericSend+0x32>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057b6:	bf00      	nop
 80057b8:	e7fe      	b.n	80057b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d103      	bne.n	80057c8 <xQueueGenericSend+0x40>
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <xQueueGenericSend+0x44>
 80057c8:	2301      	movs	r3, #1
 80057ca:	e000      	b.n	80057ce <xQueueGenericSend+0x46>
 80057cc:	2300      	movs	r3, #0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10a      	bne.n	80057e8 <xQueueGenericSend+0x60>
	__asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057e4:	bf00      	nop
 80057e6:	e7fe      	b.n	80057e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d103      	bne.n	80057f6 <xQueueGenericSend+0x6e>
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d101      	bne.n	80057fa <xQueueGenericSend+0x72>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <xQueueGenericSend+0x74>
 80057fa:	2300      	movs	r3, #0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10a      	bne.n	8005816 <xQueueGenericSend+0x8e>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	623b      	str	r3, [r7, #32]
}
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005816:	f001 fc0f 	bl	8007038 <xTaskGetSchedulerState>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <xQueueGenericSend+0x9e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <xQueueGenericSend+0xa2>
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <xQueueGenericSend+0xa4>
 800582a:	2300      	movs	r3, #0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10a      	bne.n	8005846 <xQueueGenericSend+0xbe>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	61fb      	str	r3, [r7, #28]
}
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005846:	f002 fa85 	bl	8007d54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005852:	429a      	cmp	r2, r3
 8005854:	d302      	bcc.n	800585c <xQueueGenericSend+0xd4>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b02      	cmp	r3, #2
 800585a:	d129      	bne.n	80058b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005862:	f000 fbaf 	bl	8005fc4 <prvCopyDataToQueue>
 8005866:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	2b00      	cmp	r3, #0
 800586e:	d010      	beq.n	8005892 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	3324      	adds	r3, #36	; 0x24
 8005874:	4618      	mov	r0, r3
 8005876:	f001 f9af 	bl	8006bd8 <xTaskRemoveFromEventList>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d013      	beq.n	80058a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005880:	4b3f      	ldr	r3, [pc, #252]	; (8005980 <xQueueGenericSend+0x1f8>)
 8005882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	e00a      	b.n	80058a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d007      	beq.n	80058a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005898:	4b39      	ldr	r3, [pc, #228]	; (8005980 <xQueueGenericSend+0x1f8>)
 800589a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058a8:	f002 fa84 	bl	8007db4 <vPortExitCritical>
				return pdPASS;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e063      	b.n	8005978 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d103      	bne.n	80058be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058b6:	f002 fa7d 	bl	8007db4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	e05c      	b.n	8005978 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d106      	bne.n	80058d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058c4:	f107 0314 	add.w	r3, r7, #20
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 fa4b 	bl	8006d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058ce:	2301      	movs	r3, #1
 80058d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058d2:	f002 fa6f 	bl	8007db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058d6:	f000 ff1f 	bl	8006718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058da:	f002 fa3b 	bl	8007d54 <vPortEnterCritical>
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058e4:	b25b      	sxtb	r3, r3
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d103      	bne.n	80058f4 <xQueueGenericSend+0x16c>
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058fa:	b25b      	sxtb	r3, r3
 80058fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005900:	d103      	bne.n	800590a <xQueueGenericSend+0x182>
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800590a:	f002 fa53 	bl	8007db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800590e:	1d3a      	adds	r2, r7, #4
 8005910:	f107 0314 	add.w	r3, r7, #20
 8005914:	4611      	mov	r1, r2
 8005916:	4618      	mov	r0, r3
 8005918:	f001 fa3a 	bl	8006d90 <xTaskCheckForTimeOut>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d124      	bne.n	800596c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005922:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005924:	f000 fc46 	bl	80061b4 <prvIsQueueFull>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d018      	beq.n	8005960 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	3310      	adds	r3, #16
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	4611      	mov	r1, r2
 8005936:	4618      	mov	r0, r3
 8005938:	f001 f8c2 	bl	8006ac0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800593c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800593e:	f000 fbd1 	bl	80060e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005942:	f000 fef7 	bl	8006734 <xTaskResumeAll>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	f47f af7c 	bne.w	8005846 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800594e:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <xQueueGenericSend+0x1f8>)
 8005950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	e772      	b.n	8005846 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005962:	f000 fbbf 	bl	80060e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005966:	f000 fee5 	bl	8006734 <xTaskResumeAll>
 800596a:	e76c      	b.n	8005846 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800596c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800596e:	f000 fbb9 	bl	80060e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005972:	f000 fedf 	bl	8006734 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005976:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005978:	4618      	mov	r0, r3
 800597a:	3738      	adds	r7, #56	; 0x38
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	e000ed04 	.word	0xe000ed04

08005984 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b090      	sub	sp, #64	; 0x40
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
 8005990:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d103      	bne.n	80059c0 <xQueueGenericSendFromISR+0x3c>
 80059b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <xQueueGenericSendFromISR+0x40>
 80059c0:	2301      	movs	r3, #1
 80059c2:	e000      	b.n	80059c6 <xQueueGenericSendFromISR+0x42>
 80059c4:	2300      	movs	r3, #0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10a      	bne.n	80059e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059dc:	bf00      	nop
 80059de:	e7fe      	b.n	80059de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d103      	bne.n	80059ee <xQueueGenericSendFromISR+0x6a>
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d101      	bne.n	80059f2 <xQueueGenericSendFromISR+0x6e>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <xQueueGenericSendFromISR+0x70>
 80059f2:	2300      	movs	r3, #0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	623b      	str	r3, [r7, #32]
}
 8005a0a:	bf00      	nop
 8005a0c:	e7fe      	b.n	8005a0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a0e:	f002 fa83 	bl	8007f18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a12:	f3ef 8211 	mrs	r2, BASEPRI
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	61fa      	str	r2, [r7, #28]
 8005a28:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d302      	bcc.n	8005a40 <xQueueGenericSendFromISR+0xbc>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d12f      	bne.n	8005aa0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a56:	f000 fab5 	bl	8005fc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a62:	d112      	bne.n	8005a8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d016      	beq.n	8005a9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6e:	3324      	adds	r3, #36	; 0x24
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 f8b1 	bl	8006bd8 <xTaskRemoveFromEventList>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00e      	beq.n	8005a9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00b      	beq.n	8005a9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e007      	b.n	8005a9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a8e:	3301      	adds	r3, #1
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	b25a      	sxtb	r2, r3
 8005a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005a9e:	e001      	b.n	8005aa4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005aae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3740      	adds	r7, #64	; 0x40
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08c      	sub	sp, #48	; 0x30
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10a      	bne.n	8005aec <xQueueReceive+0x30>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	623b      	str	r3, [r7, #32]
}
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d103      	bne.n	8005afa <xQueueReceive+0x3e>
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <xQueueReceive+0x42>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e000      	b.n	8005b00 <xQueueReceive+0x44>
 8005afe:	2300      	movs	r3, #0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <xQueueReceive+0x5e>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	61fb      	str	r3, [r7, #28]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b1a:	f001 fa8d 	bl	8007038 <xTaskGetSchedulerState>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d102      	bne.n	8005b2a <xQueueReceive+0x6e>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <xQueueReceive+0x72>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e000      	b.n	8005b30 <xQueueReceive+0x74>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10a      	bne.n	8005b4a <xQueueReceive+0x8e>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	61bb      	str	r3, [r7, #24]
}
 8005b46:	bf00      	nop
 8005b48:	e7fe      	b.n	8005b48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b4a:	f002 f903 	bl	8007d54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d01f      	beq.n	8005b9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b5a:	68b9      	ldr	r1, [r7, #8]
 8005b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b5e:	f000 fa9b 	bl	8006098 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	1e5a      	subs	r2, r3, #1
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00f      	beq.n	8005b92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	3310      	adds	r3, #16
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 f82e 	bl	8006bd8 <xTaskRemoveFromEventList>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b82:	4b3d      	ldr	r3, [pc, #244]	; (8005c78 <xQueueReceive+0x1bc>)
 8005b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b92:	f002 f90f 	bl	8007db4 <vPortExitCritical>
				return pdPASS;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e069      	b.n	8005c6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d103      	bne.n	8005ba8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ba0:	f002 f908 	bl	8007db4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	e062      	b.n	8005c6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d106      	bne.n	8005bbc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bae:	f107 0310 	add.w	r3, r7, #16
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f001 f8d6 	bl	8006d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bbc:	f002 f8fa 	bl	8007db4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bc0:	f000 fdaa 	bl	8006718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bc4:	f002 f8c6 	bl	8007d54 <vPortEnterCritical>
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bce:	b25b      	sxtb	r3, r3
 8005bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd4:	d103      	bne.n	8005bde <xQueueReceive+0x122>
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005be4:	b25b      	sxtb	r3, r3
 8005be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bea:	d103      	bne.n	8005bf4 <xQueueReceive+0x138>
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bf4:	f002 f8de 	bl	8007db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bf8:	1d3a      	adds	r2, r7, #4
 8005bfa:	f107 0310 	add.w	r3, r7, #16
 8005bfe:	4611      	mov	r1, r2
 8005c00:	4618      	mov	r0, r3
 8005c02:	f001 f8c5 	bl	8006d90 <xTaskCheckForTimeOut>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d123      	bne.n	8005c54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c0e:	f000 fabb 	bl	8006188 <prvIsQueueEmpty>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d017      	beq.n	8005c48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	3324      	adds	r3, #36	; 0x24
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	4611      	mov	r1, r2
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 ff4d 	bl	8006ac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c28:	f000 fa5c 	bl	80060e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c2c:	f000 fd82 	bl	8006734 <xTaskResumeAll>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d189      	bne.n	8005b4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c36:	4b10      	ldr	r3, [pc, #64]	; (8005c78 <xQueueReceive+0x1bc>)
 8005c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	e780      	b.n	8005b4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c4a:	f000 fa4b 	bl	80060e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c4e:	f000 fd71 	bl	8006734 <xTaskResumeAll>
 8005c52:	e77a      	b.n	8005b4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c56:	f000 fa45 	bl	80060e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c5a:	f000 fd6b 	bl	8006734 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c60:	f000 fa92 	bl	8006188 <prvIsQueueEmpty>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f43f af6f 	beq.w	8005b4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3730      	adds	r7, #48	; 0x30
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	e000ed04 	.word	0xe000ed04

08005c7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08e      	sub	sp, #56	; 0x38
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c86:	2300      	movs	r3, #0
 8005c88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10a      	bne.n	8005cae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	623b      	str	r3, [r7, #32]
}
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	61fb      	str	r3, [r7, #28]
}
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ccc:	f001 f9b4 	bl	8007038 <xTaskGetSchedulerState>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d102      	bne.n	8005cdc <xQueueSemaphoreTake+0x60>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <xQueueSemaphoreTake+0x64>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e000      	b.n	8005ce2 <xQueueSemaphoreTake+0x66>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10a      	bne.n	8005cfc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	61bb      	str	r3, [r7, #24]
}
 8005cf8:	bf00      	nop
 8005cfa:	e7fe      	b.n	8005cfa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cfc:	f002 f82a 	bl	8007d54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d04:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d024      	beq.n	8005d56 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	1e5a      	subs	r2, r3, #1
 8005d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d104      	bne.n	8005d26 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005d1c:	f001 fb1a 	bl	8007354 <pvTaskIncrementMutexHeldCount>
 8005d20:	4602      	mov	r2, r0
 8005d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d24:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00f      	beq.n	8005d4e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d30:	3310      	adds	r3, #16
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 ff50 	bl	8006bd8 <xTaskRemoveFromEventList>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d007      	beq.n	8005d4e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d3e:	4b54      	ldr	r3, [pc, #336]	; (8005e90 <xQueueSemaphoreTake+0x214>)
 8005d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d4e:	f002 f831 	bl	8007db4 <vPortExitCritical>
				return pdPASS;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e097      	b.n	8005e86 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d111      	bne.n	8005d80 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	617b      	str	r3, [r7, #20]
}
 8005d74:	bf00      	nop
 8005d76:	e7fe      	b.n	8005d76 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005d78:	f002 f81c 	bl	8007db4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	e082      	b.n	8005e86 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d106      	bne.n	8005d94 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d86:	f107 030c 	add.w	r3, r7, #12
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 ffea 	bl	8006d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d90:	2301      	movs	r3, #1
 8005d92:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d94:	f002 f80e 	bl	8007db4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d98:	f000 fcbe 	bl	8006718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d9c:	f001 ffda 	bl	8007d54 <vPortEnterCritical>
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005da6:	b25b      	sxtb	r3, r3
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dac:	d103      	bne.n	8005db6 <xQueueSemaphoreTake+0x13a>
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dbc:	b25b      	sxtb	r3, r3
 8005dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc2:	d103      	bne.n	8005dcc <xQueueSemaphoreTake+0x150>
 8005dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dcc:	f001 fff2 	bl	8007db4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dd0:	463a      	mov	r2, r7
 8005dd2:	f107 030c 	add.w	r3, r7, #12
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 ffd9 	bl	8006d90 <xTaskCheckForTimeOut>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d132      	bne.n	8005e4a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005de4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005de6:	f000 f9cf 	bl	8006188 <prvIsQueueEmpty>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d026      	beq.n	8005e3e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d109      	bne.n	8005e0c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005df8:	f001 ffac 	bl	8007d54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f001 f937 	bl	8007074 <xTaskPriorityInherit>
 8005e06:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005e08:	f001 ffd4 	bl	8007db4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0e:	3324      	adds	r3, #36	; 0x24
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	4611      	mov	r1, r2
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fe53 	bl	8006ac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e1c:	f000 f962 	bl	80060e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e20:	f000 fc88 	bl	8006734 <xTaskResumeAll>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f47f af68 	bne.w	8005cfc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005e2c:	4b18      	ldr	r3, [pc, #96]	; (8005e90 <xQueueSemaphoreTake+0x214>)
 8005e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	e75e      	b.n	8005cfc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005e3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e40:	f000 f950 	bl	80060e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e44:	f000 fc76 	bl	8006734 <xTaskResumeAll>
 8005e48:	e758      	b.n	8005cfc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005e4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e4c:	f000 f94a 	bl	80060e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e50:	f000 fc70 	bl	8006734 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e56:	f000 f997 	bl	8006188 <prvIsQueueEmpty>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f43f af4d 	beq.w	8005cfc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00d      	beq.n	8005e84 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005e68:	f001 ff74 	bl	8007d54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005e6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e6e:	f000 f891 	bl	8005f94 <prvGetDisinheritPriorityAfterTimeout>
 8005e72:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f001 f9d0 	bl	8007220 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005e80:	f001 ff98 	bl	8007db4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3738      	adds	r7, #56	; 0x38
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	e000ed04 	.word	0xe000ed04

08005e94 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08e      	sub	sp, #56	; 0x38
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10a      	bne.n	8005ec0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	623b      	str	r3, [r7, #32]
}
 8005ebc:	bf00      	nop
 8005ebe:	e7fe      	b.n	8005ebe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d103      	bne.n	8005ece <xQueueReceiveFromISR+0x3a>
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <xQueueReceiveFromISR+0x3e>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e000      	b.n	8005ed4 <xQueueReceiveFromISR+0x40>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	61fb      	str	r3, [r7, #28]
}
 8005eea:	bf00      	nop
 8005eec:	e7fe      	b.n	8005eec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eee:	f002 f813 	bl	8007f18 <vPortValidateInterruptPriority>
	__asm volatile
 8005ef2:	f3ef 8211 	mrs	r2, BASEPRI
 8005ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	61ba      	str	r2, [r7, #24]
 8005f08:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005f0a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d02f      	beq.n	8005f7a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f28:	f000 f8b6 	bl	8006098 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	1e5a      	subs	r2, r3, #1
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005f34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d112      	bne.n	8005f64 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d016      	beq.n	8005f74 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	3310      	adds	r3, #16
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fe44 	bl	8006bd8 <xTaskRemoveFromEventList>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00e      	beq.n	8005f74 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00b      	beq.n	8005f74 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	e007      	b.n	8005f74 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f68:	3301      	adds	r3, #1
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	b25a      	sxtb	r2, r3
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005f74:	2301      	movs	r3, #1
 8005f76:	637b      	str	r3, [r7, #52]	; 0x34
 8005f78:	e001      	b.n	8005f7e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f80:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f383 8811 	msr	BASEPRI, r3
}
 8005f88:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3738      	adds	r7, #56	; 0x38
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d006      	beq.n	8005fb2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	e001      	b.n	8005fb6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
	}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10d      	bne.n	8005ffe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d14d      	bne.n	8006086 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f001 f8a8 	bl	8007144 <xTaskPriorityDisinherit>
 8005ff4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	609a      	str	r2, [r3, #8]
 8005ffc:	e043      	b.n	8006086 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d119      	bne.n	8006038 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6858      	ldr	r0, [r3, #4]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600c:	461a      	mov	r2, r3
 800600e:	68b9      	ldr	r1, [r7, #8]
 8006010:	f002 f9d6 	bl	80083c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	441a      	add	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	429a      	cmp	r2, r3
 800602c:	d32b      	bcc.n	8006086 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	605a      	str	r2, [r3, #4]
 8006036:	e026      	b.n	8006086 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	68d8      	ldr	r0, [r3, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006040:	461a      	mov	r2, r3
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	f002 f9bc 	bl	80083c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006050:	425b      	negs	r3, r3
 8006052:	441a      	add	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d207      	bcs.n	8006074 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	425b      	negs	r3, r3
 800606e:	441a      	add	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b02      	cmp	r3, #2
 8006078:	d105      	bne.n	8006086 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	3b01      	subs	r3, #1
 8006084:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800608e:	697b      	ldr	r3, [r7, #20]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d018      	beq.n	80060dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	441a      	add	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68da      	ldr	r2, [r3, #12]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d303      	bcc.n	80060cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68d9      	ldr	r1, [r3, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	461a      	mov	r2, r3
 80060d6:	6838      	ldr	r0, [r7, #0]
 80060d8:	f002 f972 	bl	80083c0 <memcpy>
	}
}
 80060dc:	bf00      	nop
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80060ec:	f001 fe32 	bl	8007d54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060f8:	e011      	b.n	800611e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d012      	beq.n	8006128 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3324      	adds	r3, #36	; 0x24
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fd66 	bl	8006bd8 <xTaskRemoveFromEventList>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006112:	f000 fe9f 	bl	8006e54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	3b01      	subs	r3, #1
 800611a:	b2db      	uxtb	r3, r3
 800611c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800611e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006122:	2b00      	cmp	r3, #0
 8006124:	dce9      	bgt.n	80060fa <prvUnlockQueue+0x16>
 8006126:	e000      	b.n	800612a <prvUnlockQueue+0x46>
					break;
 8006128:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	22ff      	movs	r2, #255	; 0xff
 800612e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006132:	f001 fe3f 	bl	8007db4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006136:	f001 fe0d 	bl	8007d54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006140:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006142:	e011      	b.n	8006168 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d012      	beq.n	8006172 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3310      	adds	r3, #16
 8006150:	4618      	mov	r0, r3
 8006152:	f000 fd41 	bl	8006bd8 <xTaskRemoveFromEventList>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800615c:	f000 fe7a 	bl	8006e54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006160:	7bbb      	ldrb	r3, [r7, #14]
 8006162:	3b01      	subs	r3, #1
 8006164:	b2db      	uxtb	r3, r3
 8006166:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800616c:	2b00      	cmp	r3, #0
 800616e:	dce9      	bgt.n	8006144 <prvUnlockQueue+0x60>
 8006170:	e000      	b.n	8006174 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006172:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	22ff      	movs	r2, #255	; 0xff
 8006178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800617c:	f001 fe1a 	bl	8007db4 <vPortExitCritical>
}
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006190:	f001 fde0 	bl	8007d54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006198:	2b00      	cmp	r3, #0
 800619a:	d102      	bne.n	80061a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800619c:	2301      	movs	r3, #1
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	e001      	b.n	80061a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061a6:	f001 fe05 	bl	8007db4 <vPortExitCritical>

	return xReturn;
 80061aa:	68fb      	ldr	r3, [r7, #12]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061bc:	f001 fdca 	bl	8007d54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d102      	bne.n	80061d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80061cc:	2301      	movs	r3, #1
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	e001      	b.n	80061d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061d6:	f001 fded 	bl	8007db4 <vPortExitCritical>

	return xReturn;
 80061da:	68fb      	ldr	r3, [r7, #12]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
 80061f2:	e014      	b.n	800621e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80061f4:	4a0f      	ldr	r2, [pc, #60]	; (8006234 <vQueueAddToRegistry+0x50>)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10b      	bne.n	8006218 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006200:	490c      	ldr	r1, [pc, #48]	; (8006234 <vQueueAddToRegistry+0x50>)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800620a:	4a0a      	ldr	r2, [pc, #40]	; (8006234 <vQueueAddToRegistry+0x50>)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	4413      	add	r3, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006216:	e006      	b.n	8006226 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3301      	adds	r3, #1
 800621c:	60fb      	str	r3, [r7, #12]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b07      	cmp	r3, #7
 8006222:	d9e7      	bls.n	80061f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	3714      	adds	r7, #20
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	20004b80 	.word	0x20004b80

08006238 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006248:	f001 fd84 	bl	8007d54 <vPortEnterCritical>
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006252:	b25b      	sxtb	r3, r3
 8006254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006258:	d103      	bne.n	8006262 <vQueueWaitForMessageRestricted+0x2a>
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006268:	b25b      	sxtb	r3, r3
 800626a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626e:	d103      	bne.n	8006278 <vQueueWaitForMessageRestricted+0x40>
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006278:	f001 fd9c 	bl	8007db4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	2b00      	cmp	r3, #0
 8006282:	d106      	bne.n	8006292 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	3324      	adds	r3, #36	; 0x24
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	4618      	mov	r0, r3
 800628e:	f000 fc77 	bl	8006b80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006292:	6978      	ldr	r0, [r7, #20]
 8006294:	f7ff ff26 	bl	80060e4 <prvUnlockQueue>
	}
 8006298:	bf00      	nop
 800629a:	3718      	adds	r7, #24
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08e      	sub	sp, #56	; 0x38
 80062a4:	af04      	add	r7, sp, #16
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10a      	bne.n	80062ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	623b      	str	r3, [r7, #32]
}
 80062c6:	bf00      	nop
 80062c8:	e7fe      	b.n	80062c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10a      	bne.n	80062e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	61fb      	str	r3, [r7, #28]
}
 80062e2:	bf00      	nop
 80062e4:	e7fe      	b.n	80062e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80062e6:	235c      	movs	r3, #92	; 0x5c
 80062e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	2b5c      	cmp	r3, #92	; 0x5c
 80062ee:	d00a      	beq.n	8006306 <xTaskCreateStatic+0x66>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	61bb      	str	r3, [r7, #24]
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006306:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	2b00      	cmp	r3, #0
 800630c:	d01e      	beq.n	800634c <xTaskCreateStatic+0xac>
 800630e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01b      	beq.n	800634c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006316:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800631c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	2202      	movs	r2, #2
 8006322:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006326:	2300      	movs	r3, #0
 8006328:	9303      	str	r3, [sp, #12]
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	9302      	str	r3, [sp, #8]
 800632e:	f107 0314 	add.w	r3, r7, #20
 8006332:	9301      	str	r3, [sp, #4]
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f850 	bl	80063e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006344:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006346:	f000 f8dd 	bl	8006504 <prvAddNewTaskToReadyList>
 800634a:	e001      	b.n	8006350 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800634c:	2300      	movs	r3, #0
 800634e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006350:	697b      	ldr	r3, [r7, #20]
	}
 8006352:	4618      	mov	r0, r3
 8006354:	3728      	adds	r7, #40	; 0x28
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800635a:	b580      	push	{r7, lr}
 800635c:	b08c      	sub	sp, #48	; 0x30
 800635e:	af04      	add	r7, sp, #16
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	603b      	str	r3, [r7, #0]
 8006366:	4613      	mov	r3, r2
 8006368:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800636a:	88fb      	ldrh	r3, [r7, #6]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4618      	mov	r0, r3
 8006370:	f001 fe12 	bl	8007f98 <pvPortMalloc>
 8006374:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00e      	beq.n	800639a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800637c:	205c      	movs	r0, #92	; 0x5c
 800637e:	f001 fe0b 	bl	8007f98 <pvPortMalloc>
 8006382:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	631a      	str	r2, [r3, #48]	; 0x30
 8006390:	e005      	b.n	800639e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006392:	6978      	ldr	r0, [r7, #20]
 8006394:	f001 fecc 	bl	8008130 <vPortFree>
 8006398:	e001      	b.n	800639e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800639a:	2300      	movs	r3, #0
 800639c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d017      	beq.n	80063d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063ac:	88fa      	ldrh	r2, [r7, #6]
 80063ae:	2300      	movs	r3, #0
 80063b0:	9303      	str	r3, [sp, #12]
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	9302      	str	r3, [sp, #8]
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	9301      	str	r3, [sp, #4]
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	68b9      	ldr	r1, [r7, #8]
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 f80e 	bl	80063e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063c8:	69f8      	ldr	r0, [r7, #28]
 80063ca:	f000 f89b 	bl	8006504 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80063ce:	2301      	movs	r3, #1
 80063d0:	61bb      	str	r3, [r7, #24]
 80063d2:	e002      	b.n	80063da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063d4:	f04f 33ff 	mov.w	r3, #4294967295
 80063d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063da:	69bb      	ldr	r3, [r7, #24]
	}
 80063dc:	4618      	mov	r0, r3
 80063de:	3720      	adds	r7, #32
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
 80063f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	461a      	mov	r2, r3
 80063fc:	21a5      	movs	r1, #165	; 0xa5
 80063fe:	f001 ffed 	bl	80083dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800640c:	3b01      	subs	r3, #1
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	f023 0307 	bic.w	r3, r3, #7
 800641a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	617b      	str	r3, [r7, #20]
}
 8006438:	bf00      	nop
 800643a:	e7fe      	b.n	800643a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d01f      	beq.n	8006482 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006442:	2300      	movs	r3, #0
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	e012      	b.n	800646e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	4413      	add	r3, r2
 800644e:	7819      	ldrb	r1, [r3, #0]
 8006450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	4413      	add	r3, r2
 8006456:	3334      	adds	r3, #52	; 0x34
 8006458:	460a      	mov	r2, r1
 800645a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	4413      	add	r3, r2
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d006      	beq.n	8006476 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	3301      	adds	r3, #1
 800646c:	61fb      	str	r3, [r7, #28]
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	2b0f      	cmp	r3, #15
 8006472:	d9e9      	bls.n	8006448 <prvInitialiseNewTask+0x64>
 8006474:	e000      	b.n	8006478 <prvInitialiseNewTask+0x94>
			{
				break;
 8006476:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006480:	e003      	b.n	800648a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	2b37      	cmp	r3, #55	; 0x37
 800648e:	d901      	bls.n	8006494 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006490:	2337      	movs	r3, #55	; 0x37
 8006492:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006498:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800649e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	2200      	movs	r2, #0
 80064a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	3304      	adds	r3, #4
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fe fee4 	bl	8005278 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	3318      	adds	r3, #24
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fe fedf 	bl	8005278 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	2200      	movs	r2, #0
 80064d4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	68f9      	ldr	r1, [r7, #12]
 80064e2:	69b8      	ldr	r0, [r7, #24]
 80064e4:	f001 fb0c 	bl	8007b00 <pxPortInitialiseStack>
 80064e8:	4602      	mov	r2, r0
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80064ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064fa:	bf00      	nop
 80064fc:	3720      	adds	r7, #32
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800650c:	f001 fc22 	bl	8007d54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006510:	4b2d      	ldr	r3, [pc, #180]	; (80065c8 <prvAddNewTaskToReadyList+0xc4>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3301      	adds	r3, #1
 8006516:	4a2c      	ldr	r2, [pc, #176]	; (80065c8 <prvAddNewTaskToReadyList+0xc4>)
 8006518:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800651a:	4b2c      	ldr	r3, [pc, #176]	; (80065cc <prvAddNewTaskToReadyList+0xc8>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d109      	bne.n	8006536 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006522:	4a2a      	ldr	r2, [pc, #168]	; (80065cc <prvAddNewTaskToReadyList+0xc8>)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006528:	4b27      	ldr	r3, [pc, #156]	; (80065c8 <prvAddNewTaskToReadyList+0xc4>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d110      	bne.n	8006552 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006530:	f000 fcb4 	bl	8006e9c <prvInitialiseTaskLists>
 8006534:	e00d      	b.n	8006552 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006536:	4b26      	ldr	r3, [pc, #152]	; (80065d0 <prvAddNewTaskToReadyList+0xcc>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d109      	bne.n	8006552 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800653e:	4b23      	ldr	r3, [pc, #140]	; (80065cc <prvAddNewTaskToReadyList+0xc8>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	429a      	cmp	r2, r3
 800654a:	d802      	bhi.n	8006552 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800654c:	4a1f      	ldr	r2, [pc, #124]	; (80065cc <prvAddNewTaskToReadyList+0xc8>)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006552:	4b20      	ldr	r3, [pc, #128]	; (80065d4 <prvAddNewTaskToReadyList+0xd0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3301      	adds	r3, #1
 8006558:	4a1e      	ldr	r2, [pc, #120]	; (80065d4 <prvAddNewTaskToReadyList+0xd0>)
 800655a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800655c:	4b1d      	ldr	r3, [pc, #116]	; (80065d4 <prvAddNewTaskToReadyList+0xd0>)
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006568:	4b1b      	ldr	r3, [pc, #108]	; (80065d8 <prvAddNewTaskToReadyList+0xd4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d903      	bls.n	8006578 <prvAddNewTaskToReadyList+0x74>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	4a18      	ldr	r2, [pc, #96]	; (80065d8 <prvAddNewTaskToReadyList+0xd4>)
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657c:	4613      	mov	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4a15      	ldr	r2, [pc, #84]	; (80065dc <prvAddNewTaskToReadyList+0xd8>)
 8006586:	441a      	add	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3304      	adds	r3, #4
 800658c:	4619      	mov	r1, r3
 800658e:	4610      	mov	r0, r2
 8006590:	f7fe fe7f 	bl	8005292 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006594:	f001 fc0e 	bl	8007db4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006598:	4b0d      	ldr	r3, [pc, #52]	; (80065d0 <prvAddNewTaskToReadyList+0xcc>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00e      	beq.n	80065be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065a0:	4b0a      	ldr	r3, [pc, #40]	; (80065cc <prvAddNewTaskToReadyList+0xc8>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d207      	bcs.n	80065be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80065ae:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <prvAddNewTaskToReadyList+0xdc>)
 80065b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065be:	bf00      	nop
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20000c34 	.word	0x20000c34
 80065cc:	20000760 	.word	0x20000760
 80065d0:	20000c40 	.word	0x20000c40
 80065d4:	20000c50 	.word	0x20000c50
 80065d8:	20000c3c 	.word	0x20000c3c
 80065dc:	20000764 	.word	0x20000764
 80065e0:	e000ed04 	.word	0xe000ed04

080065e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d017      	beq.n	8006626 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065f6:	4b13      	ldr	r3, [pc, #76]	; (8006644 <vTaskDelay+0x60>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <vTaskDelay+0x30>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	60bb      	str	r3, [r7, #8]
}
 8006610:	bf00      	nop
 8006612:	e7fe      	b.n	8006612 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006614:	f000 f880 	bl	8006718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006618:	2100      	movs	r1, #0
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 feae 	bl	800737c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006620:	f000 f888 	bl	8006734 <xTaskResumeAll>
 8006624:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d107      	bne.n	800663c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800662c:	4b06      	ldr	r3, [pc, #24]	; (8006648 <vTaskDelay+0x64>)
 800662e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800663c:	bf00      	nop
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	20000c5c 	.word	0x20000c5c
 8006648:	e000ed04 	.word	0xe000ed04

0800664c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08a      	sub	sp, #40	; 0x28
 8006650:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006652:	2300      	movs	r3, #0
 8006654:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006656:	2300      	movs	r3, #0
 8006658:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800665a:	463a      	mov	r2, r7
 800665c:	1d39      	adds	r1, r7, #4
 800665e:	f107 0308 	add.w	r3, r7, #8
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe fbc6 	bl	8004df4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	9202      	str	r2, [sp, #8]
 8006670:	9301      	str	r3, [sp, #4]
 8006672:	2300      	movs	r3, #0
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	2300      	movs	r3, #0
 8006678:	460a      	mov	r2, r1
 800667a:	4921      	ldr	r1, [pc, #132]	; (8006700 <vTaskStartScheduler+0xb4>)
 800667c:	4821      	ldr	r0, [pc, #132]	; (8006704 <vTaskStartScheduler+0xb8>)
 800667e:	f7ff fe0f 	bl	80062a0 <xTaskCreateStatic>
 8006682:	4603      	mov	r3, r0
 8006684:	4a20      	ldr	r2, [pc, #128]	; (8006708 <vTaskStartScheduler+0xbc>)
 8006686:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006688:	4b1f      	ldr	r3, [pc, #124]	; (8006708 <vTaskStartScheduler+0xbc>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006690:	2301      	movs	r3, #1
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	e001      	b.n	800669a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006696:	2300      	movs	r3, #0
 8006698:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d102      	bne.n	80066a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80066a0:	f000 fec0 	bl	8007424 <xTimerCreateTimerTask>
 80066a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d116      	bne.n	80066da <vTaskStartScheduler+0x8e>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	613b      	str	r3, [r7, #16]
}
 80066be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80066c0:	4b12      	ldr	r3, [pc, #72]	; (800670c <vTaskStartScheduler+0xc0>)
 80066c2:	f04f 32ff 	mov.w	r2, #4294967295
 80066c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80066c8:	4b11      	ldr	r3, [pc, #68]	; (8006710 <vTaskStartScheduler+0xc4>)
 80066ca:	2201      	movs	r2, #1
 80066cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80066ce:	4b11      	ldr	r3, [pc, #68]	; (8006714 <vTaskStartScheduler+0xc8>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80066d4:	f001 fa9c 	bl	8007c10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80066d8:	e00e      	b.n	80066f8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e0:	d10a      	bne.n	80066f8 <vTaskStartScheduler+0xac>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	60fb      	str	r3, [r7, #12]
}
 80066f4:	bf00      	nop
 80066f6:	e7fe      	b.n	80066f6 <vTaskStartScheduler+0xaa>
}
 80066f8:	bf00      	nop
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	080099d8 	.word	0x080099d8
 8006704:	08006e6d 	.word	0x08006e6d
 8006708:	20000c58 	.word	0x20000c58
 800670c:	20000c54 	.word	0x20000c54
 8006710:	20000c40 	.word	0x20000c40
 8006714:	20000c38 	.word	0x20000c38

08006718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800671c:	4b04      	ldr	r3, [pc, #16]	; (8006730 <vTaskSuspendAll+0x18>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3301      	adds	r3, #1
 8006722:	4a03      	ldr	r2, [pc, #12]	; (8006730 <vTaskSuspendAll+0x18>)
 8006724:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006726:	bf00      	nop
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	20000c5c 	.word	0x20000c5c

08006734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800673e:	2300      	movs	r3, #0
 8006740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006742:	4b42      	ldr	r3, [pc, #264]	; (800684c <xTaskResumeAll+0x118>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10a      	bne.n	8006760 <xTaskResumeAll+0x2c>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	603b      	str	r3, [r7, #0]
}
 800675c:	bf00      	nop
 800675e:	e7fe      	b.n	800675e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006760:	f001 faf8 	bl	8007d54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006764:	4b39      	ldr	r3, [pc, #228]	; (800684c <xTaskResumeAll+0x118>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3b01      	subs	r3, #1
 800676a:	4a38      	ldr	r2, [pc, #224]	; (800684c <xTaskResumeAll+0x118>)
 800676c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800676e:	4b37      	ldr	r3, [pc, #220]	; (800684c <xTaskResumeAll+0x118>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d162      	bne.n	800683c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006776:	4b36      	ldr	r3, [pc, #216]	; (8006850 <xTaskResumeAll+0x11c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d05e      	beq.n	800683c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800677e:	e02f      	b.n	80067e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006780:	4b34      	ldr	r3, [pc, #208]	; (8006854 <xTaskResumeAll+0x120>)
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3318      	adds	r3, #24
 800678c:	4618      	mov	r0, r3
 800678e:	f7fe fddd 	bl	800534c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3304      	adds	r3, #4
 8006796:	4618      	mov	r0, r3
 8006798:	f7fe fdd8 	bl	800534c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a0:	4b2d      	ldr	r3, [pc, #180]	; (8006858 <xTaskResumeAll+0x124>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d903      	bls.n	80067b0 <xTaskResumeAll+0x7c>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	4a2a      	ldr	r2, [pc, #168]	; (8006858 <xTaskResumeAll+0x124>)
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4a27      	ldr	r2, [pc, #156]	; (800685c <xTaskResumeAll+0x128>)
 80067be:	441a      	add	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	f7fe fd63 	bl	8005292 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d0:	4b23      	ldr	r3, [pc, #140]	; (8006860 <xTaskResumeAll+0x12c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d302      	bcc.n	80067e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80067da:	4b22      	ldr	r3, [pc, #136]	; (8006864 <xTaskResumeAll+0x130>)
 80067dc:	2201      	movs	r2, #1
 80067de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067e0:	4b1c      	ldr	r3, [pc, #112]	; (8006854 <xTaskResumeAll+0x120>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1cb      	bne.n	8006780 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067ee:	f000 fbf3 	bl	8006fd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80067f2:	4b1d      	ldr	r3, [pc, #116]	; (8006868 <xTaskResumeAll+0x134>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d010      	beq.n	8006820 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067fe:	f000 f847 	bl	8006890 <xTaskIncrementTick>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006808:	4b16      	ldr	r3, [pc, #88]	; (8006864 <xTaskResumeAll+0x130>)
 800680a:	2201      	movs	r2, #1
 800680c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3b01      	subs	r3, #1
 8006812:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1f1      	bne.n	80067fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800681a:	4b13      	ldr	r3, [pc, #76]	; (8006868 <xTaskResumeAll+0x134>)
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006820:	4b10      	ldr	r3, [pc, #64]	; (8006864 <xTaskResumeAll+0x130>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d009      	beq.n	800683c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006828:	2301      	movs	r3, #1
 800682a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800682c:	4b0f      	ldr	r3, [pc, #60]	; (800686c <xTaskResumeAll+0x138>)
 800682e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800683c:	f001 faba 	bl	8007db4 <vPortExitCritical>

	return xAlreadyYielded;
 8006840:	68bb      	ldr	r3, [r7, #8]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20000c5c 	.word	0x20000c5c
 8006850:	20000c34 	.word	0x20000c34
 8006854:	20000bf4 	.word	0x20000bf4
 8006858:	20000c3c 	.word	0x20000c3c
 800685c:	20000764 	.word	0x20000764
 8006860:	20000760 	.word	0x20000760
 8006864:	20000c48 	.word	0x20000c48
 8006868:	20000c44 	.word	0x20000c44
 800686c:	e000ed04 	.word	0xe000ed04

08006870 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006876:	4b05      	ldr	r3, [pc, #20]	; (800688c <xTaskGetTickCount+0x1c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800687c:	687b      	ldr	r3, [r7, #4]
}
 800687e:	4618      	mov	r0, r3
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	20000c38 	.word	0x20000c38

08006890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800689a:	4b4f      	ldr	r3, [pc, #316]	; (80069d8 <xTaskIncrementTick+0x148>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f040 808f 	bne.w	80069c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80068a4:	4b4d      	ldr	r3, [pc, #308]	; (80069dc <xTaskIncrementTick+0x14c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3301      	adds	r3, #1
 80068aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80068ac:	4a4b      	ldr	r2, [pc, #300]	; (80069dc <xTaskIncrementTick+0x14c>)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d120      	bne.n	80068fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80068b8:	4b49      	ldr	r3, [pc, #292]	; (80069e0 <xTaskIncrementTick+0x150>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	603b      	str	r3, [r7, #0]
}
 80068d4:	bf00      	nop
 80068d6:	e7fe      	b.n	80068d6 <xTaskIncrementTick+0x46>
 80068d8:	4b41      	ldr	r3, [pc, #260]	; (80069e0 <xTaskIncrementTick+0x150>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	4b41      	ldr	r3, [pc, #260]	; (80069e4 <xTaskIncrementTick+0x154>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a3f      	ldr	r2, [pc, #252]	; (80069e0 <xTaskIncrementTick+0x150>)
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	4a3f      	ldr	r2, [pc, #252]	; (80069e4 <xTaskIncrementTick+0x154>)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	4b3e      	ldr	r3, [pc, #248]	; (80069e8 <xTaskIncrementTick+0x158>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3301      	adds	r3, #1
 80068f2:	4a3d      	ldr	r2, [pc, #244]	; (80069e8 <xTaskIncrementTick+0x158>)
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	f000 fb6f 	bl	8006fd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068fa:	4b3c      	ldr	r3, [pc, #240]	; (80069ec <xTaskIncrementTick+0x15c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	429a      	cmp	r2, r3
 8006902:	d349      	bcc.n	8006998 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006904:	4b36      	ldr	r3, [pc, #216]	; (80069e0 <xTaskIncrementTick+0x150>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d104      	bne.n	8006918 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800690e:	4b37      	ldr	r3, [pc, #220]	; (80069ec <xTaskIncrementTick+0x15c>)
 8006910:	f04f 32ff 	mov.w	r2, #4294967295
 8006914:	601a      	str	r2, [r3, #0]
					break;
 8006916:	e03f      	b.n	8006998 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006918:	4b31      	ldr	r3, [pc, #196]	; (80069e0 <xTaskIncrementTick+0x150>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	429a      	cmp	r2, r3
 800692e:	d203      	bcs.n	8006938 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006930:	4a2e      	ldr	r2, [pc, #184]	; (80069ec <xTaskIncrementTick+0x15c>)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006936:	e02f      	b.n	8006998 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	3304      	adds	r3, #4
 800693c:	4618      	mov	r0, r3
 800693e:	f7fe fd05 	bl	800534c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006946:	2b00      	cmp	r3, #0
 8006948:	d004      	beq.n	8006954 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	3318      	adds	r3, #24
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe fcfc 	bl	800534c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006958:	4b25      	ldr	r3, [pc, #148]	; (80069f0 <xTaskIncrementTick+0x160>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	429a      	cmp	r2, r3
 800695e:	d903      	bls.n	8006968 <xTaskIncrementTick+0xd8>
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	4a22      	ldr	r2, [pc, #136]	; (80069f0 <xTaskIncrementTick+0x160>)
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696c:	4613      	mov	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4a1f      	ldr	r2, [pc, #124]	; (80069f4 <xTaskIncrementTick+0x164>)
 8006976:	441a      	add	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	3304      	adds	r3, #4
 800697c:	4619      	mov	r1, r3
 800697e:	4610      	mov	r0, r2
 8006980:	f7fe fc87 	bl	8005292 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006988:	4b1b      	ldr	r3, [pc, #108]	; (80069f8 <xTaskIncrementTick+0x168>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698e:	429a      	cmp	r2, r3
 8006990:	d3b8      	bcc.n	8006904 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006992:	2301      	movs	r3, #1
 8006994:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006996:	e7b5      	b.n	8006904 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006998:	4b17      	ldr	r3, [pc, #92]	; (80069f8 <xTaskIncrementTick+0x168>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699e:	4915      	ldr	r1, [pc, #84]	; (80069f4 <xTaskIncrementTick+0x164>)
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d901      	bls.n	80069b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80069b0:	2301      	movs	r3, #1
 80069b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80069b4:	4b11      	ldr	r3, [pc, #68]	; (80069fc <xTaskIncrementTick+0x16c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d007      	beq.n	80069cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80069bc:	2301      	movs	r3, #1
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	e004      	b.n	80069cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80069c2:	4b0f      	ldr	r3, [pc, #60]	; (8006a00 <xTaskIncrementTick+0x170>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3301      	adds	r3, #1
 80069c8:	4a0d      	ldr	r2, [pc, #52]	; (8006a00 <xTaskIncrementTick+0x170>)
 80069ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80069cc:	697b      	ldr	r3, [r7, #20]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20000c5c 	.word	0x20000c5c
 80069dc:	20000c38 	.word	0x20000c38
 80069e0:	20000bec 	.word	0x20000bec
 80069e4:	20000bf0 	.word	0x20000bf0
 80069e8:	20000c4c 	.word	0x20000c4c
 80069ec:	20000c54 	.word	0x20000c54
 80069f0:	20000c3c 	.word	0x20000c3c
 80069f4:	20000764 	.word	0x20000764
 80069f8:	20000760 	.word	0x20000760
 80069fc:	20000c48 	.word	0x20000c48
 8006a00:	20000c44 	.word	0x20000c44

08006a04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a0a:	4b28      	ldr	r3, [pc, #160]	; (8006aac <vTaskSwitchContext+0xa8>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a12:	4b27      	ldr	r3, [pc, #156]	; (8006ab0 <vTaskSwitchContext+0xac>)
 8006a14:	2201      	movs	r2, #1
 8006a16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a18:	e041      	b.n	8006a9e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006a1a:	4b25      	ldr	r3, [pc, #148]	; (8006ab0 <vTaskSwitchContext+0xac>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a20:	4b24      	ldr	r3, [pc, #144]	; (8006ab4 <vTaskSwitchContext+0xb0>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	e010      	b.n	8006a4a <vTaskSwitchContext+0x46>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10a      	bne.n	8006a44 <vTaskSwitchContext+0x40>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	607b      	str	r3, [r7, #4]
}
 8006a40:	bf00      	nop
 8006a42:	e7fe      	b.n	8006a42 <vTaskSwitchContext+0x3e>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3b01      	subs	r3, #1
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	491b      	ldr	r1, [pc, #108]	; (8006ab8 <vTaskSwitchContext+0xb4>)
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	440b      	add	r3, r1
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0e4      	beq.n	8006a28 <vTaskSwitchContext+0x24>
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4a13      	ldr	r2, [pc, #76]	; (8006ab8 <vTaskSwitchContext+0xb4>)
 8006a6a:	4413      	add	r3, r2
 8006a6c:	60bb      	str	r3, [r7, #8]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	605a      	str	r2, [r3, #4]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	3308      	adds	r3, #8
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d104      	bne.n	8006a8e <vTaskSwitchContext+0x8a>
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	605a      	str	r2, [r3, #4]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	4a09      	ldr	r2, [pc, #36]	; (8006abc <vTaskSwitchContext+0xb8>)
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	4a06      	ldr	r2, [pc, #24]	; (8006ab4 <vTaskSwitchContext+0xb0>)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6013      	str	r3, [r2, #0]
}
 8006a9e:	bf00      	nop
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	20000c5c 	.word	0x20000c5c
 8006ab0:	20000c48 	.word	0x20000c48
 8006ab4:	20000c3c 	.word	0x20000c3c
 8006ab8:	20000764 	.word	0x20000764
 8006abc:	20000760 	.word	0x20000760

08006ac0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	60fb      	str	r3, [r7, #12]
}
 8006ae2:	bf00      	nop
 8006ae4:	e7fe      	b.n	8006ae4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ae6:	4b07      	ldr	r3, [pc, #28]	; (8006b04 <vTaskPlaceOnEventList+0x44>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3318      	adds	r3, #24
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fe fbf3 	bl	80052da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006af4:	2101      	movs	r1, #1
 8006af6:	6838      	ldr	r0, [r7, #0]
 8006af8:	f000 fc40 	bl	800737c <prvAddCurrentTaskToDelayedList>
}
 8006afc:	bf00      	nop
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	20000760 	.word	0x20000760

08006b08 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	617b      	str	r3, [r7, #20]
}
 8006b2c:	bf00      	nop
 8006b2e:	e7fe      	b.n	8006b2e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006b30:	4b11      	ldr	r3, [pc, #68]	; (8006b78 <vTaskPlaceOnUnorderedEventList+0x70>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10a      	bne.n	8006b4e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	613b      	str	r3, [r7, #16]
}
 8006b4a:	bf00      	nop
 8006b4c:	e7fe      	b.n	8006b4c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006b4e:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <vTaskPlaceOnUnorderedEventList+0x74>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006b58:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b5a:	4b08      	ldr	r3, [pc, #32]	; (8006b7c <vTaskPlaceOnUnorderedEventList+0x74>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3318      	adds	r3, #24
 8006b60:	4619      	mov	r1, r3
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f7fe fb95 	bl	8005292 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b68:	2101      	movs	r1, #1
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fc06 	bl	800737c <prvAddCurrentTaskToDelayedList>
}
 8006b70:	bf00      	nop
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	20000c5c 	.word	0x20000c5c
 8006b7c:	20000760 	.word	0x20000760

08006b80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10a      	bne.n	8006ba8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	617b      	str	r3, [r7, #20]
}
 8006ba4:	bf00      	nop
 8006ba6:	e7fe      	b.n	8006ba6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ba8:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <vTaskPlaceOnEventListRestricted+0x54>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3318      	adds	r3, #24
 8006bae:	4619      	mov	r1, r3
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f7fe fb6e 	bl	8005292 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d002      	beq.n	8006bc2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006bc2:	6879      	ldr	r1, [r7, #4]
 8006bc4:	68b8      	ldr	r0, [r7, #8]
 8006bc6:	f000 fbd9 	bl	800737c <prvAddCurrentTaskToDelayedList>
	}
 8006bca:	bf00      	nop
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20000760 	.word	0x20000760

08006bd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10a      	bne.n	8006c04 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	60fb      	str	r3, [r7, #12]
}
 8006c00:	bf00      	nop
 8006c02:	e7fe      	b.n	8006c02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	3318      	adds	r3, #24
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fe fb9f 	bl	800534c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c0e:	4b1e      	ldr	r3, [pc, #120]	; (8006c88 <xTaskRemoveFromEventList+0xb0>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d11d      	bne.n	8006c52 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fe fb96 	bl	800534c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c24:	4b19      	ldr	r3, [pc, #100]	; (8006c8c <xTaskRemoveFromEventList+0xb4>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d903      	bls.n	8006c34 <xTaskRemoveFromEventList+0x5c>
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	4a16      	ldr	r2, [pc, #88]	; (8006c8c <xTaskRemoveFromEventList+0xb4>)
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4a13      	ldr	r2, [pc, #76]	; (8006c90 <xTaskRemoveFromEventList+0xb8>)
 8006c42:	441a      	add	r2, r3
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	3304      	adds	r3, #4
 8006c48:	4619      	mov	r1, r3
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	f7fe fb21 	bl	8005292 <vListInsertEnd>
 8006c50:	e005      	b.n	8006c5e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	3318      	adds	r3, #24
 8006c56:	4619      	mov	r1, r3
 8006c58:	480e      	ldr	r0, [pc, #56]	; (8006c94 <xTaskRemoveFromEventList+0xbc>)
 8006c5a:	f7fe fb1a 	bl	8005292 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c62:	4b0d      	ldr	r3, [pc, #52]	; (8006c98 <xTaskRemoveFromEventList+0xc0>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d905      	bls.n	8006c78 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c70:	4b0a      	ldr	r3, [pc, #40]	; (8006c9c <xTaskRemoveFromEventList+0xc4>)
 8006c72:	2201      	movs	r2, #1
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	e001      	b.n	8006c7c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c7c:	697b      	ldr	r3, [r7, #20]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3718      	adds	r7, #24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20000c5c 	.word	0x20000c5c
 8006c8c:	20000c3c 	.word	0x20000c3c
 8006c90:	20000764 	.word	0x20000764
 8006c94:	20000bf4 	.word	0x20000bf4
 8006c98:	20000760 	.word	0x20000760
 8006c9c:	20000c48 	.word	0x20000c48

08006ca0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006caa:	4b29      	ldr	r3, [pc, #164]	; (8006d50 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	613b      	str	r3, [r7, #16]
}
 8006cc4:	bf00      	nop
 8006cc6:	e7fe      	b.n	8006cc6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10a      	bne.n	8006cf4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	60fb      	str	r3, [r7, #12]
}
 8006cf0:	bf00      	nop
 8006cf2:	e7fe      	b.n	8006cf2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7fe fb29 	bl	800534c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fe fb24 	bl	800534c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d08:	4b12      	ldr	r3, [pc, #72]	; (8006d54 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d903      	bls.n	8006d18 <vTaskRemoveFromUnorderedEventList+0x78>
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d14:	4a0f      	ldr	r2, [pc, #60]	; (8006d54 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4a0c      	ldr	r2, [pc, #48]	; (8006d58 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006d26:	441a      	add	r2, r3
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4610      	mov	r0, r2
 8006d30:	f7fe faaf 	bl	8005292 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d38:	4b08      	ldr	r3, [pc, #32]	; (8006d5c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d902      	bls.n	8006d48 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006d42:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006d44:	2201      	movs	r2, #1
 8006d46:	601a      	str	r2, [r3, #0]
	}
}
 8006d48:	bf00      	nop
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20000c5c 	.word	0x20000c5c
 8006d54:	20000c3c 	.word	0x20000c3c
 8006d58:	20000764 	.word	0x20000764
 8006d5c:	20000760 	.word	0x20000760
 8006d60:	20000c48 	.word	0x20000c48

08006d64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d6c:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <vTaskInternalSetTimeOutState+0x24>)
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d74:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <vTaskInternalSetTimeOutState+0x28>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	605a      	str	r2, [r3, #4]
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	20000c4c 	.word	0x20000c4c
 8006d8c:	20000c38 	.word	0x20000c38

08006d90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b088      	sub	sp, #32
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10a      	bne.n	8006db6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	613b      	str	r3, [r7, #16]
}
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	60fb      	str	r3, [r7, #12]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006dd2:	f000 ffbf 	bl	8007d54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006dd6:	4b1d      	ldr	r3, [pc, #116]	; (8006e4c <xTaskCheckForTimeOut+0xbc>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	69ba      	ldr	r2, [r7, #24]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dee:	d102      	bne.n	8006df6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006df0:	2300      	movs	r3, #0
 8006df2:	61fb      	str	r3, [r7, #28]
 8006df4:	e023      	b.n	8006e3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	4b15      	ldr	r3, [pc, #84]	; (8006e50 <xTaskCheckForTimeOut+0xc0>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d007      	beq.n	8006e12 <xTaskCheckForTimeOut+0x82>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d302      	bcc.n	8006e12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	61fb      	str	r3, [r7, #28]
 8006e10:	e015      	b.n	8006e3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d20b      	bcs.n	8006e34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	1ad2      	subs	r2, r2, r3
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7ff ff9b 	bl	8006d64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	61fb      	str	r3, [r7, #28]
 8006e32:	e004      	b.n	8006e3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	2200      	movs	r2, #0
 8006e38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e3e:	f000 ffb9 	bl	8007db4 <vPortExitCritical>

	return xReturn;
 8006e42:	69fb      	ldr	r3, [r7, #28]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3720      	adds	r7, #32
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20000c38 	.word	0x20000c38
 8006e50:	20000c4c 	.word	0x20000c4c

08006e54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e58:	4b03      	ldr	r3, [pc, #12]	; (8006e68 <vTaskMissedYield+0x14>)
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]
}
 8006e5e:	bf00      	nop
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	20000c48 	.word	0x20000c48

08006e6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e74:	f000 f852 	bl	8006f1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e78:	4b06      	ldr	r3, [pc, #24]	; (8006e94 <prvIdleTask+0x28>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d9f9      	bls.n	8006e74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e80:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <prvIdleTask+0x2c>)
 8006e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e90:	e7f0      	b.n	8006e74 <prvIdleTask+0x8>
 8006e92:	bf00      	nop
 8006e94:	20000764 	.word	0x20000764
 8006e98:	e000ed04 	.word	0xe000ed04

08006e9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	607b      	str	r3, [r7, #4]
 8006ea6:	e00c      	b.n	8006ec2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4a12      	ldr	r2, [pc, #72]	; (8006efc <prvInitialiseTaskLists+0x60>)
 8006eb4:	4413      	add	r3, r2
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe f9be 	bl	8005238 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	607b      	str	r3, [r7, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b37      	cmp	r3, #55	; 0x37
 8006ec6:	d9ef      	bls.n	8006ea8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ec8:	480d      	ldr	r0, [pc, #52]	; (8006f00 <prvInitialiseTaskLists+0x64>)
 8006eca:	f7fe f9b5 	bl	8005238 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ece:	480d      	ldr	r0, [pc, #52]	; (8006f04 <prvInitialiseTaskLists+0x68>)
 8006ed0:	f7fe f9b2 	bl	8005238 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ed4:	480c      	ldr	r0, [pc, #48]	; (8006f08 <prvInitialiseTaskLists+0x6c>)
 8006ed6:	f7fe f9af 	bl	8005238 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006eda:	480c      	ldr	r0, [pc, #48]	; (8006f0c <prvInitialiseTaskLists+0x70>)
 8006edc:	f7fe f9ac 	bl	8005238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ee0:	480b      	ldr	r0, [pc, #44]	; (8006f10 <prvInitialiseTaskLists+0x74>)
 8006ee2:	f7fe f9a9 	bl	8005238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ee6:	4b0b      	ldr	r3, [pc, #44]	; (8006f14 <prvInitialiseTaskLists+0x78>)
 8006ee8:	4a05      	ldr	r2, [pc, #20]	; (8006f00 <prvInitialiseTaskLists+0x64>)
 8006eea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006eec:	4b0a      	ldr	r3, [pc, #40]	; (8006f18 <prvInitialiseTaskLists+0x7c>)
 8006eee:	4a05      	ldr	r2, [pc, #20]	; (8006f04 <prvInitialiseTaskLists+0x68>)
 8006ef0:	601a      	str	r2, [r3, #0]
}
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20000764 	.word	0x20000764
 8006f00:	20000bc4 	.word	0x20000bc4
 8006f04:	20000bd8 	.word	0x20000bd8
 8006f08:	20000bf4 	.word	0x20000bf4
 8006f0c:	20000c08 	.word	0x20000c08
 8006f10:	20000c20 	.word	0x20000c20
 8006f14:	20000bec 	.word	0x20000bec
 8006f18:	20000bf0 	.word	0x20000bf0

08006f1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f22:	e019      	b.n	8006f58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f24:	f000 ff16 	bl	8007d54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f28:	4b10      	ldr	r3, [pc, #64]	; (8006f6c <prvCheckTasksWaitingTermination+0x50>)
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fe fa09 	bl	800534c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f3a:	4b0d      	ldr	r3, [pc, #52]	; (8006f70 <prvCheckTasksWaitingTermination+0x54>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	4a0b      	ldr	r2, [pc, #44]	; (8006f70 <prvCheckTasksWaitingTermination+0x54>)
 8006f42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f44:	4b0b      	ldr	r3, [pc, #44]	; (8006f74 <prvCheckTasksWaitingTermination+0x58>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	4a0a      	ldr	r2, [pc, #40]	; (8006f74 <prvCheckTasksWaitingTermination+0x58>)
 8006f4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f4e:	f000 ff31 	bl	8007db4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f810 	bl	8006f78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f58:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <prvCheckTasksWaitingTermination+0x58>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1e1      	bne.n	8006f24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000c08 	.word	0x20000c08
 8006f70:	20000c34 	.word	0x20000c34
 8006f74:	20000c1c 	.word	0x20000c1c

08006f78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d108      	bne.n	8006f9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f001 f8ce 	bl	8008130 <vPortFree>
				vPortFree( pxTCB );
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 f8cb 	bl	8008130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f9a:	e018      	b.n	8006fce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d103      	bne.n	8006fae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f001 f8c2 	bl	8008130 <vPortFree>
	}
 8006fac:	e00f      	b.n	8006fce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d00a      	beq.n	8006fce <prvDeleteTCB+0x56>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	60fb      	str	r3, [r7, #12]
}
 8006fca:	bf00      	nop
 8006fcc:	e7fe      	b.n	8006fcc <prvDeleteTCB+0x54>
	}
 8006fce:	bf00      	nop
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
	...

08006fd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fde:	4b0c      	ldr	r3, [pc, #48]	; (8007010 <prvResetNextTaskUnblockTime+0x38>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d104      	bne.n	8006ff2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006fe8:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <prvResetNextTaskUnblockTime+0x3c>)
 8006fea:	f04f 32ff 	mov.w	r2, #4294967295
 8006fee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ff0:	e008      	b.n	8007004 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ff2:	4b07      	ldr	r3, [pc, #28]	; (8007010 <prvResetNextTaskUnblockTime+0x38>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	4a04      	ldr	r2, [pc, #16]	; (8007014 <prvResetNextTaskUnblockTime+0x3c>)
 8007002:	6013      	str	r3, [r2, #0]
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	20000bec 	.word	0x20000bec
 8007014:	20000c54 	.word	0x20000c54

08007018 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800701e:	4b05      	ldr	r3, [pc, #20]	; (8007034 <xTaskGetCurrentTaskHandle+0x1c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007024:	687b      	ldr	r3, [r7, #4]
	}
 8007026:	4618      	mov	r0, r3
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	20000760 	.word	0x20000760

08007038 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800703e:	4b0b      	ldr	r3, [pc, #44]	; (800706c <xTaskGetSchedulerState+0x34>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d102      	bne.n	800704c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007046:	2301      	movs	r3, #1
 8007048:	607b      	str	r3, [r7, #4]
 800704a:	e008      	b.n	800705e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800704c:	4b08      	ldr	r3, [pc, #32]	; (8007070 <xTaskGetSchedulerState+0x38>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d102      	bne.n	800705a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007054:	2302      	movs	r3, #2
 8007056:	607b      	str	r3, [r7, #4]
 8007058:	e001      	b.n	800705e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800705a:	2300      	movs	r3, #0
 800705c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800705e:	687b      	ldr	r3, [r7, #4]
	}
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	20000c40 	.word	0x20000c40
 8007070:	20000c5c 	.word	0x20000c5c

08007074 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007080:	2300      	movs	r3, #0
 8007082:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d051      	beq.n	800712e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708e:	4b2a      	ldr	r3, [pc, #168]	; (8007138 <xTaskPriorityInherit+0xc4>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007094:	429a      	cmp	r2, r3
 8007096:	d241      	bcs.n	800711c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	2b00      	cmp	r3, #0
 800709e:	db06      	blt.n	80070ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a0:	4b25      	ldr	r3, [pc, #148]	; (8007138 <xTaskPriorityInherit+0xc4>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	6959      	ldr	r1, [r3, #20]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4a1f      	ldr	r2, [pc, #124]	; (800713c <xTaskPriorityInherit+0xc8>)
 80070c0:	4413      	add	r3, r2
 80070c2:	4299      	cmp	r1, r3
 80070c4:	d122      	bne.n	800710c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	3304      	adds	r3, #4
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe f93e 	bl	800534c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070d0:	4b19      	ldr	r3, [pc, #100]	; (8007138 <xTaskPriorityInherit+0xc4>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070de:	4b18      	ldr	r3, [pc, #96]	; (8007140 <xTaskPriorityInherit+0xcc>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d903      	bls.n	80070ee <xTaskPriorityInherit+0x7a>
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ea:	4a15      	ldr	r2, [pc, #84]	; (8007140 <xTaskPriorityInherit+0xcc>)
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f2:	4613      	mov	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4a10      	ldr	r2, [pc, #64]	; (800713c <xTaskPriorityInherit+0xc8>)
 80070fc:	441a      	add	r2, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	3304      	adds	r3, #4
 8007102:	4619      	mov	r1, r3
 8007104:	4610      	mov	r0, r2
 8007106:	f7fe f8c4 	bl	8005292 <vListInsertEnd>
 800710a:	e004      	b.n	8007116 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800710c:	4b0a      	ldr	r3, [pc, #40]	; (8007138 <xTaskPriorityInherit+0xc4>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007116:	2301      	movs	r3, #1
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	e008      	b.n	800712e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007120:	4b05      	ldr	r3, [pc, #20]	; (8007138 <xTaskPriorityInherit+0xc4>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	429a      	cmp	r2, r3
 8007128:	d201      	bcs.n	800712e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800712a:	2301      	movs	r3, #1
 800712c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800712e:	68fb      	ldr	r3, [r7, #12]
	}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	20000760 	.word	0x20000760
 800713c:	20000764 	.word	0x20000764
 8007140:	20000c3c 	.word	0x20000c3c

08007144 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007150:	2300      	movs	r3, #0
 8007152:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d056      	beq.n	8007208 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800715a:	4b2e      	ldr	r3, [pc, #184]	; (8007214 <xTaskPriorityDisinherit+0xd0>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	429a      	cmp	r2, r3
 8007162:	d00a      	beq.n	800717a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	60fb      	str	r3, [r7, #12]
}
 8007176:	bf00      	nop
 8007178:	e7fe      	b.n	8007178 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10a      	bne.n	8007198 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	60bb      	str	r3, [r7, #8]
}
 8007194:	bf00      	nop
 8007196:	e7fe      	b.n	8007196 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800719c:	1e5a      	subs	r2, r3, #1
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d02c      	beq.n	8007208 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d128      	bne.n	8007208 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	3304      	adds	r3, #4
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fe f8c6 	bl	800534c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d8:	4b0f      	ldr	r3, [pc, #60]	; (8007218 <xTaskPriorityDisinherit+0xd4>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d903      	bls.n	80071e8 <xTaskPriorityDisinherit+0xa4>
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	4a0c      	ldr	r2, [pc, #48]	; (8007218 <xTaskPriorityDisinherit+0xd4>)
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ec:	4613      	mov	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4a09      	ldr	r2, [pc, #36]	; (800721c <xTaskPriorityDisinherit+0xd8>)
 80071f6:	441a      	add	r2, r3
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	3304      	adds	r3, #4
 80071fc:	4619      	mov	r1, r3
 80071fe:	4610      	mov	r0, r2
 8007200:	f7fe f847 	bl	8005292 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007204:	2301      	movs	r3, #1
 8007206:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007208:	697b      	ldr	r3, [r7, #20]
	}
 800720a:	4618      	mov	r0, r3
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20000760 	.word	0x20000760
 8007218:	20000c3c 	.word	0x20000c3c
 800721c:	20000764 	.word	0x20000764

08007220 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007220:	b580      	push	{r7, lr}
 8007222:	b088      	sub	sp, #32
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800722e:	2301      	movs	r3, #1
 8007230:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d06a      	beq.n	800730e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10a      	bne.n	8007256 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	60fb      	str	r3, [r7, #12]
}
 8007252:	bf00      	nop
 8007254:	e7fe      	b.n	8007254 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d902      	bls.n	8007266 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	e002      	b.n	800726c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007270:	69fa      	ldr	r2, [r7, #28]
 8007272:	429a      	cmp	r2, r3
 8007274:	d04b      	beq.n	800730e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	429a      	cmp	r2, r3
 800727e:	d146      	bne.n	800730e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007280:	4b25      	ldr	r3, [pc, #148]	; (8007318 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	429a      	cmp	r2, r3
 8007288:	d10a      	bne.n	80072a0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	60bb      	str	r3, [r7, #8]
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	69fa      	ldr	r2, [r7, #28]
 80072aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	db04      	blt.n	80072be <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	6959      	ldr	r1, [r3, #20]
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	4613      	mov	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4a13      	ldr	r2, [pc, #76]	; (800731c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80072ce:	4413      	add	r3, r2
 80072d0:	4299      	cmp	r1, r3
 80072d2:	d11c      	bne.n	800730e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fe f837 	bl	800534c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e2:	4b0f      	ldr	r3, [pc, #60]	; (8007320 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d903      	bls.n	80072f2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ee:	4a0c      	ldr	r2, [pc, #48]	; (8007320 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4a07      	ldr	r2, [pc, #28]	; (800731c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007300:	441a      	add	r2, r3
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	3304      	adds	r3, #4
 8007306:	4619      	mov	r1, r3
 8007308:	4610      	mov	r0, r2
 800730a:	f7fd ffc2 	bl	8005292 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800730e:	bf00      	nop
 8007310:	3720      	adds	r7, #32
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20000760 	.word	0x20000760
 800731c:	20000764 	.word	0x20000764
 8007320:	20000c3c 	.word	0x20000c3c

08007324 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800732a:	4b09      	ldr	r3, [pc, #36]	; (8007350 <uxTaskResetEventItemValue+0x2c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007332:	4b07      	ldr	r3, [pc, #28]	; (8007350 <uxTaskResetEventItemValue+0x2c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007338:	4b05      	ldr	r3, [pc, #20]	; (8007350 <uxTaskResetEventItemValue+0x2c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007340:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007342:	687b      	ldr	r3, [r7, #4]
}
 8007344:	4618      	mov	r0, r3
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	20000760 	.word	0x20000760

08007354 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007358:	4b07      	ldr	r3, [pc, #28]	; (8007378 <pvTaskIncrementMutexHeldCount+0x24>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d004      	beq.n	800736a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007360:	4b05      	ldr	r3, [pc, #20]	; (8007378 <pvTaskIncrementMutexHeldCount+0x24>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007366:	3201      	adds	r2, #1
 8007368:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800736a:	4b03      	ldr	r3, [pc, #12]	; (8007378 <pvTaskIncrementMutexHeldCount+0x24>)
 800736c:	681b      	ldr	r3, [r3, #0]
	}
 800736e:	4618      	mov	r0, r3
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	20000760 	.word	0x20000760

0800737c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007386:	4b21      	ldr	r3, [pc, #132]	; (800740c <prvAddCurrentTaskToDelayedList+0x90>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800738c:	4b20      	ldr	r3, [pc, #128]	; (8007410 <prvAddCurrentTaskToDelayedList+0x94>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3304      	adds	r3, #4
 8007392:	4618      	mov	r0, r3
 8007394:	f7fd ffda 	bl	800534c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739e:	d10a      	bne.n	80073b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d007      	beq.n	80073b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073a6:	4b1a      	ldr	r3, [pc, #104]	; (8007410 <prvAddCurrentTaskToDelayedList+0x94>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3304      	adds	r3, #4
 80073ac:	4619      	mov	r1, r3
 80073ae:	4819      	ldr	r0, [pc, #100]	; (8007414 <prvAddCurrentTaskToDelayedList+0x98>)
 80073b0:	f7fd ff6f 	bl	8005292 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073b4:	e026      	b.n	8007404 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4413      	add	r3, r2
 80073bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073be:	4b14      	ldr	r3, [pc, #80]	; (8007410 <prvAddCurrentTaskToDelayedList+0x94>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d209      	bcs.n	80073e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073ce:	4b12      	ldr	r3, [pc, #72]	; (8007418 <prvAddCurrentTaskToDelayedList+0x9c>)
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	4b0f      	ldr	r3, [pc, #60]	; (8007410 <prvAddCurrentTaskToDelayedList+0x94>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3304      	adds	r3, #4
 80073d8:	4619      	mov	r1, r3
 80073da:	4610      	mov	r0, r2
 80073dc:	f7fd ff7d 	bl	80052da <vListInsert>
}
 80073e0:	e010      	b.n	8007404 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073e2:	4b0e      	ldr	r3, [pc, #56]	; (800741c <prvAddCurrentTaskToDelayedList+0xa0>)
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	4b0a      	ldr	r3, [pc, #40]	; (8007410 <prvAddCurrentTaskToDelayedList+0x94>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3304      	adds	r3, #4
 80073ec:	4619      	mov	r1, r3
 80073ee:	4610      	mov	r0, r2
 80073f0:	f7fd ff73 	bl	80052da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073f4:	4b0a      	ldr	r3, [pc, #40]	; (8007420 <prvAddCurrentTaskToDelayedList+0xa4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d202      	bcs.n	8007404 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80073fe:	4a08      	ldr	r2, [pc, #32]	; (8007420 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	6013      	str	r3, [r2, #0]
}
 8007404:	bf00      	nop
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	20000c38 	.word	0x20000c38
 8007410:	20000760 	.word	0x20000760
 8007414:	20000c20 	.word	0x20000c20
 8007418:	20000bf0 	.word	0x20000bf0
 800741c:	20000bec 	.word	0x20000bec
 8007420:	20000c54 	.word	0x20000c54

08007424 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08a      	sub	sp, #40	; 0x28
 8007428:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800742a:	2300      	movs	r3, #0
 800742c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800742e:	f000 fb07 	bl	8007a40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007432:	4b1c      	ldr	r3, [pc, #112]	; (80074a4 <xTimerCreateTimerTask+0x80>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d021      	beq.n	800747e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800743e:	2300      	movs	r3, #0
 8007440:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007442:	1d3a      	adds	r2, r7, #4
 8007444:	f107 0108 	add.w	r1, r7, #8
 8007448:	f107 030c 	add.w	r3, r7, #12
 800744c:	4618      	mov	r0, r3
 800744e:	f7fd fceb 	bl	8004e28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	9202      	str	r2, [sp, #8]
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	2302      	movs	r3, #2
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	2300      	movs	r3, #0
 8007462:	460a      	mov	r2, r1
 8007464:	4910      	ldr	r1, [pc, #64]	; (80074a8 <xTimerCreateTimerTask+0x84>)
 8007466:	4811      	ldr	r0, [pc, #68]	; (80074ac <xTimerCreateTimerTask+0x88>)
 8007468:	f7fe ff1a 	bl	80062a0 <xTaskCreateStatic>
 800746c:	4603      	mov	r3, r0
 800746e:	4a10      	ldr	r2, [pc, #64]	; (80074b0 <xTimerCreateTimerTask+0x8c>)
 8007470:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007472:	4b0f      	ldr	r3, [pc, #60]	; (80074b0 <xTimerCreateTimerTask+0x8c>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800747a:	2301      	movs	r3, #1
 800747c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10a      	bne.n	800749a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	613b      	str	r3, [r7, #16]
}
 8007496:	bf00      	nop
 8007498:	e7fe      	b.n	8007498 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800749a:	697b      	ldr	r3, [r7, #20]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	20000c90 	.word	0x20000c90
 80074a8:	080099e0 	.word	0x080099e0
 80074ac:	080075e9 	.word	0x080075e9
 80074b0:	20000c94 	.word	0x20000c94

080074b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08a      	sub	sp, #40	; 0x28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10a      	bne.n	80074e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	623b      	str	r3, [r7, #32]
}
 80074de:	bf00      	nop
 80074e0:	e7fe      	b.n	80074e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80074e2:	4b1a      	ldr	r3, [pc, #104]	; (800754c <xTimerGenericCommand+0x98>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d02a      	beq.n	8007540 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2b05      	cmp	r3, #5
 80074fa:	dc18      	bgt.n	800752e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074fc:	f7ff fd9c 	bl	8007038 <xTaskGetSchedulerState>
 8007500:	4603      	mov	r3, r0
 8007502:	2b02      	cmp	r3, #2
 8007504:	d109      	bne.n	800751a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007506:	4b11      	ldr	r3, [pc, #68]	; (800754c <xTimerGenericCommand+0x98>)
 8007508:	6818      	ldr	r0, [r3, #0]
 800750a:	f107 0110 	add.w	r1, r7, #16
 800750e:	2300      	movs	r3, #0
 8007510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007512:	f7fe f939 	bl	8005788 <xQueueGenericSend>
 8007516:	6278      	str	r0, [r7, #36]	; 0x24
 8007518:	e012      	b.n	8007540 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800751a:	4b0c      	ldr	r3, [pc, #48]	; (800754c <xTimerGenericCommand+0x98>)
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	f107 0110 	add.w	r1, r7, #16
 8007522:	2300      	movs	r3, #0
 8007524:	2200      	movs	r2, #0
 8007526:	f7fe f92f 	bl	8005788 <xQueueGenericSend>
 800752a:	6278      	str	r0, [r7, #36]	; 0x24
 800752c:	e008      	b.n	8007540 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800752e:	4b07      	ldr	r3, [pc, #28]	; (800754c <xTimerGenericCommand+0x98>)
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	f107 0110 	add.w	r1, r7, #16
 8007536:	2300      	movs	r3, #0
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	f7fe fa23 	bl	8005984 <xQueueGenericSendFromISR>
 800753e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007542:	4618      	mov	r0, r3
 8007544:	3728      	adds	r7, #40	; 0x28
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20000c90 	.word	0x20000c90

08007550 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af02      	add	r7, sp, #8
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800755a:	4b22      	ldr	r3, [pc, #136]	; (80075e4 <prvProcessExpiredTimer+0x94>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	3304      	adds	r3, #4
 8007568:	4618      	mov	r0, r3
 800756a:	f7fd feef 	bl	800534c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	d022      	beq.n	80075c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	699a      	ldr	r2, [r3, #24]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	18d1      	adds	r1, r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	6978      	ldr	r0, [r7, #20]
 800758a:	f000 f8d1 	bl	8007730 <prvInsertTimerInActiveList>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01f      	beq.n	80075d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007594:	2300      	movs	r3, #0
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	2300      	movs	r3, #0
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	2100      	movs	r1, #0
 800759e:	6978      	ldr	r0, [r7, #20]
 80075a0:	f7ff ff88 	bl	80074b4 <xTimerGenericCommand>
 80075a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d113      	bne.n	80075d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	60fb      	str	r3, [r7, #12]
}
 80075be:	bf00      	nop
 80075c0:	e7fe      	b.n	80075c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075c8:	f023 0301 	bic.w	r3, r3, #1
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	6978      	ldr	r0, [r7, #20]
 80075da:	4798      	blx	r3
}
 80075dc:	bf00      	nop
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	20000c88 	.word	0x20000c88

080075e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075f0:	f107 0308 	add.w	r3, r7, #8
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 f857 	bl	80076a8 <prvGetNextExpireTime>
 80075fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	4619      	mov	r1, r3
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 f803 	bl	800760c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007606:	f000 f8d5 	bl	80077b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800760a:	e7f1      	b.n	80075f0 <prvTimerTask+0x8>

0800760c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007616:	f7ff f87f 	bl	8006718 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800761a:	f107 0308 	add.w	r3, r7, #8
 800761e:	4618      	mov	r0, r3
 8007620:	f000 f866 	bl	80076f0 <prvSampleTimeNow>
 8007624:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d130      	bne.n	800768e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10a      	bne.n	8007648 <prvProcessTimerOrBlockTask+0x3c>
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	429a      	cmp	r2, r3
 8007638:	d806      	bhi.n	8007648 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800763a:	f7ff f87b 	bl	8006734 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800763e:	68f9      	ldr	r1, [r7, #12]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7ff ff85 	bl	8007550 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007646:	e024      	b.n	8007692 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d008      	beq.n	8007660 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800764e:	4b13      	ldr	r3, [pc, #76]	; (800769c <prvProcessTimerOrBlockTask+0x90>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <prvProcessTimerOrBlockTask+0x50>
 8007658:	2301      	movs	r3, #1
 800765a:	e000      	b.n	800765e <prvProcessTimerOrBlockTask+0x52>
 800765c:	2300      	movs	r3, #0
 800765e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007660:	4b0f      	ldr	r3, [pc, #60]	; (80076a0 <prvProcessTimerOrBlockTask+0x94>)
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	4619      	mov	r1, r3
 800766e:	f7fe fde3 	bl	8006238 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007672:	f7ff f85f 	bl	8006734 <xTaskResumeAll>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10a      	bne.n	8007692 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800767c:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <prvProcessTimerOrBlockTask+0x98>)
 800767e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	f3bf 8f6f 	isb	sy
}
 800768c:	e001      	b.n	8007692 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800768e:	f7ff f851 	bl	8006734 <xTaskResumeAll>
}
 8007692:	bf00      	nop
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	20000c8c 	.word	0x20000c8c
 80076a0:	20000c90 	.word	0x20000c90
 80076a4:	e000ed04 	.word	0xe000ed04

080076a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076b0:	4b0e      	ldr	r3, [pc, #56]	; (80076ec <prvGetNextExpireTime+0x44>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <prvGetNextExpireTime+0x16>
 80076ba:	2201      	movs	r2, #1
 80076bc:	e000      	b.n	80076c0 <prvGetNextExpireTime+0x18>
 80076be:	2200      	movs	r2, #0
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d105      	bne.n	80076d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076cc:	4b07      	ldr	r3, [pc, #28]	; (80076ec <prvGetNextExpireTime+0x44>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	60fb      	str	r3, [r7, #12]
 80076d6:	e001      	b.n	80076dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80076dc:	68fb      	ldr	r3, [r7, #12]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	20000c88 	.word	0x20000c88

080076f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80076f8:	f7ff f8ba 	bl	8006870 <xTaskGetTickCount>
 80076fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80076fe:	4b0b      	ldr	r3, [pc, #44]	; (800772c <prvSampleTimeNow+0x3c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	429a      	cmp	r2, r3
 8007706:	d205      	bcs.n	8007714 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007708:	f000 f936 	bl	8007978 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	e002      	b.n	800771a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800771a:	4a04      	ldr	r2, [pc, #16]	; (800772c <prvSampleTimeNow+0x3c>)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007720:	68fb      	ldr	r3, [r7, #12]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20000c98 	.word	0x20000c98

08007730 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800773e:	2300      	movs	r3, #0
 8007740:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	429a      	cmp	r2, r3
 8007754:	d812      	bhi.n	800777c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	1ad2      	subs	r2, r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	429a      	cmp	r2, r3
 8007762:	d302      	bcc.n	800776a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007764:	2301      	movs	r3, #1
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	e01b      	b.n	80077a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800776a:	4b10      	ldr	r3, [pc, #64]	; (80077ac <prvInsertTimerInActiveList+0x7c>)
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3304      	adds	r3, #4
 8007772:	4619      	mov	r1, r3
 8007774:	4610      	mov	r0, r2
 8007776:	f7fd fdb0 	bl	80052da <vListInsert>
 800777a:	e012      	b.n	80077a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	429a      	cmp	r2, r3
 8007782:	d206      	bcs.n	8007792 <prvInsertTimerInActiveList+0x62>
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	429a      	cmp	r2, r3
 800778a:	d302      	bcc.n	8007792 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800778c:	2301      	movs	r3, #1
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	e007      	b.n	80077a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007792:	4b07      	ldr	r3, [pc, #28]	; (80077b0 <prvInsertTimerInActiveList+0x80>)
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3304      	adds	r3, #4
 800779a:	4619      	mov	r1, r3
 800779c:	4610      	mov	r0, r2
 800779e:	f7fd fd9c 	bl	80052da <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077a2:	697b      	ldr	r3, [r7, #20]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	20000c8c 	.word	0x20000c8c
 80077b0:	20000c88 	.word	0x20000c88

080077b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08e      	sub	sp, #56	; 0x38
 80077b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077ba:	e0ca      	b.n	8007952 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	da18      	bge.n	80077f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80077c2:	1d3b      	adds	r3, r7, #4
 80077c4:	3304      	adds	r3, #4
 80077c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	61fb      	str	r3, [r7, #28]
}
 80077e0:	bf00      	nop
 80077e2:	e7fe      	b.n	80077e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80077e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ea:	6850      	ldr	r0, [r2, #4]
 80077ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ee:	6892      	ldr	r2, [r2, #8]
 80077f0:	4611      	mov	r1, r2
 80077f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f2c0 80aa 	blt.w	8007950 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d004      	beq.n	8007812 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780a:	3304      	adds	r3, #4
 800780c:	4618      	mov	r0, r3
 800780e:	f7fd fd9d 	bl	800534c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007812:	463b      	mov	r3, r7
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff ff6b 	bl	80076f0 <prvSampleTimeNow>
 800781a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b09      	cmp	r3, #9
 8007820:	f200 8097 	bhi.w	8007952 <prvProcessReceivedCommands+0x19e>
 8007824:	a201      	add	r2, pc, #4	; (adr r2, 800782c <prvProcessReceivedCommands+0x78>)
 8007826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782a:	bf00      	nop
 800782c:	08007855 	.word	0x08007855
 8007830:	08007855 	.word	0x08007855
 8007834:	08007855 	.word	0x08007855
 8007838:	080078c9 	.word	0x080078c9
 800783c:	080078dd 	.word	0x080078dd
 8007840:	08007927 	.word	0x08007927
 8007844:	08007855 	.word	0x08007855
 8007848:	08007855 	.word	0x08007855
 800784c:	080078c9 	.word	0x080078c9
 8007850:	080078dd 	.word	0x080078dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800785a:	f043 0301 	orr.w	r3, r3, #1
 800785e:	b2da      	uxtb	r2, r3
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	18d1      	adds	r1, r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007874:	f7ff ff5c 	bl	8007730 <prvInsertTimerInActiveList>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d069      	beq.n	8007952 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800787e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007884:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b00      	cmp	r3, #0
 8007892:	d05e      	beq.n	8007952 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	441a      	add	r2, r3
 800789c:	2300      	movs	r3, #0
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	2300      	movs	r3, #0
 80078a2:	2100      	movs	r1, #0
 80078a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078a6:	f7ff fe05 	bl	80074b4 <xTimerGenericCommand>
 80078aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d14f      	bne.n	8007952 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	61bb      	str	r3, [r7, #24]
}
 80078c4:	bf00      	nop
 80078c6:	e7fe      	b.n	80078c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078ce:	f023 0301 	bic.w	r3, r3, #1
 80078d2:	b2da      	uxtb	r2, r3
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80078da:	e03a      	b.n	8007952 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078e2:	f043 0301 	orr.w	r3, r3, #1
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10a      	bne.n	8007912 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80078fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	617b      	str	r3, [r7, #20]
}
 800790e:	bf00      	nop
 8007910:	e7fe      	b.n	8007910 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007914:	699a      	ldr	r2, [r3, #24]
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	18d1      	adds	r1, r2, r3
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800791e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007920:	f7ff ff06 	bl	8007730 <prvInsertTimerInActiveList>
					break;
 8007924:	e015      	b.n	8007952 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d103      	bne.n	800793c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007936:	f000 fbfb 	bl	8008130 <vPortFree>
 800793a:	e00a      	b.n	8007952 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007942:	f023 0301 	bic.w	r3, r3, #1
 8007946:	b2da      	uxtb	r2, r3
 8007948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800794e:	e000      	b.n	8007952 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007950:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007952:	4b08      	ldr	r3, [pc, #32]	; (8007974 <prvProcessReceivedCommands+0x1c0>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	1d39      	adds	r1, r7, #4
 8007958:	2200      	movs	r2, #0
 800795a:	4618      	mov	r0, r3
 800795c:	f7fe f8ae 	bl	8005abc <xQueueReceive>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	f47f af2a 	bne.w	80077bc <prvProcessReceivedCommands+0x8>
	}
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	3730      	adds	r7, #48	; 0x30
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000c90 	.word	0x20000c90

08007978 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800797e:	e048      	b.n	8007a12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007980:	4b2d      	ldr	r3, [pc, #180]	; (8007a38 <prvSwitchTimerLists+0xc0>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800798a:	4b2b      	ldr	r3, [pc, #172]	; (8007a38 <prvSwitchTimerLists+0xc0>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3304      	adds	r3, #4
 8007998:	4618      	mov	r0, r3
 800799a:	f7fd fcd7 	bl	800534c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d02e      	beq.n	8007a12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	4413      	add	r3, r2
 80079bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d90e      	bls.n	80079e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079d2:	4b19      	ldr	r3, [pc, #100]	; (8007a38 <prvSwitchTimerLists+0xc0>)
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3304      	adds	r3, #4
 80079da:	4619      	mov	r1, r3
 80079dc:	4610      	mov	r0, r2
 80079de:	f7fd fc7c 	bl	80052da <vListInsert>
 80079e2:	e016      	b.n	8007a12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079e4:	2300      	movs	r3, #0
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	2300      	movs	r3, #0
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	2100      	movs	r1, #0
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f7ff fd60 	bl	80074b4 <xTimerGenericCommand>
 80079f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	603b      	str	r3, [r7, #0]
}
 8007a0e:	bf00      	nop
 8007a10:	e7fe      	b.n	8007a10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a12:	4b09      	ldr	r3, [pc, #36]	; (8007a38 <prvSwitchTimerLists+0xc0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1b1      	bne.n	8007980 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a1c:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <prvSwitchTimerLists+0xc0>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a22:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <prvSwitchTimerLists+0xc4>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a04      	ldr	r2, [pc, #16]	; (8007a38 <prvSwitchTimerLists+0xc0>)
 8007a28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a2a:	4a04      	ldr	r2, [pc, #16]	; (8007a3c <prvSwitchTimerLists+0xc4>)
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	6013      	str	r3, [r2, #0]
}
 8007a30:	bf00      	nop
 8007a32:	3718      	adds	r7, #24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	20000c88 	.word	0x20000c88
 8007a3c:	20000c8c 	.word	0x20000c8c

08007a40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a46:	f000 f985 	bl	8007d54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a4a:	4b15      	ldr	r3, [pc, #84]	; (8007aa0 <prvCheckForValidListAndQueue+0x60>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d120      	bne.n	8007a94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a52:	4814      	ldr	r0, [pc, #80]	; (8007aa4 <prvCheckForValidListAndQueue+0x64>)
 8007a54:	f7fd fbf0 	bl	8005238 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a58:	4813      	ldr	r0, [pc, #76]	; (8007aa8 <prvCheckForValidListAndQueue+0x68>)
 8007a5a:	f7fd fbed 	bl	8005238 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a5e:	4b13      	ldr	r3, [pc, #76]	; (8007aac <prvCheckForValidListAndQueue+0x6c>)
 8007a60:	4a10      	ldr	r2, [pc, #64]	; (8007aa4 <prvCheckForValidListAndQueue+0x64>)
 8007a62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a64:	4b12      	ldr	r3, [pc, #72]	; (8007ab0 <prvCheckForValidListAndQueue+0x70>)
 8007a66:	4a10      	ldr	r2, [pc, #64]	; (8007aa8 <prvCheckForValidListAndQueue+0x68>)
 8007a68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	4b11      	ldr	r3, [pc, #68]	; (8007ab4 <prvCheckForValidListAndQueue+0x74>)
 8007a70:	4a11      	ldr	r2, [pc, #68]	; (8007ab8 <prvCheckForValidListAndQueue+0x78>)
 8007a72:	2110      	movs	r1, #16
 8007a74:	200a      	movs	r0, #10
 8007a76:	f7fd fcfb 	bl	8005470 <xQueueGenericCreateStatic>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	4a08      	ldr	r2, [pc, #32]	; (8007aa0 <prvCheckForValidListAndQueue+0x60>)
 8007a7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a80:	4b07      	ldr	r3, [pc, #28]	; (8007aa0 <prvCheckForValidListAndQueue+0x60>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d005      	beq.n	8007a94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a88:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <prvCheckForValidListAndQueue+0x60>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	490b      	ldr	r1, [pc, #44]	; (8007abc <prvCheckForValidListAndQueue+0x7c>)
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fe fba8 	bl	80061e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a94:	f000 f98e 	bl	8007db4 <vPortExitCritical>
}
 8007a98:	bf00      	nop
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000c90 	.word	0x20000c90
 8007aa4:	20000c60 	.word	0x20000c60
 8007aa8:	20000c74 	.word	0x20000c74
 8007aac:	20000c88 	.word	0x20000c88
 8007ab0:	20000c8c 	.word	0x20000c8c
 8007ab4:	20000d3c 	.word	0x20000d3c
 8007ab8:	20000c9c 	.word	0x20000c9c
 8007abc:	080099e8 	.word	0x080099e8

08007ac0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08a      	sub	sp, #40	; 0x28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
 8007acc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007ace:	f06f 0301 	mvn.w	r3, #1
 8007ad2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ae0:	4b06      	ldr	r3, [pc, #24]	; (8007afc <xTimerPendFunctionCallFromISR+0x3c>)
 8007ae2:	6818      	ldr	r0, [r3, #0]
 8007ae4:	f107 0114 	add.w	r1, r7, #20
 8007ae8:	2300      	movs	r3, #0
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	f7fd ff4a 	bl	8005984 <xQueueGenericSendFromISR>
 8007af0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3728      	adds	r7, #40	; 0x28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	20000c90 	.word	0x20000c90

08007b00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3b04      	subs	r3, #4
 8007b10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3b04      	subs	r3, #4
 8007b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f023 0201 	bic.w	r2, r3, #1
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3b04      	subs	r3, #4
 8007b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b30:	4a0c      	ldr	r2, [pc, #48]	; (8007b64 <pxPortInitialiseStack+0x64>)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3b14      	subs	r3, #20
 8007b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3b04      	subs	r3, #4
 8007b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f06f 0202 	mvn.w	r2, #2
 8007b4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3b20      	subs	r3, #32
 8007b54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b56:	68fb      	ldr	r3, [r7, #12]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	08007b69 	.word	0x08007b69

08007b68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b72:	4b12      	ldr	r3, [pc, #72]	; (8007bbc <prvTaskExitError+0x54>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7a:	d00a      	beq.n	8007b92 <prvTaskExitError+0x2a>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	60fb      	str	r3, [r7, #12]
}
 8007b8e:	bf00      	nop
 8007b90:	e7fe      	b.n	8007b90 <prvTaskExitError+0x28>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	60bb      	str	r3, [r7, #8]
}
 8007ba4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ba6:	bf00      	nop
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d0fc      	beq.n	8007ba8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bae:	bf00      	nop
 8007bb0:	bf00      	nop
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	20000014 	.word	0x20000014

08007bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007bc0:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <pxCurrentTCBConst2>)
 8007bc2:	6819      	ldr	r1, [r3, #0]
 8007bc4:	6808      	ldr	r0, [r1, #0]
 8007bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bca:	f380 8809 	msr	PSP, r0
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f04f 0000 	mov.w	r0, #0
 8007bd6:	f380 8811 	msr	BASEPRI, r0
 8007bda:	4770      	bx	lr
 8007bdc:	f3af 8000 	nop.w

08007be0 <pxCurrentTCBConst2>:
 8007be0:	20000760 	.word	0x20000760
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007be4:	bf00      	nop
 8007be6:	bf00      	nop

08007be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007be8:	4808      	ldr	r0, [pc, #32]	; (8007c0c <prvPortStartFirstTask+0x24>)
 8007bea:	6800      	ldr	r0, [r0, #0]
 8007bec:	6800      	ldr	r0, [r0, #0]
 8007bee:	f380 8808 	msr	MSP, r0
 8007bf2:	f04f 0000 	mov.w	r0, #0
 8007bf6:	f380 8814 	msr	CONTROL, r0
 8007bfa:	b662      	cpsie	i
 8007bfc:	b661      	cpsie	f
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	df00      	svc	0
 8007c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c0a:	bf00      	nop
 8007c0c:	e000ed08 	.word	0xe000ed08

08007c10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c16:	4b46      	ldr	r3, [pc, #280]	; (8007d30 <xPortStartScheduler+0x120>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a46      	ldr	r2, [pc, #280]	; (8007d34 <xPortStartScheduler+0x124>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d10a      	bne.n	8007c36 <xPortStartScheduler+0x26>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	613b      	str	r3, [r7, #16]
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c36:	4b3e      	ldr	r3, [pc, #248]	; (8007d30 <xPortStartScheduler+0x120>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a3f      	ldr	r2, [pc, #252]	; (8007d38 <xPortStartScheduler+0x128>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d10a      	bne.n	8007c56 <xPortStartScheduler+0x46>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	60fb      	str	r3, [r7, #12]
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c56:	4b39      	ldr	r3, [pc, #228]	; (8007d3c <xPortStartScheduler+0x12c>)
 8007c58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	22ff      	movs	r2, #255	; 0xff
 8007c66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c78:	b2da      	uxtb	r2, r3
 8007c7a:	4b31      	ldr	r3, [pc, #196]	; (8007d40 <xPortStartScheduler+0x130>)
 8007c7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c7e:	4b31      	ldr	r3, [pc, #196]	; (8007d44 <xPortStartScheduler+0x134>)
 8007c80:	2207      	movs	r2, #7
 8007c82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c84:	e009      	b.n	8007c9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c86:	4b2f      	ldr	r3, [pc, #188]	; (8007d44 <xPortStartScheduler+0x134>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	4a2d      	ldr	r2, [pc, #180]	; (8007d44 <xPortStartScheduler+0x134>)
 8007c8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c9a:	78fb      	ldrb	r3, [r7, #3]
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca2:	2b80      	cmp	r3, #128	; 0x80
 8007ca4:	d0ef      	beq.n	8007c86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ca6:	4b27      	ldr	r3, [pc, #156]	; (8007d44 <xPortStartScheduler+0x134>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f1c3 0307 	rsb	r3, r3, #7
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d00a      	beq.n	8007cc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	60bb      	str	r3, [r7, #8]
}
 8007cc4:	bf00      	nop
 8007cc6:	e7fe      	b.n	8007cc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cc8:	4b1e      	ldr	r3, [pc, #120]	; (8007d44 <xPortStartScheduler+0x134>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	021b      	lsls	r3, r3, #8
 8007cce:	4a1d      	ldr	r2, [pc, #116]	; (8007d44 <xPortStartScheduler+0x134>)
 8007cd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cd2:	4b1c      	ldr	r3, [pc, #112]	; (8007d44 <xPortStartScheduler+0x134>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cda:	4a1a      	ldr	r2, [pc, #104]	; (8007d44 <xPortStartScheduler+0x134>)
 8007cdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ce6:	4b18      	ldr	r3, [pc, #96]	; (8007d48 <xPortStartScheduler+0x138>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a17      	ldr	r2, [pc, #92]	; (8007d48 <xPortStartScheduler+0x138>)
 8007cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cf2:	4b15      	ldr	r3, [pc, #84]	; (8007d48 <xPortStartScheduler+0x138>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a14      	ldr	r2, [pc, #80]	; (8007d48 <xPortStartScheduler+0x138>)
 8007cf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007cfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cfe:	f000 f8dd 	bl	8007ebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d02:	4b12      	ldr	r3, [pc, #72]	; (8007d4c <xPortStartScheduler+0x13c>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d08:	f000 f8fc 	bl	8007f04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d0c:	4b10      	ldr	r3, [pc, #64]	; (8007d50 <xPortStartScheduler+0x140>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a0f      	ldr	r2, [pc, #60]	; (8007d50 <xPortStartScheduler+0x140>)
 8007d12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d18:	f7ff ff66 	bl	8007be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d1c:	f7fe fe72 	bl	8006a04 <vTaskSwitchContext>
	prvTaskExitError();
 8007d20:	f7ff ff22 	bl	8007b68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	e000ed00 	.word	0xe000ed00
 8007d34:	410fc271 	.word	0x410fc271
 8007d38:	410fc270 	.word	0x410fc270
 8007d3c:	e000e400 	.word	0xe000e400
 8007d40:	20000d8c 	.word	0x20000d8c
 8007d44:	20000d90 	.word	0x20000d90
 8007d48:	e000ed20 	.word	0xe000ed20
 8007d4c:	20000014 	.word	0x20000014
 8007d50:	e000ef34 	.word	0xe000ef34

08007d54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	607b      	str	r3, [r7, #4]
}
 8007d6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d6e:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <vPortEnterCritical+0x58>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3301      	adds	r3, #1
 8007d74:	4a0d      	ldr	r2, [pc, #52]	; (8007dac <vPortEnterCritical+0x58>)
 8007d76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d78:	4b0c      	ldr	r3, [pc, #48]	; (8007dac <vPortEnterCritical+0x58>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d10f      	bne.n	8007da0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d80:	4b0b      	ldr	r3, [pc, #44]	; (8007db0 <vPortEnterCritical+0x5c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	603b      	str	r3, [r7, #0]
}
 8007d9c:	bf00      	nop
 8007d9e:	e7fe      	b.n	8007d9e <vPortEnterCritical+0x4a>
	}
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	20000014 	.word	0x20000014
 8007db0:	e000ed04 	.word	0xe000ed04

08007db4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dba:	4b12      	ldr	r3, [pc, #72]	; (8007e04 <vPortExitCritical+0x50>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10a      	bne.n	8007dd8 <vPortExitCritical+0x24>
	__asm volatile
 8007dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	607b      	str	r3, [r7, #4]
}
 8007dd4:	bf00      	nop
 8007dd6:	e7fe      	b.n	8007dd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007dd8:	4b0a      	ldr	r3, [pc, #40]	; (8007e04 <vPortExitCritical+0x50>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	4a09      	ldr	r2, [pc, #36]	; (8007e04 <vPortExitCritical+0x50>)
 8007de0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007de2:	4b08      	ldr	r3, [pc, #32]	; (8007e04 <vPortExitCritical+0x50>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d105      	bne.n	8007df6 <vPortExitCritical+0x42>
 8007dea:	2300      	movs	r3, #0
 8007dec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	f383 8811 	msr	BASEPRI, r3
}
 8007df4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007df6:	bf00      	nop
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	20000014 	.word	0x20000014
	...

08007e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e10:	f3ef 8009 	mrs	r0, PSP
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	4b15      	ldr	r3, [pc, #84]	; (8007e70 <pxCurrentTCBConst>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	f01e 0f10 	tst.w	lr, #16
 8007e20:	bf08      	it	eq
 8007e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2a:	6010      	str	r0, [r2, #0]
 8007e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e34:	f380 8811 	msr	BASEPRI, r0
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f7fe fde0 	bl	8006a04 <vTaskSwitchContext>
 8007e44:	f04f 0000 	mov.w	r0, #0
 8007e48:	f380 8811 	msr	BASEPRI, r0
 8007e4c:	bc09      	pop	{r0, r3}
 8007e4e:	6819      	ldr	r1, [r3, #0]
 8007e50:	6808      	ldr	r0, [r1, #0]
 8007e52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e56:	f01e 0f10 	tst.w	lr, #16
 8007e5a:	bf08      	it	eq
 8007e5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e60:	f380 8809 	msr	PSP, r0
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	f3af 8000 	nop.w

08007e70 <pxCurrentTCBConst>:
 8007e70:	20000760 	.word	0x20000760
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e74:	bf00      	nop
 8007e76:	bf00      	nop

08007e78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	607b      	str	r3, [r7, #4]
}
 8007e90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e92:	f7fe fcfd 	bl	8006890 <xTaskIncrementTick>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d003      	beq.n	8007ea4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e9c:	4b06      	ldr	r3, [pc, #24]	; (8007eb8 <xPortSysTickHandler+0x40>)
 8007e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	f383 8811 	msr	BASEPRI, r3
}
 8007eae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007eb0:	bf00      	nop
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	e000ed04 	.word	0xe000ed04

08007ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ec0:	4b0b      	ldr	r3, [pc, #44]	; (8007ef0 <vPortSetupTimerInterrupt+0x34>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ec6:	4b0b      	ldr	r3, [pc, #44]	; (8007ef4 <vPortSetupTimerInterrupt+0x38>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ecc:	4b0a      	ldr	r3, [pc, #40]	; (8007ef8 <vPortSetupTimerInterrupt+0x3c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a0a      	ldr	r2, [pc, #40]	; (8007efc <vPortSetupTimerInterrupt+0x40>)
 8007ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed6:	099b      	lsrs	r3, r3, #6
 8007ed8:	4a09      	ldr	r2, [pc, #36]	; (8007f00 <vPortSetupTimerInterrupt+0x44>)
 8007eda:	3b01      	subs	r3, #1
 8007edc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ede:	4b04      	ldr	r3, [pc, #16]	; (8007ef0 <vPortSetupTimerInterrupt+0x34>)
 8007ee0:	2207      	movs	r2, #7
 8007ee2:	601a      	str	r2, [r3, #0]
}
 8007ee4:	bf00      	nop
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	e000e010 	.word	0xe000e010
 8007ef4:	e000e018 	.word	0xe000e018
 8007ef8:	20000008 	.word	0x20000008
 8007efc:	10624dd3 	.word	0x10624dd3
 8007f00:	e000e014 	.word	0xe000e014

08007f04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f14 <vPortEnableVFP+0x10>
 8007f08:	6801      	ldr	r1, [r0, #0]
 8007f0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f0e:	6001      	str	r1, [r0, #0]
 8007f10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f12:	bf00      	nop
 8007f14:	e000ed88 	.word	0xe000ed88

08007f18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f1e:	f3ef 8305 	mrs	r3, IPSR
 8007f22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b0f      	cmp	r3, #15
 8007f28:	d914      	bls.n	8007f54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f2a:	4a17      	ldr	r2, [pc, #92]	; (8007f88 <vPortValidateInterruptPriority+0x70>)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f34:	4b15      	ldr	r3, [pc, #84]	; (8007f8c <vPortValidateInterruptPriority+0x74>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	7afa      	ldrb	r2, [r7, #11]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d20a      	bcs.n	8007f54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	607b      	str	r3, [r7, #4]
}
 8007f50:	bf00      	nop
 8007f52:	e7fe      	b.n	8007f52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f54:	4b0e      	ldr	r3, [pc, #56]	; (8007f90 <vPortValidateInterruptPriority+0x78>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f5c:	4b0d      	ldr	r3, [pc, #52]	; (8007f94 <vPortValidateInterruptPriority+0x7c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d90a      	bls.n	8007f7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	603b      	str	r3, [r7, #0]
}
 8007f76:	bf00      	nop
 8007f78:	e7fe      	b.n	8007f78 <vPortValidateInterruptPriority+0x60>
	}
 8007f7a:	bf00      	nop
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	e000e3f0 	.word	0xe000e3f0
 8007f8c:	20000d8c 	.word	0x20000d8c
 8007f90:	e000ed0c 	.word	0xe000ed0c
 8007f94:	20000d90 	.word	0x20000d90

08007f98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08a      	sub	sp, #40	; 0x28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fa4:	f7fe fbb8 	bl	8006718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fa8:	4b5b      	ldr	r3, [pc, #364]	; (8008118 <pvPortMalloc+0x180>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fb0:	f000 f920 	bl	80081f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fb4:	4b59      	ldr	r3, [pc, #356]	; (800811c <pvPortMalloc+0x184>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f040 8093 	bne.w	80080e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d01d      	beq.n	8008004 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007fc8:	2208      	movs	r2, #8
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4413      	add	r3, r2
 8007fce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f003 0307 	and.w	r3, r3, #7
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d014      	beq.n	8008004 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f023 0307 	bic.w	r3, r3, #7
 8007fe0:	3308      	adds	r3, #8
 8007fe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <pvPortMalloc+0x6c>
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	617b      	str	r3, [r7, #20]
}
 8008000:	bf00      	nop
 8008002:	e7fe      	b.n	8008002 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d06e      	beq.n	80080e8 <pvPortMalloc+0x150>
 800800a:	4b45      	ldr	r3, [pc, #276]	; (8008120 <pvPortMalloc+0x188>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	429a      	cmp	r2, r3
 8008012:	d869      	bhi.n	80080e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008014:	4b43      	ldr	r3, [pc, #268]	; (8008124 <pvPortMalloc+0x18c>)
 8008016:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008018:	4b42      	ldr	r3, [pc, #264]	; (8008124 <pvPortMalloc+0x18c>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800801e:	e004      	b.n	800802a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	429a      	cmp	r2, r3
 8008032:	d903      	bls.n	800803c <pvPortMalloc+0xa4>
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1f1      	bne.n	8008020 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800803c:	4b36      	ldr	r3, [pc, #216]	; (8008118 <pvPortMalloc+0x180>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008042:	429a      	cmp	r2, r3
 8008044:	d050      	beq.n	80080e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2208      	movs	r2, #8
 800804c:	4413      	add	r3, r2
 800804e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	1ad2      	subs	r2, r2, r3
 8008060:	2308      	movs	r3, #8
 8008062:	005b      	lsls	r3, r3, #1
 8008064:	429a      	cmp	r2, r3
 8008066:	d91f      	bls.n	80080a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4413      	add	r3, r2
 800806e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	f003 0307 	and.w	r3, r3, #7
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00a      	beq.n	8008090 <pvPortMalloc+0xf8>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	613b      	str	r3, [r7, #16]
}
 800808c:	bf00      	nop
 800808e:	e7fe      	b.n	800808e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	1ad2      	subs	r2, r2, r3
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080a2:	69b8      	ldr	r0, [r7, #24]
 80080a4:	f000 f908 	bl	80082b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080a8:	4b1d      	ldr	r3, [pc, #116]	; (8008120 <pvPortMalloc+0x188>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	4a1b      	ldr	r2, [pc, #108]	; (8008120 <pvPortMalloc+0x188>)
 80080b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080b6:	4b1a      	ldr	r3, [pc, #104]	; (8008120 <pvPortMalloc+0x188>)
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	4b1b      	ldr	r3, [pc, #108]	; (8008128 <pvPortMalloc+0x190>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d203      	bcs.n	80080ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080c2:	4b17      	ldr	r3, [pc, #92]	; (8008120 <pvPortMalloc+0x188>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a18      	ldr	r2, [pc, #96]	; (8008128 <pvPortMalloc+0x190>)
 80080c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	4b13      	ldr	r3, [pc, #76]	; (800811c <pvPortMalloc+0x184>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	431a      	orrs	r2, r3
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80080de:	4b13      	ldr	r3, [pc, #76]	; (800812c <pvPortMalloc+0x194>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3301      	adds	r3, #1
 80080e4:	4a11      	ldr	r2, [pc, #68]	; (800812c <pvPortMalloc+0x194>)
 80080e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080e8:	f7fe fb24 	bl	8006734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	f003 0307 	and.w	r3, r3, #7
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <pvPortMalloc+0x174>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	60fb      	str	r3, [r7, #12]
}
 8008108:	bf00      	nop
 800810a:	e7fe      	b.n	800810a <pvPortMalloc+0x172>
	return pvReturn;
 800810c:	69fb      	ldr	r3, [r7, #28]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3728      	adds	r7, #40	; 0x28
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	2000499c 	.word	0x2000499c
 800811c:	200049b0 	.word	0x200049b0
 8008120:	200049a0 	.word	0x200049a0
 8008124:	20004994 	.word	0x20004994
 8008128:	200049a4 	.word	0x200049a4
 800812c:	200049a8 	.word	0x200049a8

08008130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d04d      	beq.n	80081de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008142:	2308      	movs	r3, #8
 8008144:	425b      	negs	r3, r3
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	4413      	add	r3, r2
 800814a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	4b24      	ldr	r3, [pc, #144]	; (80081e8 <vPortFree+0xb8>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4013      	ands	r3, r2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10a      	bne.n	8008174 <vPortFree+0x44>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	60fb      	str	r3, [r7, #12]
}
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00a      	beq.n	8008192 <vPortFree+0x62>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	60bb      	str	r3, [r7, #8]
}
 800818e:	bf00      	nop
 8008190:	e7fe      	b.n	8008190 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	4b14      	ldr	r3, [pc, #80]	; (80081e8 <vPortFree+0xb8>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4013      	ands	r3, r2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d01e      	beq.n	80081de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d11a      	bne.n	80081de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	4b0e      	ldr	r3, [pc, #56]	; (80081e8 <vPortFree+0xb8>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	43db      	mvns	r3, r3
 80081b2:	401a      	ands	r2, r3
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081b8:	f7fe faae 	bl	8006718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	4b0a      	ldr	r3, [pc, #40]	; (80081ec <vPortFree+0xbc>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4413      	add	r3, r2
 80081c6:	4a09      	ldr	r2, [pc, #36]	; (80081ec <vPortFree+0xbc>)
 80081c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081ca:	6938      	ldr	r0, [r7, #16]
 80081cc:	f000 f874 	bl	80082b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80081d0:	4b07      	ldr	r3, [pc, #28]	; (80081f0 <vPortFree+0xc0>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3301      	adds	r3, #1
 80081d6:	4a06      	ldr	r2, [pc, #24]	; (80081f0 <vPortFree+0xc0>)
 80081d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80081da:	f7fe faab 	bl	8006734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081de:	bf00      	nop
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	200049b0 	.word	0x200049b0
 80081ec:	200049a0 	.word	0x200049a0
 80081f0:	200049ac 	.word	0x200049ac

080081f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80081fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008200:	4b27      	ldr	r3, [pc, #156]	; (80082a0 <prvHeapInit+0xac>)
 8008202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f003 0307 	and.w	r3, r3, #7
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00c      	beq.n	8008228 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3307      	adds	r3, #7
 8008212:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f023 0307 	bic.w	r3, r3, #7
 800821a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	4a1f      	ldr	r2, [pc, #124]	; (80082a0 <prvHeapInit+0xac>)
 8008224:	4413      	add	r3, r2
 8008226:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800822c:	4a1d      	ldr	r2, [pc, #116]	; (80082a4 <prvHeapInit+0xb0>)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008232:	4b1c      	ldr	r3, [pc, #112]	; (80082a4 <prvHeapInit+0xb0>)
 8008234:	2200      	movs	r2, #0
 8008236:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	4413      	add	r3, r2
 800823e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008240:	2208      	movs	r2, #8
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	1a9b      	subs	r3, r3, r2
 8008246:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 0307 	bic.w	r3, r3, #7
 800824e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	4a15      	ldr	r2, [pc, #84]	; (80082a8 <prvHeapInit+0xb4>)
 8008254:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008256:	4b14      	ldr	r3, [pc, #80]	; (80082a8 <prvHeapInit+0xb4>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2200      	movs	r2, #0
 800825c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800825e:	4b12      	ldr	r3, [pc, #72]	; (80082a8 <prvHeapInit+0xb4>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	1ad2      	subs	r2, r2, r3
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008274:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <prvHeapInit+0xb4>)
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	4a0a      	ldr	r2, [pc, #40]	; (80082ac <prvHeapInit+0xb8>)
 8008282:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	4a09      	ldr	r2, [pc, #36]	; (80082b0 <prvHeapInit+0xbc>)
 800828a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800828c:	4b09      	ldr	r3, [pc, #36]	; (80082b4 <prvHeapInit+0xc0>)
 800828e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008292:	601a      	str	r2, [r3, #0]
}
 8008294:	bf00      	nop
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	20000d94 	.word	0x20000d94
 80082a4:	20004994 	.word	0x20004994
 80082a8:	2000499c 	.word	0x2000499c
 80082ac:	200049a4 	.word	0x200049a4
 80082b0:	200049a0 	.word	0x200049a0
 80082b4:	200049b0 	.word	0x200049b0

080082b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082c0:	4b28      	ldr	r3, [pc, #160]	; (8008364 <prvInsertBlockIntoFreeList+0xac>)
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	e002      	b.n	80082cc <prvInsertBlockIntoFreeList+0x14>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d8f7      	bhi.n	80082c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	4413      	add	r3, r2
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d108      	bne.n	80082fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	441a      	add	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	441a      	add	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	429a      	cmp	r2, r3
 800830c:	d118      	bne.n	8008340 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	4b15      	ldr	r3, [pc, #84]	; (8008368 <prvInsertBlockIntoFreeList+0xb0>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	429a      	cmp	r2, r3
 8008318:	d00d      	beq.n	8008336 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	441a      	add	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	e008      	b.n	8008348 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008336:	4b0c      	ldr	r3, [pc, #48]	; (8008368 <prvInsertBlockIntoFreeList+0xb0>)
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	e003      	b.n	8008348 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	429a      	cmp	r2, r3
 800834e:	d002      	beq.n	8008356 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008356:	bf00      	nop
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	20004994 	.word	0x20004994
 8008368:	2000499c 	.word	0x2000499c

0800836c <__errno>:
 800836c:	4b01      	ldr	r3, [pc, #4]	; (8008374 <__errno+0x8>)
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000018 	.word	0x20000018

08008378 <__libc_init_array>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	4d0d      	ldr	r5, [pc, #52]	; (80083b0 <__libc_init_array+0x38>)
 800837c:	4c0d      	ldr	r4, [pc, #52]	; (80083b4 <__libc_init_array+0x3c>)
 800837e:	1b64      	subs	r4, r4, r5
 8008380:	10a4      	asrs	r4, r4, #2
 8008382:	2600      	movs	r6, #0
 8008384:	42a6      	cmp	r6, r4
 8008386:	d109      	bne.n	800839c <__libc_init_array+0x24>
 8008388:	4d0b      	ldr	r5, [pc, #44]	; (80083b8 <__libc_init_array+0x40>)
 800838a:	4c0c      	ldr	r4, [pc, #48]	; (80083bc <__libc_init_array+0x44>)
 800838c:	f001 f9f4 	bl	8009778 <_init>
 8008390:	1b64      	subs	r4, r4, r5
 8008392:	10a4      	asrs	r4, r4, #2
 8008394:	2600      	movs	r6, #0
 8008396:	42a6      	cmp	r6, r4
 8008398:	d105      	bne.n	80083a6 <__libc_init_array+0x2e>
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a0:	4798      	blx	r3
 80083a2:	3601      	adds	r6, #1
 80083a4:	e7ee      	b.n	8008384 <__libc_init_array+0xc>
 80083a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083aa:	4798      	blx	r3
 80083ac:	3601      	adds	r6, #1
 80083ae:	e7f2      	b.n	8008396 <__libc_init_array+0x1e>
 80083b0:	08009ca4 	.word	0x08009ca4
 80083b4:	08009ca4 	.word	0x08009ca4
 80083b8:	08009ca4 	.word	0x08009ca4
 80083bc:	08009ca8 	.word	0x08009ca8

080083c0 <memcpy>:
 80083c0:	440a      	add	r2, r1
 80083c2:	4291      	cmp	r1, r2
 80083c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083c8:	d100      	bne.n	80083cc <memcpy+0xc>
 80083ca:	4770      	bx	lr
 80083cc:	b510      	push	{r4, lr}
 80083ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083d6:	4291      	cmp	r1, r2
 80083d8:	d1f9      	bne.n	80083ce <memcpy+0xe>
 80083da:	bd10      	pop	{r4, pc}

080083dc <memset>:
 80083dc:	4402      	add	r2, r0
 80083de:	4603      	mov	r3, r0
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d100      	bne.n	80083e6 <memset+0xa>
 80083e4:	4770      	bx	lr
 80083e6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ea:	e7f9      	b.n	80083e0 <memset+0x4>

080083ec <rand>:
 80083ec:	4b17      	ldr	r3, [pc, #92]	; (800844c <rand+0x60>)
 80083ee:	b510      	push	{r4, lr}
 80083f0:	681c      	ldr	r4, [r3, #0]
 80083f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80083f4:	b9b3      	cbnz	r3, 8008424 <rand+0x38>
 80083f6:	2018      	movs	r0, #24
 80083f8:	f000 f888 	bl	800850c <malloc>
 80083fc:	63a0      	str	r0, [r4, #56]	; 0x38
 80083fe:	b928      	cbnz	r0, 800840c <rand+0x20>
 8008400:	4602      	mov	r2, r0
 8008402:	4b13      	ldr	r3, [pc, #76]	; (8008450 <rand+0x64>)
 8008404:	4813      	ldr	r0, [pc, #76]	; (8008454 <rand+0x68>)
 8008406:	214e      	movs	r1, #78	; 0x4e
 8008408:	f000 f850 	bl	80084ac <__assert_func>
 800840c:	4a12      	ldr	r2, [pc, #72]	; (8008458 <rand+0x6c>)
 800840e:	4b13      	ldr	r3, [pc, #76]	; (800845c <rand+0x70>)
 8008410:	e9c0 2300 	strd	r2, r3, [r0]
 8008414:	4b12      	ldr	r3, [pc, #72]	; (8008460 <rand+0x74>)
 8008416:	6083      	str	r3, [r0, #8]
 8008418:	230b      	movs	r3, #11
 800841a:	8183      	strh	r3, [r0, #12]
 800841c:	2201      	movs	r2, #1
 800841e:	2300      	movs	r3, #0
 8008420:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008424:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008426:	480f      	ldr	r0, [pc, #60]	; (8008464 <rand+0x78>)
 8008428:	690a      	ldr	r2, [r1, #16]
 800842a:	694b      	ldr	r3, [r1, #20]
 800842c:	4c0e      	ldr	r4, [pc, #56]	; (8008468 <rand+0x7c>)
 800842e:	4350      	muls	r0, r2
 8008430:	fb04 0003 	mla	r0, r4, r3, r0
 8008434:	fba2 3404 	umull	r3, r4, r2, r4
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	4404      	add	r4, r0
 800843c:	f144 0000 	adc.w	r0, r4, #0
 8008440:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8008444:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008448:	bd10      	pop	{r4, pc}
 800844a:	bf00      	nop
 800844c:	20000018 	.word	0x20000018
 8008450:	08009b54 	.word	0x08009b54
 8008454:	08009b6b 	.word	0x08009b6b
 8008458:	abcd330e 	.word	0xabcd330e
 800845c:	e66d1234 	.word	0xe66d1234
 8008460:	0005deec 	.word	0x0005deec
 8008464:	5851f42d 	.word	0x5851f42d
 8008468:	4c957f2d 	.word	0x4c957f2d

0800846c <siprintf>:
 800846c:	b40e      	push	{r1, r2, r3}
 800846e:	b500      	push	{lr}
 8008470:	b09c      	sub	sp, #112	; 0x70
 8008472:	ab1d      	add	r3, sp, #116	; 0x74
 8008474:	9002      	str	r0, [sp, #8]
 8008476:	9006      	str	r0, [sp, #24]
 8008478:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800847c:	4809      	ldr	r0, [pc, #36]	; (80084a4 <siprintf+0x38>)
 800847e:	9107      	str	r1, [sp, #28]
 8008480:	9104      	str	r1, [sp, #16]
 8008482:	4909      	ldr	r1, [pc, #36]	; (80084a8 <siprintf+0x3c>)
 8008484:	f853 2b04 	ldr.w	r2, [r3], #4
 8008488:	9105      	str	r1, [sp, #20]
 800848a:	6800      	ldr	r0, [r0, #0]
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	a902      	add	r1, sp, #8
 8008490:	f000 f94a 	bl	8008728 <_svfiprintf_r>
 8008494:	9b02      	ldr	r3, [sp, #8]
 8008496:	2200      	movs	r2, #0
 8008498:	701a      	strb	r2, [r3, #0]
 800849a:	b01c      	add	sp, #112	; 0x70
 800849c:	f85d eb04 	ldr.w	lr, [sp], #4
 80084a0:	b003      	add	sp, #12
 80084a2:	4770      	bx	lr
 80084a4:	20000018 	.word	0x20000018
 80084a8:	ffff0208 	.word	0xffff0208

080084ac <__assert_func>:
 80084ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084ae:	4614      	mov	r4, r2
 80084b0:	461a      	mov	r2, r3
 80084b2:	4b09      	ldr	r3, [pc, #36]	; (80084d8 <__assert_func+0x2c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4605      	mov	r5, r0
 80084b8:	68d8      	ldr	r0, [r3, #12]
 80084ba:	b14c      	cbz	r4, 80084d0 <__assert_func+0x24>
 80084bc:	4b07      	ldr	r3, [pc, #28]	; (80084dc <__assert_func+0x30>)
 80084be:	9100      	str	r1, [sp, #0]
 80084c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084c4:	4906      	ldr	r1, [pc, #24]	; (80084e0 <__assert_func+0x34>)
 80084c6:	462b      	mov	r3, r5
 80084c8:	f000 f80e 	bl	80084e8 <fiprintf>
 80084cc:	f000 fdea 	bl	80090a4 <abort>
 80084d0:	4b04      	ldr	r3, [pc, #16]	; (80084e4 <__assert_func+0x38>)
 80084d2:	461c      	mov	r4, r3
 80084d4:	e7f3      	b.n	80084be <__assert_func+0x12>
 80084d6:	bf00      	nop
 80084d8:	20000018 	.word	0x20000018
 80084dc:	08009bca 	.word	0x08009bca
 80084e0:	08009bd7 	.word	0x08009bd7
 80084e4:	08009c05 	.word	0x08009c05

080084e8 <fiprintf>:
 80084e8:	b40e      	push	{r1, r2, r3}
 80084ea:	b503      	push	{r0, r1, lr}
 80084ec:	4601      	mov	r1, r0
 80084ee:	ab03      	add	r3, sp, #12
 80084f0:	4805      	ldr	r0, [pc, #20]	; (8008508 <fiprintf+0x20>)
 80084f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f6:	6800      	ldr	r0, [r0, #0]
 80084f8:	9301      	str	r3, [sp, #4]
 80084fa:	f000 fa3f 	bl	800897c <_vfiprintf_r>
 80084fe:	b002      	add	sp, #8
 8008500:	f85d eb04 	ldr.w	lr, [sp], #4
 8008504:	b003      	add	sp, #12
 8008506:	4770      	bx	lr
 8008508:	20000018 	.word	0x20000018

0800850c <malloc>:
 800850c:	4b02      	ldr	r3, [pc, #8]	; (8008518 <malloc+0xc>)
 800850e:	4601      	mov	r1, r0
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	f000 b853 	b.w	80085bc <_malloc_r>
 8008516:	bf00      	nop
 8008518:	20000018 	.word	0x20000018

0800851c <_free_r>:
 800851c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800851e:	2900      	cmp	r1, #0
 8008520:	d048      	beq.n	80085b4 <_free_r+0x98>
 8008522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008526:	9001      	str	r0, [sp, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	f1a1 0404 	sub.w	r4, r1, #4
 800852e:	bfb8      	it	lt
 8008530:	18e4      	addlt	r4, r4, r3
 8008532:	f000 fff7 	bl	8009524 <__malloc_lock>
 8008536:	4a20      	ldr	r2, [pc, #128]	; (80085b8 <_free_r+0x9c>)
 8008538:	9801      	ldr	r0, [sp, #4]
 800853a:	6813      	ldr	r3, [r2, #0]
 800853c:	4615      	mov	r5, r2
 800853e:	b933      	cbnz	r3, 800854e <_free_r+0x32>
 8008540:	6063      	str	r3, [r4, #4]
 8008542:	6014      	str	r4, [r2, #0]
 8008544:	b003      	add	sp, #12
 8008546:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800854a:	f000 bff1 	b.w	8009530 <__malloc_unlock>
 800854e:	42a3      	cmp	r3, r4
 8008550:	d90b      	bls.n	800856a <_free_r+0x4e>
 8008552:	6821      	ldr	r1, [r4, #0]
 8008554:	1862      	adds	r2, r4, r1
 8008556:	4293      	cmp	r3, r2
 8008558:	bf04      	itt	eq
 800855a:	681a      	ldreq	r2, [r3, #0]
 800855c:	685b      	ldreq	r3, [r3, #4]
 800855e:	6063      	str	r3, [r4, #4]
 8008560:	bf04      	itt	eq
 8008562:	1852      	addeq	r2, r2, r1
 8008564:	6022      	streq	r2, [r4, #0]
 8008566:	602c      	str	r4, [r5, #0]
 8008568:	e7ec      	b.n	8008544 <_free_r+0x28>
 800856a:	461a      	mov	r2, r3
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	b10b      	cbz	r3, 8008574 <_free_r+0x58>
 8008570:	42a3      	cmp	r3, r4
 8008572:	d9fa      	bls.n	800856a <_free_r+0x4e>
 8008574:	6811      	ldr	r1, [r2, #0]
 8008576:	1855      	adds	r5, r2, r1
 8008578:	42a5      	cmp	r5, r4
 800857a:	d10b      	bne.n	8008594 <_free_r+0x78>
 800857c:	6824      	ldr	r4, [r4, #0]
 800857e:	4421      	add	r1, r4
 8008580:	1854      	adds	r4, r2, r1
 8008582:	42a3      	cmp	r3, r4
 8008584:	6011      	str	r1, [r2, #0]
 8008586:	d1dd      	bne.n	8008544 <_free_r+0x28>
 8008588:	681c      	ldr	r4, [r3, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	6053      	str	r3, [r2, #4]
 800858e:	4421      	add	r1, r4
 8008590:	6011      	str	r1, [r2, #0]
 8008592:	e7d7      	b.n	8008544 <_free_r+0x28>
 8008594:	d902      	bls.n	800859c <_free_r+0x80>
 8008596:	230c      	movs	r3, #12
 8008598:	6003      	str	r3, [r0, #0]
 800859a:	e7d3      	b.n	8008544 <_free_r+0x28>
 800859c:	6825      	ldr	r5, [r4, #0]
 800859e:	1961      	adds	r1, r4, r5
 80085a0:	428b      	cmp	r3, r1
 80085a2:	bf04      	itt	eq
 80085a4:	6819      	ldreq	r1, [r3, #0]
 80085a6:	685b      	ldreq	r3, [r3, #4]
 80085a8:	6063      	str	r3, [r4, #4]
 80085aa:	bf04      	itt	eq
 80085ac:	1949      	addeq	r1, r1, r5
 80085ae:	6021      	streq	r1, [r4, #0]
 80085b0:	6054      	str	r4, [r2, #4]
 80085b2:	e7c7      	b.n	8008544 <_free_r+0x28>
 80085b4:	b003      	add	sp, #12
 80085b6:	bd30      	pop	{r4, r5, pc}
 80085b8:	200049b4 	.word	0x200049b4

080085bc <_malloc_r>:
 80085bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085be:	1ccd      	adds	r5, r1, #3
 80085c0:	f025 0503 	bic.w	r5, r5, #3
 80085c4:	3508      	adds	r5, #8
 80085c6:	2d0c      	cmp	r5, #12
 80085c8:	bf38      	it	cc
 80085ca:	250c      	movcc	r5, #12
 80085cc:	2d00      	cmp	r5, #0
 80085ce:	4606      	mov	r6, r0
 80085d0:	db01      	blt.n	80085d6 <_malloc_r+0x1a>
 80085d2:	42a9      	cmp	r1, r5
 80085d4:	d903      	bls.n	80085de <_malloc_r+0x22>
 80085d6:	230c      	movs	r3, #12
 80085d8:	6033      	str	r3, [r6, #0]
 80085da:	2000      	movs	r0, #0
 80085dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085de:	f000 ffa1 	bl	8009524 <__malloc_lock>
 80085e2:	4921      	ldr	r1, [pc, #132]	; (8008668 <_malloc_r+0xac>)
 80085e4:	680a      	ldr	r2, [r1, #0]
 80085e6:	4614      	mov	r4, r2
 80085e8:	b99c      	cbnz	r4, 8008612 <_malloc_r+0x56>
 80085ea:	4f20      	ldr	r7, [pc, #128]	; (800866c <_malloc_r+0xb0>)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	b923      	cbnz	r3, 80085fa <_malloc_r+0x3e>
 80085f0:	4621      	mov	r1, r4
 80085f2:	4630      	mov	r0, r6
 80085f4:	f000 fc86 	bl	8008f04 <_sbrk_r>
 80085f8:	6038      	str	r0, [r7, #0]
 80085fa:	4629      	mov	r1, r5
 80085fc:	4630      	mov	r0, r6
 80085fe:	f000 fc81 	bl	8008f04 <_sbrk_r>
 8008602:	1c43      	adds	r3, r0, #1
 8008604:	d123      	bne.n	800864e <_malloc_r+0x92>
 8008606:	230c      	movs	r3, #12
 8008608:	6033      	str	r3, [r6, #0]
 800860a:	4630      	mov	r0, r6
 800860c:	f000 ff90 	bl	8009530 <__malloc_unlock>
 8008610:	e7e3      	b.n	80085da <_malloc_r+0x1e>
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	1b5b      	subs	r3, r3, r5
 8008616:	d417      	bmi.n	8008648 <_malloc_r+0x8c>
 8008618:	2b0b      	cmp	r3, #11
 800861a:	d903      	bls.n	8008624 <_malloc_r+0x68>
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	441c      	add	r4, r3
 8008620:	6025      	str	r5, [r4, #0]
 8008622:	e004      	b.n	800862e <_malloc_r+0x72>
 8008624:	6863      	ldr	r3, [r4, #4]
 8008626:	42a2      	cmp	r2, r4
 8008628:	bf0c      	ite	eq
 800862a:	600b      	streq	r3, [r1, #0]
 800862c:	6053      	strne	r3, [r2, #4]
 800862e:	4630      	mov	r0, r6
 8008630:	f000 ff7e 	bl	8009530 <__malloc_unlock>
 8008634:	f104 000b 	add.w	r0, r4, #11
 8008638:	1d23      	adds	r3, r4, #4
 800863a:	f020 0007 	bic.w	r0, r0, #7
 800863e:	1ac2      	subs	r2, r0, r3
 8008640:	d0cc      	beq.n	80085dc <_malloc_r+0x20>
 8008642:	1a1b      	subs	r3, r3, r0
 8008644:	50a3      	str	r3, [r4, r2]
 8008646:	e7c9      	b.n	80085dc <_malloc_r+0x20>
 8008648:	4622      	mov	r2, r4
 800864a:	6864      	ldr	r4, [r4, #4]
 800864c:	e7cc      	b.n	80085e8 <_malloc_r+0x2c>
 800864e:	1cc4      	adds	r4, r0, #3
 8008650:	f024 0403 	bic.w	r4, r4, #3
 8008654:	42a0      	cmp	r0, r4
 8008656:	d0e3      	beq.n	8008620 <_malloc_r+0x64>
 8008658:	1a21      	subs	r1, r4, r0
 800865a:	4630      	mov	r0, r6
 800865c:	f000 fc52 	bl	8008f04 <_sbrk_r>
 8008660:	3001      	adds	r0, #1
 8008662:	d1dd      	bne.n	8008620 <_malloc_r+0x64>
 8008664:	e7cf      	b.n	8008606 <_malloc_r+0x4a>
 8008666:	bf00      	nop
 8008668:	200049b4 	.word	0x200049b4
 800866c:	200049b8 	.word	0x200049b8

08008670 <__ssputs_r>:
 8008670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008674:	688e      	ldr	r6, [r1, #8]
 8008676:	429e      	cmp	r6, r3
 8008678:	4682      	mov	sl, r0
 800867a:	460c      	mov	r4, r1
 800867c:	4690      	mov	r8, r2
 800867e:	461f      	mov	r7, r3
 8008680:	d838      	bhi.n	80086f4 <__ssputs_r+0x84>
 8008682:	898a      	ldrh	r2, [r1, #12]
 8008684:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008688:	d032      	beq.n	80086f0 <__ssputs_r+0x80>
 800868a:	6825      	ldr	r5, [r4, #0]
 800868c:	6909      	ldr	r1, [r1, #16]
 800868e:	eba5 0901 	sub.w	r9, r5, r1
 8008692:	6965      	ldr	r5, [r4, #20]
 8008694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800869c:	3301      	adds	r3, #1
 800869e:	444b      	add	r3, r9
 80086a0:	106d      	asrs	r5, r5, #1
 80086a2:	429d      	cmp	r5, r3
 80086a4:	bf38      	it	cc
 80086a6:	461d      	movcc	r5, r3
 80086a8:	0553      	lsls	r3, r2, #21
 80086aa:	d531      	bpl.n	8008710 <__ssputs_r+0xa0>
 80086ac:	4629      	mov	r1, r5
 80086ae:	f7ff ff85 	bl	80085bc <_malloc_r>
 80086b2:	4606      	mov	r6, r0
 80086b4:	b950      	cbnz	r0, 80086cc <__ssputs_r+0x5c>
 80086b6:	230c      	movs	r3, #12
 80086b8:	f8ca 3000 	str.w	r3, [sl]
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c2:	81a3      	strh	r3, [r4, #12]
 80086c4:	f04f 30ff 	mov.w	r0, #4294967295
 80086c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086cc:	6921      	ldr	r1, [r4, #16]
 80086ce:	464a      	mov	r2, r9
 80086d0:	f7ff fe76 	bl	80083c0 <memcpy>
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086de:	81a3      	strh	r3, [r4, #12]
 80086e0:	6126      	str	r6, [r4, #16]
 80086e2:	6165      	str	r5, [r4, #20]
 80086e4:	444e      	add	r6, r9
 80086e6:	eba5 0509 	sub.w	r5, r5, r9
 80086ea:	6026      	str	r6, [r4, #0]
 80086ec:	60a5      	str	r5, [r4, #8]
 80086ee:	463e      	mov	r6, r7
 80086f0:	42be      	cmp	r6, r7
 80086f2:	d900      	bls.n	80086f6 <__ssputs_r+0x86>
 80086f4:	463e      	mov	r6, r7
 80086f6:	4632      	mov	r2, r6
 80086f8:	6820      	ldr	r0, [r4, #0]
 80086fa:	4641      	mov	r1, r8
 80086fc:	f000 fef8 	bl	80094f0 <memmove>
 8008700:	68a3      	ldr	r3, [r4, #8]
 8008702:	6822      	ldr	r2, [r4, #0]
 8008704:	1b9b      	subs	r3, r3, r6
 8008706:	4432      	add	r2, r6
 8008708:	60a3      	str	r3, [r4, #8]
 800870a:	6022      	str	r2, [r4, #0]
 800870c:	2000      	movs	r0, #0
 800870e:	e7db      	b.n	80086c8 <__ssputs_r+0x58>
 8008710:	462a      	mov	r2, r5
 8008712:	f000 ff13 	bl	800953c <_realloc_r>
 8008716:	4606      	mov	r6, r0
 8008718:	2800      	cmp	r0, #0
 800871a:	d1e1      	bne.n	80086e0 <__ssputs_r+0x70>
 800871c:	6921      	ldr	r1, [r4, #16]
 800871e:	4650      	mov	r0, sl
 8008720:	f7ff fefc 	bl	800851c <_free_r>
 8008724:	e7c7      	b.n	80086b6 <__ssputs_r+0x46>
	...

08008728 <_svfiprintf_r>:
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	4698      	mov	r8, r3
 800872e:	898b      	ldrh	r3, [r1, #12]
 8008730:	061b      	lsls	r3, r3, #24
 8008732:	b09d      	sub	sp, #116	; 0x74
 8008734:	4607      	mov	r7, r0
 8008736:	460d      	mov	r5, r1
 8008738:	4614      	mov	r4, r2
 800873a:	d50e      	bpl.n	800875a <_svfiprintf_r+0x32>
 800873c:	690b      	ldr	r3, [r1, #16]
 800873e:	b963      	cbnz	r3, 800875a <_svfiprintf_r+0x32>
 8008740:	2140      	movs	r1, #64	; 0x40
 8008742:	f7ff ff3b 	bl	80085bc <_malloc_r>
 8008746:	6028      	str	r0, [r5, #0]
 8008748:	6128      	str	r0, [r5, #16]
 800874a:	b920      	cbnz	r0, 8008756 <_svfiprintf_r+0x2e>
 800874c:	230c      	movs	r3, #12
 800874e:	603b      	str	r3, [r7, #0]
 8008750:	f04f 30ff 	mov.w	r0, #4294967295
 8008754:	e0d1      	b.n	80088fa <_svfiprintf_r+0x1d2>
 8008756:	2340      	movs	r3, #64	; 0x40
 8008758:	616b      	str	r3, [r5, #20]
 800875a:	2300      	movs	r3, #0
 800875c:	9309      	str	r3, [sp, #36]	; 0x24
 800875e:	2320      	movs	r3, #32
 8008760:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008764:	f8cd 800c 	str.w	r8, [sp, #12]
 8008768:	2330      	movs	r3, #48	; 0x30
 800876a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008914 <_svfiprintf_r+0x1ec>
 800876e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008772:	f04f 0901 	mov.w	r9, #1
 8008776:	4623      	mov	r3, r4
 8008778:	469a      	mov	sl, r3
 800877a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800877e:	b10a      	cbz	r2, 8008784 <_svfiprintf_r+0x5c>
 8008780:	2a25      	cmp	r2, #37	; 0x25
 8008782:	d1f9      	bne.n	8008778 <_svfiprintf_r+0x50>
 8008784:	ebba 0b04 	subs.w	fp, sl, r4
 8008788:	d00b      	beq.n	80087a2 <_svfiprintf_r+0x7a>
 800878a:	465b      	mov	r3, fp
 800878c:	4622      	mov	r2, r4
 800878e:	4629      	mov	r1, r5
 8008790:	4638      	mov	r0, r7
 8008792:	f7ff ff6d 	bl	8008670 <__ssputs_r>
 8008796:	3001      	adds	r0, #1
 8008798:	f000 80aa 	beq.w	80088f0 <_svfiprintf_r+0x1c8>
 800879c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800879e:	445a      	add	r2, fp
 80087a0:	9209      	str	r2, [sp, #36]	; 0x24
 80087a2:	f89a 3000 	ldrb.w	r3, [sl]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f000 80a2 	beq.w	80088f0 <_svfiprintf_r+0x1c8>
 80087ac:	2300      	movs	r3, #0
 80087ae:	f04f 32ff 	mov.w	r2, #4294967295
 80087b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087b6:	f10a 0a01 	add.w	sl, sl, #1
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	9307      	str	r3, [sp, #28]
 80087be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087c2:	931a      	str	r3, [sp, #104]	; 0x68
 80087c4:	4654      	mov	r4, sl
 80087c6:	2205      	movs	r2, #5
 80087c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087cc:	4851      	ldr	r0, [pc, #324]	; (8008914 <_svfiprintf_r+0x1ec>)
 80087ce:	f7f7 fd07 	bl	80001e0 <memchr>
 80087d2:	9a04      	ldr	r2, [sp, #16]
 80087d4:	b9d8      	cbnz	r0, 800880e <_svfiprintf_r+0xe6>
 80087d6:	06d0      	lsls	r0, r2, #27
 80087d8:	bf44      	itt	mi
 80087da:	2320      	movmi	r3, #32
 80087dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087e0:	0711      	lsls	r1, r2, #28
 80087e2:	bf44      	itt	mi
 80087e4:	232b      	movmi	r3, #43	; 0x2b
 80087e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ea:	f89a 3000 	ldrb.w	r3, [sl]
 80087ee:	2b2a      	cmp	r3, #42	; 0x2a
 80087f0:	d015      	beq.n	800881e <_svfiprintf_r+0xf6>
 80087f2:	9a07      	ldr	r2, [sp, #28]
 80087f4:	4654      	mov	r4, sl
 80087f6:	2000      	movs	r0, #0
 80087f8:	f04f 0c0a 	mov.w	ip, #10
 80087fc:	4621      	mov	r1, r4
 80087fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008802:	3b30      	subs	r3, #48	; 0x30
 8008804:	2b09      	cmp	r3, #9
 8008806:	d94e      	bls.n	80088a6 <_svfiprintf_r+0x17e>
 8008808:	b1b0      	cbz	r0, 8008838 <_svfiprintf_r+0x110>
 800880a:	9207      	str	r2, [sp, #28]
 800880c:	e014      	b.n	8008838 <_svfiprintf_r+0x110>
 800880e:	eba0 0308 	sub.w	r3, r0, r8
 8008812:	fa09 f303 	lsl.w	r3, r9, r3
 8008816:	4313      	orrs	r3, r2
 8008818:	9304      	str	r3, [sp, #16]
 800881a:	46a2      	mov	sl, r4
 800881c:	e7d2      	b.n	80087c4 <_svfiprintf_r+0x9c>
 800881e:	9b03      	ldr	r3, [sp, #12]
 8008820:	1d19      	adds	r1, r3, #4
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	9103      	str	r1, [sp, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	bfbb      	ittet	lt
 800882a:	425b      	neglt	r3, r3
 800882c:	f042 0202 	orrlt.w	r2, r2, #2
 8008830:	9307      	strge	r3, [sp, #28]
 8008832:	9307      	strlt	r3, [sp, #28]
 8008834:	bfb8      	it	lt
 8008836:	9204      	strlt	r2, [sp, #16]
 8008838:	7823      	ldrb	r3, [r4, #0]
 800883a:	2b2e      	cmp	r3, #46	; 0x2e
 800883c:	d10c      	bne.n	8008858 <_svfiprintf_r+0x130>
 800883e:	7863      	ldrb	r3, [r4, #1]
 8008840:	2b2a      	cmp	r3, #42	; 0x2a
 8008842:	d135      	bne.n	80088b0 <_svfiprintf_r+0x188>
 8008844:	9b03      	ldr	r3, [sp, #12]
 8008846:	1d1a      	adds	r2, r3, #4
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	9203      	str	r2, [sp, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	bfb8      	it	lt
 8008850:	f04f 33ff 	movlt.w	r3, #4294967295
 8008854:	3402      	adds	r4, #2
 8008856:	9305      	str	r3, [sp, #20]
 8008858:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008924 <_svfiprintf_r+0x1fc>
 800885c:	7821      	ldrb	r1, [r4, #0]
 800885e:	2203      	movs	r2, #3
 8008860:	4650      	mov	r0, sl
 8008862:	f7f7 fcbd 	bl	80001e0 <memchr>
 8008866:	b140      	cbz	r0, 800887a <_svfiprintf_r+0x152>
 8008868:	2340      	movs	r3, #64	; 0x40
 800886a:	eba0 000a 	sub.w	r0, r0, sl
 800886e:	fa03 f000 	lsl.w	r0, r3, r0
 8008872:	9b04      	ldr	r3, [sp, #16]
 8008874:	4303      	orrs	r3, r0
 8008876:	3401      	adds	r4, #1
 8008878:	9304      	str	r3, [sp, #16]
 800887a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800887e:	4826      	ldr	r0, [pc, #152]	; (8008918 <_svfiprintf_r+0x1f0>)
 8008880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008884:	2206      	movs	r2, #6
 8008886:	f7f7 fcab 	bl	80001e0 <memchr>
 800888a:	2800      	cmp	r0, #0
 800888c:	d038      	beq.n	8008900 <_svfiprintf_r+0x1d8>
 800888e:	4b23      	ldr	r3, [pc, #140]	; (800891c <_svfiprintf_r+0x1f4>)
 8008890:	bb1b      	cbnz	r3, 80088da <_svfiprintf_r+0x1b2>
 8008892:	9b03      	ldr	r3, [sp, #12]
 8008894:	3307      	adds	r3, #7
 8008896:	f023 0307 	bic.w	r3, r3, #7
 800889a:	3308      	adds	r3, #8
 800889c:	9303      	str	r3, [sp, #12]
 800889e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a0:	4433      	add	r3, r6
 80088a2:	9309      	str	r3, [sp, #36]	; 0x24
 80088a4:	e767      	b.n	8008776 <_svfiprintf_r+0x4e>
 80088a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80088aa:	460c      	mov	r4, r1
 80088ac:	2001      	movs	r0, #1
 80088ae:	e7a5      	b.n	80087fc <_svfiprintf_r+0xd4>
 80088b0:	2300      	movs	r3, #0
 80088b2:	3401      	adds	r4, #1
 80088b4:	9305      	str	r3, [sp, #20]
 80088b6:	4619      	mov	r1, r3
 80088b8:	f04f 0c0a 	mov.w	ip, #10
 80088bc:	4620      	mov	r0, r4
 80088be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088c2:	3a30      	subs	r2, #48	; 0x30
 80088c4:	2a09      	cmp	r2, #9
 80088c6:	d903      	bls.n	80088d0 <_svfiprintf_r+0x1a8>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d0c5      	beq.n	8008858 <_svfiprintf_r+0x130>
 80088cc:	9105      	str	r1, [sp, #20]
 80088ce:	e7c3      	b.n	8008858 <_svfiprintf_r+0x130>
 80088d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80088d4:	4604      	mov	r4, r0
 80088d6:	2301      	movs	r3, #1
 80088d8:	e7f0      	b.n	80088bc <_svfiprintf_r+0x194>
 80088da:	ab03      	add	r3, sp, #12
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	462a      	mov	r2, r5
 80088e0:	4b0f      	ldr	r3, [pc, #60]	; (8008920 <_svfiprintf_r+0x1f8>)
 80088e2:	a904      	add	r1, sp, #16
 80088e4:	4638      	mov	r0, r7
 80088e6:	f3af 8000 	nop.w
 80088ea:	1c42      	adds	r2, r0, #1
 80088ec:	4606      	mov	r6, r0
 80088ee:	d1d6      	bne.n	800889e <_svfiprintf_r+0x176>
 80088f0:	89ab      	ldrh	r3, [r5, #12]
 80088f2:	065b      	lsls	r3, r3, #25
 80088f4:	f53f af2c 	bmi.w	8008750 <_svfiprintf_r+0x28>
 80088f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088fa:	b01d      	add	sp, #116	; 0x74
 80088fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008900:	ab03      	add	r3, sp, #12
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	462a      	mov	r2, r5
 8008906:	4b06      	ldr	r3, [pc, #24]	; (8008920 <_svfiprintf_r+0x1f8>)
 8008908:	a904      	add	r1, sp, #16
 800890a:	4638      	mov	r0, r7
 800890c:	f000 f9d4 	bl	8008cb8 <_printf_i>
 8008910:	e7eb      	b.n	80088ea <_svfiprintf_r+0x1c2>
 8008912:	bf00      	nop
 8008914:	08009c06 	.word	0x08009c06
 8008918:	08009c10 	.word	0x08009c10
 800891c:	00000000 	.word	0x00000000
 8008920:	08008671 	.word	0x08008671
 8008924:	08009c0c 	.word	0x08009c0c

08008928 <__sfputc_r>:
 8008928:	6893      	ldr	r3, [r2, #8]
 800892a:	3b01      	subs	r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	b410      	push	{r4}
 8008930:	6093      	str	r3, [r2, #8]
 8008932:	da08      	bge.n	8008946 <__sfputc_r+0x1e>
 8008934:	6994      	ldr	r4, [r2, #24]
 8008936:	42a3      	cmp	r3, r4
 8008938:	db01      	blt.n	800893e <__sfputc_r+0x16>
 800893a:	290a      	cmp	r1, #10
 800893c:	d103      	bne.n	8008946 <__sfputc_r+0x1e>
 800893e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008942:	f000 baef 	b.w	8008f24 <__swbuf_r>
 8008946:	6813      	ldr	r3, [r2, #0]
 8008948:	1c58      	adds	r0, r3, #1
 800894a:	6010      	str	r0, [r2, #0]
 800894c:	7019      	strb	r1, [r3, #0]
 800894e:	4608      	mov	r0, r1
 8008950:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008954:	4770      	bx	lr

08008956 <__sfputs_r>:
 8008956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008958:	4606      	mov	r6, r0
 800895a:	460f      	mov	r7, r1
 800895c:	4614      	mov	r4, r2
 800895e:	18d5      	adds	r5, r2, r3
 8008960:	42ac      	cmp	r4, r5
 8008962:	d101      	bne.n	8008968 <__sfputs_r+0x12>
 8008964:	2000      	movs	r0, #0
 8008966:	e007      	b.n	8008978 <__sfputs_r+0x22>
 8008968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800896c:	463a      	mov	r2, r7
 800896e:	4630      	mov	r0, r6
 8008970:	f7ff ffda 	bl	8008928 <__sfputc_r>
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	d1f3      	bne.n	8008960 <__sfputs_r+0xa>
 8008978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800897c <_vfiprintf_r>:
 800897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	460d      	mov	r5, r1
 8008982:	b09d      	sub	sp, #116	; 0x74
 8008984:	4614      	mov	r4, r2
 8008986:	4698      	mov	r8, r3
 8008988:	4606      	mov	r6, r0
 800898a:	b118      	cbz	r0, 8008994 <_vfiprintf_r+0x18>
 800898c:	6983      	ldr	r3, [r0, #24]
 800898e:	b90b      	cbnz	r3, 8008994 <_vfiprintf_r+0x18>
 8008990:	f000 fcaa 	bl	80092e8 <__sinit>
 8008994:	4b89      	ldr	r3, [pc, #548]	; (8008bbc <_vfiprintf_r+0x240>)
 8008996:	429d      	cmp	r5, r3
 8008998:	d11b      	bne.n	80089d2 <_vfiprintf_r+0x56>
 800899a:	6875      	ldr	r5, [r6, #4]
 800899c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800899e:	07d9      	lsls	r1, r3, #31
 80089a0:	d405      	bmi.n	80089ae <_vfiprintf_r+0x32>
 80089a2:	89ab      	ldrh	r3, [r5, #12]
 80089a4:	059a      	lsls	r2, r3, #22
 80089a6:	d402      	bmi.n	80089ae <_vfiprintf_r+0x32>
 80089a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089aa:	f000 fd3b 	bl	8009424 <__retarget_lock_acquire_recursive>
 80089ae:	89ab      	ldrh	r3, [r5, #12]
 80089b0:	071b      	lsls	r3, r3, #28
 80089b2:	d501      	bpl.n	80089b8 <_vfiprintf_r+0x3c>
 80089b4:	692b      	ldr	r3, [r5, #16]
 80089b6:	b9eb      	cbnz	r3, 80089f4 <_vfiprintf_r+0x78>
 80089b8:	4629      	mov	r1, r5
 80089ba:	4630      	mov	r0, r6
 80089bc:	f000 fb04 	bl	8008fc8 <__swsetup_r>
 80089c0:	b1c0      	cbz	r0, 80089f4 <_vfiprintf_r+0x78>
 80089c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089c4:	07dc      	lsls	r4, r3, #31
 80089c6:	d50e      	bpl.n	80089e6 <_vfiprintf_r+0x6a>
 80089c8:	f04f 30ff 	mov.w	r0, #4294967295
 80089cc:	b01d      	add	sp, #116	; 0x74
 80089ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d2:	4b7b      	ldr	r3, [pc, #492]	; (8008bc0 <_vfiprintf_r+0x244>)
 80089d4:	429d      	cmp	r5, r3
 80089d6:	d101      	bne.n	80089dc <_vfiprintf_r+0x60>
 80089d8:	68b5      	ldr	r5, [r6, #8]
 80089da:	e7df      	b.n	800899c <_vfiprintf_r+0x20>
 80089dc:	4b79      	ldr	r3, [pc, #484]	; (8008bc4 <_vfiprintf_r+0x248>)
 80089de:	429d      	cmp	r5, r3
 80089e0:	bf08      	it	eq
 80089e2:	68f5      	ldreq	r5, [r6, #12]
 80089e4:	e7da      	b.n	800899c <_vfiprintf_r+0x20>
 80089e6:	89ab      	ldrh	r3, [r5, #12]
 80089e8:	0598      	lsls	r0, r3, #22
 80089ea:	d4ed      	bmi.n	80089c8 <_vfiprintf_r+0x4c>
 80089ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089ee:	f000 fd1a 	bl	8009426 <__retarget_lock_release_recursive>
 80089f2:	e7e9      	b.n	80089c8 <_vfiprintf_r+0x4c>
 80089f4:	2300      	movs	r3, #0
 80089f6:	9309      	str	r3, [sp, #36]	; 0x24
 80089f8:	2320      	movs	r3, #32
 80089fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a02:	2330      	movs	r3, #48	; 0x30
 8008a04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008bc8 <_vfiprintf_r+0x24c>
 8008a08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a0c:	f04f 0901 	mov.w	r9, #1
 8008a10:	4623      	mov	r3, r4
 8008a12:	469a      	mov	sl, r3
 8008a14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a18:	b10a      	cbz	r2, 8008a1e <_vfiprintf_r+0xa2>
 8008a1a:	2a25      	cmp	r2, #37	; 0x25
 8008a1c:	d1f9      	bne.n	8008a12 <_vfiprintf_r+0x96>
 8008a1e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a22:	d00b      	beq.n	8008a3c <_vfiprintf_r+0xc0>
 8008a24:	465b      	mov	r3, fp
 8008a26:	4622      	mov	r2, r4
 8008a28:	4629      	mov	r1, r5
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f7ff ff93 	bl	8008956 <__sfputs_r>
 8008a30:	3001      	adds	r0, #1
 8008a32:	f000 80aa 	beq.w	8008b8a <_vfiprintf_r+0x20e>
 8008a36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a38:	445a      	add	r2, fp
 8008a3a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 80a2 	beq.w	8008b8a <_vfiprintf_r+0x20e>
 8008a46:	2300      	movs	r3, #0
 8008a48:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a50:	f10a 0a01 	add.w	sl, sl, #1
 8008a54:	9304      	str	r3, [sp, #16]
 8008a56:	9307      	str	r3, [sp, #28]
 8008a58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a5c:	931a      	str	r3, [sp, #104]	; 0x68
 8008a5e:	4654      	mov	r4, sl
 8008a60:	2205      	movs	r2, #5
 8008a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a66:	4858      	ldr	r0, [pc, #352]	; (8008bc8 <_vfiprintf_r+0x24c>)
 8008a68:	f7f7 fbba 	bl	80001e0 <memchr>
 8008a6c:	9a04      	ldr	r2, [sp, #16]
 8008a6e:	b9d8      	cbnz	r0, 8008aa8 <_vfiprintf_r+0x12c>
 8008a70:	06d1      	lsls	r1, r2, #27
 8008a72:	bf44      	itt	mi
 8008a74:	2320      	movmi	r3, #32
 8008a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a7a:	0713      	lsls	r3, r2, #28
 8008a7c:	bf44      	itt	mi
 8008a7e:	232b      	movmi	r3, #43	; 0x2b
 8008a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a84:	f89a 3000 	ldrb.w	r3, [sl]
 8008a88:	2b2a      	cmp	r3, #42	; 0x2a
 8008a8a:	d015      	beq.n	8008ab8 <_vfiprintf_r+0x13c>
 8008a8c:	9a07      	ldr	r2, [sp, #28]
 8008a8e:	4654      	mov	r4, sl
 8008a90:	2000      	movs	r0, #0
 8008a92:	f04f 0c0a 	mov.w	ip, #10
 8008a96:	4621      	mov	r1, r4
 8008a98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a9c:	3b30      	subs	r3, #48	; 0x30
 8008a9e:	2b09      	cmp	r3, #9
 8008aa0:	d94e      	bls.n	8008b40 <_vfiprintf_r+0x1c4>
 8008aa2:	b1b0      	cbz	r0, 8008ad2 <_vfiprintf_r+0x156>
 8008aa4:	9207      	str	r2, [sp, #28]
 8008aa6:	e014      	b.n	8008ad2 <_vfiprintf_r+0x156>
 8008aa8:	eba0 0308 	sub.w	r3, r0, r8
 8008aac:	fa09 f303 	lsl.w	r3, r9, r3
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	9304      	str	r3, [sp, #16]
 8008ab4:	46a2      	mov	sl, r4
 8008ab6:	e7d2      	b.n	8008a5e <_vfiprintf_r+0xe2>
 8008ab8:	9b03      	ldr	r3, [sp, #12]
 8008aba:	1d19      	adds	r1, r3, #4
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	9103      	str	r1, [sp, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	bfbb      	ittet	lt
 8008ac4:	425b      	neglt	r3, r3
 8008ac6:	f042 0202 	orrlt.w	r2, r2, #2
 8008aca:	9307      	strge	r3, [sp, #28]
 8008acc:	9307      	strlt	r3, [sp, #28]
 8008ace:	bfb8      	it	lt
 8008ad0:	9204      	strlt	r2, [sp, #16]
 8008ad2:	7823      	ldrb	r3, [r4, #0]
 8008ad4:	2b2e      	cmp	r3, #46	; 0x2e
 8008ad6:	d10c      	bne.n	8008af2 <_vfiprintf_r+0x176>
 8008ad8:	7863      	ldrb	r3, [r4, #1]
 8008ada:	2b2a      	cmp	r3, #42	; 0x2a
 8008adc:	d135      	bne.n	8008b4a <_vfiprintf_r+0x1ce>
 8008ade:	9b03      	ldr	r3, [sp, #12]
 8008ae0:	1d1a      	adds	r2, r3, #4
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	9203      	str	r2, [sp, #12]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	bfb8      	it	lt
 8008aea:	f04f 33ff 	movlt.w	r3, #4294967295
 8008aee:	3402      	adds	r4, #2
 8008af0:	9305      	str	r3, [sp, #20]
 8008af2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008bd8 <_vfiprintf_r+0x25c>
 8008af6:	7821      	ldrb	r1, [r4, #0]
 8008af8:	2203      	movs	r2, #3
 8008afa:	4650      	mov	r0, sl
 8008afc:	f7f7 fb70 	bl	80001e0 <memchr>
 8008b00:	b140      	cbz	r0, 8008b14 <_vfiprintf_r+0x198>
 8008b02:	2340      	movs	r3, #64	; 0x40
 8008b04:	eba0 000a 	sub.w	r0, r0, sl
 8008b08:	fa03 f000 	lsl.w	r0, r3, r0
 8008b0c:	9b04      	ldr	r3, [sp, #16]
 8008b0e:	4303      	orrs	r3, r0
 8008b10:	3401      	adds	r4, #1
 8008b12:	9304      	str	r3, [sp, #16]
 8008b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b18:	482c      	ldr	r0, [pc, #176]	; (8008bcc <_vfiprintf_r+0x250>)
 8008b1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b1e:	2206      	movs	r2, #6
 8008b20:	f7f7 fb5e 	bl	80001e0 <memchr>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	d03f      	beq.n	8008ba8 <_vfiprintf_r+0x22c>
 8008b28:	4b29      	ldr	r3, [pc, #164]	; (8008bd0 <_vfiprintf_r+0x254>)
 8008b2a:	bb1b      	cbnz	r3, 8008b74 <_vfiprintf_r+0x1f8>
 8008b2c:	9b03      	ldr	r3, [sp, #12]
 8008b2e:	3307      	adds	r3, #7
 8008b30:	f023 0307 	bic.w	r3, r3, #7
 8008b34:	3308      	adds	r3, #8
 8008b36:	9303      	str	r3, [sp, #12]
 8008b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b3a:	443b      	add	r3, r7
 8008b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b3e:	e767      	b.n	8008a10 <_vfiprintf_r+0x94>
 8008b40:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b44:	460c      	mov	r4, r1
 8008b46:	2001      	movs	r0, #1
 8008b48:	e7a5      	b.n	8008a96 <_vfiprintf_r+0x11a>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	3401      	adds	r4, #1
 8008b4e:	9305      	str	r3, [sp, #20]
 8008b50:	4619      	mov	r1, r3
 8008b52:	f04f 0c0a 	mov.w	ip, #10
 8008b56:	4620      	mov	r0, r4
 8008b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b5c:	3a30      	subs	r2, #48	; 0x30
 8008b5e:	2a09      	cmp	r2, #9
 8008b60:	d903      	bls.n	8008b6a <_vfiprintf_r+0x1ee>
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d0c5      	beq.n	8008af2 <_vfiprintf_r+0x176>
 8008b66:	9105      	str	r1, [sp, #20]
 8008b68:	e7c3      	b.n	8008af2 <_vfiprintf_r+0x176>
 8008b6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b6e:	4604      	mov	r4, r0
 8008b70:	2301      	movs	r3, #1
 8008b72:	e7f0      	b.n	8008b56 <_vfiprintf_r+0x1da>
 8008b74:	ab03      	add	r3, sp, #12
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	462a      	mov	r2, r5
 8008b7a:	4b16      	ldr	r3, [pc, #88]	; (8008bd4 <_vfiprintf_r+0x258>)
 8008b7c:	a904      	add	r1, sp, #16
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f3af 8000 	nop.w
 8008b84:	4607      	mov	r7, r0
 8008b86:	1c78      	adds	r0, r7, #1
 8008b88:	d1d6      	bne.n	8008b38 <_vfiprintf_r+0x1bc>
 8008b8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b8c:	07d9      	lsls	r1, r3, #31
 8008b8e:	d405      	bmi.n	8008b9c <_vfiprintf_r+0x220>
 8008b90:	89ab      	ldrh	r3, [r5, #12]
 8008b92:	059a      	lsls	r2, r3, #22
 8008b94:	d402      	bmi.n	8008b9c <_vfiprintf_r+0x220>
 8008b96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b98:	f000 fc45 	bl	8009426 <__retarget_lock_release_recursive>
 8008b9c:	89ab      	ldrh	r3, [r5, #12]
 8008b9e:	065b      	lsls	r3, r3, #25
 8008ba0:	f53f af12 	bmi.w	80089c8 <_vfiprintf_r+0x4c>
 8008ba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ba6:	e711      	b.n	80089cc <_vfiprintf_r+0x50>
 8008ba8:	ab03      	add	r3, sp, #12
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	462a      	mov	r2, r5
 8008bae:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <_vfiprintf_r+0x258>)
 8008bb0:	a904      	add	r1, sp, #16
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	f000 f880 	bl	8008cb8 <_printf_i>
 8008bb8:	e7e4      	b.n	8008b84 <_vfiprintf_r+0x208>
 8008bba:	bf00      	nop
 8008bbc:	08009c5c 	.word	0x08009c5c
 8008bc0:	08009c7c 	.word	0x08009c7c
 8008bc4:	08009c3c 	.word	0x08009c3c
 8008bc8:	08009c06 	.word	0x08009c06
 8008bcc:	08009c10 	.word	0x08009c10
 8008bd0:	00000000 	.word	0x00000000
 8008bd4:	08008957 	.word	0x08008957
 8008bd8:	08009c0c 	.word	0x08009c0c

08008bdc <_printf_common>:
 8008bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be0:	4616      	mov	r6, r2
 8008be2:	4699      	mov	r9, r3
 8008be4:	688a      	ldr	r2, [r1, #8]
 8008be6:	690b      	ldr	r3, [r1, #16]
 8008be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bec:	4293      	cmp	r3, r2
 8008bee:	bfb8      	it	lt
 8008bf0:	4613      	movlt	r3, r2
 8008bf2:	6033      	str	r3, [r6, #0]
 8008bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bf8:	4607      	mov	r7, r0
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	b10a      	cbz	r2, 8008c02 <_printf_common+0x26>
 8008bfe:	3301      	adds	r3, #1
 8008c00:	6033      	str	r3, [r6, #0]
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	0699      	lsls	r1, r3, #26
 8008c06:	bf42      	ittt	mi
 8008c08:	6833      	ldrmi	r3, [r6, #0]
 8008c0a:	3302      	addmi	r3, #2
 8008c0c:	6033      	strmi	r3, [r6, #0]
 8008c0e:	6825      	ldr	r5, [r4, #0]
 8008c10:	f015 0506 	ands.w	r5, r5, #6
 8008c14:	d106      	bne.n	8008c24 <_printf_common+0x48>
 8008c16:	f104 0a19 	add.w	sl, r4, #25
 8008c1a:	68e3      	ldr	r3, [r4, #12]
 8008c1c:	6832      	ldr	r2, [r6, #0]
 8008c1e:	1a9b      	subs	r3, r3, r2
 8008c20:	42ab      	cmp	r3, r5
 8008c22:	dc26      	bgt.n	8008c72 <_printf_common+0x96>
 8008c24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c28:	1e13      	subs	r3, r2, #0
 8008c2a:	6822      	ldr	r2, [r4, #0]
 8008c2c:	bf18      	it	ne
 8008c2e:	2301      	movne	r3, #1
 8008c30:	0692      	lsls	r2, r2, #26
 8008c32:	d42b      	bmi.n	8008c8c <_printf_common+0xb0>
 8008c34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c38:	4649      	mov	r1, r9
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	47c0      	blx	r8
 8008c3e:	3001      	adds	r0, #1
 8008c40:	d01e      	beq.n	8008c80 <_printf_common+0xa4>
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	68e5      	ldr	r5, [r4, #12]
 8008c46:	6832      	ldr	r2, [r6, #0]
 8008c48:	f003 0306 	and.w	r3, r3, #6
 8008c4c:	2b04      	cmp	r3, #4
 8008c4e:	bf08      	it	eq
 8008c50:	1aad      	subeq	r5, r5, r2
 8008c52:	68a3      	ldr	r3, [r4, #8]
 8008c54:	6922      	ldr	r2, [r4, #16]
 8008c56:	bf0c      	ite	eq
 8008c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c5c:	2500      	movne	r5, #0
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	bfc4      	itt	gt
 8008c62:	1a9b      	subgt	r3, r3, r2
 8008c64:	18ed      	addgt	r5, r5, r3
 8008c66:	2600      	movs	r6, #0
 8008c68:	341a      	adds	r4, #26
 8008c6a:	42b5      	cmp	r5, r6
 8008c6c:	d11a      	bne.n	8008ca4 <_printf_common+0xc8>
 8008c6e:	2000      	movs	r0, #0
 8008c70:	e008      	b.n	8008c84 <_printf_common+0xa8>
 8008c72:	2301      	movs	r3, #1
 8008c74:	4652      	mov	r2, sl
 8008c76:	4649      	mov	r1, r9
 8008c78:	4638      	mov	r0, r7
 8008c7a:	47c0      	blx	r8
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d103      	bne.n	8008c88 <_printf_common+0xac>
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c88:	3501      	adds	r5, #1
 8008c8a:	e7c6      	b.n	8008c1a <_printf_common+0x3e>
 8008c8c:	18e1      	adds	r1, r4, r3
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	2030      	movs	r0, #48	; 0x30
 8008c92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c96:	4422      	add	r2, r4
 8008c98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ca0:	3302      	adds	r3, #2
 8008ca2:	e7c7      	b.n	8008c34 <_printf_common+0x58>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	4622      	mov	r2, r4
 8008ca8:	4649      	mov	r1, r9
 8008caa:	4638      	mov	r0, r7
 8008cac:	47c0      	blx	r8
 8008cae:	3001      	adds	r0, #1
 8008cb0:	d0e6      	beq.n	8008c80 <_printf_common+0xa4>
 8008cb2:	3601      	adds	r6, #1
 8008cb4:	e7d9      	b.n	8008c6a <_printf_common+0x8e>
	...

08008cb8 <_printf_i>:
 8008cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	4691      	mov	r9, r2
 8008cc0:	7e27      	ldrb	r7, [r4, #24]
 8008cc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cc4:	2f78      	cmp	r7, #120	; 0x78
 8008cc6:	4680      	mov	r8, r0
 8008cc8:	469a      	mov	sl, r3
 8008cca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cce:	d807      	bhi.n	8008ce0 <_printf_i+0x28>
 8008cd0:	2f62      	cmp	r7, #98	; 0x62
 8008cd2:	d80a      	bhi.n	8008cea <_printf_i+0x32>
 8008cd4:	2f00      	cmp	r7, #0
 8008cd6:	f000 80d8 	beq.w	8008e8a <_printf_i+0x1d2>
 8008cda:	2f58      	cmp	r7, #88	; 0x58
 8008cdc:	f000 80a3 	beq.w	8008e26 <_printf_i+0x16e>
 8008ce0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ce4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ce8:	e03a      	b.n	8008d60 <_printf_i+0xa8>
 8008cea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cee:	2b15      	cmp	r3, #21
 8008cf0:	d8f6      	bhi.n	8008ce0 <_printf_i+0x28>
 8008cf2:	a001      	add	r0, pc, #4	; (adr r0, 8008cf8 <_printf_i+0x40>)
 8008cf4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008cf8:	08008d51 	.word	0x08008d51
 8008cfc:	08008d65 	.word	0x08008d65
 8008d00:	08008ce1 	.word	0x08008ce1
 8008d04:	08008ce1 	.word	0x08008ce1
 8008d08:	08008ce1 	.word	0x08008ce1
 8008d0c:	08008ce1 	.word	0x08008ce1
 8008d10:	08008d65 	.word	0x08008d65
 8008d14:	08008ce1 	.word	0x08008ce1
 8008d18:	08008ce1 	.word	0x08008ce1
 8008d1c:	08008ce1 	.word	0x08008ce1
 8008d20:	08008ce1 	.word	0x08008ce1
 8008d24:	08008e71 	.word	0x08008e71
 8008d28:	08008d95 	.word	0x08008d95
 8008d2c:	08008e53 	.word	0x08008e53
 8008d30:	08008ce1 	.word	0x08008ce1
 8008d34:	08008ce1 	.word	0x08008ce1
 8008d38:	08008e93 	.word	0x08008e93
 8008d3c:	08008ce1 	.word	0x08008ce1
 8008d40:	08008d95 	.word	0x08008d95
 8008d44:	08008ce1 	.word	0x08008ce1
 8008d48:	08008ce1 	.word	0x08008ce1
 8008d4c:	08008e5b 	.word	0x08008e5b
 8008d50:	680b      	ldr	r3, [r1, #0]
 8008d52:	1d1a      	adds	r2, r3, #4
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	600a      	str	r2, [r1, #0]
 8008d58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d60:	2301      	movs	r3, #1
 8008d62:	e0a3      	b.n	8008eac <_printf_i+0x1f4>
 8008d64:	6825      	ldr	r5, [r4, #0]
 8008d66:	6808      	ldr	r0, [r1, #0]
 8008d68:	062e      	lsls	r6, r5, #24
 8008d6a:	f100 0304 	add.w	r3, r0, #4
 8008d6e:	d50a      	bpl.n	8008d86 <_printf_i+0xce>
 8008d70:	6805      	ldr	r5, [r0, #0]
 8008d72:	600b      	str	r3, [r1, #0]
 8008d74:	2d00      	cmp	r5, #0
 8008d76:	da03      	bge.n	8008d80 <_printf_i+0xc8>
 8008d78:	232d      	movs	r3, #45	; 0x2d
 8008d7a:	426d      	negs	r5, r5
 8008d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d80:	485e      	ldr	r0, [pc, #376]	; (8008efc <_printf_i+0x244>)
 8008d82:	230a      	movs	r3, #10
 8008d84:	e019      	b.n	8008dba <_printf_i+0x102>
 8008d86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008d8a:	6805      	ldr	r5, [r0, #0]
 8008d8c:	600b      	str	r3, [r1, #0]
 8008d8e:	bf18      	it	ne
 8008d90:	b22d      	sxthne	r5, r5
 8008d92:	e7ef      	b.n	8008d74 <_printf_i+0xbc>
 8008d94:	680b      	ldr	r3, [r1, #0]
 8008d96:	6825      	ldr	r5, [r4, #0]
 8008d98:	1d18      	adds	r0, r3, #4
 8008d9a:	6008      	str	r0, [r1, #0]
 8008d9c:	0628      	lsls	r0, r5, #24
 8008d9e:	d501      	bpl.n	8008da4 <_printf_i+0xec>
 8008da0:	681d      	ldr	r5, [r3, #0]
 8008da2:	e002      	b.n	8008daa <_printf_i+0xf2>
 8008da4:	0669      	lsls	r1, r5, #25
 8008da6:	d5fb      	bpl.n	8008da0 <_printf_i+0xe8>
 8008da8:	881d      	ldrh	r5, [r3, #0]
 8008daa:	4854      	ldr	r0, [pc, #336]	; (8008efc <_printf_i+0x244>)
 8008dac:	2f6f      	cmp	r7, #111	; 0x6f
 8008dae:	bf0c      	ite	eq
 8008db0:	2308      	moveq	r3, #8
 8008db2:	230a      	movne	r3, #10
 8008db4:	2100      	movs	r1, #0
 8008db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dba:	6866      	ldr	r6, [r4, #4]
 8008dbc:	60a6      	str	r6, [r4, #8]
 8008dbe:	2e00      	cmp	r6, #0
 8008dc0:	bfa2      	ittt	ge
 8008dc2:	6821      	ldrge	r1, [r4, #0]
 8008dc4:	f021 0104 	bicge.w	r1, r1, #4
 8008dc8:	6021      	strge	r1, [r4, #0]
 8008dca:	b90d      	cbnz	r5, 8008dd0 <_printf_i+0x118>
 8008dcc:	2e00      	cmp	r6, #0
 8008dce:	d04d      	beq.n	8008e6c <_printf_i+0x1b4>
 8008dd0:	4616      	mov	r6, r2
 8008dd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008dd6:	fb03 5711 	mls	r7, r3, r1, r5
 8008dda:	5dc7      	ldrb	r7, [r0, r7]
 8008ddc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008de0:	462f      	mov	r7, r5
 8008de2:	42bb      	cmp	r3, r7
 8008de4:	460d      	mov	r5, r1
 8008de6:	d9f4      	bls.n	8008dd2 <_printf_i+0x11a>
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d10b      	bne.n	8008e04 <_printf_i+0x14c>
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	07df      	lsls	r7, r3, #31
 8008df0:	d508      	bpl.n	8008e04 <_printf_i+0x14c>
 8008df2:	6923      	ldr	r3, [r4, #16]
 8008df4:	6861      	ldr	r1, [r4, #4]
 8008df6:	4299      	cmp	r1, r3
 8008df8:	bfde      	ittt	le
 8008dfa:	2330      	movle	r3, #48	; 0x30
 8008dfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e04:	1b92      	subs	r2, r2, r6
 8008e06:	6122      	str	r2, [r4, #16]
 8008e08:	f8cd a000 	str.w	sl, [sp]
 8008e0c:	464b      	mov	r3, r9
 8008e0e:	aa03      	add	r2, sp, #12
 8008e10:	4621      	mov	r1, r4
 8008e12:	4640      	mov	r0, r8
 8008e14:	f7ff fee2 	bl	8008bdc <_printf_common>
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d14c      	bne.n	8008eb6 <_printf_i+0x1fe>
 8008e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e20:	b004      	add	sp, #16
 8008e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e26:	4835      	ldr	r0, [pc, #212]	; (8008efc <_printf_i+0x244>)
 8008e28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	680e      	ldr	r6, [r1, #0]
 8008e30:	061f      	lsls	r7, r3, #24
 8008e32:	f856 5b04 	ldr.w	r5, [r6], #4
 8008e36:	600e      	str	r6, [r1, #0]
 8008e38:	d514      	bpl.n	8008e64 <_printf_i+0x1ac>
 8008e3a:	07d9      	lsls	r1, r3, #31
 8008e3c:	bf44      	itt	mi
 8008e3e:	f043 0320 	orrmi.w	r3, r3, #32
 8008e42:	6023      	strmi	r3, [r4, #0]
 8008e44:	b91d      	cbnz	r5, 8008e4e <_printf_i+0x196>
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	f023 0320 	bic.w	r3, r3, #32
 8008e4c:	6023      	str	r3, [r4, #0]
 8008e4e:	2310      	movs	r3, #16
 8008e50:	e7b0      	b.n	8008db4 <_printf_i+0xfc>
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	f043 0320 	orr.w	r3, r3, #32
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	2378      	movs	r3, #120	; 0x78
 8008e5c:	4828      	ldr	r0, [pc, #160]	; (8008f00 <_printf_i+0x248>)
 8008e5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e62:	e7e3      	b.n	8008e2c <_printf_i+0x174>
 8008e64:	065e      	lsls	r6, r3, #25
 8008e66:	bf48      	it	mi
 8008e68:	b2ad      	uxthmi	r5, r5
 8008e6a:	e7e6      	b.n	8008e3a <_printf_i+0x182>
 8008e6c:	4616      	mov	r6, r2
 8008e6e:	e7bb      	b.n	8008de8 <_printf_i+0x130>
 8008e70:	680b      	ldr	r3, [r1, #0]
 8008e72:	6826      	ldr	r6, [r4, #0]
 8008e74:	6960      	ldr	r0, [r4, #20]
 8008e76:	1d1d      	adds	r5, r3, #4
 8008e78:	600d      	str	r5, [r1, #0]
 8008e7a:	0635      	lsls	r5, r6, #24
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	d501      	bpl.n	8008e84 <_printf_i+0x1cc>
 8008e80:	6018      	str	r0, [r3, #0]
 8008e82:	e002      	b.n	8008e8a <_printf_i+0x1d2>
 8008e84:	0671      	lsls	r1, r6, #25
 8008e86:	d5fb      	bpl.n	8008e80 <_printf_i+0x1c8>
 8008e88:	8018      	strh	r0, [r3, #0]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	6123      	str	r3, [r4, #16]
 8008e8e:	4616      	mov	r6, r2
 8008e90:	e7ba      	b.n	8008e08 <_printf_i+0x150>
 8008e92:	680b      	ldr	r3, [r1, #0]
 8008e94:	1d1a      	adds	r2, r3, #4
 8008e96:	600a      	str	r2, [r1, #0]
 8008e98:	681e      	ldr	r6, [r3, #0]
 8008e9a:	6862      	ldr	r2, [r4, #4]
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f7f7 f99e 	bl	80001e0 <memchr>
 8008ea4:	b108      	cbz	r0, 8008eaa <_printf_i+0x1f2>
 8008ea6:	1b80      	subs	r0, r0, r6
 8008ea8:	6060      	str	r0, [r4, #4]
 8008eaa:	6863      	ldr	r3, [r4, #4]
 8008eac:	6123      	str	r3, [r4, #16]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eb4:	e7a8      	b.n	8008e08 <_printf_i+0x150>
 8008eb6:	6923      	ldr	r3, [r4, #16]
 8008eb8:	4632      	mov	r2, r6
 8008eba:	4649      	mov	r1, r9
 8008ebc:	4640      	mov	r0, r8
 8008ebe:	47d0      	blx	sl
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	d0ab      	beq.n	8008e1c <_printf_i+0x164>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	079b      	lsls	r3, r3, #30
 8008ec8:	d413      	bmi.n	8008ef2 <_printf_i+0x23a>
 8008eca:	68e0      	ldr	r0, [r4, #12]
 8008ecc:	9b03      	ldr	r3, [sp, #12]
 8008ece:	4298      	cmp	r0, r3
 8008ed0:	bfb8      	it	lt
 8008ed2:	4618      	movlt	r0, r3
 8008ed4:	e7a4      	b.n	8008e20 <_printf_i+0x168>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	4632      	mov	r2, r6
 8008eda:	4649      	mov	r1, r9
 8008edc:	4640      	mov	r0, r8
 8008ede:	47d0      	blx	sl
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	d09b      	beq.n	8008e1c <_printf_i+0x164>
 8008ee4:	3501      	adds	r5, #1
 8008ee6:	68e3      	ldr	r3, [r4, #12]
 8008ee8:	9903      	ldr	r1, [sp, #12]
 8008eea:	1a5b      	subs	r3, r3, r1
 8008eec:	42ab      	cmp	r3, r5
 8008eee:	dcf2      	bgt.n	8008ed6 <_printf_i+0x21e>
 8008ef0:	e7eb      	b.n	8008eca <_printf_i+0x212>
 8008ef2:	2500      	movs	r5, #0
 8008ef4:	f104 0619 	add.w	r6, r4, #25
 8008ef8:	e7f5      	b.n	8008ee6 <_printf_i+0x22e>
 8008efa:	bf00      	nop
 8008efc:	08009c17 	.word	0x08009c17
 8008f00:	08009c28 	.word	0x08009c28

08008f04 <_sbrk_r>:
 8008f04:	b538      	push	{r3, r4, r5, lr}
 8008f06:	4d06      	ldr	r5, [pc, #24]	; (8008f20 <_sbrk_r+0x1c>)
 8008f08:	2300      	movs	r3, #0
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	4608      	mov	r0, r1
 8008f0e:	602b      	str	r3, [r5, #0]
 8008f10:	f7f8 fd62 	bl	80019d8 <_sbrk>
 8008f14:	1c43      	adds	r3, r0, #1
 8008f16:	d102      	bne.n	8008f1e <_sbrk_r+0x1a>
 8008f18:	682b      	ldr	r3, [r5, #0]
 8008f1a:	b103      	cbz	r3, 8008f1e <_sbrk_r+0x1a>
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	20004bcc 	.word	0x20004bcc

08008f24 <__swbuf_r>:
 8008f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f26:	460e      	mov	r6, r1
 8008f28:	4614      	mov	r4, r2
 8008f2a:	4605      	mov	r5, r0
 8008f2c:	b118      	cbz	r0, 8008f36 <__swbuf_r+0x12>
 8008f2e:	6983      	ldr	r3, [r0, #24]
 8008f30:	b90b      	cbnz	r3, 8008f36 <__swbuf_r+0x12>
 8008f32:	f000 f9d9 	bl	80092e8 <__sinit>
 8008f36:	4b21      	ldr	r3, [pc, #132]	; (8008fbc <__swbuf_r+0x98>)
 8008f38:	429c      	cmp	r4, r3
 8008f3a:	d12b      	bne.n	8008f94 <__swbuf_r+0x70>
 8008f3c:	686c      	ldr	r4, [r5, #4]
 8008f3e:	69a3      	ldr	r3, [r4, #24]
 8008f40:	60a3      	str	r3, [r4, #8]
 8008f42:	89a3      	ldrh	r3, [r4, #12]
 8008f44:	071a      	lsls	r2, r3, #28
 8008f46:	d52f      	bpl.n	8008fa8 <__swbuf_r+0x84>
 8008f48:	6923      	ldr	r3, [r4, #16]
 8008f4a:	b36b      	cbz	r3, 8008fa8 <__swbuf_r+0x84>
 8008f4c:	6923      	ldr	r3, [r4, #16]
 8008f4e:	6820      	ldr	r0, [r4, #0]
 8008f50:	1ac0      	subs	r0, r0, r3
 8008f52:	6963      	ldr	r3, [r4, #20]
 8008f54:	b2f6      	uxtb	r6, r6
 8008f56:	4283      	cmp	r3, r0
 8008f58:	4637      	mov	r7, r6
 8008f5a:	dc04      	bgt.n	8008f66 <__swbuf_r+0x42>
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f000 f92e 	bl	80091c0 <_fflush_r>
 8008f64:	bb30      	cbnz	r0, 8008fb4 <__swbuf_r+0x90>
 8008f66:	68a3      	ldr	r3, [r4, #8]
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	60a3      	str	r3, [r4, #8]
 8008f6c:	6823      	ldr	r3, [r4, #0]
 8008f6e:	1c5a      	adds	r2, r3, #1
 8008f70:	6022      	str	r2, [r4, #0]
 8008f72:	701e      	strb	r6, [r3, #0]
 8008f74:	6963      	ldr	r3, [r4, #20]
 8008f76:	3001      	adds	r0, #1
 8008f78:	4283      	cmp	r3, r0
 8008f7a:	d004      	beq.n	8008f86 <__swbuf_r+0x62>
 8008f7c:	89a3      	ldrh	r3, [r4, #12]
 8008f7e:	07db      	lsls	r3, r3, #31
 8008f80:	d506      	bpl.n	8008f90 <__swbuf_r+0x6c>
 8008f82:	2e0a      	cmp	r6, #10
 8008f84:	d104      	bne.n	8008f90 <__swbuf_r+0x6c>
 8008f86:	4621      	mov	r1, r4
 8008f88:	4628      	mov	r0, r5
 8008f8a:	f000 f919 	bl	80091c0 <_fflush_r>
 8008f8e:	b988      	cbnz	r0, 8008fb4 <__swbuf_r+0x90>
 8008f90:	4638      	mov	r0, r7
 8008f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f94:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <__swbuf_r+0x9c>)
 8008f96:	429c      	cmp	r4, r3
 8008f98:	d101      	bne.n	8008f9e <__swbuf_r+0x7a>
 8008f9a:	68ac      	ldr	r4, [r5, #8]
 8008f9c:	e7cf      	b.n	8008f3e <__swbuf_r+0x1a>
 8008f9e:	4b09      	ldr	r3, [pc, #36]	; (8008fc4 <__swbuf_r+0xa0>)
 8008fa0:	429c      	cmp	r4, r3
 8008fa2:	bf08      	it	eq
 8008fa4:	68ec      	ldreq	r4, [r5, #12]
 8008fa6:	e7ca      	b.n	8008f3e <__swbuf_r+0x1a>
 8008fa8:	4621      	mov	r1, r4
 8008faa:	4628      	mov	r0, r5
 8008fac:	f000 f80c 	bl	8008fc8 <__swsetup_r>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	d0cb      	beq.n	8008f4c <__swbuf_r+0x28>
 8008fb4:	f04f 37ff 	mov.w	r7, #4294967295
 8008fb8:	e7ea      	b.n	8008f90 <__swbuf_r+0x6c>
 8008fba:	bf00      	nop
 8008fbc:	08009c5c 	.word	0x08009c5c
 8008fc0:	08009c7c 	.word	0x08009c7c
 8008fc4:	08009c3c 	.word	0x08009c3c

08008fc8 <__swsetup_r>:
 8008fc8:	4b32      	ldr	r3, [pc, #200]	; (8009094 <__swsetup_r+0xcc>)
 8008fca:	b570      	push	{r4, r5, r6, lr}
 8008fcc:	681d      	ldr	r5, [r3, #0]
 8008fce:	4606      	mov	r6, r0
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	b125      	cbz	r5, 8008fde <__swsetup_r+0x16>
 8008fd4:	69ab      	ldr	r3, [r5, #24]
 8008fd6:	b913      	cbnz	r3, 8008fde <__swsetup_r+0x16>
 8008fd8:	4628      	mov	r0, r5
 8008fda:	f000 f985 	bl	80092e8 <__sinit>
 8008fde:	4b2e      	ldr	r3, [pc, #184]	; (8009098 <__swsetup_r+0xd0>)
 8008fe0:	429c      	cmp	r4, r3
 8008fe2:	d10f      	bne.n	8009004 <__swsetup_r+0x3c>
 8008fe4:	686c      	ldr	r4, [r5, #4]
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fec:	0719      	lsls	r1, r3, #28
 8008fee:	d42c      	bmi.n	800904a <__swsetup_r+0x82>
 8008ff0:	06dd      	lsls	r5, r3, #27
 8008ff2:	d411      	bmi.n	8009018 <__swsetup_r+0x50>
 8008ff4:	2309      	movs	r3, #9
 8008ff6:	6033      	str	r3, [r6, #0]
 8008ff8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ffc:	81a3      	strh	r3, [r4, #12]
 8008ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8009002:	e03e      	b.n	8009082 <__swsetup_r+0xba>
 8009004:	4b25      	ldr	r3, [pc, #148]	; (800909c <__swsetup_r+0xd4>)
 8009006:	429c      	cmp	r4, r3
 8009008:	d101      	bne.n	800900e <__swsetup_r+0x46>
 800900a:	68ac      	ldr	r4, [r5, #8]
 800900c:	e7eb      	b.n	8008fe6 <__swsetup_r+0x1e>
 800900e:	4b24      	ldr	r3, [pc, #144]	; (80090a0 <__swsetup_r+0xd8>)
 8009010:	429c      	cmp	r4, r3
 8009012:	bf08      	it	eq
 8009014:	68ec      	ldreq	r4, [r5, #12]
 8009016:	e7e6      	b.n	8008fe6 <__swsetup_r+0x1e>
 8009018:	0758      	lsls	r0, r3, #29
 800901a:	d512      	bpl.n	8009042 <__swsetup_r+0x7a>
 800901c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800901e:	b141      	cbz	r1, 8009032 <__swsetup_r+0x6a>
 8009020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009024:	4299      	cmp	r1, r3
 8009026:	d002      	beq.n	800902e <__swsetup_r+0x66>
 8009028:	4630      	mov	r0, r6
 800902a:	f7ff fa77 	bl	800851c <_free_r>
 800902e:	2300      	movs	r3, #0
 8009030:	6363      	str	r3, [r4, #52]	; 0x34
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009038:	81a3      	strh	r3, [r4, #12]
 800903a:	2300      	movs	r3, #0
 800903c:	6063      	str	r3, [r4, #4]
 800903e:	6923      	ldr	r3, [r4, #16]
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	f043 0308 	orr.w	r3, r3, #8
 8009048:	81a3      	strh	r3, [r4, #12]
 800904a:	6923      	ldr	r3, [r4, #16]
 800904c:	b94b      	cbnz	r3, 8009062 <__swsetup_r+0x9a>
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009058:	d003      	beq.n	8009062 <__swsetup_r+0x9a>
 800905a:	4621      	mov	r1, r4
 800905c:	4630      	mov	r0, r6
 800905e:	f000 fa07 	bl	8009470 <__smakebuf_r>
 8009062:	89a0      	ldrh	r0, [r4, #12]
 8009064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009068:	f010 0301 	ands.w	r3, r0, #1
 800906c:	d00a      	beq.n	8009084 <__swsetup_r+0xbc>
 800906e:	2300      	movs	r3, #0
 8009070:	60a3      	str	r3, [r4, #8]
 8009072:	6963      	ldr	r3, [r4, #20]
 8009074:	425b      	negs	r3, r3
 8009076:	61a3      	str	r3, [r4, #24]
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	b943      	cbnz	r3, 800908e <__swsetup_r+0xc6>
 800907c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009080:	d1ba      	bne.n	8008ff8 <__swsetup_r+0x30>
 8009082:	bd70      	pop	{r4, r5, r6, pc}
 8009084:	0781      	lsls	r1, r0, #30
 8009086:	bf58      	it	pl
 8009088:	6963      	ldrpl	r3, [r4, #20]
 800908a:	60a3      	str	r3, [r4, #8]
 800908c:	e7f4      	b.n	8009078 <__swsetup_r+0xb0>
 800908e:	2000      	movs	r0, #0
 8009090:	e7f7      	b.n	8009082 <__swsetup_r+0xba>
 8009092:	bf00      	nop
 8009094:	20000018 	.word	0x20000018
 8009098:	08009c5c 	.word	0x08009c5c
 800909c:	08009c7c 	.word	0x08009c7c
 80090a0:	08009c3c 	.word	0x08009c3c

080090a4 <abort>:
 80090a4:	b508      	push	{r3, lr}
 80090a6:	2006      	movs	r0, #6
 80090a8:	f000 fa96 	bl	80095d8 <raise>
 80090ac:	2001      	movs	r0, #1
 80090ae:	f7f8 fc1b 	bl	80018e8 <_exit>
	...

080090b4 <__sflush_r>:
 80090b4:	898a      	ldrh	r2, [r1, #12]
 80090b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ba:	4605      	mov	r5, r0
 80090bc:	0710      	lsls	r0, r2, #28
 80090be:	460c      	mov	r4, r1
 80090c0:	d458      	bmi.n	8009174 <__sflush_r+0xc0>
 80090c2:	684b      	ldr	r3, [r1, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	dc05      	bgt.n	80090d4 <__sflush_r+0x20>
 80090c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	dc02      	bgt.n	80090d4 <__sflush_r+0x20>
 80090ce:	2000      	movs	r0, #0
 80090d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	d0f9      	beq.n	80090ce <__sflush_r+0x1a>
 80090da:	2300      	movs	r3, #0
 80090dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090e0:	682f      	ldr	r7, [r5, #0]
 80090e2:	602b      	str	r3, [r5, #0]
 80090e4:	d032      	beq.n	800914c <__sflush_r+0x98>
 80090e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	075a      	lsls	r2, r3, #29
 80090ec:	d505      	bpl.n	80090fa <__sflush_r+0x46>
 80090ee:	6863      	ldr	r3, [r4, #4]
 80090f0:	1ac0      	subs	r0, r0, r3
 80090f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090f4:	b10b      	cbz	r3, 80090fa <__sflush_r+0x46>
 80090f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090f8:	1ac0      	subs	r0, r0, r3
 80090fa:	2300      	movs	r3, #0
 80090fc:	4602      	mov	r2, r0
 80090fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009100:	6a21      	ldr	r1, [r4, #32]
 8009102:	4628      	mov	r0, r5
 8009104:	47b0      	blx	r6
 8009106:	1c43      	adds	r3, r0, #1
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	d106      	bne.n	800911a <__sflush_r+0x66>
 800910c:	6829      	ldr	r1, [r5, #0]
 800910e:	291d      	cmp	r1, #29
 8009110:	d82c      	bhi.n	800916c <__sflush_r+0xb8>
 8009112:	4a2a      	ldr	r2, [pc, #168]	; (80091bc <__sflush_r+0x108>)
 8009114:	40ca      	lsrs	r2, r1
 8009116:	07d6      	lsls	r6, r2, #31
 8009118:	d528      	bpl.n	800916c <__sflush_r+0xb8>
 800911a:	2200      	movs	r2, #0
 800911c:	6062      	str	r2, [r4, #4]
 800911e:	04d9      	lsls	r1, r3, #19
 8009120:	6922      	ldr	r2, [r4, #16]
 8009122:	6022      	str	r2, [r4, #0]
 8009124:	d504      	bpl.n	8009130 <__sflush_r+0x7c>
 8009126:	1c42      	adds	r2, r0, #1
 8009128:	d101      	bne.n	800912e <__sflush_r+0x7a>
 800912a:	682b      	ldr	r3, [r5, #0]
 800912c:	b903      	cbnz	r3, 8009130 <__sflush_r+0x7c>
 800912e:	6560      	str	r0, [r4, #84]	; 0x54
 8009130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009132:	602f      	str	r7, [r5, #0]
 8009134:	2900      	cmp	r1, #0
 8009136:	d0ca      	beq.n	80090ce <__sflush_r+0x1a>
 8009138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800913c:	4299      	cmp	r1, r3
 800913e:	d002      	beq.n	8009146 <__sflush_r+0x92>
 8009140:	4628      	mov	r0, r5
 8009142:	f7ff f9eb 	bl	800851c <_free_r>
 8009146:	2000      	movs	r0, #0
 8009148:	6360      	str	r0, [r4, #52]	; 0x34
 800914a:	e7c1      	b.n	80090d0 <__sflush_r+0x1c>
 800914c:	6a21      	ldr	r1, [r4, #32]
 800914e:	2301      	movs	r3, #1
 8009150:	4628      	mov	r0, r5
 8009152:	47b0      	blx	r6
 8009154:	1c41      	adds	r1, r0, #1
 8009156:	d1c7      	bne.n	80090e8 <__sflush_r+0x34>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d0c4      	beq.n	80090e8 <__sflush_r+0x34>
 800915e:	2b1d      	cmp	r3, #29
 8009160:	d001      	beq.n	8009166 <__sflush_r+0xb2>
 8009162:	2b16      	cmp	r3, #22
 8009164:	d101      	bne.n	800916a <__sflush_r+0xb6>
 8009166:	602f      	str	r7, [r5, #0]
 8009168:	e7b1      	b.n	80090ce <__sflush_r+0x1a>
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009170:	81a3      	strh	r3, [r4, #12]
 8009172:	e7ad      	b.n	80090d0 <__sflush_r+0x1c>
 8009174:	690f      	ldr	r7, [r1, #16]
 8009176:	2f00      	cmp	r7, #0
 8009178:	d0a9      	beq.n	80090ce <__sflush_r+0x1a>
 800917a:	0793      	lsls	r3, r2, #30
 800917c:	680e      	ldr	r6, [r1, #0]
 800917e:	bf08      	it	eq
 8009180:	694b      	ldreq	r3, [r1, #20]
 8009182:	600f      	str	r7, [r1, #0]
 8009184:	bf18      	it	ne
 8009186:	2300      	movne	r3, #0
 8009188:	eba6 0807 	sub.w	r8, r6, r7
 800918c:	608b      	str	r3, [r1, #8]
 800918e:	f1b8 0f00 	cmp.w	r8, #0
 8009192:	dd9c      	ble.n	80090ce <__sflush_r+0x1a>
 8009194:	6a21      	ldr	r1, [r4, #32]
 8009196:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009198:	4643      	mov	r3, r8
 800919a:	463a      	mov	r2, r7
 800919c:	4628      	mov	r0, r5
 800919e:	47b0      	blx	r6
 80091a0:	2800      	cmp	r0, #0
 80091a2:	dc06      	bgt.n	80091b2 <__sflush_r+0xfe>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091aa:	81a3      	strh	r3, [r4, #12]
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
 80091b0:	e78e      	b.n	80090d0 <__sflush_r+0x1c>
 80091b2:	4407      	add	r7, r0
 80091b4:	eba8 0800 	sub.w	r8, r8, r0
 80091b8:	e7e9      	b.n	800918e <__sflush_r+0xda>
 80091ba:	bf00      	nop
 80091bc:	20400001 	.word	0x20400001

080091c0 <_fflush_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	690b      	ldr	r3, [r1, #16]
 80091c4:	4605      	mov	r5, r0
 80091c6:	460c      	mov	r4, r1
 80091c8:	b913      	cbnz	r3, 80091d0 <_fflush_r+0x10>
 80091ca:	2500      	movs	r5, #0
 80091cc:	4628      	mov	r0, r5
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	b118      	cbz	r0, 80091da <_fflush_r+0x1a>
 80091d2:	6983      	ldr	r3, [r0, #24]
 80091d4:	b90b      	cbnz	r3, 80091da <_fflush_r+0x1a>
 80091d6:	f000 f887 	bl	80092e8 <__sinit>
 80091da:	4b14      	ldr	r3, [pc, #80]	; (800922c <_fflush_r+0x6c>)
 80091dc:	429c      	cmp	r4, r3
 80091de:	d11b      	bne.n	8009218 <_fflush_r+0x58>
 80091e0:	686c      	ldr	r4, [r5, #4]
 80091e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d0ef      	beq.n	80091ca <_fflush_r+0xa>
 80091ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091ec:	07d0      	lsls	r0, r2, #31
 80091ee:	d404      	bmi.n	80091fa <_fflush_r+0x3a>
 80091f0:	0599      	lsls	r1, r3, #22
 80091f2:	d402      	bmi.n	80091fa <_fflush_r+0x3a>
 80091f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091f6:	f000 f915 	bl	8009424 <__retarget_lock_acquire_recursive>
 80091fa:	4628      	mov	r0, r5
 80091fc:	4621      	mov	r1, r4
 80091fe:	f7ff ff59 	bl	80090b4 <__sflush_r>
 8009202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009204:	07da      	lsls	r2, r3, #31
 8009206:	4605      	mov	r5, r0
 8009208:	d4e0      	bmi.n	80091cc <_fflush_r+0xc>
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	059b      	lsls	r3, r3, #22
 800920e:	d4dd      	bmi.n	80091cc <_fflush_r+0xc>
 8009210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009212:	f000 f908 	bl	8009426 <__retarget_lock_release_recursive>
 8009216:	e7d9      	b.n	80091cc <_fflush_r+0xc>
 8009218:	4b05      	ldr	r3, [pc, #20]	; (8009230 <_fflush_r+0x70>)
 800921a:	429c      	cmp	r4, r3
 800921c:	d101      	bne.n	8009222 <_fflush_r+0x62>
 800921e:	68ac      	ldr	r4, [r5, #8]
 8009220:	e7df      	b.n	80091e2 <_fflush_r+0x22>
 8009222:	4b04      	ldr	r3, [pc, #16]	; (8009234 <_fflush_r+0x74>)
 8009224:	429c      	cmp	r4, r3
 8009226:	bf08      	it	eq
 8009228:	68ec      	ldreq	r4, [r5, #12]
 800922a:	e7da      	b.n	80091e2 <_fflush_r+0x22>
 800922c:	08009c5c 	.word	0x08009c5c
 8009230:	08009c7c 	.word	0x08009c7c
 8009234:	08009c3c 	.word	0x08009c3c

08009238 <std>:
 8009238:	2300      	movs	r3, #0
 800923a:	b510      	push	{r4, lr}
 800923c:	4604      	mov	r4, r0
 800923e:	e9c0 3300 	strd	r3, r3, [r0]
 8009242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009246:	6083      	str	r3, [r0, #8]
 8009248:	8181      	strh	r1, [r0, #12]
 800924a:	6643      	str	r3, [r0, #100]	; 0x64
 800924c:	81c2      	strh	r2, [r0, #14]
 800924e:	6183      	str	r3, [r0, #24]
 8009250:	4619      	mov	r1, r3
 8009252:	2208      	movs	r2, #8
 8009254:	305c      	adds	r0, #92	; 0x5c
 8009256:	f7ff f8c1 	bl	80083dc <memset>
 800925a:	4b05      	ldr	r3, [pc, #20]	; (8009270 <std+0x38>)
 800925c:	6263      	str	r3, [r4, #36]	; 0x24
 800925e:	4b05      	ldr	r3, [pc, #20]	; (8009274 <std+0x3c>)
 8009260:	62a3      	str	r3, [r4, #40]	; 0x28
 8009262:	4b05      	ldr	r3, [pc, #20]	; (8009278 <std+0x40>)
 8009264:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009266:	4b05      	ldr	r3, [pc, #20]	; (800927c <std+0x44>)
 8009268:	6224      	str	r4, [r4, #32]
 800926a:	6323      	str	r3, [r4, #48]	; 0x30
 800926c:	bd10      	pop	{r4, pc}
 800926e:	bf00      	nop
 8009270:	08009611 	.word	0x08009611
 8009274:	08009633 	.word	0x08009633
 8009278:	0800966b 	.word	0x0800966b
 800927c:	0800968f 	.word	0x0800968f

08009280 <_cleanup_r>:
 8009280:	4901      	ldr	r1, [pc, #4]	; (8009288 <_cleanup_r+0x8>)
 8009282:	f000 b8af 	b.w	80093e4 <_fwalk_reent>
 8009286:	bf00      	nop
 8009288:	080091c1 	.word	0x080091c1

0800928c <__sfmoreglue>:
 800928c:	b570      	push	{r4, r5, r6, lr}
 800928e:	1e4a      	subs	r2, r1, #1
 8009290:	2568      	movs	r5, #104	; 0x68
 8009292:	4355      	muls	r5, r2
 8009294:	460e      	mov	r6, r1
 8009296:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800929a:	f7ff f98f 	bl	80085bc <_malloc_r>
 800929e:	4604      	mov	r4, r0
 80092a0:	b140      	cbz	r0, 80092b4 <__sfmoreglue+0x28>
 80092a2:	2100      	movs	r1, #0
 80092a4:	e9c0 1600 	strd	r1, r6, [r0]
 80092a8:	300c      	adds	r0, #12
 80092aa:	60a0      	str	r0, [r4, #8]
 80092ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80092b0:	f7ff f894 	bl	80083dc <memset>
 80092b4:	4620      	mov	r0, r4
 80092b6:	bd70      	pop	{r4, r5, r6, pc}

080092b8 <__sfp_lock_acquire>:
 80092b8:	4801      	ldr	r0, [pc, #4]	; (80092c0 <__sfp_lock_acquire+0x8>)
 80092ba:	f000 b8b3 	b.w	8009424 <__retarget_lock_acquire_recursive>
 80092be:	bf00      	nop
 80092c0:	20004bc8 	.word	0x20004bc8

080092c4 <__sfp_lock_release>:
 80092c4:	4801      	ldr	r0, [pc, #4]	; (80092cc <__sfp_lock_release+0x8>)
 80092c6:	f000 b8ae 	b.w	8009426 <__retarget_lock_release_recursive>
 80092ca:	bf00      	nop
 80092cc:	20004bc8 	.word	0x20004bc8

080092d0 <__sinit_lock_acquire>:
 80092d0:	4801      	ldr	r0, [pc, #4]	; (80092d8 <__sinit_lock_acquire+0x8>)
 80092d2:	f000 b8a7 	b.w	8009424 <__retarget_lock_acquire_recursive>
 80092d6:	bf00      	nop
 80092d8:	20004bc3 	.word	0x20004bc3

080092dc <__sinit_lock_release>:
 80092dc:	4801      	ldr	r0, [pc, #4]	; (80092e4 <__sinit_lock_release+0x8>)
 80092de:	f000 b8a2 	b.w	8009426 <__retarget_lock_release_recursive>
 80092e2:	bf00      	nop
 80092e4:	20004bc3 	.word	0x20004bc3

080092e8 <__sinit>:
 80092e8:	b510      	push	{r4, lr}
 80092ea:	4604      	mov	r4, r0
 80092ec:	f7ff fff0 	bl	80092d0 <__sinit_lock_acquire>
 80092f0:	69a3      	ldr	r3, [r4, #24]
 80092f2:	b11b      	cbz	r3, 80092fc <__sinit+0x14>
 80092f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092f8:	f7ff bff0 	b.w	80092dc <__sinit_lock_release>
 80092fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009300:	6523      	str	r3, [r4, #80]	; 0x50
 8009302:	4b13      	ldr	r3, [pc, #76]	; (8009350 <__sinit+0x68>)
 8009304:	4a13      	ldr	r2, [pc, #76]	; (8009354 <__sinit+0x6c>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	62a2      	str	r2, [r4, #40]	; 0x28
 800930a:	42a3      	cmp	r3, r4
 800930c:	bf04      	itt	eq
 800930e:	2301      	moveq	r3, #1
 8009310:	61a3      	streq	r3, [r4, #24]
 8009312:	4620      	mov	r0, r4
 8009314:	f000 f820 	bl	8009358 <__sfp>
 8009318:	6060      	str	r0, [r4, #4]
 800931a:	4620      	mov	r0, r4
 800931c:	f000 f81c 	bl	8009358 <__sfp>
 8009320:	60a0      	str	r0, [r4, #8]
 8009322:	4620      	mov	r0, r4
 8009324:	f000 f818 	bl	8009358 <__sfp>
 8009328:	2200      	movs	r2, #0
 800932a:	60e0      	str	r0, [r4, #12]
 800932c:	2104      	movs	r1, #4
 800932e:	6860      	ldr	r0, [r4, #4]
 8009330:	f7ff ff82 	bl	8009238 <std>
 8009334:	68a0      	ldr	r0, [r4, #8]
 8009336:	2201      	movs	r2, #1
 8009338:	2109      	movs	r1, #9
 800933a:	f7ff ff7d 	bl	8009238 <std>
 800933e:	68e0      	ldr	r0, [r4, #12]
 8009340:	2202      	movs	r2, #2
 8009342:	2112      	movs	r1, #18
 8009344:	f7ff ff78 	bl	8009238 <std>
 8009348:	2301      	movs	r3, #1
 800934a:	61a3      	str	r3, [r4, #24]
 800934c:	e7d2      	b.n	80092f4 <__sinit+0xc>
 800934e:	bf00      	nop
 8009350:	08009b50 	.word	0x08009b50
 8009354:	08009281 	.word	0x08009281

08009358 <__sfp>:
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	4607      	mov	r7, r0
 800935c:	f7ff ffac 	bl	80092b8 <__sfp_lock_acquire>
 8009360:	4b1e      	ldr	r3, [pc, #120]	; (80093dc <__sfp+0x84>)
 8009362:	681e      	ldr	r6, [r3, #0]
 8009364:	69b3      	ldr	r3, [r6, #24]
 8009366:	b913      	cbnz	r3, 800936e <__sfp+0x16>
 8009368:	4630      	mov	r0, r6
 800936a:	f7ff ffbd 	bl	80092e8 <__sinit>
 800936e:	3648      	adds	r6, #72	; 0x48
 8009370:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009374:	3b01      	subs	r3, #1
 8009376:	d503      	bpl.n	8009380 <__sfp+0x28>
 8009378:	6833      	ldr	r3, [r6, #0]
 800937a:	b30b      	cbz	r3, 80093c0 <__sfp+0x68>
 800937c:	6836      	ldr	r6, [r6, #0]
 800937e:	e7f7      	b.n	8009370 <__sfp+0x18>
 8009380:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009384:	b9d5      	cbnz	r5, 80093bc <__sfp+0x64>
 8009386:	4b16      	ldr	r3, [pc, #88]	; (80093e0 <__sfp+0x88>)
 8009388:	60e3      	str	r3, [r4, #12]
 800938a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800938e:	6665      	str	r5, [r4, #100]	; 0x64
 8009390:	f000 f847 	bl	8009422 <__retarget_lock_init_recursive>
 8009394:	f7ff ff96 	bl	80092c4 <__sfp_lock_release>
 8009398:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800939c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80093a0:	6025      	str	r5, [r4, #0]
 80093a2:	61a5      	str	r5, [r4, #24]
 80093a4:	2208      	movs	r2, #8
 80093a6:	4629      	mov	r1, r5
 80093a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80093ac:	f7ff f816 	bl	80083dc <memset>
 80093b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80093b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80093b8:	4620      	mov	r0, r4
 80093ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093bc:	3468      	adds	r4, #104	; 0x68
 80093be:	e7d9      	b.n	8009374 <__sfp+0x1c>
 80093c0:	2104      	movs	r1, #4
 80093c2:	4638      	mov	r0, r7
 80093c4:	f7ff ff62 	bl	800928c <__sfmoreglue>
 80093c8:	4604      	mov	r4, r0
 80093ca:	6030      	str	r0, [r6, #0]
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d1d5      	bne.n	800937c <__sfp+0x24>
 80093d0:	f7ff ff78 	bl	80092c4 <__sfp_lock_release>
 80093d4:	230c      	movs	r3, #12
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	e7ee      	b.n	80093b8 <__sfp+0x60>
 80093da:	bf00      	nop
 80093dc:	08009b50 	.word	0x08009b50
 80093e0:	ffff0001 	.word	0xffff0001

080093e4 <_fwalk_reent>:
 80093e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e8:	4606      	mov	r6, r0
 80093ea:	4688      	mov	r8, r1
 80093ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093f0:	2700      	movs	r7, #0
 80093f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093f6:	f1b9 0901 	subs.w	r9, r9, #1
 80093fa:	d505      	bpl.n	8009408 <_fwalk_reent+0x24>
 80093fc:	6824      	ldr	r4, [r4, #0]
 80093fe:	2c00      	cmp	r4, #0
 8009400:	d1f7      	bne.n	80093f2 <_fwalk_reent+0xe>
 8009402:	4638      	mov	r0, r7
 8009404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009408:	89ab      	ldrh	r3, [r5, #12]
 800940a:	2b01      	cmp	r3, #1
 800940c:	d907      	bls.n	800941e <_fwalk_reent+0x3a>
 800940e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009412:	3301      	adds	r3, #1
 8009414:	d003      	beq.n	800941e <_fwalk_reent+0x3a>
 8009416:	4629      	mov	r1, r5
 8009418:	4630      	mov	r0, r6
 800941a:	47c0      	blx	r8
 800941c:	4307      	orrs	r7, r0
 800941e:	3568      	adds	r5, #104	; 0x68
 8009420:	e7e9      	b.n	80093f6 <_fwalk_reent+0x12>

08009422 <__retarget_lock_init_recursive>:
 8009422:	4770      	bx	lr

08009424 <__retarget_lock_acquire_recursive>:
 8009424:	4770      	bx	lr

08009426 <__retarget_lock_release_recursive>:
 8009426:	4770      	bx	lr

08009428 <__swhatbuf_r>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	460e      	mov	r6, r1
 800942c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009430:	2900      	cmp	r1, #0
 8009432:	b096      	sub	sp, #88	; 0x58
 8009434:	4614      	mov	r4, r2
 8009436:	461d      	mov	r5, r3
 8009438:	da07      	bge.n	800944a <__swhatbuf_r+0x22>
 800943a:	2300      	movs	r3, #0
 800943c:	602b      	str	r3, [r5, #0]
 800943e:	89b3      	ldrh	r3, [r6, #12]
 8009440:	061a      	lsls	r2, r3, #24
 8009442:	d410      	bmi.n	8009466 <__swhatbuf_r+0x3e>
 8009444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009448:	e00e      	b.n	8009468 <__swhatbuf_r+0x40>
 800944a:	466a      	mov	r2, sp
 800944c:	f000 f946 	bl	80096dc <_fstat_r>
 8009450:	2800      	cmp	r0, #0
 8009452:	dbf2      	blt.n	800943a <__swhatbuf_r+0x12>
 8009454:	9a01      	ldr	r2, [sp, #4]
 8009456:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800945a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800945e:	425a      	negs	r2, r3
 8009460:	415a      	adcs	r2, r3
 8009462:	602a      	str	r2, [r5, #0]
 8009464:	e7ee      	b.n	8009444 <__swhatbuf_r+0x1c>
 8009466:	2340      	movs	r3, #64	; 0x40
 8009468:	2000      	movs	r0, #0
 800946a:	6023      	str	r3, [r4, #0]
 800946c:	b016      	add	sp, #88	; 0x58
 800946e:	bd70      	pop	{r4, r5, r6, pc}

08009470 <__smakebuf_r>:
 8009470:	898b      	ldrh	r3, [r1, #12]
 8009472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009474:	079d      	lsls	r5, r3, #30
 8009476:	4606      	mov	r6, r0
 8009478:	460c      	mov	r4, r1
 800947a:	d507      	bpl.n	800948c <__smakebuf_r+0x1c>
 800947c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	6123      	str	r3, [r4, #16]
 8009484:	2301      	movs	r3, #1
 8009486:	6163      	str	r3, [r4, #20]
 8009488:	b002      	add	sp, #8
 800948a:	bd70      	pop	{r4, r5, r6, pc}
 800948c:	ab01      	add	r3, sp, #4
 800948e:	466a      	mov	r2, sp
 8009490:	f7ff ffca 	bl	8009428 <__swhatbuf_r>
 8009494:	9900      	ldr	r1, [sp, #0]
 8009496:	4605      	mov	r5, r0
 8009498:	4630      	mov	r0, r6
 800949a:	f7ff f88f 	bl	80085bc <_malloc_r>
 800949e:	b948      	cbnz	r0, 80094b4 <__smakebuf_r+0x44>
 80094a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a4:	059a      	lsls	r2, r3, #22
 80094a6:	d4ef      	bmi.n	8009488 <__smakebuf_r+0x18>
 80094a8:	f023 0303 	bic.w	r3, r3, #3
 80094ac:	f043 0302 	orr.w	r3, r3, #2
 80094b0:	81a3      	strh	r3, [r4, #12]
 80094b2:	e7e3      	b.n	800947c <__smakebuf_r+0xc>
 80094b4:	4b0d      	ldr	r3, [pc, #52]	; (80094ec <__smakebuf_r+0x7c>)
 80094b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	6020      	str	r0, [r4, #0]
 80094bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094c0:	81a3      	strh	r3, [r4, #12]
 80094c2:	9b00      	ldr	r3, [sp, #0]
 80094c4:	6163      	str	r3, [r4, #20]
 80094c6:	9b01      	ldr	r3, [sp, #4]
 80094c8:	6120      	str	r0, [r4, #16]
 80094ca:	b15b      	cbz	r3, 80094e4 <__smakebuf_r+0x74>
 80094cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094d0:	4630      	mov	r0, r6
 80094d2:	f000 f915 	bl	8009700 <_isatty_r>
 80094d6:	b128      	cbz	r0, 80094e4 <__smakebuf_r+0x74>
 80094d8:	89a3      	ldrh	r3, [r4, #12]
 80094da:	f023 0303 	bic.w	r3, r3, #3
 80094de:	f043 0301 	orr.w	r3, r3, #1
 80094e2:	81a3      	strh	r3, [r4, #12]
 80094e4:	89a0      	ldrh	r0, [r4, #12]
 80094e6:	4305      	orrs	r5, r0
 80094e8:	81a5      	strh	r5, [r4, #12]
 80094ea:	e7cd      	b.n	8009488 <__smakebuf_r+0x18>
 80094ec:	08009281 	.word	0x08009281

080094f0 <memmove>:
 80094f0:	4288      	cmp	r0, r1
 80094f2:	b510      	push	{r4, lr}
 80094f4:	eb01 0402 	add.w	r4, r1, r2
 80094f8:	d902      	bls.n	8009500 <memmove+0x10>
 80094fa:	4284      	cmp	r4, r0
 80094fc:	4623      	mov	r3, r4
 80094fe:	d807      	bhi.n	8009510 <memmove+0x20>
 8009500:	1e43      	subs	r3, r0, #1
 8009502:	42a1      	cmp	r1, r4
 8009504:	d008      	beq.n	8009518 <memmove+0x28>
 8009506:	f811 2b01 	ldrb.w	r2, [r1], #1
 800950a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800950e:	e7f8      	b.n	8009502 <memmove+0x12>
 8009510:	4402      	add	r2, r0
 8009512:	4601      	mov	r1, r0
 8009514:	428a      	cmp	r2, r1
 8009516:	d100      	bne.n	800951a <memmove+0x2a>
 8009518:	bd10      	pop	{r4, pc}
 800951a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800951e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009522:	e7f7      	b.n	8009514 <memmove+0x24>

08009524 <__malloc_lock>:
 8009524:	4801      	ldr	r0, [pc, #4]	; (800952c <__malloc_lock+0x8>)
 8009526:	f7ff bf7d 	b.w	8009424 <__retarget_lock_acquire_recursive>
 800952a:	bf00      	nop
 800952c:	20004bc4 	.word	0x20004bc4

08009530 <__malloc_unlock>:
 8009530:	4801      	ldr	r0, [pc, #4]	; (8009538 <__malloc_unlock+0x8>)
 8009532:	f7ff bf78 	b.w	8009426 <__retarget_lock_release_recursive>
 8009536:	bf00      	nop
 8009538:	20004bc4 	.word	0x20004bc4

0800953c <_realloc_r>:
 800953c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953e:	4607      	mov	r7, r0
 8009540:	4614      	mov	r4, r2
 8009542:	460e      	mov	r6, r1
 8009544:	b921      	cbnz	r1, 8009550 <_realloc_r+0x14>
 8009546:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800954a:	4611      	mov	r1, r2
 800954c:	f7ff b836 	b.w	80085bc <_malloc_r>
 8009550:	b922      	cbnz	r2, 800955c <_realloc_r+0x20>
 8009552:	f7fe ffe3 	bl	800851c <_free_r>
 8009556:	4625      	mov	r5, r4
 8009558:	4628      	mov	r0, r5
 800955a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800955c:	f000 f8f2 	bl	8009744 <_malloc_usable_size_r>
 8009560:	42a0      	cmp	r0, r4
 8009562:	d20f      	bcs.n	8009584 <_realloc_r+0x48>
 8009564:	4621      	mov	r1, r4
 8009566:	4638      	mov	r0, r7
 8009568:	f7ff f828 	bl	80085bc <_malloc_r>
 800956c:	4605      	mov	r5, r0
 800956e:	2800      	cmp	r0, #0
 8009570:	d0f2      	beq.n	8009558 <_realloc_r+0x1c>
 8009572:	4631      	mov	r1, r6
 8009574:	4622      	mov	r2, r4
 8009576:	f7fe ff23 	bl	80083c0 <memcpy>
 800957a:	4631      	mov	r1, r6
 800957c:	4638      	mov	r0, r7
 800957e:	f7fe ffcd 	bl	800851c <_free_r>
 8009582:	e7e9      	b.n	8009558 <_realloc_r+0x1c>
 8009584:	4635      	mov	r5, r6
 8009586:	e7e7      	b.n	8009558 <_realloc_r+0x1c>

08009588 <_raise_r>:
 8009588:	291f      	cmp	r1, #31
 800958a:	b538      	push	{r3, r4, r5, lr}
 800958c:	4604      	mov	r4, r0
 800958e:	460d      	mov	r5, r1
 8009590:	d904      	bls.n	800959c <_raise_r+0x14>
 8009592:	2316      	movs	r3, #22
 8009594:	6003      	str	r3, [r0, #0]
 8009596:	f04f 30ff 	mov.w	r0, #4294967295
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800959e:	b112      	cbz	r2, 80095a6 <_raise_r+0x1e>
 80095a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095a4:	b94b      	cbnz	r3, 80095ba <_raise_r+0x32>
 80095a6:	4620      	mov	r0, r4
 80095a8:	f000 f830 	bl	800960c <_getpid_r>
 80095ac:	462a      	mov	r2, r5
 80095ae:	4601      	mov	r1, r0
 80095b0:	4620      	mov	r0, r4
 80095b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095b6:	f000 b817 	b.w	80095e8 <_kill_r>
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d00a      	beq.n	80095d4 <_raise_r+0x4c>
 80095be:	1c59      	adds	r1, r3, #1
 80095c0:	d103      	bne.n	80095ca <_raise_r+0x42>
 80095c2:	2316      	movs	r3, #22
 80095c4:	6003      	str	r3, [r0, #0]
 80095c6:	2001      	movs	r0, #1
 80095c8:	e7e7      	b.n	800959a <_raise_r+0x12>
 80095ca:	2400      	movs	r4, #0
 80095cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095d0:	4628      	mov	r0, r5
 80095d2:	4798      	blx	r3
 80095d4:	2000      	movs	r0, #0
 80095d6:	e7e0      	b.n	800959a <_raise_r+0x12>

080095d8 <raise>:
 80095d8:	4b02      	ldr	r3, [pc, #8]	; (80095e4 <raise+0xc>)
 80095da:	4601      	mov	r1, r0
 80095dc:	6818      	ldr	r0, [r3, #0]
 80095de:	f7ff bfd3 	b.w	8009588 <_raise_r>
 80095e2:	bf00      	nop
 80095e4:	20000018 	.word	0x20000018

080095e8 <_kill_r>:
 80095e8:	b538      	push	{r3, r4, r5, lr}
 80095ea:	4d07      	ldr	r5, [pc, #28]	; (8009608 <_kill_r+0x20>)
 80095ec:	2300      	movs	r3, #0
 80095ee:	4604      	mov	r4, r0
 80095f0:	4608      	mov	r0, r1
 80095f2:	4611      	mov	r1, r2
 80095f4:	602b      	str	r3, [r5, #0]
 80095f6:	f7f8 f967 	bl	80018c8 <_kill>
 80095fa:	1c43      	adds	r3, r0, #1
 80095fc:	d102      	bne.n	8009604 <_kill_r+0x1c>
 80095fe:	682b      	ldr	r3, [r5, #0]
 8009600:	b103      	cbz	r3, 8009604 <_kill_r+0x1c>
 8009602:	6023      	str	r3, [r4, #0]
 8009604:	bd38      	pop	{r3, r4, r5, pc}
 8009606:	bf00      	nop
 8009608:	20004bcc 	.word	0x20004bcc

0800960c <_getpid_r>:
 800960c:	f7f8 b954 	b.w	80018b8 <_getpid>

08009610 <__sread>:
 8009610:	b510      	push	{r4, lr}
 8009612:	460c      	mov	r4, r1
 8009614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009618:	f000 f89c 	bl	8009754 <_read_r>
 800961c:	2800      	cmp	r0, #0
 800961e:	bfab      	itete	ge
 8009620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009622:	89a3      	ldrhlt	r3, [r4, #12]
 8009624:	181b      	addge	r3, r3, r0
 8009626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800962a:	bfac      	ite	ge
 800962c:	6563      	strge	r3, [r4, #84]	; 0x54
 800962e:	81a3      	strhlt	r3, [r4, #12]
 8009630:	bd10      	pop	{r4, pc}

08009632 <__swrite>:
 8009632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009636:	461f      	mov	r7, r3
 8009638:	898b      	ldrh	r3, [r1, #12]
 800963a:	05db      	lsls	r3, r3, #23
 800963c:	4605      	mov	r5, r0
 800963e:	460c      	mov	r4, r1
 8009640:	4616      	mov	r6, r2
 8009642:	d505      	bpl.n	8009650 <__swrite+0x1e>
 8009644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009648:	2302      	movs	r3, #2
 800964a:	2200      	movs	r2, #0
 800964c:	f000 f868 	bl	8009720 <_lseek_r>
 8009650:	89a3      	ldrh	r3, [r4, #12]
 8009652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800965a:	81a3      	strh	r3, [r4, #12]
 800965c:	4632      	mov	r2, r6
 800965e:	463b      	mov	r3, r7
 8009660:	4628      	mov	r0, r5
 8009662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009666:	f000 b817 	b.w	8009698 <_write_r>

0800966a <__sseek>:
 800966a:	b510      	push	{r4, lr}
 800966c:	460c      	mov	r4, r1
 800966e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009672:	f000 f855 	bl	8009720 <_lseek_r>
 8009676:	1c43      	adds	r3, r0, #1
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	bf15      	itete	ne
 800967c:	6560      	strne	r0, [r4, #84]	; 0x54
 800967e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009686:	81a3      	strheq	r3, [r4, #12]
 8009688:	bf18      	it	ne
 800968a:	81a3      	strhne	r3, [r4, #12]
 800968c:	bd10      	pop	{r4, pc}

0800968e <__sclose>:
 800968e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009692:	f000 b813 	b.w	80096bc <_close_r>
	...

08009698 <_write_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4d07      	ldr	r5, [pc, #28]	; (80096b8 <_write_r+0x20>)
 800969c:	4604      	mov	r4, r0
 800969e:	4608      	mov	r0, r1
 80096a0:	4611      	mov	r1, r2
 80096a2:	2200      	movs	r2, #0
 80096a4:	602a      	str	r2, [r5, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	f7f8 f945 	bl	8001936 <_write>
 80096ac:	1c43      	adds	r3, r0, #1
 80096ae:	d102      	bne.n	80096b6 <_write_r+0x1e>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	b103      	cbz	r3, 80096b6 <_write_r+0x1e>
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	20004bcc 	.word	0x20004bcc

080096bc <_close_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4d06      	ldr	r5, [pc, #24]	; (80096d8 <_close_r+0x1c>)
 80096c0:	2300      	movs	r3, #0
 80096c2:	4604      	mov	r4, r0
 80096c4:	4608      	mov	r0, r1
 80096c6:	602b      	str	r3, [r5, #0]
 80096c8:	f7f8 f951 	bl	800196e <_close>
 80096cc:	1c43      	adds	r3, r0, #1
 80096ce:	d102      	bne.n	80096d6 <_close_r+0x1a>
 80096d0:	682b      	ldr	r3, [r5, #0]
 80096d2:	b103      	cbz	r3, 80096d6 <_close_r+0x1a>
 80096d4:	6023      	str	r3, [r4, #0]
 80096d6:	bd38      	pop	{r3, r4, r5, pc}
 80096d8:	20004bcc 	.word	0x20004bcc

080096dc <_fstat_r>:
 80096dc:	b538      	push	{r3, r4, r5, lr}
 80096de:	4d07      	ldr	r5, [pc, #28]	; (80096fc <_fstat_r+0x20>)
 80096e0:	2300      	movs	r3, #0
 80096e2:	4604      	mov	r4, r0
 80096e4:	4608      	mov	r0, r1
 80096e6:	4611      	mov	r1, r2
 80096e8:	602b      	str	r3, [r5, #0]
 80096ea:	f7f8 f94c 	bl	8001986 <_fstat>
 80096ee:	1c43      	adds	r3, r0, #1
 80096f0:	d102      	bne.n	80096f8 <_fstat_r+0x1c>
 80096f2:	682b      	ldr	r3, [r5, #0]
 80096f4:	b103      	cbz	r3, 80096f8 <_fstat_r+0x1c>
 80096f6:	6023      	str	r3, [r4, #0]
 80096f8:	bd38      	pop	{r3, r4, r5, pc}
 80096fa:	bf00      	nop
 80096fc:	20004bcc 	.word	0x20004bcc

08009700 <_isatty_r>:
 8009700:	b538      	push	{r3, r4, r5, lr}
 8009702:	4d06      	ldr	r5, [pc, #24]	; (800971c <_isatty_r+0x1c>)
 8009704:	2300      	movs	r3, #0
 8009706:	4604      	mov	r4, r0
 8009708:	4608      	mov	r0, r1
 800970a:	602b      	str	r3, [r5, #0]
 800970c:	f7f8 f94b 	bl	80019a6 <_isatty>
 8009710:	1c43      	adds	r3, r0, #1
 8009712:	d102      	bne.n	800971a <_isatty_r+0x1a>
 8009714:	682b      	ldr	r3, [r5, #0]
 8009716:	b103      	cbz	r3, 800971a <_isatty_r+0x1a>
 8009718:	6023      	str	r3, [r4, #0]
 800971a:	bd38      	pop	{r3, r4, r5, pc}
 800971c:	20004bcc 	.word	0x20004bcc

08009720 <_lseek_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	4d07      	ldr	r5, [pc, #28]	; (8009740 <_lseek_r+0x20>)
 8009724:	4604      	mov	r4, r0
 8009726:	4608      	mov	r0, r1
 8009728:	4611      	mov	r1, r2
 800972a:	2200      	movs	r2, #0
 800972c:	602a      	str	r2, [r5, #0]
 800972e:	461a      	mov	r2, r3
 8009730:	f7f8 f944 	bl	80019bc <_lseek>
 8009734:	1c43      	adds	r3, r0, #1
 8009736:	d102      	bne.n	800973e <_lseek_r+0x1e>
 8009738:	682b      	ldr	r3, [r5, #0]
 800973a:	b103      	cbz	r3, 800973e <_lseek_r+0x1e>
 800973c:	6023      	str	r3, [r4, #0]
 800973e:	bd38      	pop	{r3, r4, r5, pc}
 8009740:	20004bcc 	.word	0x20004bcc

08009744 <_malloc_usable_size_r>:
 8009744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009748:	1f18      	subs	r0, r3, #4
 800974a:	2b00      	cmp	r3, #0
 800974c:	bfbc      	itt	lt
 800974e:	580b      	ldrlt	r3, [r1, r0]
 8009750:	18c0      	addlt	r0, r0, r3
 8009752:	4770      	bx	lr

08009754 <_read_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4d07      	ldr	r5, [pc, #28]	; (8009774 <_read_r+0x20>)
 8009758:	4604      	mov	r4, r0
 800975a:	4608      	mov	r0, r1
 800975c:	4611      	mov	r1, r2
 800975e:	2200      	movs	r2, #0
 8009760:	602a      	str	r2, [r5, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	f7f8 f8ca 	bl	80018fc <_read>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	d102      	bne.n	8009772 <_read_r+0x1e>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	b103      	cbz	r3, 8009772 <_read_r+0x1e>
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	20004bcc 	.word	0x20004bcc

08009778 <_init>:
 8009778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977a:	bf00      	nop
 800977c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800977e:	bc08      	pop	{r3}
 8009780:	469e      	mov	lr, r3
 8009782:	4770      	bx	lr

08009784 <_fini>:
 8009784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009786:	bf00      	nop
 8009788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978a:	bc08      	pop	{r3}
 800978c:	469e      	mov	lr, r3
 800978e:	4770      	bx	lr
