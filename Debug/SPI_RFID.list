
SPI_RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08009b98  08009b98  00019b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0a4  0800a0a4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0a4  0800a0a4  0001a0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0ac  0800a0ac  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0ac  0800a0ac  0001a0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0b0  0800a0b0  0001a0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a0b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c5c  2000007c  0800a130  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cd8  0800a130  00024cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002153a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ea9  00000000  00000000  000415e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  00045490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001730  00000000  00000000  00046d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000527f  00000000  00000000  00048448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019feb  00000000  00000000  0004d6c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ce09  00000000  00000000  000676b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001044bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072d4  00000000  00000000  00104510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009b80 	.word	0x08009b80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08009b80 	.word	0x08009b80

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <spi_transfer>:
uchar MFRC522_Auth(uchar, uchar, uchar*, uchar*);
uchar MFRC522_Read(uchar, uchar*);
uchar MFRC522_Write(uchar, uchar*);
void MFRC522_Halt(void);

uint8_t spi_transfer(uint8_t byte_s) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af02      	add	r7, sp, #8
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	uint8_t rx;
	HAL_SPI_TransmitReceive(&hspi3, &byte_s, &rx, 1, 0xffffffff);
 8000582:	f107 020f 	add.w	r2, r7, #15
 8000586:	1df9      	adds	r1, r7, #7
 8000588:	f04f 33ff 	mov.w	r3, #4294967295
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <spi_transfer+0x28>)
 8000592:	f002 fbe2 	bl	8002d5a <HAL_SPI_TransmitReceive>
	return rx;
 8000596:	7bfb      	ldrb	r3, [r7, #15]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20004a8c 	.word	0x20004a8c

080005a4 <Write_MFRC522>:
	values[index] = spi_transfer(0);// Read the final byte. Send 0 to stop reading.
	cs_set(1);

} // End PCD_ReadRegister()

void Write_MFRC522(uchar addr, uchar val) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	460a      	mov	r2, r1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	4613      	mov	r3, r2
 80005b2:	71bb      	strb	r3, [r7, #6]

	cs_clr(1);
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <Write_MFRC522+0x4c>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <Write_MFRC522+0x4c>)
 80005ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80005be:	6153      	str	r3, [r2, #20]
	spi_transfer(((addr << 1) & 0x7E));
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ffd3 	bl	8000578 <spi_transfer>
	spi_transfer(val);
 80005d2:	79bb      	ldrb	r3, [r7, #6]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffcf 	bl	8000578 <spi_transfer>
	cs_set(1);
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <Write_MFRC522+0x4c>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <Write_MFRC522+0x4c>)
 80005e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005e4:	6153      	str	r3, [r2, #20]

}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40020400 	.word	0x40020400

080005f4 <Read_MFRC522>:

uchar Read_MFRC522(uchar addr) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]

	int value;
	cs_clr(1);
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <Read_MFRC522+0x54>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a11      	ldr	r2, [pc, #68]	; (8000648 <Read_MFRC522+0x54>)
 8000604:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000608:	6153      	str	r3, [r2, #20]
	spi_transfer((((addr << 1) & 0x7E) | 0x80));
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	b25b      	sxtb	r3, r3
 8000610:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000614:	b25b      	sxtb	r3, r3
 8000616:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800061a:	b25b      	sxtb	r3, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ffaa 	bl	8000578 <spi_transfer>
	value = spi_transfer(0x00);
 8000624:	2000      	movs	r0, #0
 8000626:	f7ff ffa7 	bl	8000578 <spi_transfer>
 800062a:	4603      	mov	r3, r0
 800062c:	60fb      	str	r3, [r7, #12]
	cs_set(1);
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <Read_MFRC522+0x54>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <Read_MFRC522+0x54>)
 8000634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000638:	6153      	str	r3, [r2, #20]

	return value;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	b2db      	uxtb	r3, r3
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40020400 	.word	0x40020400

0800064c <MFRC522_Reset>:
 * Function Name: ResetMFRC522
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000650:	210f      	movs	r1, #15
 8000652:	2001      	movs	r0, #1
 8000654:	f7ff ffa6 	bl	80005a4 <Write_MFRC522>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}

0800065c <MFRC522_Init>:
 * Function Name:InitMFRC522
 * Description: Initialize RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Init(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 8000660:	f7ff fff4 	bl	800064c <MFRC522_Reset>

	// Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);     // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000664:	218d      	movs	r1, #141	; 0x8d
 8000666:	202a      	movs	r0, #42	; 0x2a
 8000668:	f7ff ff9c 	bl	80005a4 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E); // TModeReg[3..0] + TPrescalerReg
 800066c:	213e      	movs	r1, #62	; 0x3e
 800066e:	202b      	movs	r0, #43	; 0x2b
 8000670:	f7ff ff98 	bl	80005a4 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8000674:	211e      	movs	r1, #30
 8000676:	202d      	movs	r0, #45	; 0x2d
 8000678:	f7ff ff94 	bl	80005a4 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 800067c:	2100      	movs	r1, #0
 800067e:	202c      	movs	r0, #44	; 0x2c
 8000680:	f7ff ff90 	bl	80005a4 <Write_MFRC522>
	Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 8000684:	2140      	movs	r1, #64	; 0x40
 8000686:	2015      	movs	r0, #21
 8000688:	f7ff ff8c 	bl	80005a4 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 800068c:	213d      	movs	r1, #61	; 0x3d
 800068e:	2011      	movs	r0, #17
 8000690:	f7ff ff88 	bl	80005a4 <Write_MFRC522>
	// interrupts, still playing with these
	// Write_MFRC522(CommIEnReg, 0xFF);
	// Write_MFRC522(DivlEnReg, 0xFF);

	// turn antenna on
	AntennaOn();
 8000694:	f000 f802 	bl	800069c <AntennaOn>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <AntennaOn>:
 * Function Name:AntennaOn
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	SetBitMask(TxControlReg, 0x03);
 80006a0:	2103      	movs	r1, #3
 80006a2:	2014      	movs	r0, #20
 80006a4:	f000 f802 	bl	80006ac <SetBitMask>
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <SetBitMask>:
 * Function Name:SetBitMask
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	460a      	mov	r2, r1
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	4613      	mov	r3, r2
 80006ba:	71bb      	strb	r3, [r7, #6]
	uchar tmp;
	tmp = Read_MFRC522(reg);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff98 	bl	80005f4 <Read_MFRC522>
 80006c4:	4603      	mov	r3, r0
 80006c6:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp | mask);  // set bit mask
 80006c8:	7bfa      	ldrb	r2, [r7, #15]
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	4611      	mov	r1, r2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff65 	bl	80005a4 <Write_MFRC522>
}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <MFRC522_Request>:
 *    0x0200 = Mifare_One(S70)
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b086      	sub	sp, #24
 80006e6:	af02      	add	r7, sp, #8
 80006e8:	4603      	mov	r3, r0
 80006ea:	6039      	str	r1, [r7, #0]
 80006ec:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits; // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);
 80006ee:	2107      	movs	r1, #7
 80006f0:	200d      	movs	r0, #13
 80006f2:	f7ff ff57 	bl	80005a4 <Write_MFRC522>
	// TxLastBists = BitFramingReg[2..0]

	TagType[0] = reqMode;
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	79fa      	ldrb	r2, [r7, #7]
 80006fa:	701a      	strb	r2, [r3, #0]

	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	2201      	movs	r2, #1
 8000706:	6839      	ldr	r1, [r7, #0]
 8000708:	200c      	movs	r0, #12
 800070a:	f000 f80f 	bl	800072c <MFRC522_ToCard>
 800070e:	4603      	mov	r3, r0
 8000710:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d102      	bne.n	800071e <MFRC522_Request+0x3c>
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	2b10      	cmp	r3, #16
 800071c:	d001      	beq.n	8000722 <MFRC522_Request+0x40>
		status = MI_ERR;
 800071e:	2302      	movs	r3, #2
 8000720:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000722:	7bfb      	ldrb	r3, [r7, #15]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen,
		uchar *backData, uint *backLen) {
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b089      	sub	sp, #36	; 0x24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	73fb      	strb	r3, [r7, #15]
 800073a:	4613      	mov	r3, r2
 800073c:	73bb      	strb	r3, [r7, #14]
	uchar status = MI_ERR;
 800073e:	2302      	movs	r3, #2
 8000740:	77fb      	strb	r3, [r7, #31]
	uchar irqEn = 0x00;
 8000742:	2300      	movs	r3, #0
 8000744:	77bb      	strb	r3, [r7, #30]
	uchar waitIRq = 0x00;
 8000746:	2300      	movs	r3, #0
 8000748:	777b      	strb	r3, [r7, #29]
	uchar lastBits;
	uchar n;
	uint i;

	switch (command) {
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	2b0c      	cmp	r3, #12
 800074e:	d006      	beq.n	800075e <MFRC522_ToCard+0x32>
 8000750:	2b0e      	cmp	r3, #14
 8000752:	d109      	bne.n	8000768 <MFRC522_ToCard+0x3c>
	case PCD_AUTHENT:     // Certification cards close
	{
		irqEn = 0x12;
 8000754:	2312      	movs	r3, #18
 8000756:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x10;
 8000758:	2310      	movs	r3, #16
 800075a:	777b      	strb	r3, [r7, #29]
		break;
 800075c:	e005      	b.n	800076a <MFRC522_ToCard+0x3e>
	}
	case PCD_TRANSCEIVE:  // Transmit FIFO data
	{
		irqEn = 0x77;
 800075e:	2377      	movs	r3, #119	; 0x77
 8000760:	77bb      	strb	r3, [r7, #30]
		waitIRq = 0x30;
 8000762:	2330      	movs	r3, #48	; 0x30
 8000764:	777b      	strb	r3, [r7, #29]
		break;
 8000766:	e000      	b.n	800076a <MFRC522_ToCard+0x3e>
	}
	default:
		break;
 8000768:	bf00      	nop
	}

	Write_MFRC522(CommIEnReg, irqEn | 0x80);  // Interrupt request
 800076a:	7fbb      	ldrb	r3, [r7, #30]
 800076c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4619      	mov	r1, r3
 8000774:	2002      	movs	r0, #2
 8000776:	f7ff ff15 	bl	80005a4 <Write_MFRC522>
	ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 800077a:	2180      	movs	r1, #128	; 0x80
 800077c:	2004      	movs	r0, #4
 800077e:	f000 f8b3 	bl	80008e8 <ClearBitMask>
	SetBitMask(FIFOLevelReg, 0x80);        // FlushBuffer=1, FIFO Initialization
 8000782:	2180      	movs	r1, #128	; 0x80
 8000784:	200a      	movs	r0, #10
 8000786:	f7ff ff91 	bl	80006ac <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE); // NO action; Cancel the current command
 800078a:	2100      	movs	r1, #0
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff ff09 	bl	80005a4 <Write_MFRC522>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
 8000796:	e00a      	b.n	80007ae <MFRC522_ToCard+0x82>
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000798:	68ba      	ldr	r2, [r7, #8]
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	2009      	movs	r0, #9
 80007a4:	f7ff fefe 	bl	80005a4 <Write_MFRC522>
	for (i = 0; i < sendLen; i++) {
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	3301      	adds	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	7bbb      	ldrb	r3, [r7, #14]
 80007b0:	69ba      	ldr	r2, [r7, #24]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d3f0      	bcc.n	8000798 <MFRC522_ToCard+0x6c>
	}

	// Execute the command
	Write_MFRC522(CommandReg, command);
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	4619      	mov	r1, r3
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff fef2 	bl	80005a4 <Write_MFRC522>
	if (command == PCD_TRANSCEIVE) {
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	2b0c      	cmp	r3, #12
 80007c4:	d103      	bne.n	80007ce <MFRC522_ToCard+0xa2>
		SetBitMask(BitFramingReg, 0x80); // StartSend=1,transmission of data starts  
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	200d      	movs	r0, #13
 80007ca:	f7ff ff6f 	bl	80006ac <SetBitMask>
	}

	// Waiting to receive data to complete
	i = 2000;// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80007ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007d2:	61bb      	str	r3, [r7, #24]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = Read_MFRC522(CommIrqReg);
 80007d4:	2004      	movs	r0, #4
 80007d6:	f7ff ff0d 	bl	80005f4 <Read_MFRC522>
 80007da:	4603      	mov	r3, r0
 80007dc:	773b      	strb	r3, [r7, #28]
		i--;
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d00a      	beq.n	8000800 <MFRC522_ToCard+0xd4>
 80007ea:	7f3b      	ldrb	r3, [r7, #28]
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d105      	bne.n	8000800 <MFRC522_ToCard+0xd4>
 80007f4:	7f3a      	ldrb	r2, [r7, #28]
 80007f6:	7f7b      	ldrb	r3, [r7, #29]
 80007f8:	4013      	ands	r3, r2
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0e9      	beq.n	80007d4 <MFRC522_ToCard+0xa8>
	ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	200d      	movs	r0, #13
 8000804:	f000 f870 	bl	80008e8 <ClearBitMask>
	if (i != 0) {
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d05a      	beq.n	80008c4 <MFRC522_ToCard+0x198>
		if (!(Read_MFRC522(ErrorReg) & 0x1B)) // BufferOvfl Collerr CRCErr ProtecolErr
 800080e:	2006      	movs	r0, #6
 8000810:	f7ff fef0 	bl	80005f4 <Read_MFRC522>
 8000814:	4603      	mov	r3, r0
 8000816:	f003 031b 	and.w	r3, r3, #27
 800081a:	2b00      	cmp	r3, #0
 800081c:	d148      	bne.n	80008b0 <MFRC522_ToCard+0x184>
		{
			status = MI_OK;
 800081e:	2300      	movs	r3, #0
 8000820:	77fb      	strb	r3, [r7, #31]
			if (n & irqEn & 0x01) {
 8000822:	7f3a      	ldrb	r2, [r7, #28]
 8000824:	7fbb      	ldrb	r3, [r7, #30]
 8000826:	4013      	ands	r3, r2
 8000828:	b2db      	uxtb	r3, r3
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MFRC522_ToCard+0x10a>
				status = MI_NOTAGERR;             // ??
 8000832:	2301      	movs	r3, #1
 8000834:	77fb      	strb	r3, [r7, #31]
			}

			if (command == PCD_TRANSCEIVE) {
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	2b0c      	cmp	r3, #12
 800083a:	d14a      	bne.n	80008d2 <MFRC522_ToCard+0x1a6>
				n = Read_MFRC522(FIFOLevelReg);
 800083c:	200a      	movs	r0, #10
 800083e:	f7ff fed9 	bl	80005f4 <Read_MFRC522>
 8000842:	4603      	mov	r3, r0
 8000844:	773b      	strb	r3, [r7, #28]
				lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000846:	200c      	movs	r0, #12
 8000848:	f7ff fed4 	bl	80005f4 <Read_MFRC522>
 800084c:	4603      	mov	r3, r0
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	75fb      	strb	r3, [r7, #23]
				if (lastBits) {
 8000854:	7dfb      	ldrb	r3, [r7, #23]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d008      	beq.n	800086c <MFRC522_ToCard+0x140>
					*backLen = (n - 1) * 8 + lastBits;
 800085a:	7f3b      	ldrb	r3, [r7, #28]
 800085c:	3b01      	subs	r3, #1
 800085e:	00da      	lsls	r2, r3, #3
 8000860:	7dfb      	ldrb	r3, [r7, #23]
 8000862:	4413      	add	r3, r2
 8000864:	461a      	mov	r2, r3
 8000866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	e004      	b.n	8000876 <MFRC522_ToCard+0x14a>
				} else {
					*backLen = n * 8;
 800086c:	7f3b      	ldrb	r3, [r7, #28]
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	461a      	mov	r2, r3
 8000872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000874:	601a      	str	r2, [r3, #0]
				}

				if (n == 0) {
 8000876:	7f3b      	ldrb	r3, [r7, #28]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d101      	bne.n	8000880 <MFRC522_ToCard+0x154>
					n = 1;
 800087c:	2301      	movs	r3, #1
 800087e:	773b      	strb	r3, [r7, #28]
				}
				if (n > MAX_LEN) {
 8000880:	7f3b      	ldrb	r3, [r7, #28]
 8000882:	2b10      	cmp	r3, #16
 8000884:	d901      	bls.n	800088a <MFRC522_ToCard+0x15e>
					n = MAX_LEN;
 8000886:	2310      	movs	r3, #16
 8000888:	773b      	strb	r3, [r7, #28]
				}

				// Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
 800088e:	e00a      	b.n	80008a6 <MFRC522_ToCard+0x17a>
					backData[i] = Read_MFRC522(FIFODataReg);
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	18d4      	adds	r4, r2, r3
 8000896:	2009      	movs	r0, #9
 8000898:	f7ff feac 	bl	80005f4 <Read_MFRC522>
 800089c:	4603      	mov	r3, r0
 800089e:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	3301      	adds	r3, #1
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	7f3b      	ldrb	r3, [r7, #28]
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d3f0      	bcc.n	8000890 <MFRC522_ToCard+0x164>
 80008ae:	e010      	b.n	80008d2 <MFRC522_ToCard+0x1a6>
				}
			}
		} else {
			//printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
			HAL_UART_Transmit(&huart2,
 80008b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80008b4:	2236      	movs	r2, #54	; 0x36
 80008b6:	4909      	ldr	r1, [pc, #36]	; (80008dc <MFRC522_ToCard+0x1b0>)
 80008b8:	4809      	ldr	r0, [pc, #36]	; (80008e0 <MFRC522_ToCard+0x1b4>)
 80008ba:	f002 ff88 	bl	80037ce <HAL_UART_Transmit>
					(uchar*) "~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n",
					54, 5000);
			status = MI_ERR;
 80008be:	2302      	movs	r3, #2
 80008c0:	77fb      	strb	r3, [r7, #31]
 80008c2:	e006      	b.n	80008d2 <MFRC522_ToCard+0x1a6>
		}
	} else {
		//printf("~~~ request timed out\r\n");
		HAL_UART_Transmit(&huart2, (uchar*) "~~~ request timed out\r\n", 23,
 80008c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80008c8:	2217      	movs	r2, #23
 80008ca:	4906      	ldr	r1, [pc, #24]	; (80008e4 <MFRC522_ToCard+0x1b8>)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MFRC522_ToCard+0x1b4>)
 80008ce:	f002 ff7e 	bl	80037ce <HAL_UART_Transmit>
				5000);

	}

	return status;
 80008d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3724      	adds	r7, #36	; 0x24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd90      	pop	{r4, r7, pc}
 80008dc:	08009b98 	.word	0x08009b98
 80008e0:	20004bf0 	.word	0x20004bf0
 80008e4:	08009bd0 	.word	0x08009bd0

080008e8 <ClearBitMask>:
 * Function Name: ClearBitMask
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
 */
void ClearBitMask(uchar reg, uchar mask) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	460a      	mov	r2, r1
 80008f2:	71fb      	strb	r3, [r7, #7]
 80008f4:	4613      	mov	r3, r2
 80008f6:	71bb      	strb	r3, [r7, #6]
	uchar tmp;
	tmp = Read_MFRC522(reg);
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fe7a 	bl	80005f4 <Read_MFRC522>
 8000900:	4603      	mov	r3, r0
 8000902:	73fb      	strb	r3, [r7, #15]
	Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000904:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000908:	43db      	mvns	r3, r3
 800090a:	b25a      	sxtb	r2, r3
 800090c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000910:	4013      	ands	r3, r2
 8000912:	b25b      	sxtb	r3, r3
 8000914:	b2da      	uxtb	r2, r3
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	4611      	mov	r1, r2
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fe42 	bl	80005a4 <Write_MFRC522>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <MFRC522_Anticoll>:
 * Function Name: MFRC522_Anticoll
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af02      	add	r7, sp, #8
 800092e:	6078      	str	r0, [r7, #4]
	uchar status;
	uchar i;
	uchar serNumCheck = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	737b      	strb	r3, [r7, #13]
	uint unLen;

	//ClearBitMask(Status2Reg, 0x08);		//TempSensclear
	//ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000934:	2100      	movs	r1, #0
 8000936:	200d      	movs	r0, #13
 8000938:	f7ff fe34 	bl	80005a4 <Write_MFRC522>

	serNum[0] = PICC_ANTICOLL;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2293      	movs	r2, #147	; 0x93
 8000940:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3301      	adds	r3, #1
 8000946:	2220      	movs	r2, #32
 8000948:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2202      	movs	r2, #2
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	200c      	movs	r0, #12
 8000958:	f7ff fee8 	bl	800072c <MFRC522_ToCard>
 800095c:	4603      	mov	r3, r0
 800095e:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d118      	bne.n	8000998 <MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8000966:	2300      	movs	r3, #0
 8000968:	73bb      	strb	r3, [r7, #14]
 800096a:	e009      	b.n	8000980 <MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 800096c:	7bbb      	ldrb	r3, [r7, #14]
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	781a      	ldrb	r2, [r3, #0]
 8000974:	7b7b      	ldrb	r3, [r7, #13]
 8000976:	4053      	eors	r3, r2
 8000978:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	3301      	adds	r3, #1
 800097e:	73bb      	strb	r3, [r7, #14]
 8000980:	7bbb      	ldrb	r3, [r7, #14]
 8000982:	2b03      	cmp	r3, #3
 8000984:	d9f2      	bls.n	800096c <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8000986:	7bbb      	ldrb	r3, [r7, #14]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	7b7a      	ldrb	r2, [r7, #13]
 8000990:	429a      	cmp	r2, r3
 8000992:	d001      	beq.n	8000998 <MFRC522_Anticoll+0x70>
			status = MI_ERR;
 8000994:	2302      	movs	r3, #2
 8000996:	73fb      	strb	r3, [r7, #15]
		}
	}

	//SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

	return status;
 8000998:	7bfb      	ldrb	r3, [r7, #15]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <MFRC522_Read>:
 * Function Name: MFRC522_Read
 * Description: Read block data
 * Input parameters: blockAddr - block address; recvData - read block data
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Read(uchar blockAddr, uchar *recvData) {
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af02      	add	r7, sp, #8
 80009a8:	4603      	mov	r3, r0
 80009aa:	6039      	str	r1, [r7, #0]
 80009ac:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint unLen;

	recvData[0] = PICC_READ;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	2230      	movs	r2, #48	; 0x30
 80009b2:	701a      	strb	r2, [r3, #0]
	recvData[1] = blockAddr;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	79fa      	ldrb	r2, [r7, #7]
 80009ba:	701a      	strb	r2, [r3, #0]
	CalulateCRC(recvData, 2, &recvData[2]);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	3302      	adds	r3, #2
 80009c0:	461a      	mov	r2, r3
 80009c2:	2102      	movs	r1, #2
 80009c4:	6838      	ldr	r0, [r7, #0]
 80009c6:	f000 f818 	bl	80009fa <CalulateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	2204      	movs	r2, #4
 80009d4:	6839      	ldr	r1, [r7, #0]
 80009d6:	200c      	movs	r0, #12
 80009d8:	f7ff fea8 	bl	800072c <MFRC522_ToCard>
 80009dc:	4603      	mov	r3, r0
 80009de:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (unLen != 0x90)) {
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d102      	bne.n	80009ec <MFRC522_Read+0x4a>
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	2b90      	cmp	r3, #144	; 0x90
 80009ea:	d001      	beq.n	80009f0 <MFRC522_Read+0x4e>
		status = MI_ERR;
 80009ec:	2302      	movs	r3, #2
 80009ee:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <CalulateCRC>:
 * Function Name: CalulateCRC
 * Description: CRC calculation with MF522
 * Input parameters: pIndata - To read the CRC data, len - the data length, pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC(uchar *pIndata, uchar len, uchar *pOutData) {
 80009fa:	b590      	push	{r4, r7, lr}
 80009fc:	b087      	sub	sp, #28
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	460b      	mov	r3, r1
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	72fb      	strb	r3, [r7, #11]
	uchar i, n;

	ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 8000a08:	2104      	movs	r1, #4
 8000a0a:	2005      	movs	r0, #5
 8000a0c:	f7ff ff6c 	bl	80008e8 <ClearBitMask>
	SetBitMask(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	200a      	movs	r0, #10
 8000a14:	f7ff fe4a 	bl	80006ac <SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	75fb      	strb	r3, [r7, #23]
 8000a1c:	e00a      	b.n	8000a34 <CalulateCRC+0x3a>
		Write_MFRC522(FIFODataReg, *(pIndata + i));
 8000a1e:	7dfb      	ldrb	r3, [r7, #23]
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	4619      	mov	r1, r3
 8000a28:	2009      	movs	r0, #9
 8000a2a:	f7ff fdbb 	bl	80005a4 <Write_MFRC522>
	for (i = 0; i < len; i++) {
 8000a2e:	7dfb      	ldrb	r3, [r7, #23]
 8000a30:	3301      	adds	r3, #1
 8000a32:	75fb      	strb	r3, [r7, #23]
 8000a34:	7dfa      	ldrb	r2, [r7, #23]
 8000a36:	7afb      	ldrb	r3, [r7, #11]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d3f0      	bcc.n	8000a1e <CalulateCRC+0x24>
	}
	Write_MFRC522(CommandReg, PCD_CALCCRC);
 8000a3c:	2103      	movs	r1, #3
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f7ff fdb0 	bl	80005a4 <Write_MFRC522>

	//Wait CRC calculation is complete
	i = 0xFF;
 8000a44:	23ff      	movs	r3, #255	; 0xff
 8000a46:	75fb      	strb	r3, [r7, #23]
	do {
		n = Read_MFRC522(DivIrqReg);
 8000a48:	2005      	movs	r0, #5
 8000a4a:	f7ff fdd3 	bl	80005f4 <Read_MFRC522>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	75bb      	strb	r3, [r7, #22]
		i--;
 8000a52:	7dfb      	ldrb	r3, [r7, #23]
 8000a54:	3b01      	subs	r3, #1
 8000a56:	75fb      	strb	r3, [r7, #23]
	} while ((i != 0) && !(n & 0x04));			//CRCIrq = 1
 8000a58:	7dfb      	ldrb	r3, [r7, #23]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d004      	beq.n	8000a68 <CalulateCRC+0x6e>
 8000a5e:	7dbb      	ldrb	r3, [r7, #22]
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d0ef      	beq.n	8000a48 <CalulateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = Read_MFRC522(CRCResultRegL);
 8000a68:	2022      	movs	r0, #34	; 0x22
 8000a6a:	f7ff fdc3 	bl	80005f4 <Read_MFRC522>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	461a      	mov	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	701a      	strb	r2, [r3, #0]
	pOutData[1] = Read_MFRC522(CRCResultRegM);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	1c5c      	adds	r4, r3, #1
 8000a7a:	2021      	movs	r0, #33	; 0x21
 8000a7c:	f7ff fdba 	bl	80005f4 <Read_MFRC522>
 8000a80:	4603      	mov	r3, r0
 8000a82:	7023      	strb	r3, [r4, #0]
}
 8000a84:	bf00      	nop
 8000a86:	371c      	adds	r7, #28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd90      	pop	{r4, r7, pc}

08000a8c <MFRC522_SelectTag>:
 * Function Name: MFRC522_SelectTag
 * Description: election card, read the card memory capacity
 * Input parameters: serNum - Incoming card serial number
 * Return value: the successful return of card capacity
 */
uchar MFRC522_SelectTag(uchar *serNum) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	6078      	str	r0, [r7, #4]
	uint recvBits;
	uchar buffer[9];

	//ClearBitMask(Status2Reg, 0x08);			//MFCrypto1On=0

	buffer[0] = PICC_SElECTTAG;
 8000a94:	2393      	movs	r3, #147	; 0x93
 8000a96:	733b      	strb	r3, [r7, #12]
	buffer[1] = 0x70;
 8000a98:	2370      	movs	r3, #112	; 0x70
 8000a9a:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < 5; i++) {
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	77fb      	strb	r3, [r7, #31]
 8000aa0:	e00d      	b.n	8000abe <MFRC522_SelectTag+0x32>
		buffer[i + 2] = *(serNum + i);
 8000aa2:	7ffb      	ldrb	r3, [r7, #31]
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	441a      	add	r2, r3
 8000aa8:	7ffb      	ldrb	r3, [r7, #31]
 8000aaa:	3302      	adds	r3, #2
 8000aac:	7812      	ldrb	r2, [r2, #0]
 8000aae:	f107 0120 	add.w	r1, r7, #32
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 5; i++) {
 8000ab8:	7ffb      	ldrb	r3, [r7, #31]
 8000aba:	3301      	adds	r3, #1
 8000abc:	77fb      	strb	r3, [r7, #31]
 8000abe:	7ffb      	ldrb	r3, [r7, #31]
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d9ee      	bls.n	8000aa2 <MFRC522_SelectTag+0x16>
	}
	CalulateCRC(buffer, 7, &buffer[7]);		//??
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	1dda      	adds	r2, r3, #7
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	2107      	movs	r1, #7
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff92 	bl	80009fa <CalulateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 8000ad6:	f107 020c 	add.w	r2, r7, #12
 8000ada:	f107 010c 	add.w	r1, r7, #12
 8000ade:	f107 0318 	add.w	r3, r7, #24
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	2209      	movs	r2, #9
 8000ae8:	200c      	movs	r0, #12
 8000aea:	f7ff fe1f 	bl	800072c <MFRC522_ToCard>
 8000aee:	4603      	mov	r3, r0
 8000af0:	777b      	strb	r3, [r7, #29]

	if ((status == MI_OK) && (recvBits == 0x18)) {
 8000af2:	7f7b      	ldrb	r3, [r7, #29]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d105      	bne.n	8000b04 <MFRC522_SelectTag+0x78>
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	2b18      	cmp	r3, #24
 8000afc:	d102      	bne.n	8000b04 <MFRC522_SelectTag+0x78>
		size = buffer[0];
 8000afe:	7b3b      	ldrb	r3, [r7, #12]
 8000b00:	77bb      	strb	r3, [r7, #30]
 8000b02:	e001      	b.n	8000b08 <MFRC522_SelectTag+0x7c>
	} else {
		size = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	77bb      	strb	r3, [r7, #30]
	}

	return size;
 8000b08:	7fbb      	ldrb	r3, [r7, #30]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3720      	adds	r7, #32
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <MFRC522_Auth>:
 Sectorkey--Sector password
 serNum--Card serial number, 4-byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Auth(uchar authMode, uchar BlockAddr, uchar *Sectorkey,
		uchar *serNum) {
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b08c      	sub	sp, #48	; 0x30
 8000b16:	af02      	add	r7, sp, #8
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	73fb      	strb	r3, [r7, #15]
 8000b20:	460b      	mov	r3, r1
 8000b22:	73bb      	strb	r3, [r7, #14]
	uint recvBits;
	uchar i;
	uchar buff[12];

	//Verify the command block address + sector + password + card serial number
	buff[0] = authMode;
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	753b      	strb	r3, [r7, #20]
	buff[1] = BlockAddr;
 8000b28:	7bbb      	ldrb	r3, [r7, #14]
 8000b2a:	757b      	strb	r3, [r7, #21]
	for (i = 0; i < 6; i++) {
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b32:	e011      	b.n	8000b58 <MFRC522_Auth+0x46>
		buff[i + 2] = *(Sectorkey + i);
 8000b34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	441a      	add	r2, r3
 8000b3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b40:	3302      	adds	r3, #2
 8000b42:	7812      	ldrb	r2, [r2, #0]
 8000b44:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b48:	440b      	add	r3, r1
 8000b4a:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 6; i++) {
 8000b4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b52:	3301      	adds	r3, #1
 8000b54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b5c:	2b05      	cmp	r3, #5
 8000b5e:	d9e9      	bls.n	8000b34 <MFRC522_Auth+0x22>
	}
	for (i = 0; i < 4; i++) {
 8000b60:	2300      	movs	r3, #0
 8000b62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b66:	e011      	b.n	8000b8c <MFRC522_Auth+0x7a>
		buff[i + 8] = *(serNum + i);
 8000b68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	441a      	add	r2, r3
 8000b70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b74:	3308      	adds	r3, #8
 8000b76:	7812      	ldrb	r2, [r2, #0]
 8000b78:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b7c:	440b      	add	r3, r1
 8000b7e:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 4; i++) {
 8000b82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b86:	3301      	adds	r3, #1
 8000b88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d9e9      	bls.n	8000b68 <MFRC522_Auth+0x56>
	}
	status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 8000b94:	f107 0214 	add.w	r2, r7, #20
 8000b98:	f107 0114 	add.w	r1, r7, #20
 8000b9c:	f107 0320 	add.w	r3, r7, #32
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	220c      	movs	r2, #12
 8000ba6:	200e      	movs	r0, #14
 8000ba8:	f7ff fdc0 	bl	800072c <MFRC522_ToCard>
 8000bac:	4603      	mov	r3, r0
 8000bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((status != MI_OK) || (!(Read_MFRC522(Status2Reg) & 0x08))) {
 8000bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d107      	bne.n	8000bca <MFRC522_Auth+0xb8>
 8000bba:	2008      	movs	r0, #8
 8000bbc:	f7ff fd1a 	bl	80005f4 <Read_MFRC522>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d102      	bne.n	8000bd0 <MFRC522_Auth+0xbe>
		status = MI_ERR;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return status;
 8000bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <MFRC522_Halt>:
 * Function Name: MFRC522_Halt
 * Description: Command card into hibernation
 * Input: None
 * Return value: None
 */
void MFRC522_Halt(void) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af02      	add	r7, sp, #8
	uint unLen;
	uchar buff[4];

	buff[0] = PICC_HALT;
 8000be2:	2350      	movs	r3, #80	; 0x50
 8000be4:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	707b      	strb	r3, [r7, #1]
	CalulateCRC(buff, 2, &buff[2]);
 8000bea:	463b      	mov	r3, r7
 8000bec:	1c9a      	adds	r2, r3, #2
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff01 	bl	80009fa <CalulateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8000bf8:	463a      	mov	r2, r7
 8000bfa:	4639      	mov	r1, r7
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	4613      	mov	r3, r2
 8000c02:	2204      	movs	r2, #4
 8000c04:	200c      	movs	r0, #12
 8000c06:	f7ff fd91 	bl	800072c <MFRC522_ToCard>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <ScanCardAndGetDataFromBlock>:
 * 		blockAddr: block number desired to Read
 * 		receivedData: pointer to Data Returned after reading
 * 		keyValue: Value of KEY_A or KEY_B
 * Return value: MI_OK or MI_ERR
 */
uint8_t ScanCardAndGetDataFromBlock(uint8_t blockAddr, uchar* receivedData, uchar* keyValue) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	73fb      	strb	r3, [r7, #15]
	uchar str[16];

	/*** 1. Start RFID Reader ***/
	MFRC522_Init();
 8000c22:	f7ff fd1b 	bl	800065c <MFRC522_Init>

	/*** 2. Make request and receive Card type ***/
	if (MFRC522_Request(PICC_REQIDL, str) != MI_OK) {
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	2026      	movs	r0, #38	; 0x26
 8000c2e:	f7ff fd58 	bl	80006e2 <MFRC522_Request>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <ScanCardAndGetDataFromBlock+0x28>
		return MI_ERR;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	e04e      	b.n	8000cda <ScanCardAndGetDataFromBlock+0xc6>
	}

	/*** 3. Anti-collision loop***/
	if (MFRC522_Anticoll(str) == MI_OK) {
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fe71 	bl	8000928 <MFRC522_Anticoll>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d143      	bne.n	8000cd4 <ScanCardAndGetDataFromBlock+0xc0>

	/*** 4. Select Card ***/
		MFRC522_SelectTag(str);
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff1b 	bl	8000a8c <MFRC522_SelectTag>

	/*** 5. Pass authentication on every sector ***/
		// First, we try to use KeyA authentication (COMMAND CODE: 0x60 - KeyA, 0x61 - KeyB)
		if (MI_OK == MFRC522_Auth(0x60, blockAddr, keyValue, str)) {
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	7bf9      	ldrb	r1, [r7, #15]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	2060      	movs	r0, #96	; 0x60
 8000c60:	f7ff ff57 	bl	8000b12 <MFRC522_Auth>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d111      	bne.n	8000c8e <ScanCardAndGetDataFromBlock+0x7a>
				//Read Data
			if (MFRC522_Read(blockAddr, receivedData) == MI_OK) {
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fe97 	bl	80009a2 <MFRC522_Read>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <ScanCardAndGetDataFromBlock+0x6a>
				return MI_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e02d      	b.n	8000cda <ScanCardAndGetDataFromBlock+0xc6>
			} else {
				// Print error if READ is not OK
				HAL_UART_Transmit(&huart2,
 8000c7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c82:	221a      	movs	r2, #26
 8000c84:	4917      	ldr	r1, [pc, #92]	; (8000ce4 <ScanCardAndGetDataFromBlock+0xd0>)
 8000c86:	4818      	ldr	r0, [pc, #96]	; (8000ce8 <ScanCardAndGetDataFromBlock+0xd4>)
 8000c88:	f002 fda1 	bl	80037ce <HAL_UART_Transmit>
 8000c8c:	e022      	b.n	8000cd4 <ScanCardAndGetDataFromBlock+0xc0>
						(uint8_t*) "Error: Can not read data",
						strlen("Error: Can not read data\n\r"), 5000);
			}
		}
		// Second, we try to use KeyB authentication
		else if (MI_OK == MFRC522_Auth(0x61, blockAddr, keyValue, str)) {
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	7bf9      	ldrb	r1, [r7, #15]
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	2061      	movs	r0, #97	; 0x61
 8000c98:	f7ff ff3b 	bl	8000b12 <MFRC522_Auth>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d111      	bne.n	8000cc6 <ScanCardAndGetDataFromBlock+0xb2>
				// Read Data
			if (MFRC522_Read(blockAddr, receivedData) == MI_OK) {
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	68b9      	ldr	r1, [r7, #8]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fe7b 	bl	80009a2 <MFRC522_Read>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <ScanCardAndGetDataFromBlock+0xa2>
				return MI_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e011      	b.n	8000cda <ScanCardAndGetDataFromBlock+0xc6>
			} else {
				// Print error if READ is not ok
				HAL_UART_Transmit(&huart2,
 8000cb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cba:	221a      	movs	r2, #26
 8000cbc:	4909      	ldr	r1, [pc, #36]	; (8000ce4 <ScanCardAndGetDataFromBlock+0xd0>)
 8000cbe:	480a      	ldr	r0, [pc, #40]	; (8000ce8 <ScanCardAndGetDataFromBlock+0xd4>)
 8000cc0:	f002 fd85 	bl	80037ce <HAL_UART_Transmit>
 8000cc4:	e006      	b.n	8000cd4 <ScanCardAndGetDataFromBlock+0xc0>
						strlen("Error: Can not read data\n\r"), 5000);
			}
		}
		// If KeyA and KeyB authentications don't work, they must be a wrong key
		else {
			HAL_UART_Transmit(&huart2, (uchar*) "\n\rKeys are wrong.\n\r", 19,
 8000cc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cca:	2213      	movs	r2, #19
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <ScanCardAndGetDataFromBlock+0xd8>)
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <ScanCardAndGetDataFromBlock+0xd4>)
 8000cd0:	f002 fd7d 	bl	80037ce <HAL_UART_Transmit>
					5000);
		}
	}

	/*** 6. HALT ***/
	MFRC522_Halt();
 8000cd4:	f7ff ff82 	bl	8000bdc <MFRC522_Halt>

	return MI_ERR;
 8000cd8:	2302      	movs	r3, #2
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3720      	adds	r7, #32
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	08009c70 	.word	0x08009c70
 8000ce8:	20004bf0 	.word	0x20004bf0
 8000cec:	08009c9c 	.word	0x08009c9c

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	wareHouse_1.index = 1;
 8000cf4:	4b3e      	ldr	r3, [pc, #248]	; (8000df0 <main+0x100>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]
	wareHouse_2.index = 2;
 8000cfa:	4b3e      	ldr	r3, [pc, #248]	; (8000df4 <main+0x104>)
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	601a      	str	r2, [r3, #0]
	wareHouse_3.index = 3;
 8000d00:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <main+0x108>)
 8000d02:	2203      	movs	r2, #3
 8000d04:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d06:	f000 ffa5 	bl	8001c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0a:	f000 f8b7 	bl	8000e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0e:	f000 f9c7 	bl	80010a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d12:	f000 f971 	bl	8000ff8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000d16:	f000 f90f 	bl	8000f38 <MX_SPI3_Init>
  MX_USART6_UART_Init();
 8000d1a:	f000 f997 	bl	800104c <MX_USART6_UART_Init>
  MX_USART1_UART_Init();
 8000d1e:	f000 f941 	bl	8000fa4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8000d22:	f7ff fc9b 	bl	800065c <MFRC522_Init>
  HAL_UART_Transmit(&huart2, (uchar*) "\n\rSerial Connected...\n\r", 23, 5000);
 8000d26:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d2a:	2217      	movs	r2, #23
 8000d2c:	4933      	ldr	r1, [pc, #204]	; (8000dfc <main+0x10c>)
 8000d2e:	4834      	ldr	r0, [pc, #208]	; (8000e00 <main+0x110>)
 8000d30:	f002 fd4d 	bl	80037ce <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d34:	f003 fdac 	bl	8004890 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutex_uart2 */
  mutex_uart2Handle = osMutexNew(&mutex_uart2_attributes);
 8000d38:	4832      	ldr	r0, [pc, #200]	; (8000e04 <main+0x114>)
 8000d3a:	f003 ff89 	bl	8004c50 <osMutexNew>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4a31      	ldr	r2, [pc, #196]	; (8000e08 <main+0x118>)
 8000d42:	6013      	str	r3, [r2, #0]

  /* creation of mutex_uart6 */
  mutex_uart6Handle = osMutexNew(&mutex_uart6_attributes);
 8000d44:	4831      	ldr	r0, [pc, #196]	; (8000e0c <main+0x11c>)
 8000d46:	f003 ff83 	bl	8004c50 <osMutexNew>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4a30      	ldr	r2, [pc, #192]	; (8000e10 <main+0x120>)
 8000d4e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of cardID_Queue */
  cardID_QueueHandle = osMessageQueueNew (1, sizeof(WareHouse_t), &cardID_Queue_attributes);
 8000d50:	4a30      	ldr	r2, [pc, #192]	; (8000e14 <main+0x124>)
 8000d52:	211c      	movs	r1, #28
 8000d54:	2001      	movs	r0, #1
 8000d56:	f004 f889 	bl	8004e6c <osMessageQueueNew>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4a2e      	ldr	r2, [pc, #184]	; (8000e18 <main+0x128>)
 8000d5e:	6013      	str	r3, [r2, #0]

  /* creation of sensorData_Queue */
  sensorData_QueueHandle = osMessageQueueNew (3, sizeof(WareHouse_t), &sensorData_Queue_attributes);
 8000d60:	4a2e      	ldr	r2, [pc, #184]	; (8000e1c <main+0x12c>)
 8000d62:	211c      	movs	r1, #28
 8000d64:	2003      	movs	r0, #3
 8000d66:	f004 f881 	bl	8004e6c <osMessageQueueNew>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4a2c      	ldr	r2, [pc, #176]	; (8000e20 <main+0x130>)
 8000d6e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CmdParsing */
  CmdParsingHandle = osThreadNew(CmdParsing_Task, NULL, &CmdParsing_attributes);
 8000d70:	4a2c      	ldr	r2, [pc, #176]	; (8000e24 <main+0x134>)
 8000d72:	2100      	movs	r1, #0
 8000d74:	482c      	ldr	r0, [pc, #176]	; (8000e28 <main+0x138>)
 8000d76:	f003 fdd5 	bl	8004924 <osThreadNew>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4a2b      	ldr	r2, [pc, #172]	; (8000e2c <main+0x13c>)
 8000d7e:	6013      	str	r3, [r2, #0]

  /* creation of ToggleLed */
  ToggleLedHandle = osThreadNew(ToggleLed_Task, NULL, &ToggleLed_attributes);
 8000d80:	4a2b      	ldr	r2, [pc, #172]	; (8000e30 <main+0x140>)
 8000d82:	2100      	movs	r1, #0
 8000d84:	482b      	ldr	r0, [pc, #172]	; (8000e34 <main+0x144>)
 8000d86:	f003 fdcd 	bl	8004924 <osThreadNew>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a2a      	ldr	r2, [pc, #168]	; (8000e38 <main+0x148>)
 8000d8e:	6013      	str	r3, [r2, #0]

  /* creation of ScanCard */
  ScanCardHandle = osThreadNew(ScanCard_Task, NULL, &ScanCard_attributes);
 8000d90:	4a2a      	ldr	r2, [pc, #168]	; (8000e3c <main+0x14c>)
 8000d92:	2100      	movs	r1, #0
 8000d94:	482a      	ldr	r0, [pc, #168]	; (8000e40 <main+0x150>)
 8000d96:	f003 fdc5 	bl	8004924 <osThreadNew>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a29      	ldr	r2, [pc, #164]	; (8000e44 <main+0x154>)
 8000d9e:	6013      	str	r3, [r2, #0]

  /* creation of SensorMeasuring */
  SensorMeasuringHandle = osThreadNew(SensorMeasuring_Task, NULL, &SensorMeasuring_attributes);
 8000da0:	4a29      	ldr	r2, [pc, #164]	; (8000e48 <main+0x158>)
 8000da2:	2100      	movs	r1, #0
 8000da4:	4829      	ldr	r0, [pc, #164]	; (8000e4c <main+0x15c>)
 8000da6:	f003 fdbd 	bl	8004924 <osThreadNew>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a28      	ldr	r2, [pc, #160]	; (8000e50 <main+0x160>)
 8000dae:	6013      	str	r3, [r2, #0]

  /* creation of SendCardID */
  SendCardIDHandle = osThreadNew(SendCardID_Task, NULL, &SendCardID_attributes);
 8000db0:	4a28      	ldr	r2, [pc, #160]	; (8000e54 <main+0x164>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4828      	ldr	r0, [pc, #160]	; (8000e58 <main+0x168>)
 8000db6:	f003 fdb5 	bl	8004924 <osThreadNew>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a27      	ldr	r2, [pc, #156]	; (8000e5c <main+0x16c>)
 8000dbe:	6013      	str	r3, [r2, #0]

  /* creation of SendSensorData */
  SendSensorDataHandle = osThreadNew(SendSensorData_Task, NULL, &SendSensorData_attributes);
 8000dc0:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <main+0x170>)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4827      	ldr	r0, [pc, #156]	; (8000e64 <main+0x174>)
 8000dc6:	f003 fdad 	bl	8004924 <osThreadNew>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a26      	ldr	r2, [pc, #152]	; (8000e68 <main+0x178>)
 8000dce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of scanCardAvailable */
  scanCardAvailableHandle = osEventFlagsNew(&scanCardAvailable_attributes);
 8000dd0:	4826      	ldr	r0, [pc, #152]	; (8000e6c <main+0x17c>)
 8000dd2:	f003 fe54 	bl	8004a7e <osEventFlagsNew>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a25      	ldr	r2, [pc, #148]	; (8000e70 <main+0x180>)
 8000dda:	6013      	str	r3, [r2, #0]

  /* creation of parsingCMDAvailable */
  parsingCMDAvailableHandle = osEventFlagsNew(&parsingCMDAvailable_attributes);
 8000ddc:	4825      	ldr	r0, [pc, #148]	; (8000e74 <main+0x184>)
 8000dde:	f003 fe4e 	bl	8004a7e <osEventFlagsNew>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a24      	ldr	r2, [pc, #144]	; (8000e78 <main+0x188>)
 8000de6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000de8:	f003 fd76 	bl	80048d8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	while (1) {
 8000dec:	e7fe      	b.n	8000dec <main+0xfc>
 8000dee:	bf00      	nop
 8000df0:	20004ae4 	.word	0x20004ae4
 8000df4:	20004b8c 	.word	0x20004b8c
 8000df8:	20004b54 	.word	0x20004b54
 8000dfc:	08009dbc 	.word	0x08009dbc
 8000e00:	20004bf0 	.word	0x20004bf0
 8000e04:	08009f00 	.word	0x08009f00
 8000e08:	20004a80 	.word	0x20004a80
 8000e0c:	08009f10 	.word	0x08009f10
 8000e10:	20004a88 	.word	0x20004a88
 8000e14:	08009ed0 	.word	0x08009ed0
 8000e18:	20004b04 	.word	0x20004b04
 8000e1c:	08009ee8 	.word	0x08009ee8
 8000e20:	20004a84 	.word	0x20004a84
 8000e24:	08009df8 	.word	0x08009df8
 8000e28:	08001409 	.word	0x08001409
 8000e2c:	20004b0c 	.word	0x20004b0c
 8000e30:	08009e1c 	.word	0x08009e1c
 8000e34:	08001495 	.word	0x08001495
 8000e38:	20004b00 	.word	0x20004b00
 8000e3c:	08009e40 	.word	0x08009e40
 8000e40:	080014a5 	.word	0x080014a5
 8000e44:	20004b78 	.word	0x20004b78
 8000e48:	08009e64 	.word	0x08009e64
 8000e4c:	080014f9 	.word	0x080014f9
 8000e50:	20004bec 	.word	0x20004bec
 8000e54:	08009e88 	.word	0x08009e88
 8000e58:	080015d9 	.word	0x080015d9
 8000e5c:	20004b70 	.word	0x20004b70
 8000e60:	08009eac 	.word	0x08009eac
 8000e64:	08001629 	.word	0x08001629
 8000e68:	20004b74 	.word	0x20004b74
 8000e6c:	08009f20 	.word	0x08009f20
 8000e70:	20004b08 	.word	0x20004b08
 8000e74:	08009f30 	.word	0x08009f30
 8000e78:	20004c34 	.word	0x20004c34

08000e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b094      	sub	sp, #80	; 0x50
 8000e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	2230      	movs	r2, #48	; 0x30
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f007 fd37 	bl	80088fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <SystemClock_Config+0xb4>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <SystemClock_Config+0xb4>)
 8000eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <SystemClock_Config+0xb4>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <SystemClock_Config+0xb8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	; (8000f34 <SystemClock_Config+0xb8>)
 8000ec6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <SystemClock_Config+0xb8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000edc:	2301      	movs	r3, #1
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee0:	2310      	movs	r3, #16
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee8:	f107 0320 	add.w	r3, r7, #32
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fa05 	bl	80022fc <HAL_RCC_OscConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ef8:	f000 fbd0 	bl	800169c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efc:	230f      	movs	r3, #15
 8000efe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 fc67 	bl	80027ec <HAL_RCC_ClockConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f24:	f000 fbba 	bl	800169c <Error_Handler>
  }
}
 8000f28:	bf00      	nop
 8000f2a:	3750      	adds	r7, #80	; 0x50
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40007000 	.word	0x40007000

08000f38 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <MX_SPI3_Init+0x64>)
 8000f3e:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <MX_SPI3_Init+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_SPI3_Init+0x64>)
 8000f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_SPI3_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_SPI3_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_SPI3_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_SPI3_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_SPI3_Init+0x64>)
 8000f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f68:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_SPI3_Init+0x64>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <MX_SPI3_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_SPI3_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <MX_SPI3_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_SPI3_Init+0x64>)
 8000f84:	220a      	movs	r2, #10
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <MX_SPI3_Init+0x64>)
 8000f8a:	f001 fe5d 	bl	8002c48 <HAL_SPI_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000f94:	f000 fb82 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20004a8c 	.word	0x20004a8c
 8000fa0:	40003c00 	.word	0x40003c00

08000fa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <MX_USART1_UART_Init+0x50>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_USART1_UART_Init+0x4c>)
 8000fdc:	f002 fbaa 	bl	8003734 <HAL_UART_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fe6:	f000 fb59 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20004b10 	.word	0x20004b10
 8000ff4:	40011000 	.word	0x40011000

08000ff8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <MX_USART2_UART_Init+0x50>)
 8001000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 800101e:	220c      	movs	r2, #12
 8001020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_USART2_UART_Init+0x4c>)
 8001030:	f002 fb80 	bl	8003734 <HAL_UART_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800103a:	f000 fb2f 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20004bf0 	.word	0x20004bf0
 8001048:	40004400 	.word	0x40004400

0800104c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <MX_USART6_UART_Init+0x50>)
 8001054:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_USART6_UART_Init+0x4c>)
 8001084:	f002 fb56 	bl	8003734 <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800108e:	f000 fb05 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20004ba8 	.word	0x20004ba8
 800109c:	40011400 	.word	0x40011400

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	4b45      	ldr	r3, [pc, #276]	; (80011d0 <MX_GPIO_Init+0x130>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a44      	ldr	r2, [pc, #272]	; (80011d0 <MX_GPIO_Init+0x130>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b42      	ldr	r3, [pc, #264]	; (80011d0 <MX_GPIO_Init+0x130>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b3e      	ldr	r3, [pc, #248]	; (80011d0 <MX_GPIO_Init+0x130>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a3d      	ldr	r2, [pc, #244]	; (80011d0 <MX_GPIO_Init+0x130>)
 80010dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b3b      	ldr	r3, [pc, #236]	; (80011d0 <MX_GPIO_Init+0x130>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <MX_GPIO_Init+0x130>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a36      	ldr	r2, [pc, #216]	; (80011d0 <MX_GPIO_Init+0x130>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <MX_GPIO_Init+0x130>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <MX_GPIO_Init+0x130>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a2f      	ldr	r2, [pc, #188]	; (80011d0 <MX_GPIO_Init+0x130>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <MX_GPIO_Init+0x130>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2120      	movs	r1, #32
 800112a:	482a      	ldr	r0, [pc, #168]	; (80011d4 <MX_GPIO_Init+0x134>)
 800112c:	f001 f8cc 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_SS3_Pin|SPI_SS2_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 41c6 	mov.w	r1, #25344	; 0x6300
 8001136:	4828      	ldr	r0, [pc, #160]	; (80011d8 <MX_GPIO_Init+0x138>)
 8001138:	f001 f8c6 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_SS_GPIO_Port, SPI3_SS_Pin, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001142:	4825      	ldr	r0, [pc, #148]	; (80011d8 <MX_GPIO_Init+0x138>)
 8001144:	f001 f8c0 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800114e:	4823      	ldr	r0, [pc, #140]	; (80011dc <MX_GPIO_Init+0x13c>)
 8001150:	f001 f8ba 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800115a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	481c      	ldr	r0, [pc, #112]	; (80011dc <MX_GPIO_Init+0x13c>)
 800116c:	f000 ff28 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001170:	2320      	movs	r3, #32
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4619      	mov	r1, r3
 8001186:	4813      	ldr	r0, [pc, #76]	; (80011d4 <MX_GPIO_Init+0x134>)
 8001188:	f000 ff1a 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_SS3_Pin SPI_SS2_Pin SPI3_SS_Pin LED_YELLOW_Pin
                           LED_GREEN_Pin */
  GPIO_InitStruct.Pin = SPI_SS3_Pin|SPI_SS2_Pin|SPI3_SS_Pin|LED_YELLOW_Pin
 800118c:	f44f 4363 	mov.w	r3, #58112	; 0xe300
 8001190:	617b      	str	r3, [r7, #20]
                          |LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <MX_GPIO_Init+0x138>)
 80011a6:	f000 ff0b 	bl	8001fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80011aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	; (80011dc <MX_GPIO_Init+0x13c>)
 80011c4:	f000 fefc 	bl	8001fc0 <HAL_GPIO_Init>

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020800 	.word	0x40020800

080011e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	if (huart == &huart6){
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <HAL_UART_RxCpltCallback+0x30>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d105      	bne.n	80011fc <HAL_UART_RxCpltCallback+0x1c>
		osEventFlagsSet(parsingCMDAvailableHandle, 0x00000001U);
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HAL_UART_RxCpltCallback+0x34>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2101      	movs	r1, #1
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 fc80 	bl	8004afc <osEventFlagsSet>
	}
	HAL_UART_Receive_IT(&huart6, (uint8_t*)receivedDataFromServer, 8);
 80011fc:	2208      	movs	r2, #8
 80011fe:	4906      	ldr	r1, [pc, #24]	; (8001218 <HAL_UART_RxCpltCallback+0x38>)
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <HAL_UART_RxCpltCallback+0x30>)
 8001202:	f002 fc18 	bl	8003a36 <HAL_UART_Receive_IT>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20004ba8 	.word	0x20004ba8
 8001214:	20004c34 	.word	0x20004c34
 8001218:	20000098 	.word	0x20000098

0800121c <sendDataToServer>:


void sendDataToServer(volatile WareHouse_t* wareHouse, uint8_t typeOfData){
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]

	uchar dataToSend[18]={0};
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	819a      	strh	r2, [r3, #12]

	switch(typeOfData){
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	2b05      	cmp	r3, #5
 800123e:	d002      	beq.n	8001246 <sendDataToServer+0x2a>
 8001240:	2b06      	cmp	r3, #6
 8001242:	d00d      	beq.n	8001260 <sendDataToServer+0x44>
 8001244:	e026      	b.n	8001294 <sendDataToServer+0x78>
		case Sensor_DATA:
			dataToSend[0] = wareHouse->temperature;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	723b      	strb	r3, [r7, #8]
			dataToSend[1] = wareHouse->humidity;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	727b      	strb	r3, [r7, #9]
			dataToSend[17] = wareHouse->index;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	767b      	strb	r3, [r7, #25]
			break;
 800125e:	e019      	b.n	8001294 <sendDataToServer+0x78>
		case CardID_DATA:
			for(int i = 0; i<16; i++){
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
 8001264:	e00e      	b.n	8001284 <sendDataToServer+0x68>
				dataToSend[i]=wareHouse->idOfScannedCard[i];
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	4413      	add	r3, r2
 800126c:	3304      	adds	r3, #4
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b2d9      	uxtb	r1, r3
 8001272:	f107 0208 	add.w	r2, r7, #8
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	4413      	add	r3, r2
 800127a:	460a      	mov	r2, r1
 800127c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i<16; i++){
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3301      	adds	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	dded      	ble.n	8001266 <sendDataToServer+0x4a>
			}
			dataToSend[17] = wareHouse->index;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	767b      	strb	r3, [r7, #25]
			break;
 8001292:	bf00      	nop
	}

	dataToSend[16] = typeOfData;
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	763b      	strb	r3, [r7, #24]
	HAL_UART_Transmit(&huart6, dataToSend, 18, HAL_MAX_DELAY);
 8001298:	f107 0108 	add.w	r1, r7, #8
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	2212      	movs	r2, #18
 80012a2:	4803      	ldr	r0, [pc, #12]	; (80012b0 <sendDataToServer+0x94>)
 80012a4:	f002 fa93 	bl	80037ce <HAL_UART_Transmit>
}
 80012a8:	bf00      	nop
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20004ba8 	.word	0x20004ba8

080012b4 <scanCardIdHandle>:



void scanCardIdHandle(uint8_t wareHouseId){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	switch(wareHouseId){
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d002      	beq.n	80012ca <scanCardIdHandle+0x16>
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d036      	beq.n	8001336 <scanCardIdHandle+0x82>

			osMessageQueuePut(cardID_QueueHandle, &wareHouse_2, 0U, osWaitForever);
		}
		break;
	default:
		break;
 80012c8:	e04f      	b.n	800136a <scanCardIdHandle+0xb6>
			if( ScanCardAndGetDataFromBlock(0, wareHouse_1.idOfScannedCard, keyA) == MI_OK){
 80012ca:	4a29      	ldr	r2, [pc, #164]	; (8001370 <scanCardIdHandle+0xbc>)
 80012cc:	4929      	ldr	r1, [pc, #164]	; (8001374 <scanCardIdHandle+0xc0>)
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fca0 	bl	8000c14 <ScanCardAndGetDataFromBlock>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f7      	bne.n	80012ca <scanCardIdHandle+0x16>
					for(int i = 0; i<16; i++){
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	e017      	b.n	8001310 <scanCardIdHandle+0x5c>
						sprintf((char*)temp, (const char*)"%02x ", (char)wareHouse_1.idOfScannedCard[i]);
 80012e0:	4a25      	ldr	r2, [pc, #148]	; (8001378 <scanCardIdHandle+0xc4>)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	4413      	add	r3, r2
 80012e6:	3304      	adds	r3, #4
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	4922      	ldr	r1, [pc, #136]	; (800137c <scanCardIdHandle+0xc8>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f007 fc1f 	bl	8008b38 <siprintf>
						HAL_UART_Transmit(&huart2, temp, 3, HAL_MAX_DELAY);
 80012fa:	f107 0110 	add.w	r1, r7, #16
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	2203      	movs	r2, #3
 8001304:	481e      	ldr	r0, [pc, #120]	; (8001380 <scanCardIdHandle+0xcc>)
 8001306:	f002 fa62 	bl	80037ce <HAL_UART_Transmit>
					for(int i = 0; i<16; i++){
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2b0f      	cmp	r3, #15
 8001314:	dde4      	ble.n	80012e0 <scanCardIdHandle+0x2c>
					HAL_UART_Transmit(&huart2, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	2202      	movs	r2, #2
 800131c:	4919      	ldr	r1, [pc, #100]	; (8001384 <scanCardIdHandle+0xd0>)
 800131e:	4818      	ldr	r0, [pc, #96]	; (8001380 <scanCardIdHandle+0xcc>)
 8001320:	f002 fa55 	bl	80037ce <HAL_UART_Transmit>
					osMessageQueuePut(cardID_QueueHandle, &wareHouse_1, 0U, osWaitForever);
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <scanCardIdHandle+0xd4>)
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	2200      	movs	r2, #0
 800132e:	4912      	ldr	r1, [pc, #72]	; (8001378 <scanCardIdHandle+0xc4>)
 8001330:	f003 fe10 	bl	8004f54 <osMessageQueuePut>
					return;
 8001334:	e019      	b.n	800136a <scanCardIdHandle+0xb6>
			cmdToSend[0] = SCAN_CARDID;
 8001336:	2301      	movs	r3, #1
 8001338:	723b      	strb	r3, [r7, #8]
			HAL_UART_Transmit(&huart1, cmdToSend, 8, HAL_MAX_DELAY);
 800133a:	f107 0108 	add.w	r1, r7, #8
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	2208      	movs	r2, #8
 8001344:	4811      	ldr	r0, [pc, #68]	; (800138c <scanCardIdHandle+0xd8>)
 8001346:	f002 fa42 	bl	80037ce <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, wareHouse_2.idOfScannedCard, 16, HAL_MAX_DELAY);
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	2210      	movs	r2, #16
 8001350:	490f      	ldr	r1, [pc, #60]	; (8001390 <scanCardIdHandle+0xdc>)
 8001352:	480e      	ldr	r0, [pc, #56]	; (800138c <scanCardIdHandle+0xd8>)
 8001354:	f002 facd 	bl	80038f2 <HAL_UART_Receive>
			osMessageQueuePut(cardID_QueueHandle, &wareHouse_2, 0U, osWaitForever);
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <scanCardIdHandle+0xd4>)
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	2200      	movs	r2, #0
 8001362:	490c      	ldr	r1, [pc, #48]	; (8001394 <scanCardIdHandle+0xe0>)
 8001364:	f003 fdf6 	bl	8004f54 <osMessageQueuePut>
		break;
 8001368:	bf00      	nop
	}
}
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000000 	.word	0x20000000
 8001374:	20004ae8 	.word	0x20004ae8
 8001378:	20004ae4 	.word	0x20004ae4
 800137c:	08009dd4 	.word	0x08009dd4
 8001380:	20004bf0 	.word	0x20004bf0
 8001384:	08009ddc 	.word	0x08009ddc
 8001388:	20004b04 	.word	0x20004b04
 800138c:	20004b10 	.word	0x20004b10
 8001390:	20004b90 	.word	0x20004b90
 8001394:	20004b8c 	.word	0x20004b8c

08001398 <toggleLEDHanlde>:

void toggleLEDHanlde(uint8_t wareHouseId, uint8_t ledId, uint8_t state){
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	460b      	mov	r3, r1
 80013a4:	71bb      	strb	r3, [r7, #6]
 80013a6:	4613      	mov	r3, r2
 80013a8:	717b      	strb	r3, [r7, #5]

	switch(wareHouseId){
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d120      	bne.n	80013f2 <toggleLEDHanlde+0x5a>
		case 1:
			if(ledId == 1){
 80013b0:	79bb      	ldrb	r3, [r7, #6]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d107      	bne.n	80013c6 <toggleLEDHanlde+0x2e>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, state);
 80013b6:	797b      	ldrb	r3, [r7, #5]
 80013b8:	461a      	mov	r2, r3
 80013ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013be:	4810      	ldr	r0, [pc, #64]	; (8001400 <toggleLEDHanlde+0x68>)
 80013c0:	f000 ff82 	bl	80022c8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, state);
			}else if(ledId == 3){
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, state);
			}

			break;
 80013c4:	e017      	b.n	80013f6 <toggleLEDHanlde+0x5e>
			}else if(ledId == 2){
 80013c6:	79bb      	ldrb	r3, [r7, #6]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d107      	bne.n	80013dc <toggleLEDHanlde+0x44>
				HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, state);
 80013cc:	797b      	ldrb	r3, [r7, #5]
 80013ce:	461a      	mov	r2, r3
 80013d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d4:	480a      	ldr	r0, [pc, #40]	; (8001400 <toggleLEDHanlde+0x68>)
 80013d6:	f000 ff77 	bl	80022c8 <HAL_GPIO_WritePin>
			break;
 80013da:	e00c      	b.n	80013f6 <toggleLEDHanlde+0x5e>
			}else if(ledId == 3){
 80013dc:	79bb      	ldrb	r3, [r7, #6]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d109      	bne.n	80013f6 <toggleLEDHanlde+0x5e>
				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, state);
 80013e2:	797b      	ldrb	r3, [r7, #5]
 80013e4:	461a      	mov	r2, r3
 80013e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ea:	4806      	ldr	r0, [pc, #24]	; (8001404 <toggleLEDHanlde+0x6c>)
 80013ec:	f000 ff6c 	bl	80022c8 <HAL_GPIO_WritePin>
			break;
 80013f0:	e001      	b.n	80013f6 <toggleLEDHanlde+0x5e>
		default:
			break;
 80013f2:	bf00      	nop
 80013f4:	e000      	b.n	80013f8 <toggleLEDHanlde+0x60>
			break;
 80013f6:	bf00      	nop
		}
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40020400 	.word	0x40020400
 8001404:	40020800 	.word	0x40020800

08001408 <CmdParsing_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_CmdParsing_Task */
void CmdParsing_Task(void *argument)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  HAL_UART_Receive_IT(&huart6, (uint8_t*)receivedDataFromServer, 8);
 8001410:	2208      	movs	r2, #8
 8001412:	491b      	ldr	r1, [pc, #108]	; (8001480 <CmdParsing_Task+0x78>)
 8001414:	481b      	ldr	r0, [pc, #108]	; (8001484 <CmdParsing_Task+0x7c>)
 8001416:	f002 fb0e 	bl	8003a36 <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
	// Wait for flag to parsing comming CMD
	osEventFlagsWait(parsingCMDAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <CmdParsing_Task+0x80>)
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	2200      	movs	r2, #0
 8001424:	2101      	movs	r1, #1
 8001426:	f003 fbad 	bl	8004b84 <osEventFlagsWait>

	// Parsing CMD
	switch(receivedDataFromServer[0]){
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <CmdParsing_Task+0x78>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b03      	cmp	r3, #3
 8001432:	d01a      	beq.n	800146a <CmdParsing_Task+0x62>
 8001434:	2b03      	cmp	r3, #3
 8001436:	dc1e      	bgt.n	8001476 <CmdParsing_Task+0x6e>
 8001438:	2b01      	cmp	r3, #1
 800143a:	d002      	beq.n	8001442 <CmdParsing_Task+0x3a>
 800143c:	2b02      	cmp	r3, #2
 800143e:	d007      	beq.n	8001450 <CmdParsing_Task+0x48>
 8001440:	e019      	b.n	8001476 <CmdParsing_Task+0x6e>
	case SCAN_CARDID:
		osEventFlagsSet(scanCardAvailableHandle, 0x00000001U);
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <CmdParsing_Task+0x84>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2101      	movs	r1, #1
 8001448:	4618      	mov	r0, r3
 800144a:	f003 fb57 	bl	8004afc <osEventFlagsSet>
		break;
 800144e:	e012      	b.n	8001476 <CmdParsing_Task+0x6e>
	case TOGGLE_LED:
		toggleLEDHanlde(receivedDataFromServer[1], receivedDataFromServer[2], receivedDataFromServer[3]);
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <CmdParsing_Task+0x78>)
 8001452:	785b      	ldrb	r3, [r3, #1]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <CmdParsing_Task+0x78>)
 8001458:	7892      	ldrb	r2, [r2, #2]
 800145a:	b2d1      	uxtb	r1, r2
 800145c:	4a08      	ldr	r2, [pc, #32]	; (8001480 <CmdParsing_Task+0x78>)
 800145e:	78d2      	ldrb	r2, [r2, #3]
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff98 	bl	8001398 <toggleLEDHanlde>
		break;
 8001468:	e005      	b.n	8001476 <CmdParsing_Task+0x6e>
	case SENSOR_MEASURING:
			//dosomething
		sensorMeasuringIsEnable = receivedDataFromServer[7];
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <CmdParsing_Task+0x78>)
 800146c:	79db      	ldrb	r3, [r3, #7]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <CmdParsing_Task+0x88>)
 8001472:	701a      	strb	r2, [r3, #0]
		break;
 8001474:	bf00      	nop
	}

    osDelay(1);
 8001476:	2001      	movs	r0, #1
 8001478:	f003 fae6 	bl	8004a48 <osDelay>
	osEventFlagsWait(parsingCMDAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 800147c:	e7cd      	b.n	800141a <CmdParsing_Task+0x12>
 800147e:	bf00      	nop
 8001480:	20000098 	.word	0x20000098
 8001484:	20004ba8 	.word	0x20004ba8
 8001488:	20004c34 	.word	0x20004c34
 800148c:	20004b08 	.word	0x20004b08
 8001490:	200000a0 	.word	0x200000a0

08001494 <ToggleLed_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ToggleLed_Task */
void ToggleLed_Task(void *argument)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ToggleLed_Task */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 800149c:	2001      	movs	r0, #1
 800149e:	f003 fad3 	bl	8004a48 <osDelay>
 80014a2:	e7fb      	b.n	800149c <ToggleLed_Task+0x8>

080014a4 <ScanCard_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ScanCard_Task */
void ScanCard_Task(void *argument)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	// Wait for scan flag
	osEventFlagsWait(scanCardAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <ScanCard_Task+0x48>)
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
 80014b4:	2200      	movs	r2, #0
 80014b6:	2101      	movs	r1, #1
 80014b8:	f003 fb64 	bl	8004b84 <osEventFlagsWait>

	// Mutex protect for uart2 start
	osMutexAcquire(mutex_uart2Handle, osWaitForever);
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <ScanCard_Task+0x4c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 fc49 	bl	8004d5c <osMutexAcquire>

	// Scan card id in ware house (id = receivedDataFromServer[1]) and send data to queue to SendCardID_Task
	scanCardIdHandle(receivedDataFromServer[1]);
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <ScanCard_Task+0x50>)
 80014cc:	785b      	ldrb	r3, [r3, #1]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff feef 	bl	80012b4 <scanCardIdHandle>

	// Mutex protect for uart2 end
	osMutexRelease(mutex_uart2Handle);
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <ScanCard_Task+0x4c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 fc89 	bl	8004df2 <osMutexRelease>

    osDelay(1000);
 80014e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e4:	f003 fab0 	bl	8004a48 <osDelay>
	osEventFlagsWait(scanCardAvailableHandle, 0x00000001U, osFlagsWaitAny, osWaitForever);
 80014e8:	e7e0      	b.n	80014ac <ScanCard_Task+0x8>
 80014ea:	bf00      	nop
 80014ec:	20004b08 	.word	0x20004b08
 80014f0:	20004a80 	.word	0x20004a80
 80014f4:	20000098 	.word	0x20000098

080014f8 <SensorMeasuring_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SensorMeasuring_Task */
void SensorMeasuring_Task(void *argument)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SensorMeasuring_Task */
  /* Infinite loop */
  for(;;)
  {
	if(sensorMeasuringIsEnable){
 8001500:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <SensorMeasuring_Task+0xc8>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d055      	beq.n	80015b6 <SensorMeasuring_Task+0xbe>
		wareHouse_1.humidity = rand()%2 + 95;
 800150a:	f007 fa5b 	bl	80089c4 <rand>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	bfb8      	it	lt
 8001518:	425b      	neglt	r3, r3
 800151a:	335f      	adds	r3, #95	; 0x5f
 800151c:	4a29      	ldr	r2, [pc, #164]	; (80015c4 <SensorMeasuring_Task+0xcc>)
 800151e:	6193      	str	r3, [r2, #24]
		wareHouse_1.temperature = rand()%3 + 22;
 8001520:	f007 fa50 	bl	80089c4 <rand>
 8001524:	4601      	mov	r1, r0
 8001526:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <SensorMeasuring_Task+0xd0>)
 8001528:	fb83 3201 	smull	r3, r2, r3, r1
 800152c:	17cb      	asrs	r3, r1, #31
 800152e:	1ad2      	subs	r2, r2, r3
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	1aca      	subs	r2, r1, r3
 8001538:	f102 0316 	add.w	r3, r2, #22
 800153c:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <SensorMeasuring_Task+0xcc>)
 800153e:	6153      	str	r3, [r2, #20]
		osMessageQueuePut(sensorData_QueueHandle, &wareHouse_1, NULL, osWaitForever);
 8001540:	4b22      	ldr	r3, [pc, #136]	; (80015cc <SensorMeasuring_Task+0xd4>)
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	f04f 33ff 	mov.w	r3, #4294967295
 8001548:	2200      	movs	r2, #0
 800154a:	491e      	ldr	r1, [pc, #120]	; (80015c4 <SensorMeasuring_Task+0xcc>)
 800154c:	f003 fd02 	bl	8004f54 <osMessageQueuePut>
		osDelay(1000);
 8001550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001554:	f003 fa78 	bl	8004a48 <osDelay>


		wareHouse_2.humidity = rand()%5 + 90;
 8001558:	f007 fa34 	bl	80089c4 <rand>
 800155c:	4601      	mov	r1, r0
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <SensorMeasuring_Task+0xd8>)
 8001560:	fb83 2301 	smull	r2, r3, r3, r1
 8001564:	105a      	asrs	r2, r3, #1
 8001566:	17cb      	asrs	r3, r1, #31
 8001568:	1ad2      	subs	r2, r2, r3
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	1aca      	subs	r2, r1, r3
 8001572:	f102 035a 	add.w	r3, r2, #90	; 0x5a
 8001576:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <SensorMeasuring_Task+0xdc>)
 8001578:	6193      	str	r3, [r2, #24]
		wareHouse_2.temperature = rand()%10 + 22;
 800157a:	f007 fa23 	bl	80089c4 <rand>
 800157e:	4601      	mov	r1, r0
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <SensorMeasuring_Task+0xd8>)
 8001582:	fb83 2301 	smull	r2, r3, r3, r1
 8001586:	109a      	asrs	r2, r3, #2
 8001588:	17cb      	asrs	r3, r1, #31
 800158a:	1ad2      	subs	r2, r2, r3
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1aca      	subs	r2, r1, r3
 8001596:	f102 0316 	add.w	r3, r2, #22
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <SensorMeasuring_Task+0xdc>)
 800159c:	6153      	str	r3, [r2, #20]
		osMessageQueuePut(sensorData_QueueHandle, &wareHouse_2, NULL, osWaitForever);
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <SensorMeasuring_Task+0xd4>)
 80015a0:	6818      	ldr	r0, [r3, #0]
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	2200      	movs	r2, #0
 80015a8:	490a      	ldr	r1, [pc, #40]	; (80015d4 <SensorMeasuring_Task+0xdc>)
 80015aa:	f003 fcd3 	bl	8004f54 <osMessageQueuePut>
		osDelay(1000);
 80015ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b2:	f003 fa49 	bl	8004a48 <osDelay>
	}

	osDelay(1);
 80015b6:	2001      	movs	r0, #1
 80015b8:	f003 fa46 	bl	8004a48 <osDelay>
	if(sensorMeasuringIsEnable){
 80015bc:	e7a0      	b.n	8001500 <SensorMeasuring_Task+0x8>
 80015be:	bf00      	nop
 80015c0:	200000a0 	.word	0x200000a0
 80015c4:	20004ae4 	.word	0x20004ae4
 80015c8:	55555556 	.word	0x55555556
 80015cc:	20004a84 	.word	0x20004a84
 80015d0:	66666667 	.word	0x66666667
 80015d4:	20004b8c 	.word	0x20004b8c

080015d8 <SendCardID_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SendCardID_Task */
void SendCardID_Task(void *argument)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	WareHouse_t wareHouse;
  /* Infinite loop */
  for(;;)
  {
	// wait for data from queue
	osMessageQueueGet(cardID_QueueHandle, &wareHouse, NULL, osWaitForever);
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <SendCardID_Task+0x48>)
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	f107 010c 	add.w	r1, r7, #12
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ec:	2200      	movs	r2, #0
 80015ee:	f003 fd11 	bl	8005014 <osMessageQueueGet>

	// Mutex protect for uart6 (connect to Esp) start
	osMutexAcquire(mutex_uart6Handle, osWaitForever);
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <SendCardID_Task+0x4c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f04f 31ff 	mov.w	r1, #4294967295
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 fbae 	bl	8004d5c <osMutexAcquire>

	// send Data to ESP8266 -> Sever
	sendDataToServer(&wareHouse, CardID_DATA);
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	2106      	movs	r1, #6
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fe08 	bl	800121c <sendDataToServer>

	// Mutex protect for uart6 end
	osMutexRelease(mutex_uart6Handle);
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <SendCardID_Task+0x4c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fbee 	bl	8004df2 <osMutexRelease>

    osDelay(1);
 8001616:	2001      	movs	r0, #1
 8001618:	f003 fa16 	bl	8004a48 <osDelay>
	osMessageQueueGet(cardID_QueueHandle, &wareHouse, NULL, osWaitForever);
 800161c:	e7e0      	b.n	80015e0 <SendCardID_Task+0x8>
 800161e:	bf00      	nop
 8001620:	20004b04 	.word	0x20004b04
 8001624:	20004a88 	.word	0x20004a88

08001628 <SendSensorData_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SendSensorData_Task */
void SendSensorData_Task(void *argument)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	// wait for data from queue
	osMessageQueueGet(sensorData_QueueHandle, &wareHouse, NULL, osWaitForever);
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <SendSensorData_Task+0x48>)
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	f107 010c 	add.w	r1, r7, #12
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
 800163c:	2200      	movs	r2, #0
 800163e:	f003 fce9 	bl	8005014 <osMessageQueueGet>

	// Mutex protect for uart6 (connect to Esp) start
	osMutexAcquire(mutex_uart6Handle, osWaitForever);
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <SendSensorData_Task+0x4c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f04f 31ff 	mov.w	r1, #4294967295
 800164a:	4618      	mov	r0, r3
 800164c:	f003 fb86 	bl	8004d5c <osMutexAcquire>

	// send Data to ESP8266 -> Sever
	sendDataToServer(&wareHouse, Sensor_DATA);
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	2105      	movs	r1, #5
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fde0 	bl	800121c <sendDataToServer>

	// Mutex protect for uart6 end
	osMutexRelease(mutex_uart6Handle);
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SendSensorData_Task+0x4c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f003 fbc6 	bl	8004df2 <osMutexRelease>

    osDelay(1);
 8001666:	2001      	movs	r0, #1
 8001668:	f003 f9ee 	bl	8004a48 <osDelay>
	osMessageQueueGet(sensorData_QueueHandle, &wareHouse, NULL, osWaitForever);
 800166c:	e7e0      	b.n	8001630 <SendSensorData_Task+0x8>
 800166e:	bf00      	nop
 8001670:	20004a84 	.word	0x20004a84
 8001674:	20004a88 	.word	0x20004a88

08001678 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d101      	bne.n	800168e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800168a:	f000 fb05 	bl	8001c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40000800 	.word	0x40000800

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016a4:	e7fe      	b.n	80016a4 <Error_Handler+0x8>
	...

080016a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_MspInit+0x54>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	4a11      	ldr	r2, [pc, #68]	; (80016fc <HAL_MspInit+0x54>)
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016bc:	6453      	str	r3, [r2, #68]	; 0x44
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_MspInit+0x54>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_MspInit+0x54>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_MspInit+0x54>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_MspInit+0x54>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	210f      	movs	r1, #15
 80016ea:	f06f 0001 	mvn.w	r0, #1
 80016ee:	f000 fbab 	bl	8001e48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800

08001700 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a29      	ldr	r2, [pc, #164]	; (80017c4 <HAL_SPI_MspInit+0xc4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d14b      	bne.n	80017ba <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <HAL_SPI_MspInit+0xc8>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a27      	ldr	r2, [pc, #156]	; (80017c8 <HAL_SPI_MspInit+0xc8>)
 800172c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
 8001732:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <HAL_SPI_MspInit+0xc8>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <HAL_SPI_MspInit+0xc8>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a20      	ldr	r2, [pc, #128]	; (80017c8 <HAL_SPI_MspInit+0xc8>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <HAL_SPI_MspInit+0xc8>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_SPI_MspInit+0xc8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <HAL_SPI_MspInit+0xc8>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_SPI_MspInit+0xc8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB12     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001788:	2307      	movs	r3, #7
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	480e      	ldr	r0, [pc, #56]	; (80017cc <HAL_SPI_MspInit+0xcc>)
 8001794:	f000 fc14 	bl	8001fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001798:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800179c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a6:	2303      	movs	r3, #3
 80017a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017aa:	2306      	movs	r3, #6
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4806      	ldr	r0, [pc, #24]	; (80017d0 <HAL_SPI_MspInit+0xd0>)
 80017b6:	f000 fc03 	bl	8001fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	; 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40003c00 	.word	0x40003c00
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020400 	.word	0x40020400
 80017d0:	40020800 	.word	0x40020800

080017d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08e      	sub	sp, #56	; 0x38
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a4f      	ldr	r2, [pc, #316]	; (8001930 <HAL_UART_MspInit+0x15c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d12d      	bne.n	8001852 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
 80017fa:	4b4e      	ldr	r3, [pc, #312]	; (8001934 <HAL_UART_MspInit+0x160>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a4d      	ldr	r2, [pc, #308]	; (8001934 <HAL_UART_MspInit+0x160>)
 8001800:	f043 0310 	orr.w	r3, r3, #16
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b4b      	ldr	r3, [pc, #300]	; (8001934 <HAL_UART_MspInit+0x160>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	623b      	str	r3, [r7, #32]
 8001810:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	4b47      	ldr	r3, [pc, #284]	; (8001934 <HAL_UART_MspInit+0x160>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a46      	ldr	r2, [pc, #280]	; (8001934 <HAL_UART_MspInit+0x160>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b44      	ldr	r3, [pc, #272]	; (8001934 <HAL_UART_MspInit+0x160>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800182e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001840:	2307      	movs	r3, #7
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001848:	4619      	mov	r1, r3
 800184a:	483b      	ldr	r0, [pc, #236]	; (8001938 <HAL_UART_MspInit+0x164>)
 800184c:	f000 fbb8 	bl	8001fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001850:	e06a      	b.n	8001928 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a39      	ldr	r2, [pc, #228]	; (800193c <HAL_UART_MspInit+0x168>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d12c      	bne.n	80018b6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
 8001860:	4b34      	ldr	r3, [pc, #208]	; (8001934 <HAL_UART_MspInit+0x160>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	4a33      	ldr	r2, [pc, #204]	; (8001934 <HAL_UART_MspInit+0x160>)
 8001866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186a:	6413      	str	r3, [r2, #64]	; 0x40
 800186c:	4b31      	ldr	r3, [pc, #196]	; (8001934 <HAL_UART_MspInit+0x160>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_UART_MspInit+0x160>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	4a2c      	ldr	r2, [pc, #176]	; (8001934 <HAL_UART_MspInit+0x160>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6313      	str	r3, [r2, #48]	; 0x30
 8001888:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <HAL_UART_MspInit+0x160>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001894:	230c      	movs	r3, #12
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a4:	2307      	movs	r3, #7
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ac:	4619      	mov	r1, r3
 80018ae:	4822      	ldr	r0, [pc, #136]	; (8001938 <HAL_UART_MspInit+0x164>)
 80018b0:	f000 fb86 	bl	8001fc0 <HAL_GPIO_Init>
}
 80018b4:	e038      	b.n	8001928 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART6)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a21      	ldr	r2, [pc, #132]	; (8001940 <HAL_UART_MspInit+0x16c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d133      	bne.n	8001928 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART6_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_UART_MspInit+0x160>)
 80018c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c8:	4a1a      	ldr	r2, [pc, #104]	; (8001934 <HAL_UART_MspInit+0x160>)
 80018ca:	f043 0320 	orr.w	r3, r3, #32
 80018ce:	6453      	str	r3, [r2, #68]	; 0x44
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_UART_MspInit+0x160>)
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	f003 0320 	and.w	r3, r3, #32
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HAL_UART_MspInit+0x160>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	4a13      	ldr	r2, [pc, #76]	; (8001934 <HAL_UART_MspInit+0x160>)
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	6313      	str	r3, [r2, #48]	; 0x30
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_UART_MspInit+0x160>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018f8:	23c0      	movs	r3, #192	; 0xc0
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001908:	2308      	movs	r3, #8
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001910:	4619      	mov	r1, r3
 8001912:	480c      	ldr	r0, [pc, #48]	; (8001944 <HAL_UART_MspInit+0x170>)
 8001914:	f000 fb54 	bl	8001fc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2105      	movs	r1, #5
 800191c:	2047      	movs	r0, #71	; 0x47
 800191e:	f000 fa93 	bl	8001e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001922:	2047      	movs	r0, #71	; 0x47
 8001924:	f000 faac 	bl	8001e80 <HAL_NVIC_EnableIRQ>
}
 8001928:	bf00      	nop
 800192a:	3738      	adds	r7, #56	; 0x38
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40011000 	.word	0x40011000
 8001934:	40023800 	.word	0x40023800
 8001938:	40020000 	.word	0x40020000
 800193c:	40004400 	.word	0x40004400
 8001940:	40011400 	.word	0x40011400
 8001944:	40020800 	.word	0x40020800

08001948 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08c      	sub	sp, #48	; 0x30
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001958:	2200      	movs	r2, #0
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	201e      	movs	r0, #30
 800195e:	f000 fa73 	bl	8001e48 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001962:	201e      	movs	r0, #30
 8001964:	f000 fa8c 	bl	8001e80 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <HAL_InitTick+0xa4>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <HAL_InitTick+0xa4>)
 8001972:	f043 0304 	orr.w	r3, r3, #4
 8001976:	6413      	str	r3, [r2, #64]	; 0x40
 8001978:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <HAL_InitTick+0xa4>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001984:	f107 0210 	add.w	r2, r7, #16
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4611      	mov	r1, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f001 f928 	bl	8002be4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001994:	f001 f8fe 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8001998:	4603      	mov	r3, r0
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a0:	4a13      	ldr	r2, [pc, #76]	; (80019f0 <HAL_InitTick+0xa8>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	0c9b      	lsrs	r3, r3, #18
 80019a8:	3b01      	subs	r3, #1
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_InitTick+0xac>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <HAL_InitTick+0xb0>)
 80019b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_InitTick+0xac>)
 80019b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019b8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <HAL_InitTick+0xac>)
 80019bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019be:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_InitTick+0xac>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_InitTick+0xac>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80019cc:	4809      	ldr	r0, [pc, #36]	; (80019f4 <HAL_InitTick+0xac>)
 80019ce:	f001 fc31 	bl	8003234 <HAL_TIM_Base_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d104      	bne.n	80019e2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80019d8:	4806      	ldr	r0, [pc, #24]	; (80019f4 <HAL_InitTick+0xac>)
 80019da:	f001 fc85 	bl	80032e8 <HAL_TIM_Base_Start_IT>
 80019de:	4603      	mov	r3, r0
 80019e0:	e000      	b.n	80019e4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3730      	adds	r7, #48	; 0x30
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40023800 	.word	0x40023800
 80019f0:	431bde83 	.word	0x431bde83
 80019f4:	20004c3c 	.word	0x20004c3c
 80019f8:	40000800 	.word	0x40000800

080019fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <NMI_Handler+0x4>

08001a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <HardFault_Handler+0x4>

08001a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <MemManage_Handler+0x4>

08001a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <BusFault_Handler+0x4>

08001a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <UsageFault_Handler+0x4>

08001a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <TIM4_IRQHandler+0x10>)
 8001a2e:	f001 fcbd 	bl	80033ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20004c3c 	.word	0x20004c3c

08001a3c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <USART6_IRQHandler+0x10>)
 8001a42:	f002 f829 	bl	8003a98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20004ba8 	.word	0x20004ba8

08001a50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
	return 1;
 8001a54:	2301      	movs	r3, #1
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <_kill>:

int _kill(int pid, int sig)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a6a:	f006 fe17 	bl	800869c <__errno>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2216      	movs	r2, #22
 8001a72:	601a      	str	r2, [r3, #0]
	return -1;
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_exit>:

void _exit (int status)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ffe7 	bl	8001a60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a92:	e7fe      	b.n	8001a92 <_exit+0x12>

08001a94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e00a      	b.n	8001abc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aa6:	f3af 8000 	nop.w
 8001aaa:	4601      	mov	r1, r0
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	b2ca      	uxtb	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf0      	blt.n	8001aa6 <_read+0x12>
	}

return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e009      	b.n	8001af4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	60ba      	str	r2, [r7, #8]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dbf1      	blt.n	8001ae0 <_write+0x12>
	}
	return len;
 8001afc:	687b      	ldr	r3, [r7, #4]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <_close>:

int _close(int file)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b2e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <_isatty>:

int _isatty(int file)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
	return 1;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b78:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <_sbrk+0x5c>)
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <_sbrk+0x60>)
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <_sbrk+0x64>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <_sbrk+0x68>)
 8001b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d207      	bcs.n	8001bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba0:	f006 fd7c 	bl	800869c <__errno>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	e009      	b.n	8001bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <_sbrk+0x64>)
 8001bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20020000 	.word	0x20020000
 8001bd0:	00000400 	.word	0x00000400
 8001bd4:	200000a4 	.word	0x200000a4
 8001bd8:	20004cd8 	.word	0x20004cd8

08001bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <SystemInit+0x20>)
 8001be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <SystemInit+0x20>)
 8001be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c04:	480d      	ldr	r0, [pc, #52]	; (8001c3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c06:	490e      	ldr	r1, [pc, #56]	; (8001c40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c08:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c0c:	e002      	b.n	8001c14 <LoopCopyDataInit>

08001c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c12:	3304      	adds	r3, #4

08001c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c18:	d3f9      	bcc.n	8001c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c1c:	4c0b      	ldr	r4, [pc, #44]	; (8001c4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c20:	e001      	b.n	8001c26 <LoopFillZerobss>

08001c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c24:	3204      	adds	r2, #4

08001c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c28:	d3fb      	bcc.n	8001c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c2a:	f7ff ffd7 	bl	8001bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f006 fe31 	bl	8008894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c32:	f7ff f85d 	bl	8000cf0 <main>
  bx  lr    
 8001c36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c40:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001c44:	0800a0b4 	.word	0x0800a0b4
  ldr r2, =_sbss
 8001c48:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001c4c:	20004cd8 	.word	0x20004cd8

08001c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC_IRQHandler>
	...

08001c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <HAL_Init+0x40>)
 8001c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <HAL_Init+0x40>)
 8001c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_Init+0x40>)
 8001c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f000 f8d8 	bl	8001e32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c82:	200f      	movs	r0, #15
 8001c84:	f7ff fe60 	bl	8001948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c88:	f7ff fd0e 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023c00 	.word	0x40023c00

08001c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x20>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x24>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <HAL_IncTick+0x24>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000010 	.word	0x20000010
 8001cbc:	20004c84 	.word	0x20004c84

08001cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_GetTick+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20004c84 	.word	0x20004c84

08001cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	60d3      	str	r3, [r2, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <__NVIC_GetPriorityGrouping+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0307 	and.w	r3, r3, #7
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db0b      	blt.n	8001d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	4907      	ldr	r1, [pc, #28]	; (8001d74 <__NVIC_EnableIRQ+0x38>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000e100 	.word	0xe000e100

08001d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	db0a      	blt.n	8001da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <__NVIC_SetPriority+0x4c>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da0:	e00a      	b.n	8001db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4908      	ldr	r1, [pc, #32]	; (8001dc8 <__NVIC_SetPriority+0x50>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3b04      	subs	r3, #4
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	761a      	strb	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f1c3 0307 	rsb	r3, r3, #7
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	bf28      	it	cs
 8001dea:	2304      	movcs	r3, #4
 8001dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d902      	bls.n	8001dfc <NVIC_EncodePriority+0x30>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3b03      	subs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <NVIC_EncodePriority+0x32>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	f04f 32ff 	mov.w	r2, #4294967295
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	401a      	ands	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	4313      	orrs	r3, r2
         );
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	; 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ff4c 	bl	8001cd8 <__NVIC_SetPriorityGrouping>
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5a:	f7ff ff61 	bl	8001d20 <__NVIC_GetPriorityGrouping>
 8001e5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	68b9      	ldr	r1, [r7, #8]
 8001e64:	6978      	ldr	r0, [r7, #20]
 8001e66:	f7ff ffb1 	bl	8001dcc <NVIC_EncodePriority>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e70:	4611      	mov	r1, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff80 	bl	8001d78 <__NVIC_SetPriority>
}
 8001e78:	bf00      	nop
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ff54 	bl	8001d3c <__NVIC_EnableIRQ>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001eaa:	f7ff ff09 	bl	8001cc0 <HAL_GetTick>
 8001eae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d008      	beq.n	8001ece <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2280      	movs	r2, #128	; 0x80
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e052      	b.n	8001f74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0216 	bic.w	r2, r2, #22
 8001edc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d103      	bne.n	8001efe <HAL_DMA_Abort+0x62>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d007      	beq.n	8001f0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0208 	bic.w	r2, r2, #8
 8001f0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0201 	bic.w	r2, r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1e:	e013      	b.n	8001f48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f20:	f7ff fece 	bl	8001cc0 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	d90c      	bls.n	8001f48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2220      	movs	r2, #32
 8001f32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2203      	movs	r2, #3
 8001f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e015      	b.n	8001f74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1e4      	bne.n	8001f20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	223f      	movs	r2, #63	; 0x3f
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d004      	beq.n	8001f9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2280      	movs	r2, #128	; 0x80
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00c      	b.n	8001fb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2205      	movs	r2, #5
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0201 	bic.w	r2, r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	e159      	b.n	8002290 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fdc:	2201      	movs	r2, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	f040 8148 	bne.w	800228a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d005      	beq.n	8002012 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200e:	2b02      	cmp	r3, #2
 8002010:	d130      	bne.n	8002074 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002048:	2201      	movs	r2, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 0201 	and.w	r2, r3, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b03      	cmp	r3, #3
 800207e:	d017      	beq.n	80020b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d123      	bne.n	8002104 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	08da      	lsrs	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3208      	adds	r2, #8
 80020c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	220f      	movs	r2, #15
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	08da      	lsrs	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3208      	adds	r2, #8
 80020fe:	69b9      	ldr	r1, [r7, #24]
 8002100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0203 	and.w	r2, r3, #3
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80a2 	beq.w	800228a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b57      	ldr	r3, [pc, #348]	; (80022a8 <HAL_GPIO_Init+0x2e8>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a56      	ldr	r2, [pc, #344]	; (80022a8 <HAL_GPIO_Init+0x2e8>)
 8002150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b54      	ldr	r3, [pc, #336]	; (80022a8 <HAL_GPIO_Init+0x2e8>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002162:	4a52      	ldr	r2, [pc, #328]	; (80022ac <HAL_GPIO_Init+0x2ec>)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	3302      	adds	r3, #2
 800216a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	220f      	movs	r2, #15
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a49      	ldr	r2, [pc, #292]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d019      	beq.n	80021c2 <HAL_GPIO_Init+0x202>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a48      	ldr	r2, [pc, #288]	; (80022b4 <HAL_GPIO_Init+0x2f4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <HAL_GPIO_Init+0x1fe>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a47      	ldr	r2, [pc, #284]	; (80022b8 <HAL_GPIO_Init+0x2f8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00d      	beq.n	80021ba <HAL_GPIO_Init+0x1fa>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a46      	ldr	r2, [pc, #280]	; (80022bc <HAL_GPIO_Init+0x2fc>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d007      	beq.n	80021b6 <HAL_GPIO_Init+0x1f6>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a45      	ldr	r2, [pc, #276]	; (80022c0 <HAL_GPIO_Init+0x300>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d101      	bne.n	80021b2 <HAL_GPIO_Init+0x1f2>
 80021ae:	2304      	movs	r3, #4
 80021b0:	e008      	b.n	80021c4 <HAL_GPIO_Init+0x204>
 80021b2:	2307      	movs	r3, #7
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x204>
 80021b6:	2303      	movs	r3, #3
 80021b8:	e004      	b.n	80021c4 <HAL_GPIO_Init+0x204>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e002      	b.n	80021c4 <HAL_GPIO_Init+0x204>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_GPIO_Init+0x204>
 80021c2:	2300      	movs	r3, #0
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	f002 0203 	and.w	r2, r2, #3
 80021ca:	0092      	lsls	r2, r2, #2
 80021cc:	4093      	lsls	r3, r2
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d4:	4935      	ldr	r1, [pc, #212]	; (80022ac <HAL_GPIO_Init+0x2ec>)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	089b      	lsrs	r3, r3, #2
 80021da:	3302      	adds	r3, #2
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e2:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <HAL_GPIO_Init+0x304>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002206:	4a2f      	ldr	r2, [pc, #188]	; (80022c4 <HAL_GPIO_Init+0x304>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800220c:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <HAL_GPIO_Init+0x304>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002230:	4a24      	ldr	r2, [pc, #144]	; (80022c4 <HAL_GPIO_Init+0x304>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002236:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <HAL_GPIO_Init+0x304>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225a:	4a1a      	ldr	r2, [pc, #104]	; (80022c4 <HAL_GPIO_Init+0x304>)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <HAL_GPIO_Init+0x304>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002284:	4a0f      	ldr	r2, [pc, #60]	; (80022c4 <HAL_GPIO_Init+0x304>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3301      	adds	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b0f      	cmp	r3, #15
 8002294:	f67f aea2 	bls.w	8001fdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3724      	adds	r7, #36	; 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40013c00 	.word	0x40013c00

080022c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
 80022d4:	4613      	mov	r3, r2
 80022d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d8:	787b      	ldrb	r3, [r7, #1]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022de:	887a      	ldrh	r2, [r7, #2]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022e4:	e003      	b.n	80022ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022e6:	887b      	ldrh	r3, [r7, #2]
 80022e8:	041a      	lsls	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	619a      	str	r2, [r3, #24]
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e264      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d075      	beq.n	8002406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231a:	4ba3      	ldr	r3, [pc, #652]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b04      	cmp	r3, #4
 8002324:	d00c      	beq.n	8002340 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002326:	4ba0      	ldr	r3, [pc, #640]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800232e:	2b08      	cmp	r3, #8
 8002330:	d112      	bne.n	8002358 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002332:	4b9d      	ldr	r3, [pc, #628]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800233e:	d10b      	bne.n	8002358 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002340:	4b99      	ldr	r3, [pc, #612]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d05b      	beq.n	8002404 <HAL_RCC_OscConfig+0x108>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d157      	bne.n	8002404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e23f      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002360:	d106      	bne.n	8002370 <HAL_RCC_OscConfig+0x74>
 8002362:	4b91      	ldr	r3, [pc, #580]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a90      	ldr	r2, [pc, #576]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e01d      	b.n	80023ac <HAL_RCC_OscConfig+0xb0>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x98>
 800237a:	4b8b      	ldr	r3, [pc, #556]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a8a      	ldr	r2, [pc, #552]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b88      	ldr	r3, [pc, #544]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a87      	ldr	r2, [pc, #540]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0xb0>
 8002394:	4b84      	ldr	r3, [pc, #528]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a83      	ldr	r2, [pc, #524]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800239a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b81      	ldr	r3, [pc, #516]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a80      	ldr	r2, [pc, #512]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 80023a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff fc84 	bl	8001cc0 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023bc:	f7ff fc80 	bl	8001cc0 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e204      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0xc0>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7ff fc70 	bl	8001cc0 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e4:	f7ff fc6c 	bl	8001cc0 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1f0      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	4b6c      	ldr	r3, [pc, #432]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0xe8>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d063      	beq.n	80024da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002412:	4b65      	ldr	r3, [pc, #404]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241e:	4b62      	ldr	r3, [pc, #392]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002426:	2b08      	cmp	r3, #8
 8002428:	d11c      	bne.n	8002464 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242a:	4b5f      	ldr	r3, [pc, #380]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d116      	bne.n	8002464 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002436:	4b5c      	ldr	r3, [pc, #368]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_RCC_OscConfig+0x152>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e1c4      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	4b56      	ldr	r3, [pc, #344]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4952      	ldr	r1, [pc, #328]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	e03a      	b.n	80024da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d020      	beq.n	80024ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800246c:	4b4f      	ldr	r3, [pc, #316]	; (80025ac <HAL_RCC_OscConfig+0x2b0>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7ff fc25 	bl	8001cc0 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247a:	f7ff fc21 	bl	8001cc0 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e1a5      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	4b46      	ldr	r3, [pc, #280]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002498:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4940      	ldr	r1, [pc, #256]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]
 80024ac:	e015      	b.n	80024da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ae:	4b3f      	ldr	r3, [pc, #252]	; (80025ac <HAL_RCC_OscConfig+0x2b0>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7ff fc04 	bl	8001cc0 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024bc:	f7ff fc00 	bl	8001cc0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e184      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d030      	beq.n	8002548 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d016      	beq.n	800251c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ee:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <HAL_RCC_OscConfig+0x2b4>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7ff fbe4 	bl	8001cc0 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024fc:	f7ff fbe0 	bl	8001cc0 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e164      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x200>
 800251a:	e015      	b.n	8002548 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_RCC_OscConfig+0x2b4>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7ff fbcd 	bl	8001cc0 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800252a:	f7ff fbc9 	bl	8001cc0 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e14d      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800253e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80a0 	beq.w	8002696 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255a:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10f      	bne.n	8002586 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002574:	6413      	str	r3, [r2, #64]	; 0x40
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002582:	2301      	movs	r3, #1
 8002584:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_RCC_OscConfig+0x2b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d121      	bne.n	80025d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002592:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_RCC_OscConfig+0x2b8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <HAL_RCC_OscConfig+0x2b8>)
 8002598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259e:	f7ff fb8f 	bl	8001cc0 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a4:	e011      	b.n	80025ca <HAL_RCC_OscConfig+0x2ce>
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	42470000 	.word	0x42470000
 80025b0:	42470e80 	.word	0x42470e80
 80025b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b8:	f7ff fb82 	bl	8001cc0 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e106      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ca:	4b85      	ldr	r3, [pc, #532]	; (80027e0 <HAL_RCC_OscConfig+0x4e4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d106      	bne.n	80025ec <HAL_RCC_OscConfig+0x2f0>
 80025de:	4b81      	ldr	r3, [pc, #516]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a80      	ldr	r2, [pc, #512]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ea:	e01c      	b.n	8002626 <HAL_RCC_OscConfig+0x32a>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d10c      	bne.n	800260e <HAL_RCC_OscConfig+0x312>
 80025f4:	4b7b      	ldr	r3, [pc, #492]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	4a7a      	ldr	r2, [pc, #488]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 80025fa:	f043 0304 	orr.w	r3, r3, #4
 80025fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002600:	4b78      	ldr	r3, [pc, #480]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	4a77      	ldr	r2, [pc, #476]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6713      	str	r3, [r2, #112]	; 0x70
 800260c:	e00b      	b.n	8002626 <HAL_RCC_OscConfig+0x32a>
 800260e:	4b75      	ldr	r3, [pc, #468]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	4a74      	ldr	r2, [pc, #464]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	6713      	str	r3, [r2, #112]	; 0x70
 800261a:	4b72      	ldr	r3, [pc, #456]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a71      	ldr	r2, [pc, #452]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 8002620:	f023 0304 	bic.w	r3, r3, #4
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d015      	beq.n	800265a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7ff fb47 	bl	8001cc0 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f7ff fb43 	bl	8001cc0 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f241 3288 	movw	r2, #5000	; 0x1388
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e0c5      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264c:	4b65      	ldr	r3, [pc, #404]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0ee      	beq.n	8002636 <HAL_RCC_OscConfig+0x33a>
 8002658:	e014      	b.n	8002684 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265a:	f7ff fb31 	bl	8001cc0 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002660:	e00a      	b.n	8002678 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002662:	f7ff fb2d 	bl	8001cc0 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002670:	4293      	cmp	r3, r2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e0af      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002678:	4b5a      	ldr	r3, [pc, #360]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1ee      	bne.n	8002662 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002684:	7dfb      	ldrb	r3, [r7, #23]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d105      	bne.n	8002696 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268a:	4b56      	ldr	r3, [pc, #344]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a55      	ldr	r2, [pc, #340]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 8002690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 809b 	beq.w	80027d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026a0:	4b50      	ldr	r3, [pc, #320]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 030c 	and.w	r3, r3, #12
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d05c      	beq.n	8002766 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d141      	bne.n	8002738 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b4:	4b4c      	ldr	r3, [pc, #304]	; (80027e8 <HAL_RCC_OscConfig+0x4ec>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ba:	f7ff fb01 	bl	8001cc0 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c2:	f7ff fafd 	bl	8001cc0 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e081      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d4:	4b43      	ldr	r3, [pc, #268]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f0      	bne.n	80026c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69da      	ldr	r2, [r3, #28]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	019b      	lsls	r3, r3, #6
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	085b      	lsrs	r3, r3, #1
 80026f8:	3b01      	subs	r3, #1
 80026fa:	041b      	lsls	r3, r3, #16
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002702:	061b      	lsls	r3, r3, #24
 8002704:	4937      	ldr	r1, [pc, #220]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800270a:	4b37      	ldr	r3, [pc, #220]	; (80027e8 <HAL_RCC_OscConfig+0x4ec>)
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7ff fad6 	bl	8001cc0 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002718:	f7ff fad2 	bl	8001cc0 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e056      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272a:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x41c>
 8002736:	e04e      	b.n	80027d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002738:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <HAL_RCC_OscConfig+0x4ec>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7ff fabf 	bl	8001cc0 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002746:	f7ff fabb 	bl	8001cc0 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e03f      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002758:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f0      	bne.n	8002746 <HAL_RCC_OscConfig+0x44a>
 8002764:	e037      	b.n	80027d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e032      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002772:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <HAL_RCC_OscConfig+0x4e8>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d028      	beq.n	80027d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d121      	bne.n	80027d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d11a      	bne.n	80027d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027a2:	4013      	ands	r3, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d111      	bne.n	80027d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	3b01      	subs	r3, #1
 80027bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40007000 	.word	0x40007000
 80027e4:	40023800 	.word	0x40023800
 80027e8:	42470060 	.word	0x42470060

080027ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0cc      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002800:	4b68      	ldr	r3, [pc, #416]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d90c      	bls.n	8002828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b65      	ldr	r3, [pc, #404]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b63      	ldr	r3, [pc, #396]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0b8      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002840:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800284a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002858:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002864:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	494d      	ldr	r1, [pc, #308]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d044      	beq.n	800290c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d119      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e07f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d003      	beq.n	80028aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d107      	bne.n	80028ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ba:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e067      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ca:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f023 0203 	bic.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	4934      	ldr	r1, [pc, #208]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028dc:	f7ff f9f0 	bl	8001cc0 <HAL_GetTick>
 80028e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e4:	f7ff f9ec 	bl	8001cc0 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e04f      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 020c 	and.w	r2, r3, #12
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	429a      	cmp	r2, r3
 800290a:	d1eb      	bne.n	80028e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800290c:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d20c      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e032      	b.n	800299a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4916      	ldr	r1, [pc, #88]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	490e      	ldr	r1, [pc, #56]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002972:	f000 f821 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002976:	4602      	mov	r2, r0
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	490a      	ldr	r1, [pc, #40]	; (80029ac <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	5ccb      	ldrb	r3, [r1, r3]
 8002986:	fa22 f303 	lsr.w	r3, r2, r3
 800298a:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe ffd8 	bl	8001948 <HAL_InitTick>

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023c00 	.word	0x40023c00
 80029a8:	40023800 	.word	0x40023800
 80029ac:	08009f40 	.word	0x08009f40
 80029b0:	20000008 	.word	0x20000008
 80029b4:	2000000c 	.word	0x2000000c

080029b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	2300      	movs	r3, #0
 80029ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029d0:	4b67      	ldr	r3, [pc, #412]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d00d      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0x40>
 80029dc:	2b08      	cmp	r3, #8
 80029de:	f200 80bd 	bhi.w	8002b5c <HAL_RCC_GetSysClockFreq+0x1a4>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x34>
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ea:	e0b7      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ec:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029ee:	60bb      	str	r3, [r7, #8]
       break;
 80029f0:	e0b7      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029f2:	4b61      	ldr	r3, [pc, #388]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80029f4:	60bb      	str	r3, [r7, #8]
      break;
 80029f6:	e0b4      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f8:	4b5d      	ldr	r3, [pc, #372]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a02:	4b5b      	ldr	r3, [pc, #364]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d04d      	beq.n	8002aaa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0e:	4b58      	ldr	r3, [pc, #352]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	099b      	lsrs	r3, r3, #6
 8002a14:	461a      	mov	r2, r3
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a1e:	f04f 0100 	mov.w	r1, #0
 8002a22:	ea02 0800 	and.w	r8, r2, r0
 8002a26:	ea03 0901 	and.w	r9, r3, r1
 8002a2a:	4640      	mov	r0, r8
 8002a2c:	4649      	mov	r1, r9
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	014b      	lsls	r3, r1, #5
 8002a38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a3c:	0142      	lsls	r2, r0, #5
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	ebb0 0008 	subs.w	r0, r0, r8
 8002a46:	eb61 0109 	sbc.w	r1, r1, r9
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	018b      	lsls	r3, r1, #6
 8002a54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a58:	0182      	lsls	r2, r0, #6
 8002a5a:	1a12      	subs	r2, r2, r0
 8002a5c:	eb63 0301 	sbc.w	r3, r3, r1
 8002a60:	f04f 0000 	mov.w	r0, #0
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	00d9      	lsls	r1, r3, #3
 8002a6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a6e:	00d0      	lsls	r0, r2, #3
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	eb12 0208 	adds.w	r2, r2, r8
 8002a78:	eb43 0309 	adc.w	r3, r3, r9
 8002a7c:	f04f 0000 	mov.w	r0, #0
 8002a80:	f04f 0100 	mov.w	r1, #0
 8002a84:	0259      	lsls	r1, r3, #9
 8002a86:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a8a:	0250      	lsls	r0, r2, #9
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	461a      	mov	r2, r3
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	f7fd fbf0 	bl	8000280 <__aeabi_uldivmod>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	e04a      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aaa:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	099b      	lsrs	r3, r3, #6
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002aba:	f04f 0100 	mov.w	r1, #0
 8002abe:	ea02 0400 	and.w	r4, r2, r0
 8002ac2:	ea03 0501 	and.w	r5, r3, r1
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	4629      	mov	r1, r5
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	014b      	lsls	r3, r1, #5
 8002ad4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ad8:	0142      	lsls	r2, r0, #5
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	1b00      	subs	r0, r0, r4
 8002ae0:	eb61 0105 	sbc.w	r1, r1, r5
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	018b      	lsls	r3, r1, #6
 8002aee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002af2:	0182      	lsls	r2, r0, #6
 8002af4:	1a12      	subs	r2, r2, r0
 8002af6:	eb63 0301 	sbc.w	r3, r3, r1
 8002afa:	f04f 0000 	mov.w	r0, #0
 8002afe:	f04f 0100 	mov.w	r1, #0
 8002b02:	00d9      	lsls	r1, r3, #3
 8002b04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b08:	00d0      	lsls	r0, r2, #3
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	1912      	adds	r2, r2, r4
 8002b10:	eb45 0303 	adc.w	r3, r5, r3
 8002b14:	f04f 0000 	mov.w	r0, #0
 8002b18:	f04f 0100 	mov.w	r1, #0
 8002b1c:	0299      	lsls	r1, r3, #10
 8002b1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b22:	0290      	lsls	r0, r2, #10
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	f7fd fba4 	bl	8000280 <__aeabi_uldivmod>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	0c1b      	lsrs	r3, r3, #16
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b58:	60bb      	str	r3, [r7, #8]
      break;
 8002b5a:	e002      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b5e:	60bb      	str	r3, [r7, #8]
      break;
 8002b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b62:	68bb      	ldr	r3, [r7, #8]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	00f42400 	.word	0x00f42400
 8002b78:	007a1200 	.word	0x007a1200

08002b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000008 	.word	0x20000008

08002b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b98:	f7ff fff0 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	0a9b      	lsrs	r3, r3, #10
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	4903      	ldr	r1, [pc, #12]	; (8002bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	08009f50 	.word	0x08009f50

08002bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bc0:	f7ff ffdc 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	0b5b      	lsrs	r3, r3, #13
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	4903      	ldr	r1, [pc, #12]	; (8002be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd2:	5ccb      	ldrb	r3, [r1, r3]
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	08009f50 	.word	0x08009f50

08002be4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	220f      	movs	r2, #15
 8002bf2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <HAL_RCC_GetClockConfig+0x5c>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0203 	and.w	r2, r3, #3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <HAL_RCC_GetClockConfig+0x5c>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_RCC_GetClockConfig+0x5c>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <HAL_RCC_GetClockConfig+0x5c>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	08db      	lsrs	r3, r3, #3
 8002c1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <HAL_RCC_GetClockConfig+0x60>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0207 	and.w	r2, r3, #7
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	601a      	str	r2, [r3, #0]
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40023c00 	.word	0x40023c00

08002c48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e07b      	b.n	8002d52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d108      	bne.n	8002c74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c6a:	d009      	beq.n	8002c80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
 8002c72:	e005      	b.n	8002c80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe fd30 	bl	8001700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d04:	ea42 0103 	orr.w	r1, r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	0c1b      	lsrs	r3, r3, #16
 8002d1e:	f003 0104 	and.w	r1, r3, #4
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	f003 0210 	and.w	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b08c      	sub	sp, #48	; 0x30
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x26>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e18a      	b.n	8003096 <HAL_SPI_TransmitReceive+0x33c>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d88:	f7fe ff9a 	bl	8001cc0 <HAL_GetTick>
 8002d8c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d9e:	887b      	ldrh	r3, [r7, #2]
 8002da0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002da2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d00f      	beq.n	8002dca <HAL_SPI_TransmitReceive+0x70>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002db0:	d107      	bne.n	8002dc2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d103      	bne.n	8002dc2 <HAL_SPI_TransmitReceive+0x68>
 8002dba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d003      	beq.n	8002dca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002dc8:	e15b      	b.n	8003082 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_SPI_TransmitReceive+0x82>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_SPI_TransmitReceive+0x82>
 8002dd6:	887b      	ldrh	r3, [r7, #2]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d103      	bne.n	8002de4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002de2:	e14e      	b.n	8003082 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d003      	beq.n	8002df8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2205      	movs	r2, #5
 8002df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	887a      	ldrh	r2, [r7, #2]
 8002e0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	887a      	ldrh	r2, [r7, #2]
 8002e1a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	d007      	beq.n	8002e4c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e54:	d178      	bne.n	8002f48 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_SPI_TransmitReceive+0x10a>
 8002e5e:	8b7b      	ldrh	r3, [r7, #26]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d166      	bne.n	8002f32 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	881a      	ldrh	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	1c9a      	adds	r2, r3, #2
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e88:	e053      	b.n	8002f32 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d11b      	bne.n	8002ed0 <HAL_SPI_TransmitReceive+0x176>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d016      	beq.n	8002ed0 <HAL_SPI_TransmitReceive+0x176>
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d113      	bne.n	8002ed0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	881a      	ldrh	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	1c9a      	adds	r2, r3, #2
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d119      	bne.n	8002f12 <HAL_SPI_TransmitReceive+0x1b8>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d014      	beq.n	8002f12 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	b292      	uxth	r2, r2
 8002ef4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	1c9a      	adds	r2, r3, #2
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f12:	f7fe fed5 	bl	8001cc0 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d807      	bhi.n	8002f32 <HAL_SPI_TransmitReceive+0x1d8>
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d003      	beq.n	8002f32 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f30:	e0a7      	b.n	8003082 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1a6      	bne.n	8002e8a <HAL_SPI_TransmitReceive+0x130>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1a1      	bne.n	8002e8a <HAL_SPI_TransmitReceive+0x130>
 8002f46:	e07c      	b.n	8003042 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <HAL_SPI_TransmitReceive+0x1fc>
 8002f50:	8b7b      	ldrh	r3, [r7, #26]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d16b      	bne.n	800302e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	330c      	adds	r3, #12
 8002f60:	7812      	ldrb	r2, [r2, #0]
 8002f62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f7c:	e057      	b.n	800302e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d11c      	bne.n	8002fc6 <HAL_SPI_TransmitReceive+0x26c>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d017      	beq.n	8002fc6 <HAL_SPI_TransmitReceive+0x26c>
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d114      	bne.n	8002fc6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	330c      	adds	r3, #12
 8002fa6:	7812      	ldrb	r2, [r2, #0]
 8002fa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d119      	bne.n	8003008 <HAL_SPI_TransmitReceive+0x2ae>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d014      	beq.n	8003008 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003004:	2301      	movs	r3, #1
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003008:	f7fe fe5a 	bl	8001cc0 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003014:	429a      	cmp	r2, r3
 8003016:	d803      	bhi.n	8003020 <HAL_SPI_TransmitReceive+0x2c6>
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d102      	bne.n	8003026 <HAL_SPI_TransmitReceive+0x2cc>
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	2b00      	cmp	r3, #0
 8003024:	d103      	bne.n	800302e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800302c:	e029      	b.n	8003082 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1a2      	bne.n	8002f7e <HAL_SPI_TransmitReceive+0x224>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d19d      	bne.n	8002f7e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003044:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f8b2 	bl	80031b0 <SPI_EndRxTxTransaction>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d006      	beq.n	8003060 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800305e:	e010      	b.n	8003082 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10b      	bne.n	8003080 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	e000      	b.n	8003082 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003080:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003092:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003096:	4618      	mov	r0, r3
 8003098:	3730      	adds	r7, #48	; 0x30
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030b0:	f7fe fe06 	bl	8001cc0 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	4413      	add	r3, r2
 80030be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030c0:	f7fe fdfe 	bl	8001cc0 <HAL_GetTick>
 80030c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030c6:	4b39      	ldr	r3, [pc, #228]	; (80031ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	015b      	lsls	r3, r3, #5
 80030cc:	0d1b      	lsrs	r3, r3, #20
 80030ce:	69fa      	ldr	r2, [r7, #28]
 80030d0:	fb02 f303 	mul.w	r3, r2, r3
 80030d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030d6:	e054      	b.n	8003182 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030de:	d050      	beq.n	8003182 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030e0:	f7fe fdee 	bl	8001cc0 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d902      	bls.n	80030f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d13d      	bne.n	8003172 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003104:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800310e:	d111      	bne.n	8003134 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003118:	d004      	beq.n	8003124 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003122:	d107      	bne.n	8003134 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003132:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800313c:	d10f      	bne.n	800315e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800315c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e017      	b.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	3b01      	subs	r3, #1
 8003180:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4013      	ands	r3, r2
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	429a      	cmp	r2, r3
 8003190:	bf0c      	ite	eq
 8003192:	2301      	moveq	r3, #1
 8003194:	2300      	movne	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	429a      	cmp	r2, r3
 800319e:	d19b      	bne.n	80030d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000008 	.word	0x20000008

080031b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80031bc:	4b1b      	ldr	r3, [pc, #108]	; (800322c <SPI_EndRxTxTransaction+0x7c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1b      	ldr	r2, [pc, #108]	; (8003230 <SPI_EndRxTxTransaction+0x80>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	0d5b      	lsrs	r3, r3, #21
 80031c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031cc:	fb02 f303 	mul.w	r3, r2, r3
 80031d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031da:	d112      	bne.n	8003202 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2200      	movs	r2, #0
 80031e4:	2180      	movs	r1, #128	; 0x80
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7ff ff5a 	bl	80030a0 <SPI_WaitFlagStateUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d016      	beq.n	8003220 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f6:	f043 0220 	orr.w	r2, r3, #32
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e00f      	b.n	8003222 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	3b01      	subs	r3, #1
 800320c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003218:	2b80      	cmp	r3, #128	; 0x80
 800321a:	d0f2      	beq.n	8003202 <SPI_EndRxTxTransaction+0x52>
 800321c:	e000      	b.n	8003220 <SPI_EndRxTxTransaction+0x70>
        break;
 800321e:	bf00      	nop
  }

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000008 	.word	0x20000008
 8003230:	165e9f81 	.word	0x165e9f81

08003234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e041      	b.n	80032ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d106      	bne.n	8003260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f839 	bl	80032d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	4619      	mov	r1, r3
 8003272:	4610      	mov	r0, r2
 8003274:	f000 f9ca 	bl	800360c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d001      	beq.n	8003300 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e044      	b.n	800338a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1e      	ldr	r2, [pc, #120]	; (8003398 <HAL_TIM_Base_Start_IT+0xb0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d018      	beq.n	8003354 <HAL_TIM_Base_Start_IT+0x6c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332a:	d013      	beq.n	8003354 <HAL_TIM_Base_Start_IT+0x6c>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a1a      	ldr	r2, [pc, #104]	; (800339c <HAL_TIM_Base_Start_IT+0xb4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00e      	beq.n	8003354 <HAL_TIM_Base_Start_IT+0x6c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a19      	ldr	r2, [pc, #100]	; (80033a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d009      	beq.n	8003354 <HAL_TIM_Base_Start_IT+0x6c>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a17      	ldr	r2, [pc, #92]	; (80033a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d004      	beq.n	8003354 <HAL_TIM_Base_Start_IT+0x6c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a16      	ldr	r2, [pc, #88]	; (80033a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d111      	bne.n	8003378 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b06      	cmp	r3, #6
 8003364:	d010      	beq.n	8003388 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0201 	orr.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003376:	e007      	b.n	8003388 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40010000 	.word	0x40010000
 800339c:	40000400 	.word	0x40000400
 80033a0:	40000800 	.word	0x40000800
 80033a4:	40000c00 	.word	0x40000c00
 80033a8:	40014000 	.word	0x40014000

080033ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d122      	bne.n	8003408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d11b      	bne.n	8003408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0202 	mvn.w	r2, #2
 80033d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f8ee 	bl	80035d0 <HAL_TIM_IC_CaptureCallback>
 80033f4:	e005      	b.n	8003402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f8e0 	bl	80035bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f8f1 	bl	80035e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b04      	cmp	r3, #4
 8003414:	d122      	bne.n	800345c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b04      	cmp	r3, #4
 8003422:	d11b      	bne.n	800345c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0204 	mvn.w	r2, #4
 800342c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2202      	movs	r2, #2
 8003432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f8c4 	bl	80035d0 <HAL_TIM_IC_CaptureCallback>
 8003448:	e005      	b.n	8003456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f8b6 	bl	80035bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f8c7 	bl	80035e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b08      	cmp	r3, #8
 8003468:	d122      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b08      	cmp	r3, #8
 8003476:	d11b      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0208 	mvn.w	r2, #8
 8003480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2204      	movs	r2, #4
 8003486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f89a 	bl	80035d0 <HAL_TIM_IC_CaptureCallback>
 800349c:	e005      	b.n	80034aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f88c 	bl	80035bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f89d 	bl	80035e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	2b10      	cmp	r3, #16
 80034bc:	d122      	bne.n	8003504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d11b      	bne.n	8003504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0210 	mvn.w	r2, #16
 80034d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2208      	movs	r2, #8
 80034da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f870 	bl	80035d0 <HAL_TIM_IC_CaptureCallback>
 80034f0:	e005      	b.n	80034fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f862 	bl	80035bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f873 	bl	80035e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b01      	cmp	r3, #1
 8003510:	d10e      	bne.n	8003530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d107      	bne.n	8003530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0201 	mvn.w	r2, #1
 8003528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fe f8a4 	bl	8001678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353a:	2b80      	cmp	r3, #128	; 0x80
 800353c:	d10e      	bne.n	800355c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003548:	2b80      	cmp	r3, #128	; 0x80
 800354a:	d107      	bne.n	800355c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8e2 	bl	8003720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003566:	2b40      	cmp	r3, #64	; 0x40
 8003568:	d10e      	bne.n	8003588 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003574:	2b40      	cmp	r3, #64	; 0x40
 8003576:	d107      	bne.n	8003588 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f838 	bl	80035f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	2b20      	cmp	r3, #32
 8003594:	d10e      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d107      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0220 	mvn.w	r2, #32
 80035ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f8ac 	bl	800370c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a34      	ldr	r2, [pc, #208]	; (80036f0 <TIM_Base_SetConfig+0xe4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00f      	beq.n	8003644 <TIM_Base_SetConfig+0x38>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362a:	d00b      	beq.n	8003644 <TIM_Base_SetConfig+0x38>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a31      	ldr	r2, [pc, #196]	; (80036f4 <TIM_Base_SetConfig+0xe8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d007      	beq.n	8003644 <TIM_Base_SetConfig+0x38>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a30      	ldr	r2, [pc, #192]	; (80036f8 <TIM_Base_SetConfig+0xec>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <TIM_Base_SetConfig+0x38>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a2f      	ldr	r2, [pc, #188]	; (80036fc <TIM_Base_SetConfig+0xf0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d108      	bne.n	8003656 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a25      	ldr	r2, [pc, #148]	; (80036f0 <TIM_Base_SetConfig+0xe4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01b      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003664:	d017      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <TIM_Base_SetConfig+0xe8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a21      	ldr	r2, [pc, #132]	; (80036f8 <TIM_Base_SetConfig+0xec>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00f      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a20      	ldr	r2, [pc, #128]	; (80036fc <TIM_Base_SetConfig+0xf0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00b      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a1f      	ldr	r2, [pc, #124]	; (8003700 <TIM_Base_SetConfig+0xf4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d007      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <TIM_Base_SetConfig+0xf8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d003      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <TIM_Base_SetConfig+0xfc>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d108      	bne.n	80036a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <TIM_Base_SetConfig+0xe4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d103      	bne.n	80036dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	615a      	str	r2, [r3, #20]
}
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40010000 	.word	0x40010000
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40000800 	.word	0x40000800
 80036fc:	40000c00 	.word	0x40000c00
 8003700:	40014000 	.word	0x40014000
 8003704:	40014400 	.word	0x40014400
 8003708:	40014800 	.word	0x40014800

0800370c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e03f      	b.n	80037c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fe f83a 	bl	80017d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2224      	movs	r2, #36	; 0x24
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fe7d 	bl	8004478 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800378c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800379c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b08a      	sub	sp, #40	; 0x28
 80037d2:	af02      	add	r7, sp, #8
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	4613      	mov	r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d17c      	bne.n	80038e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_UART_Transmit+0x2c>
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e075      	b.n	80038ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_UART_Transmit+0x3e>
 8003808:	2302      	movs	r3, #2
 800380a:	e06e      	b.n	80038ea <HAL_UART_Transmit+0x11c>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2221      	movs	r2, #33	; 0x21
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003822:	f7fe fa4d 	bl	8001cc0 <HAL_GetTick>
 8003826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	88fa      	ldrh	r2, [r7, #6]
 800382c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	88fa      	ldrh	r2, [r7, #6]
 8003832:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383c:	d108      	bne.n	8003850 <HAL_UART_Transmit+0x82>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d104      	bne.n	8003850 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e003      	b.n	8003858 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003854:	2300      	movs	r3, #0
 8003856:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003860:	e02a      	b.n	80038b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2200      	movs	r2, #0
 800386a:	2180      	movs	r1, #128	; 0x80
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fbc1 	bl	8003ff4 <UART_WaitOnFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e036      	b.n	80038ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10b      	bne.n	800389a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003890:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	3302      	adds	r3, #2
 8003896:	61bb      	str	r3, [r7, #24]
 8003898:	e007      	b.n	80038aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	781a      	ldrb	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	3301      	adds	r3, #1
 80038a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1cf      	bne.n	8003862 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	2140      	movs	r1, #64	; 0x40
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fb91 	bl	8003ff4 <UART_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e006      	b.n	80038ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e000      	b.n	80038ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b08a      	sub	sp, #40	; 0x28
 80038f6:	af02      	add	r7, sp, #8
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b20      	cmp	r3, #32
 8003910:	f040 808c 	bne.w	8003a2c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_UART_Receive+0x2e>
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e084      	b.n	8003a2e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_UART_Receive+0x40>
 800392e:	2302      	movs	r3, #2
 8003930:	e07d      	b.n	8003a2e <HAL_UART_Receive+0x13c>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2222      	movs	r2, #34	; 0x22
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800394e:	f7fe f9b7 	bl	8001cc0 <HAL_GetTick>
 8003952:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	88fa      	ldrh	r2, [r7, #6]
 8003958:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	88fa      	ldrh	r2, [r7, #6]
 800395e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003968:	d108      	bne.n	800397c <HAL_UART_Receive+0x8a>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d104      	bne.n	800397c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	e003      	b.n	8003984 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003980:	2300      	movs	r3, #0
 8003982:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800398c:	e043      	b.n	8003a16 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2200      	movs	r2, #0
 8003996:	2120      	movs	r1, #32
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 fb2b 	bl	8003ff4 <UART_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e042      	b.n	8003a2e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10c      	bne.n	80039c8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	3302      	adds	r3, #2
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	e01f      	b.n	8003a08 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d0:	d007      	beq.n	80039e2 <HAL_UART_Receive+0xf0>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <HAL_UART_Receive+0xfe>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	e008      	b.n	8003a02 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3301      	adds	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1b6      	bne.n	800398e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e000      	b.n	8003a2e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
  }
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	4613      	mov	r3, r2
 8003a42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d11d      	bne.n	8003a8c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <HAL_UART_Receive_IT+0x26>
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e016      	b.n	8003a8e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_UART_Receive_IT+0x38>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e00f      	b.n	8003a8e <HAL_UART_Receive_IT+0x58>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fb24 	bl	80040d0 <UART_Start_Receive_IT>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	e000      	b.n	8003a8e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
  }
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b0ba      	sub	sp, #232	; 0xe8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10f      	bne.n	8003afe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <HAL_UART_IRQHandler+0x66>
 8003aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fc03 	bl	8004302 <UART_Receive_IT>
      return;
 8003afc:	e256      	b.n	8003fac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003afe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 80de 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x22c>
 8003b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d106      	bne.n	8003b22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80d1 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_UART_IRQHandler+0xae>
 8003b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0201 	orr.w	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <HAL_UART_IRQHandler+0xd2>
 8003b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f043 0202 	orr.w	r2, r3, #2
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00b      	beq.n	8003b8e <HAL_UART_IRQHandler+0xf6>
 8003b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f043 0204 	orr.w	r2, r3, #4
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d011      	beq.n	8003bbe <HAL_UART_IRQHandler+0x126>
 8003b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d105      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f043 0208 	orr.w	r2, r3, #8
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 81ed 	beq.w	8003fa2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_UART_IRQHandler+0x14e>
 8003bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fb8e 	bl	8004302 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b40      	cmp	r3, #64	; 0x40
 8003bf2:	bf0c      	ite	eq
 8003bf4:	2301      	moveq	r3, #1
 8003bf6:	2300      	movne	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <HAL_UART_IRQHandler+0x17a>
 8003c0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d04f      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fa96 	bl	8004144 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b40      	cmp	r3, #64	; 0x40
 8003c24:	d141      	bne.n	8003caa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3314      	adds	r3, #20
 8003c2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3314      	adds	r3, #20
 8003c4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1d9      	bne.n	8003c26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d013      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	4a7d      	ldr	r2, [pc, #500]	; (8003e74 <HAL_UART_IRQHandler+0x3dc>)
 8003c80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe f978 	bl	8001f7c <HAL_DMA_Abort_IT>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d016      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca0:	e00e      	b.n	8003cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f990 	bl	8003fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca8:	e00a      	b.n	8003cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f98c 	bl	8003fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb0:	e006      	b.n	8003cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f988 	bl	8003fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003cbe:	e170      	b.n	8003fa2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc0:	bf00      	nop
    return;
 8003cc2:	e16e      	b.n	8003fa2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	f040 814a 	bne.w	8003f62 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 8143 	beq.w	8003f62 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 813c 	beq.w	8003f62 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cea:	2300      	movs	r3, #0
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0a:	2b40      	cmp	r3, #64	; 0x40
 8003d0c:	f040 80b4 	bne.w	8003e78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8140 	beq.w	8003fa6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	f080 8139 	bcs.w	8003fa6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d46:	f000 8088 	beq.w	8003e5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1d9      	bne.n	8003d4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3314      	adds	r3, #20
 8003d9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003da6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3314      	adds	r3, #20
 8003db6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003dc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e1      	bne.n	8003d96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3314      	adds	r3, #20
 8003dd8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3314      	adds	r3, #20
 8003df2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003df6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003df8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003dfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dfe:	e841 2300 	strex	r3, r2, [r1]
 8003e02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1e3      	bne.n	8003dd2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e2a:	f023 0310 	bic.w	r3, r3, #16
 8003e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	330c      	adds	r3, #12
 8003e38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e44:	e841 2300 	strex	r3, r2, [r1]
 8003e48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e3      	bne.n	8003e18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe f821 	bl	8001e9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	4619      	mov	r1, r3
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f8b6 	bl	8003fdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e70:	e099      	b.n	8003fa6 <HAL_UART_IRQHandler+0x50e>
 8003e72:	bf00      	nop
 8003e74:	0800420b 	.word	0x0800420b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 808b 	beq.w	8003faa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8086 	beq.w	8003faa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	330c      	adds	r3, #12
 8003ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ec2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ec4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ec8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e3      	bne.n	8003e9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3314      	adds	r3, #20
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3314      	adds	r3, #20
 8003ef6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003efa:	633a      	str	r2, [r7, #48]	; 0x30
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f02:	e841 2300 	strex	r3, r2, [r1]
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1e3      	bne.n	8003ed6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	330c      	adds	r3, #12
 8003f22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	e853 3f00 	ldrex	r3, [r3]
 8003f2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0310 	bic.w	r3, r3, #16
 8003f32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	330c      	adds	r3, #12
 8003f3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f40:	61fa      	str	r2, [r7, #28]
 8003f42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	69b9      	ldr	r1, [r7, #24]
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e3      	bne.n	8003f1c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f58:	4619      	mov	r1, r3
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f83e 	bl	8003fdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f60:	e023      	b.n	8003faa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <HAL_UART_IRQHandler+0x4ea>
 8003f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f959 	bl	8004232 <UART_Transmit_IT>
    return;
 8003f80:	e014      	b.n	8003fac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00e      	beq.n	8003fac <HAL_UART_IRQHandler+0x514>
 8003f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f999 	bl	80042d2 <UART_EndTransmit_IT>
    return;
 8003fa0:	e004      	b.n	8003fac <HAL_UART_IRQHandler+0x514>
    return;
 8003fa2:	bf00      	nop
 8003fa4:	e002      	b.n	8003fac <HAL_UART_IRQHandler+0x514>
      return;
 8003fa6:	bf00      	nop
 8003fa8:	e000      	b.n	8003fac <HAL_UART_IRQHandler+0x514>
      return;
 8003faa:	bf00      	nop
  }
}
 8003fac:	37e8      	adds	r7, #232	; 0xe8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop

08003fb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b090      	sub	sp, #64	; 0x40
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004004:	e050      	b.n	80040a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d04c      	beq.n	80040a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800400e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004010:	2b00      	cmp	r3, #0
 8004012:	d007      	beq.n	8004024 <UART_WaitOnFlagUntilTimeout+0x30>
 8004014:	f7fd fe54 	bl	8001cc0 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004020:	429a      	cmp	r2, r3
 8004022:	d241      	bcs.n	80040a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	330c      	adds	r3, #12
 800402a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800403a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	330c      	adds	r3, #12
 8004042:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004044:	637a      	str	r2, [r7, #52]	; 0x34
 8004046:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800404a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e5      	bne.n	8004024 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3314      	adds	r3, #20
 800405e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	613b      	str	r3, [r7, #16]
   return(result);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f023 0301 	bic.w	r3, r3, #1
 800406e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3314      	adds	r3, #20
 8004076:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004078:	623a      	str	r2, [r7, #32]
 800407a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	69f9      	ldr	r1, [r7, #28]
 800407e:	6a3a      	ldr	r2, [r7, #32]
 8004080:	e841 2300 	strex	r3, r2, [r1]
 8004084:	61bb      	str	r3, [r7, #24]
   return(result);
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e5      	bne.n	8004058 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e00f      	b.n	80040c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4013      	ands	r3, r2
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	461a      	mov	r2, r3
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d09f      	beq.n	8004006 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3740      	adds	r7, #64	; 0x40
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	4613      	mov	r3, r2
 80040dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	88fa      	ldrh	r2, [r7, #6]
 80040e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	88fa      	ldrh	r2, [r7, #6]
 80040ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2222      	movs	r2, #34	; 0x22
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004114:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0201 	orr.w	r2, r2, #1
 8004124:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0220 	orr.w	r2, r2, #32
 8004134:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004144:	b480      	push	{r7}
 8004146:	b095      	sub	sp, #84	; 0x54
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800416c:	643a      	str	r2, [r7, #64]	; 0x40
 800416e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004172:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004174:	e841 2300 	strex	r3, r2, [r1]
 8004178:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e5      	bne.n	800414c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3314      	adds	r3, #20
 8004186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	e853 3f00 	ldrex	r3, [r3]
 800418e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f023 0301 	bic.w	r3, r3, #1
 8004196:	64bb      	str	r3, [r7, #72]	; 0x48
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3314      	adds	r3, #20
 800419e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e5      	bne.n	8004180 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d119      	bne.n	80041f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	330c      	adds	r3, #12
 80041c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f023 0310 	bic.w	r3, r3, #16
 80041d2:	647b      	str	r3, [r7, #68]	; 0x44
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	330c      	adds	r3, #12
 80041da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041dc:	61ba      	str	r2, [r7, #24]
 80041de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	6979      	ldr	r1, [r7, #20]
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	613b      	str	r3, [r7, #16]
   return(result);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e5      	bne.n	80041bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041fe:	bf00      	nop
 8004200:	3754      	adds	r7, #84	; 0x54
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b084      	sub	sp, #16
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff fecf 	bl	8003fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004232:	b480      	push	{r7}
 8004234:	b085      	sub	sp, #20
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b21      	cmp	r3, #33	; 0x21
 8004244:	d13e      	bne.n	80042c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424e:	d114      	bne.n	800427a <UART_Transmit_IT+0x48>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d110      	bne.n	800427a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800426c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	1c9a      	adds	r2, r3, #2
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	621a      	str	r2, [r3, #32]
 8004278:	e008      	b.n	800428c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	1c59      	adds	r1, r3, #1
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6211      	str	r1, [r2, #32]
 8004284:	781a      	ldrb	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29b      	uxth	r3, r3
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	4619      	mov	r1, r3
 800429a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10f      	bne.n	80042c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	e000      	b.n	80042c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042c4:	2302      	movs	r3, #2
  }
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff fe5e 	bl	8003fb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b08c      	sub	sp, #48	; 0x30
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b22      	cmp	r3, #34	; 0x22
 8004314:	f040 80ab 	bne.w	800446e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004320:	d117      	bne.n	8004352 <UART_Receive_IT+0x50>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d113      	bne.n	8004352 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	b29b      	uxth	r3, r3
 800433c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004340:	b29a      	uxth	r2, r3
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	1c9a      	adds	r2, r3, #2
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	629a      	str	r2, [r3, #40]	; 0x28
 8004350:	e026      	b.n	80043a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004356:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004358:	2300      	movs	r3, #0
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004364:	d007      	beq.n	8004376 <UART_Receive_IT+0x74>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10a      	bne.n	8004384 <UART_Receive_IT+0x82>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	701a      	strb	r2, [r3, #0]
 8004382:	e008      	b.n	8004396 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004390:	b2da      	uxtb	r2, r3
 8004392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004394:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	4619      	mov	r1, r3
 80043ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d15a      	bne.n	800446a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0220 	bic.w	r2, r2, #32
 80043c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0201 	bic.w	r2, r2, #1
 80043e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d135      	bne.n	8004460 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	330c      	adds	r3, #12
 8004400:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	613b      	str	r3, [r7, #16]
   return(result);
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f023 0310 	bic.w	r3, r3, #16
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	330c      	adds	r3, #12
 8004418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441a:	623a      	str	r2, [r7, #32]
 800441c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441e:	69f9      	ldr	r1, [r7, #28]
 8004420:	6a3a      	ldr	r2, [r7, #32]
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	61bb      	str	r3, [r7, #24]
   return(result);
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e5      	bne.n	80043fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b10      	cmp	r3, #16
 800443a:	d10a      	bne.n	8004452 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004456:	4619      	mov	r1, r3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff fdbf 	bl	8003fdc <HAL_UARTEx_RxEventCallback>
 800445e:	e002      	b.n	8004466 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7fc febd 	bl	80011e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	e002      	b.n	8004470 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	e000      	b.n	8004470 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800446e:	2302      	movs	r3, #2
  }
}
 8004470:	4618      	mov	r0, r3
 8004472:	3730      	adds	r7, #48	; 0x30
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447c:	b09f      	sub	sp, #124	; 0x7c
 800447e:	af00      	add	r7, sp, #0
 8004480:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800448c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800448e:	68d9      	ldr	r1, [r3, #12]
 8004490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	ea40 0301 	orr.w	r3, r0, r1
 8004498:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800449a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	431a      	orrs	r2, r3
 80044aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80044b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044bc:	f021 010c 	bic.w	r1, r1, #12
 80044c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044c6:	430b      	orrs	r3, r1
 80044c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d6:	6999      	ldr	r1, [r3, #24]
 80044d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	ea40 0301 	orr.w	r3, r0, r1
 80044e0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4bc5      	ldr	r3, [pc, #788]	; (80047fc <UART_SetConfig+0x384>)
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d004      	beq.n	80044f6 <UART_SetConfig+0x7e>
 80044ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	4bc3      	ldr	r3, [pc, #780]	; (8004800 <UART_SetConfig+0x388>)
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d103      	bne.n	80044fe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044f6:	f7fe fb61 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 80044fa:	6778      	str	r0, [r7, #116]	; 0x74
 80044fc:	e002      	b.n	8004504 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044fe:	f7fe fb49 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8004502:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800450c:	f040 80b6 	bne.w	800467c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004512:	461c      	mov	r4, r3
 8004514:	f04f 0500 	mov.w	r5, #0
 8004518:	4622      	mov	r2, r4
 800451a:	462b      	mov	r3, r5
 800451c:	1891      	adds	r1, r2, r2
 800451e:	6439      	str	r1, [r7, #64]	; 0x40
 8004520:	415b      	adcs	r3, r3
 8004522:	647b      	str	r3, [r7, #68]	; 0x44
 8004524:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004528:	1912      	adds	r2, r2, r4
 800452a:	eb45 0303 	adc.w	r3, r5, r3
 800452e:	f04f 0000 	mov.w	r0, #0
 8004532:	f04f 0100 	mov.w	r1, #0
 8004536:	00d9      	lsls	r1, r3, #3
 8004538:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800453c:	00d0      	lsls	r0, r2, #3
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	1911      	adds	r1, r2, r4
 8004544:	6639      	str	r1, [r7, #96]	; 0x60
 8004546:	416b      	adcs	r3, r5
 8004548:	667b      	str	r3, [r7, #100]	; 0x64
 800454a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	461a      	mov	r2, r3
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	1891      	adds	r1, r2, r2
 8004556:	63b9      	str	r1, [r7, #56]	; 0x38
 8004558:	415b      	adcs	r3, r3
 800455a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800455c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004560:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004564:	f7fb fe8c 	bl	8000280 <__aeabi_uldivmod>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4ba5      	ldr	r3, [pc, #660]	; (8004804 <UART_SetConfig+0x38c>)
 800456e:	fba3 2302 	umull	r2, r3, r3, r2
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	011e      	lsls	r6, r3, #4
 8004576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004578:	461c      	mov	r4, r3
 800457a:	f04f 0500 	mov.w	r5, #0
 800457e:	4622      	mov	r2, r4
 8004580:	462b      	mov	r3, r5
 8004582:	1891      	adds	r1, r2, r2
 8004584:	6339      	str	r1, [r7, #48]	; 0x30
 8004586:	415b      	adcs	r3, r3
 8004588:	637b      	str	r3, [r7, #52]	; 0x34
 800458a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800458e:	1912      	adds	r2, r2, r4
 8004590:	eb45 0303 	adc.w	r3, r5, r3
 8004594:	f04f 0000 	mov.w	r0, #0
 8004598:	f04f 0100 	mov.w	r1, #0
 800459c:	00d9      	lsls	r1, r3, #3
 800459e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045a2:	00d0      	lsls	r0, r2, #3
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	1911      	adds	r1, r2, r4
 80045aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80045ac:	416b      	adcs	r3, r5
 80045ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	461a      	mov	r2, r3
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	1891      	adds	r1, r2, r2
 80045bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80045be:	415b      	adcs	r3, r3
 80045c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80045ca:	f7fb fe59 	bl	8000280 <__aeabi_uldivmod>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4b8c      	ldr	r3, [pc, #560]	; (8004804 <UART_SetConfig+0x38c>)
 80045d4:	fba3 1302 	umull	r1, r3, r3, r2
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	2164      	movs	r1, #100	; 0x64
 80045dc:	fb01 f303 	mul.w	r3, r1, r3
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	3332      	adds	r3, #50	; 0x32
 80045e6:	4a87      	ldr	r2, [pc, #540]	; (8004804 <UART_SetConfig+0x38c>)
 80045e8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045f4:	441e      	add	r6, r3
 80045f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045f8:	4618      	mov	r0, r3
 80045fa:	f04f 0100 	mov.w	r1, #0
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	1894      	adds	r4, r2, r2
 8004604:	623c      	str	r4, [r7, #32]
 8004606:	415b      	adcs	r3, r3
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
 800460a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800460e:	1812      	adds	r2, r2, r0
 8004610:	eb41 0303 	adc.w	r3, r1, r3
 8004614:	f04f 0400 	mov.w	r4, #0
 8004618:	f04f 0500 	mov.w	r5, #0
 800461c:	00dd      	lsls	r5, r3, #3
 800461e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004622:	00d4      	lsls	r4, r2, #3
 8004624:	4622      	mov	r2, r4
 8004626:	462b      	mov	r3, r5
 8004628:	1814      	adds	r4, r2, r0
 800462a:	653c      	str	r4, [r7, #80]	; 0x50
 800462c:	414b      	adcs	r3, r1
 800462e:	657b      	str	r3, [r7, #84]	; 0x54
 8004630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	461a      	mov	r2, r3
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	1891      	adds	r1, r2, r2
 800463c:	61b9      	str	r1, [r7, #24]
 800463e:	415b      	adcs	r3, r3
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004646:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800464a:	f7fb fe19 	bl	8000280 <__aeabi_uldivmod>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4b6c      	ldr	r3, [pc, #432]	; (8004804 <UART_SetConfig+0x38c>)
 8004654:	fba3 1302 	umull	r1, r3, r3, r2
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	2164      	movs	r1, #100	; 0x64
 800465c:	fb01 f303 	mul.w	r3, r1, r3
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	3332      	adds	r3, #50	; 0x32
 8004666:	4a67      	ldr	r2, [pc, #412]	; (8004804 <UART_SetConfig+0x38c>)
 8004668:	fba2 2303 	umull	r2, r3, r2, r3
 800466c:	095b      	lsrs	r3, r3, #5
 800466e:	f003 0207 	and.w	r2, r3, #7
 8004672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4432      	add	r2, r6
 8004678:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800467a:	e0b9      	b.n	80047f0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800467c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800467e:	461c      	mov	r4, r3
 8004680:	f04f 0500 	mov.w	r5, #0
 8004684:	4622      	mov	r2, r4
 8004686:	462b      	mov	r3, r5
 8004688:	1891      	adds	r1, r2, r2
 800468a:	6139      	str	r1, [r7, #16]
 800468c:	415b      	adcs	r3, r3
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004694:	1912      	adds	r2, r2, r4
 8004696:	eb45 0303 	adc.w	r3, r5, r3
 800469a:	f04f 0000 	mov.w	r0, #0
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	00d9      	lsls	r1, r3, #3
 80046a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046a8:	00d0      	lsls	r0, r2, #3
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	eb12 0804 	adds.w	r8, r2, r4
 80046b2:	eb43 0905 	adc.w	r9, r3, r5
 80046b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f04f 0100 	mov.w	r1, #0
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	008b      	lsls	r3, r1, #2
 80046ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046ce:	0082      	lsls	r2, r0, #2
 80046d0:	4640      	mov	r0, r8
 80046d2:	4649      	mov	r1, r9
 80046d4:	f7fb fdd4 	bl	8000280 <__aeabi_uldivmod>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4b49      	ldr	r3, [pc, #292]	; (8004804 <UART_SetConfig+0x38c>)
 80046de:	fba3 2302 	umull	r2, r3, r3, r2
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	011e      	lsls	r6, r3, #4
 80046e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046e8:	4618      	mov	r0, r3
 80046ea:	f04f 0100 	mov.w	r1, #0
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	1894      	adds	r4, r2, r2
 80046f4:	60bc      	str	r4, [r7, #8]
 80046f6:	415b      	adcs	r3, r3
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046fe:	1812      	adds	r2, r2, r0
 8004700:	eb41 0303 	adc.w	r3, r1, r3
 8004704:	f04f 0400 	mov.w	r4, #0
 8004708:	f04f 0500 	mov.w	r5, #0
 800470c:	00dd      	lsls	r5, r3, #3
 800470e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004712:	00d4      	lsls	r4, r2, #3
 8004714:	4622      	mov	r2, r4
 8004716:	462b      	mov	r3, r5
 8004718:	1814      	adds	r4, r2, r0
 800471a:	64bc      	str	r4, [r7, #72]	; 0x48
 800471c:	414b      	adcs	r3, r1
 800471e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4618      	mov	r0, r3
 8004726:	f04f 0100 	mov.w	r1, #0
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	008b      	lsls	r3, r1, #2
 8004734:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004738:	0082      	lsls	r2, r0, #2
 800473a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800473e:	f7fb fd9f 	bl	8000280 <__aeabi_uldivmod>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4b2f      	ldr	r3, [pc, #188]	; (8004804 <UART_SetConfig+0x38c>)
 8004748:	fba3 1302 	umull	r1, r3, r3, r2
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	2164      	movs	r1, #100	; 0x64
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	3332      	adds	r3, #50	; 0x32
 800475a:	4a2a      	ldr	r2, [pc, #168]	; (8004804 <UART_SetConfig+0x38c>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004766:	441e      	add	r6, r3
 8004768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800476a:	4618      	mov	r0, r3
 800476c:	f04f 0100 	mov.w	r1, #0
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	1894      	adds	r4, r2, r2
 8004776:	603c      	str	r4, [r7, #0]
 8004778:	415b      	adcs	r3, r3
 800477a:	607b      	str	r3, [r7, #4]
 800477c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004780:	1812      	adds	r2, r2, r0
 8004782:	eb41 0303 	adc.w	r3, r1, r3
 8004786:	f04f 0400 	mov.w	r4, #0
 800478a:	f04f 0500 	mov.w	r5, #0
 800478e:	00dd      	lsls	r5, r3, #3
 8004790:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004794:	00d4      	lsls	r4, r2, #3
 8004796:	4622      	mov	r2, r4
 8004798:	462b      	mov	r3, r5
 800479a:	eb12 0a00 	adds.w	sl, r2, r0
 800479e:	eb43 0b01 	adc.w	fp, r3, r1
 80047a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f04f 0100 	mov.w	r1, #0
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	008b      	lsls	r3, r1, #2
 80047b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047ba:	0082      	lsls	r2, r0, #2
 80047bc:	4650      	mov	r0, sl
 80047be:	4659      	mov	r1, fp
 80047c0:	f7fb fd5e 	bl	8000280 <__aeabi_uldivmod>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4b0e      	ldr	r3, [pc, #56]	; (8004804 <UART_SetConfig+0x38c>)
 80047ca:	fba3 1302 	umull	r1, r3, r3, r2
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	2164      	movs	r1, #100	; 0x64
 80047d2:	fb01 f303 	mul.w	r3, r1, r3
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	3332      	adds	r3, #50	; 0x32
 80047dc:	4a09      	ldr	r2, [pc, #36]	; (8004804 <UART_SetConfig+0x38c>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	f003 020f 	and.w	r2, r3, #15
 80047e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4432      	add	r2, r6
 80047ee:	609a      	str	r2, [r3, #8]
}
 80047f0:	bf00      	nop
 80047f2:	377c      	adds	r7, #124	; 0x7c
 80047f4:	46bd      	mov	sp, r7
 80047f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fa:	bf00      	nop
 80047fc:	40011000 	.word	0x40011000
 8004800:	40011400 	.word	0x40011400
 8004804:	51eb851f 	.word	0x51eb851f

08004808 <__NVIC_SetPriority>:
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	4603      	mov	r3, r0
 8004810:	6039      	str	r1, [r7, #0]
 8004812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004818:	2b00      	cmp	r3, #0
 800481a:	db0a      	blt.n	8004832 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	b2da      	uxtb	r2, r3
 8004820:	490c      	ldr	r1, [pc, #48]	; (8004854 <__NVIC_SetPriority+0x4c>)
 8004822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004826:	0112      	lsls	r2, r2, #4
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	440b      	add	r3, r1
 800482c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004830:	e00a      	b.n	8004848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	b2da      	uxtb	r2, r3
 8004836:	4908      	ldr	r1, [pc, #32]	; (8004858 <__NVIC_SetPriority+0x50>)
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	3b04      	subs	r3, #4
 8004840:	0112      	lsls	r2, r2, #4
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	440b      	add	r3, r1
 8004846:	761a      	strb	r2, [r3, #24]
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	e000e100 	.word	0xe000e100
 8004858:	e000ed00 	.word	0xe000ed00

0800485c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <SysTick_Handler+0x1c>)
 8004862:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004864:	f002 fd80 	bl	8007368 <xTaskGetSchedulerState>
 8004868:	4603      	mov	r3, r0
 800486a:	2b01      	cmp	r3, #1
 800486c:	d001      	beq.n	8004872 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800486e:	f003 fc9b 	bl	80081a8 <xPortSysTickHandler>
  }
}
 8004872:	bf00      	nop
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	e000e010 	.word	0xe000e010

0800487c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004880:	2100      	movs	r1, #0
 8004882:	f06f 0004 	mvn.w	r0, #4
 8004886:	f7ff ffbf 	bl	8004808 <__NVIC_SetPriority>
#endif
}
 800488a:	bf00      	nop
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004896:	f3ef 8305 	mrs	r3, IPSR
 800489a:	603b      	str	r3, [r7, #0]
  return(result);
 800489c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80048a2:	f06f 0305 	mvn.w	r3, #5
 80048a6:	607b      	str	r3, [r7, #4]
 80048a8:	e00c      	b.n	80048c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048aa:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <osKernelInitialize+0x44>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d105      	bne.n	80048be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80048b2:	4b08      	ldr	r3, [pc, #32]	; (80048d4 <osKernelInitialize+0x44>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	607b      	str	r3, [r7, #4]
 80048bc:	e002      	b.n	80048c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80048be:	f04f 33ff 	mov.w	r3, #4294967295
 80048c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80048c4:	687b      	ldr	r3, [r7, #4]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	200000a8 	.word	0x200000a8

080048d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048de:	f3ef 8305 	mrs	r3, IPSR
 80048e2:	603b      	str	r3, [r7, #0]
  return(result);
 80048e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80048ea:	f06f 0305 	mvn.w	r3, #5
 80048ee:	607b      	str	r3, [r7, #4]
 80048f0:	e010      	b.n	8004914 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80048f2:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <osKernelStart+0x48>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d109      	bne.n	800490e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80048fa:	f7ff ffbf 	bl	800487c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80048fe:	4b08      	ldr	r3, [pc, #32]	; (8004920 <osKernelStart+0x48>)
 8004900:	2202      	movs	r2, #2
 8004902:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004904:	f002 f826 	bl	8006954 <vTaskStartScheduler>
      stat = osOK;
 8004908:	2300      	movs	r3, #0
 800490a:	607b      	str	r3, [r7, #4]
 800490c:	e002      	b.n	8004914 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800490e:	f04f 33ff 	mov.w	r3, #4294967295
 8004912:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004914:	687b      	ldr	r3, [r7, #4]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	200000a8 	.word	0x200000a8

08004924 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004924:	b580      	push	{r7, lr}
 8004926:	b08e      	sub	sp, #56	; 0x38
 8004928:	af04      	add	r7, sp, #16
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004930:	2300      	movs	r3, #0
 8004932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004934:	f3ef 8305 	mrs	r3, IPSR
 8004938:	617b      	str	r3, [r7, #20]
  return(result);
 800493a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800493c:	2b00      	cmp	r3, #0
 800493e:	d17e      	bne.n	8004a3e <osThreadNew+0x11a>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d07b      	beq.n	8004a3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004946:	2380      	movs	r3, #128	; 0x80
 8004948:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800494a:	2318      	movs	r3, #24
 800494c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800494e:	2300      	movs	r3, #0
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004952:	f04f 33ff 	mov.w	r3, #4294967295
 8004956:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d045      	beq.n	80049ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <osThreadNew+0x48>
        name = attr->name;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <osThreadNew+0x6e>
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	2b38      	cmp	r3, #56	; 0x38
 8004984:	d805      	bhi.n	8004992 <osThreadNew+0x6e>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <osThreadNew+0x72>
        return (NULL);
 8004992:	2300      	movs	r3, #0
 8004994:	e054      	b.n	8004a40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	089b      	lsrs	r3, r3, #2
 80049a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00e      	beq.n	80049cc <osThreadNew+0xa8>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	2bbb      	cmp	r3, #187	; 0xbb
 80049b4:	d90a      	bls.n	80049cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d006      	beq.n	80049cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <osThreadNew+0xa8>
        mem = 1;
 80049c6:	2301      	movs	r3, #1
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	e010      	b.n	80049ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10c      	bne.n	80049ee <osThreadNew+0xca>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d108      	bne.n	80049ee <osThreadNew+0xca>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d104      	bne.n	80049ee <osThreadNew+0xca>
          mem = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61bb      	str	r3, [r7, #24]
 80049e8:	e001      	b.n	80049ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80049ea:	2300      	movs	r3, #0
 80049ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d110      	bne.n	8004a16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049fc:	9202      	str	r2, [sp, #8]
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	6a3a      	ldr	r2, [r7, #32]
 8004a08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f001 fdb6 	bl	800657c <xTaskCreateStatic>
 8004a10:	4603      	mov	r3, r0
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	e013      	b.n	8004a3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d110      	bne.n	8004a3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	f107 0310 	add.w	r3, r7, #16
 8004a24:	9301      	str	r3, [sp, #4]
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f001 fe01 	bl	8006636 <xTaskCreate>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d001      	beq.n	8004a3e <osThreadNew+0x11a>
            hTask = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a3e:	693b      	ldr	r3, [r7, #16]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3728      	adds	r7, #40	; 0x28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a50:	f3ef 8305 	mrs	r3, IPSR
 8004a54:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <osDelay+0x1c>
    stat = osErrorISR;
 8004a5c:	f06f 0305 	mvn.w	r3, #5
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	e007      	b.n	8004a74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f001 ff3c 	bl	80068ec <vTaskDelay>
    }
  }

  return (stat);
 8004a74:	68fb      	ldr	r3, [r7, #12]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b086      	sub	sp, #24
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a8a:	f3ef 8305 	mrs	r3, IPSR
 8004a8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a90:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d12d      	bne.n	8004af2 <osEventFlagsNew+0x74>
    mem = -1;
 8004a96:	f04f 33ff 	mov.w	r3, #4294967295
 8004a9a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d015      	beq.n	8004ace <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d006      	beq.n	8004ab8 <osEventFlagsNew+0x3a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	2b1f      	cmp	r3, #31
 8004ab0:	d902      	bls.n	8004ab8 <osEventFlagsNew+0x3a>
        mem = 1;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	e00c      	b.n	8004ad2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d108      	bne.n	8004ad2 <osEventFlagsNew+0x54>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d104      	bne.n	8004ad2 <osEventFlagsNew+0x54>
          mem = 0;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	e001      	b.n	8004ad2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d106      	bne.n	8004ae6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fb2b 	bl	8005138 <xEventGroupCreateStatic>
 8004ae2:	6178      	str	r0, [r7, #20]
 8004ae4:	e005      	b.n	8004af2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d102      	bne.n	8004af2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8004aec:	f000 fb5b 	bl	80051a6 <xEventGroupCreate>
 8004af0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004af2:	697b      	ldr	r3, [r7, #20]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d004      	beq.n	8004b1a <osEventFlagsSet+0x1e>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8004b1a:	f06f 0303 	mvn.w	r3, #3
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	e028      	b.n	8004b74 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b22:	f3ef 8305 	mrs	r3, IPSR
 8004b26:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b28:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d01d      	beq.n	8004b6a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004b32:	f107 0308 	add.w	r3, r7, #8
 8004b36:	461a      	mov	r2, r3
 8004b38:	6839      	ldr	r1, [r7, #0]
 8004b3a:	6938      	ldr	r0, [r7, #16]
 8004b3c:	f000 fcd6 	bl	80054ec <xEventGroupSetBitsFromISR>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d103      	bne.n	8004b4e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8004b46:	f06f 0302 	mvn.w	r3, #2
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	e012      	b.n	8004b74 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00d      	beq.n	8004b74 <osEventFlagsSet+0x78>
 8004b58:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <osEventFlagsSet+0x84>)
 8004b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	e004      	b.n	8004b74 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004b6a:	6839      	ldr	r1, [r7, #0]
 8004b6c:	6938      	ldr	r0, [r7, #16]
 8004b6e:	f000 fc03 	bl	8005378 <xEventGroupSetBits>
 8004b72:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004b74:	697b      	ldr	r3, [r7, #20]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	e000ed04 	.word	0xe000ed04

08004b84 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08c      	sub	sp, #48	; 0x30
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d004      	beq.n	8004ba6 <osEventFlagsWait+0x22>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8004ba6:	f06f 0303 	mvn.w	r3, #3
 8004baa:	61fb      	str	r3, [r7, #28]
 8004bac:	e04b      	b.n	8004c46 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bae:	f3ef 8305 	mrs	r3, IPSR
 8004bb2:	617b      	str	r3, [r7, #20]
  return(result);
 8004bb4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8004bba:	f06f 0305 	mvn.w	r3, #5
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	e041      	b.n	8004c46 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd0:	e001      	b.n	8004bd6 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	623b      	str	r3, [r7, #32]
 8004be4:	e001      	b.n	8004bea <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8004be6:	2301      	movs	r3, #1
 8004be8:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	6a3a      	ldr	r2, [r7, #32]
 8004bf2:	68b9      	ldr	r1, [r7, #8]
 8004bf4:	69b8      	ldr	r0, [r7, #24]
 8004bf6:	f000 faf1 	bl	80051dc <xEventGroupWaitBits>
 8004bfa:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d010      	beq.n	8004c28 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d019      	beq.n	8004c46 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8004c18:	f06f 0301 	mvn.w	r3, #1
 8004c1c:	61fb      	str	r3, [r7, #28]
 8004c1e:	e012      	b.n	8004c46 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004c20:	f06f 0302 	mvn.w	r3, #2
 8004c24:	61fb      	str	r3, [r7, #28]
 8004c26:	e00e      	b.n	8004c46 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d109      	bne.n	8004c46 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8004c38:	f06f 0301 	mvn.w	r3, #1
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	e002      	b.n	8004c46 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004c40:	f06f 0302 	mvn.w	r3, #2
 8004c44:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8004c46:	69fb      	ldr	r3, [r7, #28]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3728      	adds	r7, #40	; 0x28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c5c:	f3ef 8305 	mrs	r3, IPSR
 8004c60:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c62:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d174      	bne.n	8004d52 <osMutexNew+0x102>
    if (attr != NULL) {
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	e001      	b.n	8004c7a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <osMutexNew+0x3a>
      rmtx = 1U;
 8004c84:	2301      	movs	r3, #1
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	e001      	b.n	8004c8e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d15c      	bne.n	8004d52 <osMutexNew+0x102>
      mem = -1;
 8004c98:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d015      	beq.n	8004cd0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d006      	beq.n	8004cba <osMutexNew+0x6a>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	2b4f      	cmp	r3, #79	; 0x4f
 8004cb2:	d902      	bls.n	8004cba <osMutexNew+0x6a>
          mem = 1;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	e00c      	b.n	8004cd4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d108      	bne.n	8004cd4 <osMutexNew+0x84>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d104      	bne.n	8004cd4 <osMutexNew+0x84>
            mem = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	e001      	b.n	8004cd4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d112      	bne.n	8004d00 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d007      	beq.n	8004cf0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	2004      	movs	r0, #4
 8004ce8:	f000 fe37 	bl	800595a <xQueueCreateMutexStatic>
 8004cec:	61f8      	str	r0, [r7, #28]
 8004cee:	e016      	b.n	8004d1e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	2001      	movs	r0, #1
 8004cf8:	f000 fe2f 	bl	800595a <xQueueCreateMutexStatic>
 8004cfc:	61f8      	str	r0, [r7, #28]
 8004cfe:	e00e      	b.n	8004d1e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10b      	bne.n	8004d1e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d004      	beq.n	8004d16 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004d0c:	2004      	movs	r0, #4
 8004d0e:	f000 fe0c 	bl	800592a <xQueueCreateMutex>
 8004d12:	61f8      	str	r0, [r7, #28]
 8004d14:	e003      	b.n	8004d1e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004d16:	2001      	movs	r0, #1
 8004d18:	f000 fe07 	bl	800592a <xQueueCreateMutex>
 8004d1c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00c      	beq.n	8004d3e <osMutexNew+0xee>
        if (attr != NULL) {
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <osMutexNew+0xe2>
          name = attr->name;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	e001      	b.n	8004d36 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004d36:	68f9      	ldr	r1, [r7, #12]
 8004d38:	69f8      	ldr	r0, [r7, #28]
 8004d3a:	f001 fbc1 	bl	80064c0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d006      	beq.n	8004d52 <osMutexNew+0x102>
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004d52:	69fb      	ldr	r3, [r7, #28]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3720      	adds	r7, #32
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d7a:	f3ef 8305 	mrs	r3, IPSR
 8004d7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d80:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004d86:	f06f 0305 	mvn.w	r3, #5
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	e02c      	b.n	8004de8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d103      	bne.n	8004d9c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004d94:	f06f 0303 	mvn.w	r3, #3
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	e025      	b.n	8004de8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d011      	beq.n	8004dc6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004da2:	6839      	ldr	r1, [r7, #0]
 8004da4:	6938      	ldr	r0, [r7, #16]
 8004da6:	f000 fe27 	bl	80059f8 <xQueueTakeMutexRecursive>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d01b      	beq.n	8004de8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004db6:	f06f 0301 	mvn.w	r3, #1
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	e014      	b.n	8004de8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004dbe:	f06f 0302 	mvn.w	r3, #2
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	e010      	b.n	8004de8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004dc6:	6839      	ldr	r1, [r7, #0]
 8004dc8:	6938      	ldr	r0, [r7, #16]
 8004dca:	f001 f8c5 	bl	8005f58 <xQueueSemaphoreTake>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d009      	beq.n	8004de8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004dda:	f06f 0301 	mvn.w	r3, #1
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e002      	b.n	8004de8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004de2:	f06f 0302 	mvn.w	r3, #2
 8004de6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004de8:	697b      	ldr	r3, [r7, #20]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b086      	sub	sp, #24
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f023 0301 	bic.w	r3, r3, #1
 8004e00:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e0e:	f3ef 8305 	mrs	r3, IPSR
 8004e12:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e14:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004e1a:	f06f 0305 	mvn.w	r3, #5
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	e01f      	b.n	8004e62 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d103      	bne.n	8004e30 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004e28:	f06f 0303 	mvn.w	r3, #3
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	e018      	b.n	8004e62 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d009      	beq.n	8004e4a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004e36:	6938      	ldr	r0, [r7, #16]
 8004e38:	f000 fdaa 	bl	8005990 <xQueueGiveMutexRecursive>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d00f      	beq.n	8004e62 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004e42:	f06f 0302 	mvn.w	r3, #2
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	e00b      	b.n	8004e62 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2100      	movs	r1, #0
 8004e50:	6938      	ldr	r0, [r7, #16]
 8004e52:	f000 fe07 	bl	8005a64 <xQueueGenericSend>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d002      	beq.n	8004e62 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004e5c:	f06f 0302 	mvn.w	r3, #2
 8004e60:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004e62:	697b      	ldr	r3, [r7, #20]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08a      	sub	sp, #40	; 0x28
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e7c:	f3ef 8305 	mrs	r3, IPSR
 8004e80:	613b      	str	r3, [r7, #16]
  return(result);
 8004e82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d15f      	bne.n	8004f48 <osMessageQueueNew+0xdc>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d05c      	beq.n	8004f48 <osMessageQueueNew+0xdc>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d059      	beq.n	8004f48 <osMessageQueueNew+0xdc>
    mem = -1;
 8004e94:	f04f 33ff 	mov.w	r3, #4294967295
 8004e98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d029      	beq.n	8004ef4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d012      	beq.n	8004ece <osMessageQueueNew+0x62>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	2b4f      	cmp	r3, #79	; 0x4f
 8004eae:	d90e      	bls.n	8004ece <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	695a      	ldr	r2, [r3, #20]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	fb01 f303 	mul.w	r3, r1, r3
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d302      	bcc.n	8004ece <osMessageQueueNew+0x62>
        mem = 1;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	61bb      	str	r3, [r7, #24]
 8004ecc:	e014      	b.n	8004ef8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d110      	bne.n	8004ef8 <osMessageQueueNew+0x8c>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10c      	bne.n	8004ef8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d108      	bne.n	8004ef8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d104      	bne.n	8004ef8 <osMessageQueueNew+0x8c>
          mem = 0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	e001      	b.n	8004ef8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d10b      	bne.n	8004f16 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2100      	movs	r1, #0
 8004f08:	9100      	str	r1, [sp, #0]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 fc1d 	bl	800574c <xQueueGenericCreateStatic>
 8004f12:	61f8      	str	r0, [r7, #28]
 8004f14:	e008      	b.n	8004f28 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d105      	bne.n	8004f28 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	68b9      	ldr	r1, [r7, #8]
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 fc8b 	bl	800583c <xQueueGenericCreate>
 8004f26:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00c      	beq.n	8004f48 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <osMessageQueueNew+0xd0>
        name = attr->name;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	e001      	b.n	8004f40 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004f40:	6979      	ldr	r1, [r7, #20]
 8004f42:	69f8      	ldr	r0, [r7, #28]
 8004f44:	f001 fabc 	bl	80064c0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004f48:	69fb      	ldr	r3, [r7, #28]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	4613      	mov	r3, r2
 8004f62:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f6c:	f3ef 8305 	mrs	r3, IPSR
 8004f70:	617b      	str	r3, [r7, #20]
  return(result);
 8004f72:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d028      	beq.n	8004fca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <osMessageQueuePut+0x36>
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <osMessageQueuePut+0x36>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004f8a:	f06f 0303 	mvn.w	r3, #3
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	e038      	b.n	8005004 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004f92:	2300      	movs	r3, #0
 8004f94:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004f96:	f107 0210 	add.w	r2, r7, #16
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	69b8      	ldr	r0, [r7, #24]
 8004fa0:	f000 fe5e 	bl	8005c60 <xQueueGenericSendFromISR>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d003      	beq.n	8004fb2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004faa:	f06f 0302 	mvn.w	r3, #2
 8004fae:	61fb      	str	r3, [r7, #28]
 8004fb0:	e028      	b.n	8005004 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d025      	beq.n	8005004 <osMessageQueuePut+0xb0>
 8004fb8:	4b15      	ldr	r3, [pc, #84]	; (8005010 <osMessageQueuePut+0xbc>)
 8004fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	e01c      	b.n	8005004 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <osMessageQueuePut+0x82>
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d103      	bne.n	8004fde <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004fd6:	f06f 0303 	mvn.w	r3, #3
 8004fda:	61fb      	str	r3, [r7, #28]
 8004fdc:	e012      	b.n	8005004 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004fde:	2300      	movs	r3, #0
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	69b8      	ldr	r0, [r7, #24]
 8004fe6:	f000 fd3d 	bl	8005a64 <xQueueGenericSend>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d009      	beq.n	8005004 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004ff6:	f06f 0301 	mvn.w	r3, #1
 8004ffa:	61fb      	str	r3, [r7, #28]
 8004ffc:	e002      	b.n	8005004 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004ffe:	f06f 0302 	mvn.w	r3, #2
 8005002:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005004:	69fb      	ldr	r3, [r7, #28]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3720      	adds	r7, #32
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	e000ed04 	.word	0xe000ed04

08005014 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800502a:	f3ef 8305 	mrs	r3, IPSR
 800502e:	617b      	str	r3, [r7, #20]
  return(result);
 8005030:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005032:	2b00      	cmp	r3, #0
 8005034:	d028      	beq.n	8005088 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <osMessageQueueGet+0x34>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <osMessageQueueGet+0x34>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005048:	f06f 0303 	mvn.w	r3, #3
 800504c:	61fb      	str	r3, [r7, #28]
 800504e:	e037      	b.n	80050c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005050:	2300      	movs	r3, #0
 8005052:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005054:	f107 0310 	add.w	r3, r7, #16
 8005058:	461a      	mov	r2, r3
 800505a:	68b9      	ldr	r1, [r7, #8]
 800505c:	69b8      	ldr	r0, [r7, #24]
 800505e:	f001 f887 	bl	8006170 <xQueueReceiveFromISR>
 8005062:	4603      	mov	r3, r0
 8005064:	2b01      	cmp	r3, #1
 8005066:	d003      	beq.n	8005070 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005068:	f06f 0302 	mvn.w	r3, #2
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	e027      	b.n	80050c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d024      	beq.n	80050c0 <osMessageQueueGet+0xac>
 8005076:	4b15      	ldr	r3, [pc, #84]	; (80050cc <osMessageQueueGet+0xb8>)
 8005078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	e01b      	b.n	80050c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <osMessageQueueGet+0x80>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d103      	bne.n	800509c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005094:	f06f 0303 	mvn.w	r3, #3
 8005098:	61fb      	str	r3, [r7, #28]
 800509a:	e011      	b.n	80050c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	69b8      	ldr	r0, [r7, #24]
 80050a2:	f000 fe79 	bl	8005d98 <xQueueReceive>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d009      	beq.n	80050c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80050b2:	f06f 0301 	mvn.w	r3, #1
 80050b6:	61fb      	str	r3, [r7, #28]
 80050b8:	e002      	b.n	80050c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80050ba:	f06f 0302 	mvn.w	r3, #2
 80050be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80050c0:	69fb      	ldr	r3, [r7, #28]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	e000ed04 	.word	0xe000ed04

080050d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4a07      	ldr	r2, [pc, #28]	; (80050fc <vApplicationGetIdleTaskMemory+0x2c>)
 80050e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	4a06      	ldr	r2, [pc, #24]	; (8005100 <vApplicationGetIdleTaskMemory+0x30>)
 80050e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2280      	movs	r2, #128	; 0x80
 80050ec:	601a      	str	r2, [r3, #0]
}
 80050ee:	bf00      	nop
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	200000ac 	.word	0x200000ac
 8005100:	20000168 	.word	0x20000168

08005104 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4a07      	ldr	r2, [pc, #28]	; (8005130 <vApplicationGetTimerTaskMemory+0x2c>)
 8005114:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	4a06      	ldr	r2, [pc, #24]	; (8005134 <vApplicationGetTimerTaskMemory+0x30>)
 800511a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005122:	601a      	str	r2, [r3, #0]
}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	20000368 	.word	0x20000368
 8005134:	20000424 	.word	0x20000424

08005138 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10a      	bne.n	800515c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005158:	bf00      	nop
 800515a:	e7fe      	b.n	800515a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800515c:	2320      	movs	r3, #32
 800515e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b20      	cmp	r3, #32
 8005164:	d00a      	beq.n	800517c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	60fb      	str	r3, [r7, #12]
}
 8005178:	bf00      	nop
 800517a:	e7fe      	b.n	800517a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	3304      	adds	r3, #4
 8005190:	4618      	mov	r0, r3
 8005192:	f000 f9bf 	bl	8005514 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2201      	movs	r2, #1
 800519a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800519c:	697b      	ldr	r3, [r7, #20]
	}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80051ac:	2020      	movs	r0, #32
 80051ae:	f003 f88b 	bl	80082c8 <pvPortMalloc>
 80051b2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3304      	adds	r3, #4
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 f9a5 	bl	8005514 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80051d0:	687b      	ldr	r3, [r7, #4]
	}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b090      	sub	sp, #64	; 0x40
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80051f2:	2300      	movs	r3, #0
 80051f4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <xEventGroupWaitBits+0x36>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	623b      	str	r3, [r7, #32]
}
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <xEventGroupWaitBits+0x56>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	61fb      	str	r3, [r7, #28]
}
 800522e:	bf00      	nop
 8005230:	e7fe      	b.n	8005230 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10a      	bne.n	800524e <xEventGroupWaitBits+0x72>
	__asm volatile
 8005238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	61bb      	str	r3, [r7, #24]
}
 800524a:	bf00      	nop
 800524c:	e7fe      	b.n	800524c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800524e:	f002 f88b 	bl	8007368 <xTaskGetSchedulerState>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <xEventGroupWaitBits+0x82>
 8005258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <xEventGroupWaitBits+0x86>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <xEventGroupWaitBits+0x88>
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10a      	bne.n	800527e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	617b      	str	r3, [r7, #20]
}
 800527a:	bf00      	nop
 800527c:	e7fe      	b.n	800527c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800527e:	f001 fbd9 	bl	8006a34 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	68b9      	ldr	r1, [r7, #8]
 800528c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800528e:	f000 f90b 	bl	80054a8 <prvTestWaitCondition>
 8005292:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00e      	beq.n	80052b8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d028      	beq.n	80052fa <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80052a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	43db      	mvns	r3, r3
 80052b0:	401a      	ands	r2, r3
 80052b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	e020      	b.n	80052fa <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80052b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d104      	bne.n	80052c8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80052c2:	2301      	movs	r3, #1
 80052c4:	633b      	str	r3, [r7, #48]	; 0x30
 80052c6:	e018      	b.n	80052fa <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80052ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052d4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80052dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052e2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80052e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e6:	1d18      	adds	r0, r3, #4
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	4313      	orrs	r3, r2
 80052ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052f0:	4619      	mov	r1, r3
 80052f2:	f001 fd9d 	bl	8006e30 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80052f6:	2300      	movs	r3, #0
 80052f8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80052fa:	f001 fba9 	bl	8006a50 <xTaskResumeAll>
 80052fe:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005302:	2b00      	cmp	r3, #0
 8005304:	d031      	beq.n	800536a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	2b00      	cmp	r3, #0
 800530a:	d107      	bne.n	800531c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800530c:	4b19      	ldr	r3, [pc, #100]	; (8005374 <xEventGroupWaitBits+0x198>)
 800530e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800531c:	f002 f99a 	bl	8007654 <uxTaskResetEventItemValue>
 8005320:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d11a      	bne.n	8005362 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800532c:	f002 feaa 	bl	8008084 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800533c:	f000 f8b4 	bl	80054a8 <prvTestWaitCondition>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d009      	beq.n	800535a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d006      	beq.n	800535a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800534c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	43db      	mvns	r3, r3
 8005354:	401a      	ands	r2, r3
 8005356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005358:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800535a:	2301      	movs	r3, #1
 800535c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800535e:	f002 fec1 	bl	80080e4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005364:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005368:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800536a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800536c:	4618      	mov	r0, r3
 800536e:	3740      	adds	r7, #64	; 0x40
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	e000ed04 	.word	0xe000ed04

08005378 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08e      	sub	sp, #56	; 0x38
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005382:	2300      	movs	r3, #0
 8005384:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800538a:	2300      	movs	r3, #0
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10a      	bne.n	80053aa <xEventGroupSetBits+0x32>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	613b      	str	r3, [r7, #16]
}
 80053a6:	bf00      	nop
 80053a8:	e7fe      	b.n	80053a8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <xEventGroupSetBits+0x52>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	60fb      	str	r3, [r7, #12]
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	3304      	adds	r3, #4
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	3308      	adds	r3, #8
 80053d4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80053d6:	f001 fb2d 	bl	8006a34 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80053ec:	e03c      	b.n	8005468 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80053ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80053f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80053fa:	2300      	movs	r3, #0
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005404:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800540c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d108      	bne.n	800542a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	4013      	ands	r3, r2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00b      	beq.n	800543c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005424:	2301      	movs	r3, #1
 8005426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005428:	e008      	b.n	800543c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800542a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	4013      	ands	r3, r2
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	429a      	cmp	r2, r3
 8005436:	d101      	bne.n	800543c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005438:	2301      	movs	r3, #1
 800543a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d010      	beq.n	8005464 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800544c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	4313      	orrs	r3, r2
 8005452:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800545c:	4619      	mov	r1, r3
 800545e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005460:	f001 fdb2 	bl	8006fc8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	429a      	cmp	r2, r3
 800546e:	d1be      	bne.n	80053ee <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005476:	43db      	mvns	r3, r3
 8005478:	401a      	ands	r2, r3
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800547e:	f001 fae7 	bl	8006a50 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	681b      	ldr	r3, [r3, #0]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3738      	adds	r7, #56	; 0x38
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b082      	sub	sp, #8
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005498:	6839      	ldr	r1, [r7, #0]
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff ff6c 	bl	8005378 <xEventGroupSetBits>
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80054b4:	2300      	movs	r3, #0
 80054b6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d107      	bne.n	80054ce <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4013      	ands	r3, r2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80054c8:	2301      	movs	r3, #1
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	e007      	b.n	80054de <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4013      	ands	r3, r2
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d101      	bne.n	80054de <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80054da:	2301      	movs	r3, #1
 80054dc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80054de:	697b      	ldr	r3, [r7, #20]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	371c      	adds	r7, #28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	68f9      	ldr	r1, [r7, #12]
 80054fe:	4804      	ldr	r0, [pc, #16]	; (8005510 <xEventGroupSetBitsFromISR+0x24>)
 8005500:	f002 fc76 	bl	8007df0 <xTimerPendFunctionCallFromISR>
 8005504:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005506:	697b      	ldr	r3, [r7, #20]
	}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	0800548f 	.word	0x0800548f

08005514 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f103 0208 	add.w	r2, r3, #8
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f04f 32ff 	mov.w	r2, #4294967295
 800552c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f103 0208 	add.w	r2, r3, #8
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f103 0208 	add.w	r2, r3, #8
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	601a      	str	r2, [r3, #0]
}
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055b6:	b480      	push	{r7}
 80055b8:	b085      	sub	sp, #20
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055cc:	d103      	bne.n	80055d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e00c      	b.n	80055f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3308      	adds	r3, #8
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	e002      	b.n	80055e4 <vListInsert+0x2e>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d2f6      	bcs.n	80055de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	601a      	str	r2, [r3, #0]
}
 800561c:	bf00      	nop
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6892      	ldr	r2, [r2, #8]
 800563e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6852      	ldr	r2, [r2, #4]
 8005648:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	429a      	cmp	r2, r3
 8005652:	d103      	bne.n	800565c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	1e5a      	subs	r2, r3, #1
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <xQueueGenericReset+0x2a>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	60bb      	str	r3, [r7, #8]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80056a6:	f002 fced 	bl	8008084 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b2:	68f9      	ldr	r1, [r7, #12]
 80056b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056b6:	fb01 f303 	mul.w	r3, r1, r3
 80056ba:	441a      	add	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d6:	3b01      	subs	r3, #1
 80056d8:	68f9      	ldr	r1, [r7, #12]
 80056da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056dc:	fb01 f303 	mul.w	r3, r1, r3
 80056e0:	441a      	add	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	22ff      	movs	r2, #255	; 0xff
 80056ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	22ff      	movs	r2, #255	; 0xff
 80056f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d114      	bne.n	8005726 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d01a      	beq.n	800573a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3310      	adds	r3, #16
 8005708:	4618      	mov	r0, r3
 800570a:	f001 fbf9 	bl	8006f00 <xTaskRemoveFromEventList>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d012      	beq.n	800573a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005714:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <xQueueGenericReset+0xcc>)
 8005716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	e009      	b.n	800573a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3310      	adds	r3, #16
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fef2 	bl	8005514 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3324      	adds	r3, #36	; 0x24
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff feed 	bl	8005514 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800573a:	f002 fcd3 	bl	80080e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800573e:	2301      	movs	r3, #1
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08e      	sub	sp, #56	; 0x38
 8005750:	af02      	add	r7, sp, #8
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10a      	bne.n	8005776 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10a      	bne.n	8005792 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800578e:	bf00      	nop
 8005790:	e7fe      	b.n	8005790 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <xQueueGenericCreateStatic+0x52>
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <xQueueGenericCreateStatic+0x56>
 800579e:	2301      	movs	r3, #1
 80057a0:	e000      	b.n	80057a4 <xQueueGenericCreateStatic+0x58>
 80057a2:	2300      	movs	r3, #0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10a      	bne.n	80057be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	623b      	str	r3, [r7, #32]
}
 80057ba:	bf00      	nop
 80057bc:	e7fe      	b.n	80057bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d102      	bne.n	80057ca <xQueueGenericCreateStatic+0x7e>
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <xQueueGenericCreateStatic+0x82>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <xQueueGenericCreateStatic+0x84>
 80057ce:	2300      	movs	r3, #0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	61fb      	str	r3, [r7, #28]
}
 80057e6:	bf00      	nop
 80057e8:	e7fe      	b.n	80057e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80057ea:	2350      	movs	r3, #80	; 0x50
 80057ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b50      	cmp	r3, #80	; 0x50
 80057f2:	d00a      	beq.n	800580a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	61bb      	str	r3, [r7, #24]
}
 8005806:	bf00      	nop
 8005808:	e7fe      	b.n	8005808 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800580a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00d      	beq.n	8005832 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800581e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	4613      	mov	r3, r2
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	68b9      	ldr	r1, [r7, #8]
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f83f 	bl	80058b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005834:	4618      	mov	r0, r3
 8005836:	3730      	adds	r7, #48	; 0x30
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08a      	sub	sp, #40	; 0x28
 8005840:	af02      	add	r7, sp, #8
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	4613      	mov	r3, r2
 8005848:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	613b      	str	r3, [r7, #16]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	fb02 f303 	mul.w	r3, r2, r3
 800586e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	3350      	adds	r3, #80	; 0x50
 8005874:	4618      	mov	r0, r3
 8005876:	f002 fd27 	bl	80082c8 <pvPortMalloc>
 800587a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d011      	beq.n	80058a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	3350      	adds	r3, #80	; 0x50
 800588a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005894:	79fa      	ldrb	r2, [r7, #7]
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	4613      	mov	r3, r2
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 f805 	bl	80058b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058a6:	69bb      	ldr	r3, [r7, #24]
	}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3720      	adds	r7, #32
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
 80058bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d103      	bne.n	80058cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	e002      	b.n	80058d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058de:	2101      	movs	r1, #1
 80058e0:	69b8      	ldr	r0, [r7, #24]
 80058e2:	f7ff fecb 	bl	800567c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	78fa      	ldrb	r2, [r7, #3]
 80058ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058ee:	bf00      	nop
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00e      	beq.n	8005922 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005916:	2300      	movs	r3, #0
 8005918:	2200      	movs	r2, #0
 800591a:	2100      	movs	r1, #0
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f8a1 	bl	8005a64 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005922:	bf00      	nop
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800592a:	b580      	push	{r7, lr}
 800592c:	b086      	sub	sp, #24
 800592e:	af00      	add	r7, sp, #0
 8005930:	4603      	mov	r3, r0
 8005932:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005934:	2301      	movs	r3, #1
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	2300      	movs	r3, #0
 800593a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	461a      	mov	r2, r3
 8005940:	6939      	ldr	r1, [r7, #16]
 8005942:	6978      	ldr	r0, [r7, #20]
 8005944:	f7ff ff7a 	bl	800583c <xQueueGenericCreate>
 8005948:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f7ff ffd3 	bl	80058f6 <prvInitialiseMutex>

		return xNewQueue;
 8005950:	68fb      	ldr	r3, [r7, #12]
	}
 8005952:	4618      	mov	r0, r3
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800595a:	b580      	push	{r7, lr}
 800595c:	b088      	sub	sp, #32
 800595e:	af02      	add	r7, sp, #8
 8005960:	4603      	mov	r3, r0
 8005962:	6039      	str	r1, [r7, #0]
 8005964:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005966:	2301      	movs	r3, #1
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	2300      	movs	r3, #0
 800596c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800596e:	79fb      	ldrb	r3, [r7, #7]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2200      	movs	r2, #0
 8005976:	6939      	ldr	r1, [r7, #16]
 8005978:	6978      	ldr	r0, [r7, #20]
 800597a:	f7ff fee7 	bl	800574c <xQueueGenericCreateStatic>
 800597e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f7ff ffb8 	bl	80058f6 <prvInitialiseMutex>

		return xNewQueue;
 8005986:	68fb      	ldr	r3, [r7, #12]
	}
 8005988:	4618      	mov	r0, r3
 800598a:	3718      	adds	r7, #24
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005990:	b590      	push	{r4, r7, lr}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10a      	bne.n	80059b8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	60fb      	str	r3, [r7, #12]
}
 80059b4:	bf00      	nop
 80059b6:	e7fe      	b.n	80059b6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	689c      	ldr	r4, [r3, #8]
 80059bc:	f001 fcc4 	bl	8007348 <xTaskGetCurrentTaskHandle>
 80059c0:	4603      	mov	r3, r0
 80059c2:	429c      	cmp	r4, r3
 80059c4:	d111      	bne.n	80059ea <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	1e5a      	subs	r2, r3, #1
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d105      	bne.n	80059e4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80059d8:	2300      	movs	r3, #0
 80059da:	2200      	movs	r2, #0
 80059dc:	2100      	movs	r1, #0
 80059de:	6938      	ldr	r0, [r7, #16]
 80059e0:	f000 f840 	bl	8005a64 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80059e4:	2301      	movs	r3, #1
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	e001      	b.n	80059ee <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80059ee:	697b      	ldr	r3, [r7, #20]
	}
 80059f0:	4618      	mov	r0, r3
 80059f2:	371c      	adds	r7, #28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd90      	pop	{r4, r7, pc}

080059f8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80059f8:	b590      	push	{r4, r7, lr}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10a      	bne.n	8005a22 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	60fb      	str	r3, [r7, #12]
}
 8005a1e:	bf00      	nop
 8005a20:	e7fe      	b.n	8005a20 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	689c      	ldr	r4, [r3, #8]
 8005a26:	f001 fc8f 	bl	8007348 <xTaskGetCurrentTaskHandle>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	429c      	cmp	r4, r3
 8005a2e:	d107      	bne.n	8005a40 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	e00c      	b.n	8005a5a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	6938      	ldr	r0, [r7, #16]
 8005a44:	f000 fa88 	bl	8005f58 <xQueueSemaphoreTake>
 8005a48:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d004      	beq.n	8005a5a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005a5a:	697b      	ldr	r3, [r7, #20]
	}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd90      	pop	{r4, r7, pc}

08005a64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08e      	sub	sp, #56	; 0x38
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a72:	2300      	movs	r3, #0
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10a      	bne.n	8005a96 <xQueueGenericSend+0x32>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a92:	bf00      	nop
 8005a94:	e7fe      	b.n	8005a94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d103      	bne.n	8005aa4 <xQueueGenericSend+0x40>
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <xQueueGenericSend+0x44>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e000      	b.n	8005aaa <xQueueGenericSend+0x46>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10a      	bne.n	8005ac4 <xQueueGenericSend+0x60>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ac0:	bf00      	nop
 8005ac2:	e7fe      	b.n	8005ac2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d103      	bne.n	8005ad2 <xQueueGenericSend+0x6e>
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <xQueueGenericSend+0x72>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e000      	b.n	8005ad8 <xQueueGenericSend+0x74>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10a      	bne.n	8005af2 <xQueueGenericSend+0x8e>
	__asm volatile
 8005adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae0:	f383 8811 	msr	BASEPRI, r3
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	623b      	str	r3, [r7, #32]
}
 8005aee:	bf00      	nop
 8005af0:	e7fe      	b.n	8005af0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005af2:	f001 fc39 	bl	8007368 <xTaskGetSchedulerState>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d102      	bne.n	8005b02 <xQueueGenericSend+0x9e>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <xQueueGenericSend+0xa2>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <xQueueGenericSend+0xa4>
 8005b06:	2300      	movs	r3, #0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <xQueueGenericSend+0xbe>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	61fb      	str	r3, [r7, #28]
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b22:	f002 faaf 	bl	8008084 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d302      	bcc.n	8005b38 <xQueueGenericSend+0xd4>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d129      	bne.n	8005b8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	68b9      	ldr	r1, [r7, #8]
 8005b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b3e:	f000 fbaf 	bl	80062a0 <prvCopyDataToQueue>
 8005b42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d010      	beq.n	8005b6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	3324      	adds	r3, #36	; 0x24
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 f9d5 	bl	8006f00 <xTaskRemoveFromEventList>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d013      	beq.n	8005b84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b5c:	4b3f      	ldr	r3, [pc, #252]	; (8005c5c <xQueueGenericSend+0x1f8>)
 8005b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	e00a      	b.n	8005b84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d007      	beq.n	8005b84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b74:	4b39      	ldr	r3, [pc, #228]	; (8005c5c <xQueueGenericSend+0x1f8>)
 8005b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b84:	f002 faae 	bl	80080e4 <vPortExitCritical>
				return pdPASS;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e063      	b.n	8005c54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d103      	bne.n	8005b9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b92:	f002 faa7 	bl	80080e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	e05c      	b.n	8005c54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d106      	bne.n	8005bae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ba0:	f107 0314 	add.w	r3, r7, #20
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f001 fa71 	bl	800708c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005baa:	2301      	movs	r3, #1
 8005bac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bae:	f002 fa99 	bl	80080e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bb2:	f000 ff3f 	bl	8006a34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bb6:	f002 fa65 	bl	8008084 <vPortEnterCritical>
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bc0:	b25b      	sxtb	r3, r3
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc6:	d103      	bne.n	8005bd0 <xQueueGenericSend+0x16c>
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bd6:	b25b      	sxtb	r3, r3
 8005bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bdc:	d103      	bne.n	8005be6 <xQueueGenericSend+0x182>
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005be6:	f002 fa7d 	bl	80080e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bea:	1d3a      	adds	r2, r7, #4
 8005bec:	f107 0314 	add.w	r3, r7, #20
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f001 fa60 	bl	80070b8 <xTaskCheckForTimeOut>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d124      	bne.n	8005c48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c00:	f000 fc46 	bl	8006490 <prvIsQueueFull>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d018      	beq.n	8005c3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	3310      	adds	r3, #16
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	4611      	mov	r1, r2
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 f8e8 	bl	8006de8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c1a:	f000 fbd1 	bl	80063c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c1e:	f000 ff17 	bl	8006a50 <xTaskResumeAll>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f47f af7c 	bne.w	8005b22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <xQueueGenericSend+0x1f8>)
 8005c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	e772      	b.n	8005b22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c3e:	f000 fbbf 	bl	80063c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c42:	f000 ff05 	bl	8006a50 <xTaskResumeAll>
 8005c46:	e76c      	b.n	8005b22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c4a:	f000 fbb9 	bl	80063c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c4e:	f000 feff 	bl	8006a50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3738      	adds	r7, #56	; 0x38
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	e000ed04 	.word	0xe000ed04

08005c60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b090      	sub	sp, #64	; 0x40
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d103      	bne.n	8005c9c <xQueueGenericSendFromISR+0x3c>
 8005c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <xQueueGenericSendFromISR+0x40>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e000      	b.n	8005ca2 <xQueueGenericSendFromISR+0x42>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cb8:	bf00      	nop
 8005cba:	e7fe      	b.n	8005cba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d103      	bne.n	8005cca <xQueueGenericSendFromISR+0x6a>
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <xQueueGenericSendFromISR+0x6e>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <xQueueGenericSendFromISR+0x70>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	f383 8811 	msr	BASEPRI, r3
 8005cdc:	f3bf 8f6f 	isb	sy
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	623b      	str	r3, [r7, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	e7fe      	b.n	8005ce8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cea:	f002 faad 	bl	8008248 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005cee:	f3ef 8211 	mrs	r2, BASEPRI
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	61fa      	str	r2, [r7, #28]
 8005d04:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d06:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d08:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d302      	bcc.n	8005d1c <xQueueGenericSendFromISR+0xbc>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d12f      	bne.n	8005d7c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	68b9      	ldr	r1, [r7, #8]
 8005d30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d32:	f000 fab5 	bl	80062a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3e:	d112      	bne.n	8005d66 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d016      	beq.n	8005d76 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	3324      	adds	r3, #36	; 0x24
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 f8d7 	bl	8006f00 <xTaskRemoveFromEventList>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00e      	beq.n	8005d76 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00b      	beq.n	8005d76 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	e007      	b.n	8005d76 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	b25a      	sxtb	r2, r3
 8005d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d76:	2301      	movs	r3, #1
 8005d78:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005d7a:	e001      	b.n	8005d80 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d82:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3740      	adds	r7, #64	; 0x40
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08c      	sub	sp, #48	; 0x30
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <xQueueReceive+0x30>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	623b      	str	r3, [r7, #32]
}
 8005dc4:	bf00      	nop
 8005dc6:	e7fe      	b.n	8005dc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d103      	bne.n	8005dd6 <xQueueReceive+0x3e>
 8005dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <xQueueReceive+0x42>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <xQueueReceive+0x44>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <xQueueReceive+0x5e>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	61fb      	str	r3, [r7, #28]
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005df6:	f001 fab7 	bl	8007368 <xTaskGetSchedulerState>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d102      	bne.n	8005e06 <xQueueReceive+0x6e>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <xQueueReceive+0x72>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <xQueueReceive+0x74>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <xQueueReceive+0x8e>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	61bb      	str	r3, [r7, #24]
}
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e26:	f002 f92d 	bl	8008084 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01f      	beq.n	8005e76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e3a:	f000 fa9b 	bl	8006374 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	1e5a      	subs	r2, r3, #1
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00f      	beq.n	8005e6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	3310      	adds	r3, #16
 8005e52:	4618      	mov	r0, r3
 8005e54:	f001 f854 	bl	8006f00 <xTaskRemoveFromEventList>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d007      	beq.n	8005e6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e5e:	4b3d      	ldr	r3, [pc, #244]	; (8005f54 <xQueueReceive+0x1bc>)
 8005e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e6e:	f002 f939 	bl	80080e4 <vPortExitCritical>
				return pdPASS;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e069      	b.n	8005f4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d103      	bne.n	8005e84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e7c:	f002 f932 	bl	80080e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e80:	2300      	movs	r3, #0
 8005e82:	e062      	b.n	8005f4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e8a:	f107 0310 	add.w	r3, r7, #16
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 f8fc 	bl	800708c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e94:	2301      	movs	r3, #1
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e98:	f002 f924 	bl	80080e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e9c:	f000 fdca 	bl	8006a34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ea0:	f002 f8f0 	bl	8008084 <vPortEnterCritical>
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eaa:	b25b      	sxtb	r3, r3
 8005eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb0:	d103      	bne.n	8005eba <xQueueReceive+0x122>
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ec0:	b25b      	sxtb	r3, r3
 8005ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec6:	d103      	bne.n	8005ed0 <xQueueReceive+0x138>
 8005ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ed0:	f002 f908 	bl	80080e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ed4:	1d3a      	adds	r2, r7, #4
 8005ed6:	f107 0310 	add.w	r3, r7, #16
 8005eda:	4611      	mov	r1, r2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f001 f8eb 	bl	80070b8 <xTaskCheckForTimeOut>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d123      	bne.n	8005f30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eea:	f000 fabb 	bl	8006464 <prvIsQueueEmpty>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d017      	beq.n	8005f24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	3324      	adds	r3, #36	; 0x24
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	4611      	mov	r1, r2
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 ff73 	bl	8006de8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f04:	f000 fa5c 	bl	80063c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f08:	f000 fda2 	bl	8006a50 <xTaskResumeAll>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d189      	bne.n	8005e26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005f12:	4b10      	ldr	r3, [pc, #64]	; (8005f54 <xQueueReceive+0x1bc>)
 8005f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	e780      	b.n	8005e26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f26:	f000 fa4b 	bl	80063c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f2a:	f000 fd91 	bl	8006a50 <xTaskResumeAll>
 8005f2e:	e77a      	b.n	8005e26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f32:	f000 fa45 	bl	80063c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f36:	f000 fd8b 	bl	8006a50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f3c:	f000 fa92 	bl	8006464 <prvIsQueueEmpty>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f43f af6f 	beq.w	8005e26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3730      	adds	r7, #48	; 0x30
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	e000ed04 	.word	0xe000ed04

08005f58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08e      	sub	sp, #56	; 0x38
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f62:	2300      	movs	r3, #0
 8005f64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	623b      	str	r3, [r7, #32]
}
 8005f86:	bf00      	nop
 8005f88:	e7fe      	b.n	8005f88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	61fb      	str	r3, [r7, #28]
}
 8005fa4:	bf00      	nop
 8005fa6:	e7fe      	b.n	8005fa6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fa8:	f001 f9de 	bl	8007368 <xTaskGetSchedulerState>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d102      	bne.n	8005fb8 <xQueueSemaphoreTake+0x60>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <xQueueSemaphoreTake+0x64>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e000      	b.n	8005fbe <xQueueSemaphoreTake+0x66>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10a      	bne.n	8005fd8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	61bb      	str	r3, [r7, #24]
}
 8005fd4:	bf00      	nop
 8005fd6:	e7fe      	b.n	8005fd6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fd8:	f002 f854 	bl	8008084 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d024      	beq.n	8006032 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	1e5a      	subs	r2, r3, #1
 8005fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d104      	bne.n	8006002 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005ff8:	f001 fb44 	bl	8007684 <pvTaskIncrementMutexHeldCount>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00f      	beq.n	800602a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	3310      	adds	r3, #16
 800600e:	4618      	mov	r0, r3
 8006010:	f000 ff76 	bl	8006f00 <xTaskRemoveFromEventList>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d007      	beq.n	800602a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800601a:	4b54      	ldr	r3, [pc, #336]	; (800616c <xQueueSemaphoreTake+0x214>)
 800601c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800602a:	f002 f85b 	bl	80080e4 <vPortExitCritical>
				return pdPASS;
 800602e:	2301      	movs	r3, #1
 8006030:	e097      	b.n	8006162 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d111      	bne.n	800605c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	617b      	str	r3, [r7, #20]
}
 8006050:	bf00      	nop
 8006052:	e7fe      	b.n	8006052 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006054:	f002 f846 	bl	80080e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006058:	2300      	movs	r3, #0
 800605a:	e082      	b.n	8006162 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800605c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605e:	2b00      	cmp	r3, #0
 8006060:	d106      	bne.n	8006070 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006062:	f107 030c 	add.w	r3, r7, #12
 8006066:	4618      	mov	r0, r3
 8006068:	f001 f810 	bl	800708c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800606c:	2301      	movs	r3, #1
 800606e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006070:	f002 f838 	bl	80080e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006074:	f000 fcde 	bl	8006a34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006078:	f002 f804 	bl	8008084 <vPortEnterCritical>
 800607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006082:	b25b      	sxtb	r3, r3
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006088:	d103      	bne.n	8006092 <xQueueSemaphoreTake+0x13a>
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006098:	b25b      	sxtb	r3, r3
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609e:	d103      	bne.n	80060a8 <xQueueSemaphoreTake+0x150>
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060a8:	f002 f81c 	bl	80080e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060ac:	463a      	mov	r2, r7
 80060ae:	f107 030c 	add.w	r3, r7, #12
 80060b2:	4611      	mov	r1, r2
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 ffff 	bl	80070b8 <xTaskCheckForTimeOut>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d132      	bne.n	8006126 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060c2:	f000 f9cf 	bl	8006464 <prvIsQueueEmpty>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d026      	beq.n	800611a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d109      	bne.n	80060e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80060d4:	f001 ffd6 	bl	8008084 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	4618      	mov	r0, r3
 80060de:	f001 f961 	bl	80073a4 <xTaskPriorityInherit>
 80060e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80060e4:	f001 fffe 	bl	80080e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ea:	3324      	adds	r3, #36	; 0x24
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	4611      	mov	r1, r2
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 fe79 	bl	8006de8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060f8:	f000 f962 	bl	80063c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060fc:	f000 fca8 	bl	8006a50 <xTaskResumeAll>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	f47f af68 	bne.w	8005fd8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006108:	4b18      	ldr	r3, [pc, #96]	; (800616c <xQueueSemaphoreTake+0x214>)
 800610a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	e75e      	b.n	8005fd8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800611a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800611c:	f000 f950 	bl	80063c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006120:	f000 fc96 	bl	8006a50 <xTaskResumeAll>
 8006124:	e758      	b.n	8005fd8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006128:	f000 f94a 	bl	80063c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800612c:	f000 fc90 	bl	8006a50 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006132:	f000 f997 	bl	8006464 <prvIsQueueEmpty>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	f43f af4d 	beq.w	8005fd8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00d      	beq.n	8006160 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006144:	f001 ff9e 	bl	8008084 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800614a:	f000 f891 	bl	8006270 <prvGetDisinheritPriorityAfterTimeout>
 800614e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006156:	4618      	mov	r0, r3
 8006158:	f001 f9fa 	bl	8007550 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800615c:	f001 ffc2 	bl	80080e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006160:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006162:	4618      	mov	r0, r3
 8006164:	3738      	adds	r7, #56	; 0x38
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	e000ed04 	.word	0xe000ed04

08006170 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08e      	sub	sp, #56	; 0x38
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10a      	bne.n	800619c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	623b      	str	r3, [r7, #32]
}
 8006198:	bf00      	nop
 800619a:	e7fe      	b.n	800619a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d103      	bne.n	80061aa <xQueueReceiveFromISR+0x3a>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <xQueueReceiveFromISR+0x3e>
 80061aa:	2301      	movs	r3, #1
 80061ac:	e000      	b.n	80061b0 <xQueueReceiveFromISR+0x40>
 80061ae:	2300      	movs	r3, #0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	61fb      	str	r3, [r7, #28]
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061ca:	f002 f83d 	bl	8008248 <vPortValidateInterruptPriority>
	__asm volatile
 80061ce:	f3ef 8211 	mrs	r2, BASEPRI
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	61ba      	str	r2, [r7, #24]
 80061e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80061e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d02f      	beq.n	8006256 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006204:	f000 f8b6 	bl	8006374 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	1e5a      	subs	r2, r3, #1
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006210:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006218:	d112      	bne.n	8006240 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d016      	beq.n	8006250 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	3310      	adds	r3, #16
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fe6a 	bl	8006f00 <xTaskRemoveFromEventList>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00e      	beq.n	8006250 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00b      	beq.n	8006250 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	e007      	b.n	8006250 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006244:	3301      	adds	r3, #1
 8006246:	b2db      	uxtb	r3, r3
 8006248:	b25a      	sxtb	r2, r3
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006250:	2301      	movs	r3, #1
 8006252:	637b      	str	r3, [r7, #52]	; 0x34
 8006254:	e001      	b.n	800625a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006256:	2300      	movs	r3, #0
 8006258:	637b      	str	r3, [r7, #52]	; 0x34
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f383 8811 	msr	BASEPRI, r3
}
 8006264:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006268:	4618      	mov	r0, r3
 800626a:	3738      	adds	r7, #56	; 0x38
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	d006      	beq.n	800628e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	e001      	b.n	8006292 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006292:	68fb      	ldr	r3, [r7, #12]
	}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062ac:	2300      	movs	r3, #0
 80062ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10d      	bne.n	80062da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d14d      	bne.n	8006362 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f001 f8d2 	bl	8007474 <xTaskPriorityDisinherit>
 80062d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	609a      	str	r2, [r3, #8]
 80062d8:	e043      	b.n	8006362 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d119      	bne.n	8006314 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6858      	ldr	r0, [r3, #4]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e8:	461a      	mov	r2, r3
 80062ea:	68b9      	ldr	r1, [r7, #8]
 80062ec:	f002 faf9 	bl	80088e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f8:	441a      	add	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	429a      	cmp	r2, r3
 8006308:	d32b      	bcc.n	8006362 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	605a      	str	r2, [r3, #4]
 8006312:	e026      	b.n	8006362 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	68d8      	ldr	r0, [r3, #12]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	461a      	mov	r2, r3
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	f002 fadf 	bl	80088e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632c:	425b      	negs	r3, r3
 800632e:	441a      	add	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d207      	bcs.n	8006350 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006348:	425b      	negs	r3, r3
 800634a:	441a      	add	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b02      	cmp	r3, #2
 8006354:	d105      	bne.n	8006362 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	3b01      	subs	r3, #1
 8006360:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800636a:	697b      	ldr	r3, [r7, #20]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	2b00      	cmp	r3, #0
 8006384:	d018      	beq.n	80063b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	441a      	add	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	429a      	cmp	r2, r3
 800639e:	d303      	bcc.n	80063a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68d9      	ldr	r1, [r3, #12]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b0:	461a      	mov	r2, r3
 80063b2:	6838      	ldr	r0, [r7, #0]
 80063b4:	f002 fa95 	bl	80088e2 <memcpy>
	}
}
 80063b8:	bf00      	nop
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063c8:	f001 fe5c 	bl	8008084 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063d4:	e011      	b.n	80063fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d012      	beq.n	8006404 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3324      	adds	r3, #36	; 0x24
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fd8c 	bl	8006f00 <xTaskRemoveFromEventList>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80063ee:	f000 fec5 	bl	800717c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	dce9      	bgt.n	80063d6 <prvUnlockQueue+0x16>
 8006402:	e000      	b.n	8006406 <prvUnlockQueue+0x46>
					break;
 8006404:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	22ff      	movs	r2, #255	; 0xff
 800640a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800640e:	f001 fe69 	bl	80080e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006412:	f001 fe37 	bl	8008084 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800641c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800641e:	e011      	b.n	8006444 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d012      	beq.n	800644e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3310      	adds	r3, #16
 800642c:	4618      	mov	r0, r3
 800642e:	f000 fd67 	bl	8006f00 <xTaskRemoveFromEventList>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006438:	f000 fea0 	bl	800717c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800643c:	7bbb      	ldrb	r3, [r7, #14]
 800643e:	3b01      	subs	r3, #1
 8006440:	b2db      	uxtb	r3, r3
 8006442:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006444:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006448:	2b00      	cmp	r3, #0
 800644a:	dce9      	bgt.n	8006420 <prvUnlockQueue+0x60>
 800644c:	e000      	b.n	8006450 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800644e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	22ff      	movs	r2, #255	; 0xff
 8006454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006458:	f001 fe44 	bl	80080e4 <vPortExitCritical>
}
 800645c:	bf00      	nop
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800646c:	f001 fe0a 	bl	8008084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	2b00      	cmp	r3, #0
 8006476:	d102      	bne.n	800647e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006478:	2301      	movs	r3, #1
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	e001      	b.n	8006482 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006482:	f001 fe2f 	bl	80080e4 <vPortExitCritical>

	return xReturn;
 8006486:	68fb      	ldr	r3, [r7, #12]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006498:	f001 fdf4 	bl	8008084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d102      	bne.n	80064ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064a8:	2301      	movs	r3, #1
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	e001      	b.n	80064b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064b2:	f001 fe17 	bl	80080e4 <vPortExitCritical>

	return xReturn;
 80064b6:	68fb      	ldr	r3, [r7, #12]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	e014      	b.n	80064fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064d0:	4a0f      	ldr	r2, [pc, #60]	; (8006510 <vQueueAddToRegistry+0x50>)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10b      	bne.n	80064f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064dc:	490c      	ldr	r1, [pc, #48]	; (8006510 <vQueueAddToRegistry+0x50>)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064e6:	4a0a      	ldr	r2, [pc, #40]	; (8006510 <vQueueAddToRegistry+0x50>)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	4413      	add	r3, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80064f2:	e006      	b.n	8006502 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3301      	adds	r3, #1
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b07      	cmp	r3, #7
 80064fe:	d9e7      	bls.n	80064d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006500:	bf00      	nop
 8006502:	bf00      	nop
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	20004c88 	.word	0x20004c88

08006514 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006524:	f001 fdae 	bl	8008084 <vPortEnterCritical>
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800652e:	b25b      	sxtb	r3, r3
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006534:	d103      	bne.n	800653e <vQueueWaitForMessageRestricted+0x2a>
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006544:	b25b      	sxtb	r3, r3
 8006546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654a:	d103      	bne.n	8006554 <vQueueWaitForMessageRestricted+0x40>
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006554:	f001 fdc6 	bl	80080e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655c:	2b00      	cmp	r3, #0
 800655e:	d106      	bne.n	800656e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	3324      	adds	r3, #36	; 0x24
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	68b9      	ldr	r1, [r7, #8]
 8006568:	4618      	mov	r0, r3
 800656a:	f000 fc9d 	bl	8006ea8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800656e:	6978      	ldr	r0, [r7, #20]
 8006570:	f7ff ff26 	bl	80063c0 <prvUnlockQueue>
	}
 8006574:	bf00      	nop
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08e      	sub	sp, #56	; 0x38
 8006580:	af04      	add	r7, sp, #16
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	623b      	str	r3, [r7, #32]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10a      	bne.n	80065c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	61fb      	str	r3, [r7, #28]
}
 80065be:	bf00      	nop
 80065c0:	e7fe      	b.n	80065c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065c2:	23bc      	movs	r3, #188	; 0xbc
 80065c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	2bbc      	cmp	r3, #188	; 0xbc
 80065ca:	d00a      	beq.n	80065e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	61bb      	str	r3, [r7, #24]
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80065e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d01e      	beq.n	8006628 <xTaskCreateStatic+0xac>
 80065ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01b      	beq.n	8006628 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	2202      	movs	r2, #2
 80065fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006602:	2300      	movs	r3, #0
 8006604:	9303      	str	r3, [sp, #12]
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	9302      	str	r3, [sp, #8]
 800660a:	f107 0314 	add.w	r3, r7, #20
 800660e:	9301      	str	r3, [sp, #4]
 8006610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	68b9      	ldr	r1, [r7, #8]
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 f850 	bl	80066c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006622:	f000 f8f3 	bl	800680c <prvAddNewTaskToReadyList>
 8006626:	e001      	b.n	800662c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006628:	2300      	movs	r3, #0
 800662a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800662c:	697b      	ldr	r3, [r7, #20]
	}
 800662e:	4618      	mov	r0, r3
 8006630:	3728      	adds	r7, #40	; 0x28
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006636:	b580      	push	{r7, lr}
 8006638:	b08c      	sub	sp, #48	; 0x30
 800663a:	af04      	add	r7, sp, #16
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	603b      	str	r3, [r7, #0]
 8006642:	4613      	mov	r3, r2
 8006644:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006646:	88fb      	ldrh	r3, [r7, #6]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4618      	mov	r0, r3
 800664c:	f001 fe3c 	bl	80082c8 <pvPortMalloc>
 8006650:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00e      	beq.n	8006676 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006658:	20bc      	movs	r0, #188	; 0xbc
 800665a:	f001 fe35 	bl	80082c8 <pvPortMalloc>
 800665e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	631a      	str	r2, [r3, #48]	; 0x30
 800666c:	e005      	b.n	800667a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800666e:	6978      	ldr	r0, [r7, #20]
 8006670:	f001 fef6 	bl	8008460 <vPortFree>
 8006674:	e001      	b.n	800667a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006676:	2300      	movs	r3, #0
 8006678:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d017      	beq.n	80066b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006688:	88fa      	ldrh	r2, [r7, #6]
 800668a:	2300      	movs	r3, #0
 800668c:	9303      	str	r3, [sp, #12]
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	9302      	str	r3, [sp, #8]
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	9301      	str	r3, [sp, #4]
 8006696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 f80e 	bl	80066c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066a4:	69f8      	ldr	r0, [r7, #28]
 80066a6:	f000 f8b1 	bl	800680c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066aa:	2301      	movs	r3, #1
 80066ac:	61bb      	str	r3, [r7, #24]
 80066ae:	e002      	b.n	80066b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066b0:	f04f 33ff 	mov.w	r3, #4294967295
 80066b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066b6:	69bb      	ldr	r3, [r7, #24]
	}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3720      	adds	r7, #32
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b088      	sub	sp, #32
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
 80066cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	461a      	mov	r2, r3
 80066d8:	21a5      	movs	r1, #165	; 0xa5
 80066da:	f002 f910 	bl	80088fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066e8:	3b01      	subs	r3, #1
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	f023 0307 	bic.w	r3, r3, #7
 80066f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	617b      	str	r3, [r7, #20]
}
 8006714:	bf00      	nop
 8006716:	e7fe      	b.n	8006716 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d01f      	beq.n	800675e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800671e:	2300      	movs	r3, #0
 8006720:	61fb      	str	r3, [r7, #28]
 8006722:	e012      	b.n	800674a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	4413      	add	r3, r2
 800672a:	7819      	ldrb	r1, [r3, #0]
 800672c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	4413      	add	r3, r2
 8006732:	3334      	adds	r3, #52	; 0x34
 8006734:	460a      	mov	r2, r1
 8006736:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	4413      	add	r3, r2
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d006      	beq.n	8006752 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	3301      	adds	r3, #1
 8006748:	61fb      	str	r3, [r7, #28]
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	2b0f      	cmp	r3, #15
 800674e:	d9e9      	bls.n	8006724 <prvInitialiseNewTask+0x64>
 8006750:	e000      	b.n	8006754 <prvInitialiseNewTask+0x94>
			{
				break;
 8006752:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800675c:	e003      	b.n	8006766 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	2b37      	cmp	r3, #55	; 0x37
 800676a:	d901      	bls.n	8006770 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800676c:	2337      	movs	r3, #55	; 0x37
 800676e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006774:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800677a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	2200      	movs	r2, #0
 8006780:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	3304      	adds	r3, #4
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe fee4 	bl	8005554 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678e:	3318      	adds	r3, #24
 8006790:	4618      	mov	r0, r3
 8006792:	f7fe fedf 	bl	8005554 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800679a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80067bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067be:	3354      	adds	r3, #84	; 0x54
 80067c0:	2260      	movs	r2, #96	; 0x60
 80067c2:	2100      	movs	r1, #0
 80067c4:	4618      	mov	r0, r3
 80067c6:	f002 f89a 	bl	80088fe <memset>
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	4a0c      	ldr	r2, [pc, #48]	; (8006800 <prvInitialiseNewTask+0x140>)
 80067ce:	659a      	str	r2, [r3, #88]	; 0x58
 80067d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d2:	4a0c      	ldr	r2, [pc, #48]	; (8006804 <prvInitialiseNewTask+0x144>)
 80067d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	4a0b      	ldr	r2, [pc, #44]	; (8006808 <prvInitialiseNewTask+0x148>)
 80067da:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	68f9      	ldr	r1, [r7, #12]
 80067e0:	69b8      	ldr	r0, [r7, #24]
 80067e2:	f001 fb25 	bl	8007e30 <pxPortInitialiseStack>
 80067e6:	4602      	mov	r2, r0
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80067ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067f8:	bf00      	nop
 80067fa:	3720      	adds	r7, #32
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	08009f78 	.word	0x08009f78
 8006804:	08009f98 	.word	0x08009f98
 8006808:	08009f58 	.word	0x08009f58

0800680c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006814:	f001 fc36 	bl	8008084 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006818:	4b2d      	ldr	r3, [pc, #180]	; (80068d0 <prvAddNewTaskToReadyList+0xc4>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3301      	adds	r3, #1
 800681e:	4a2c      	ldr	r2, [pc, #176]	; (80068d0 <prvAddNewTaskToReadyList+0xc4>)
 8006820:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006822:	4b2c      	ldr	r3, [pc, #176]	; (80068d4 <prvAddNewTaskToReadyList+0xc8>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d109      	bne.n	800683e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800682a:	4a2a      	ldr	r2, [pc, #168]	; (80068d4 <prvAddNewTaskToReadyList+0xc8>)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006830:	4b27      	ldr	r3, [pc, #156]	; (80068d0 <prvAddNewTaskToReadyList+0xc4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d110      	bne.n	800685a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006838:	f000 fcc4 	bl	80071c4 <prvInitialiseTaskLists>
 800683c:	e00d      	b.n	800685a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800683e:	4b26      	ldr	r3, [pc, #152]	; (80068d8 <prvAddNewTaskToReadyList+0xcc>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d109      	bne.n	800685a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006846:	4b23      	ldr	r3, [pc, #140]	; (80068d4 <prvAddNewTaskToReadyList+0xc8>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006850:	429a      	cmp	r2, r3
 8006852:	d802      	bhi.n	800685a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006854:	4a1f      	ldr	r2, [pc, #124]	; (80068d4 <prvAddNewTaskToReadyList+0xc8>)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800685a:	4b20      	ldr	r3, [pc, #128]	; (80068dc <prvAddNewTaskToReadyList+0xd0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3301      	adds	r3, #1
 8006860:	4a1e      	ldr	r2, [pc, #120]	; (80068dc <prvAddNewTaskToReadyList+0xd0>)
 8006862:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006864:	4b1d      	ldr	r3, [pc, #116]	; (80068dc <prvAddNewTaskToReadyList+0xd0>)
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006870:	4b1b      	ldr	r3, [pc, #108]	; (80068e0 <prvAddNewTaskToReadyList+0xd4>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	429a      	cmp	r2, r3
 8006876:	d903      	bls.n	8006880 <prvAddNewTaskToReadyList+0x74>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	4a18      	ldr	r2, [pc, #96]	; (80068e0 <prvAddNewTaskToReadyList+0xd4>)
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006884:	4613      	mov	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4a15      	ldr	r2, [pc, #84]	; (80068e4 <prvAddNewTaskToReadyList+0xd8>)
 800688e:	441a      	add	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3304      	adds	r3, #4
 8006894:	4619      	mov	r1, r3
 8006896:	4610      	mov	r0, r2
 8006898:	f7fe fe69 	bl	800556e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800689c:	f001 fc22 	bl	80080e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068a0:	4b0d      	ldr	r3, [pc, #52]	; (80068d8 <prvAddNewTaskToReadyList+0xcc>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00e      	beq.n	80068c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068a8:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <prvAddNewTaskToReadyList+0xc8>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d207      	bcs.n	80068c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068b6:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <prvAddNewTaskToReadyList+0xdc>)
 80068b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068c6:	bf00      	nop
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	20000cf8 	.word	0x20000cf8
 80068d4:	20000824 	.word	0x20000824
 80068d8:	20000d04 	.word	0x20000d04
 80068dc:	20000d14 	.word	0x20000d14
 80068e0:	20000d00 	.word	0x20000d00
 80068e4:	20000828 	.word	0x20000828
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80068f4:	2300      	movs	r3, #0
 80068f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d017      	beq.n	800692e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80068fe:	4b13      	ldr	r3, [pc, #76]	; (800694c <vTaskDelay+0x60>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <vTaskDelay+0x30>
	__asm volatile
 8006906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	60bb      	str	r3, [r7, #8]
}
 8006918:	bf00      	nop
 800691a:	e7fe      	b.n	800691a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800691c:	f000 f88a 	bl	8006a34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006920:	2100      	movs	r1, #0
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fec2 	bl	80076ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006928:	f000 f892 	bl	8006a50 <xTaskResumeAll>
 800692c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d107      	bne.n	8006944 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006934:	4b06      	ldr	r3, [pc, #24]	; (8006950 <vTaskDelay+0x64>)
 8006936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006944:	bf00      	nop
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	20000d20 	.word	0x20000d20
 8006950:	e000ed04 	.word	0xe000ed04

08006954 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08a      	sub	sp, #40	; 0x28
 8006958:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800695a:	2300      	movs	r3, #0
 800695c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800695e:	2300      	movs	r3, #0
 8006960:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006962:	463a      	mov	r2, r7
 8006964:	1d39      	adds	r1, r7, #4
 8006966:	f107 0308 	add.w	r3, r7, #8
 800696a:	4618      	mov	r0, r3
 800696c:	f7fe fbb0 	bl	80050d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	9202      	str	r2, [sp, #8]
 8006978:	9301      	str	r3, [sp, #4]
 800697a:	2300      	movs	r3, #0
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	2300      	movs	r3, #0
 8006980:	460a      	mov	r2, r1
 8006982:	4924      	ldr	r1, [pc, #144]	; (8006a14 <vTaskStartScheduler+0xc0>)
 8006984:	4824      	ldr	r0, [pc, #144]	; (8006a18 <vTaskStartScheduler+0xc4>)
 8006986:	f7ff fdf9 	bl	800657c <xTaskCreateStatic>
 800698a:	4603      	mov	r3, r0
 800698c:	4a23      	ldr	r2, [pc, #140]	; (8006a1c <vTaskStartScheduler+0xc8>)
 800698e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006990:	4b22      	ldr	r3, [pc, #136]	; (8006a1c <vTaskStartScheduler+0xc8>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006998:	2301      	movs	r3, #1
 800699a:	617b      	str	r3, [r7, #20]
 800699c:	e001      	b.n	80069a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800699e:	2300      	movs	r3, #0
 80069a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d102      	bne.n	80069ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80069a8:	f000 fed4 	bl	8007754 <xTimerCreateTimerTask>
 80069ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d11b      	bne.n	80069ec <vTaskStartScheduler+0x98>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	613b      	str	r3, [r7, #16]
}
 80069c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069c8:	4b15      	ldr	r3, [pc, #84]	; (8006a20 <vTaskStartScheduler+0xcc>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3354      	adds	r3, #84	; 0x54
 80069ce:	4a15      	ldr	r2, [pc, #84]	; (8006a24 <vTaskStartScheduler+0xd0>)
 80069d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069d2:	4b15      	ldr	r3, [pc, #84]	; (8006a28 <vTaskStartScheduler+0xd4>)
 80069d4:	f04f 32ff 	mov.w	r2, #4294967295
 80069d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069da:	4b14      	ldr	r3, [pc, #80]	; (8006a2c <vTaskStartScheduler+0xd8>)
 80069dc:	2201      	movs	r2, #1
 80069de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069e0:	4b13      	ldr	r3, [pc, #76]	; (8006a30 <vTaskStartScheduler+0xdc>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069e6:	f001 faab 	bl	8007f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069ea:	e00e      	b.n	8006a0a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f2:	d10a      	bne.n	8006a0a <vTaskStartScheduler+0xb6>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	60fb      	str	r3, [r7, #12]
}
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <vTaskStartScheduler+0xb4>
}
 8006a0a:	bf00      	nop
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	08009de0 	.word	0x08009de0
 8006a18:	08007195 	.word	0x08007195
 8006a1c:	20000d1c 	.word	0x20000d1c
 8006a20:	20000824 	.word	0x20000824
 8006a24:	20000018 	.word	0x20000018
 8006a28:	20000d18 	.word	0x20000d18
 8006a2c:	20000d04 	.word	0x20000d04
 8006a30:	20000cfc 	.word	0x20000cfc

08006a34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a38:	4b04      	ldr	r3, [pc, #16]	; (8006a4c <vTaskSuspendAll+0x18>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	4a03      	ldr	r2, [pc, #12]	; (8006a4c <vTaskSuspendAll+0x18>)
 8006a40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a42:	bf00      	nop
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	20000d20 	.word	0x20000d20

08006a50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a5e:	4b42      	ldr	r3, [pc, #264]	; (8006b68 <xTaskResumeAll+0x118>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10a      	bne.n	8006a7c <xTaskResumeAll+0x2c>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	603b      	str	r3, [r7, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	e7fe      	b.n	8006a7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a7c:	f001 fb02 	bl	8008084 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a80:	4b39      	ldr	r3, [pc, #228]	; (8006b68 <xTaskResumeAll+0x118>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	4a38      	ldr	r2, [pc, #224]	; (8006b68 <xTaskResumeAll+0x118>)
 8006a88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a8a:	4b37      	ldr	r3, [pc, #220]	; (8006b68 <xTaskResumeAll+0x118>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d162      	bne.n	8006b58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a92:	4b36      	ldr	r3, [pc, #216]	; (8006b6c <xTaskResumeAll+0x11c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d05e      	beq.n	8006b58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a9a:	e02f      	b.n	8006afc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a9c:	4b34      	ldr	r3, [pc, #208]	; (8006b70 <xTaskResumeAll+0x120>)
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3318      	adds	r3, #24
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fe fdbd 	bl	8005628 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe fdb8 	bl	8005628 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abc:	4b2d      	ldr	r3, [pc, #180]	; (8006b74 <xTaskResumeAll+0x124>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d903      	bls.n	8006acc <xTaskResumeAll+0x7c>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac8:	4a2a      	ldr	r2, [pc, #168]	; (8006b74 <xTaskResumeAll+0x124>)
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4a27      	ldr	r2, [pc, #156]	; (8006b78 <xTaskResumeAll+0x128>)
 8006ada:	441a      	add	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	f7fe fd43 	bl	800556e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aec:	4b23      	ldr	r3, [pc, #140]	; (8006b7c <xTaskResumeAll+0x12c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d302      	bcc.n	8006afc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006af6:	4b22      	ldr	r3, [pc, #136]	; (8006b80 <xTaskResumeAll+0x130>)
 8006af8:	2201      	movs	r2, #1
 8006afa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006afc:	4b1c      	ldr	r3, [pc, #112]	; (8006b70 <xTaskResumeAll+0x120>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1cb      	bne.n	8006a9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b0a:	f000 fbfd 	bl	8007308 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b0e:	4b1d      	ldr	r3, [pc, #116]	; (8006b84 <xTaskResumeAll+0x134>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d010      	beq.n	8006b3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b1a:	f000 f847 	bl	8006bac <xTaskIncrementTick>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006b24:	4b16      	ldr	r3, [pc, #88]	; (8006b80 <xTaskResumeAll+0x130>)
 8006b26:	2201      	movs	r2, #1
 8006b28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f1      	bne.n	8006b1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006b36:	4b13      	ldr	r3, [pc, #76]	; (8006b84 <xTaskResumeAll+0x134>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b3c:	4b10      	ldr	r3, [pc, #64]	; (8006b80 <xTaskResumeAll+0x130>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d009      	beq.n	8006b58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b44:	2301      	movs	r3, #1
 8006b46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b48:	4b0f      	ldr	r3, [pc, #60]	; (8006b88 <xTaskResumeAll+0x138>)
 8006b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b58:	f001 fac4 	bl	80080e4 <vPortExitCritical>

	return xAlreadyYielded;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20000d20 	.word	0x20000d20
 8006b6c:	20000cf8 	.word	0x20000cf8
 8006b70:	20000cb8 	.word	0x20000cb8
 8006b74:	20000d00 	.word	0x20000d00
 8006b78:	20000828 	.word	0x20000828
 8006b7c:	20000824 	.word	0x20000824
 8006b80:	20000d0c 	.word	0x20000d0c
 8006b84:	20000d08 	.word	0x20000d08
 8006b88:	e000ed04 	.word	0xe000ed04

08006b8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b92:	4b05      	ldr	r3, [pc, #20]	; (8006ba8 <xTaskGetTickCount+0x1c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b98:	687b      	ldr	r3, [r7, #4]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	20000cfc 	.word	0x20000cfc

08006bac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bb6:	4b4f      	ldr	r3, [pc, #316]	; (8006cf4 <xTaskIncrementTick+0x148>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f040 808f 	bne.w	8006cde <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bc0:	4b4d      	ldr	r3, [pc, #308]	; (8006cf8 <xTaskIncrementTick+0x14c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bc8:	4a4b      	ldr	r2, [pc, #300]	; (8006cf8 <xTaskIncrementTick+0x14c>)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d120      	bne.n	8006c16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bd4:	4b49      	ldr	r3, [pc, #292]	; (8006cfc <xTaskIncrementTick+0x150>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00a      	beq.n	8006bf4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	603b      	str	r3, [r7, #0]
}
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <xTaskIncrementTick+0x46>
 8006bf4:	4b41      	ldr	r3, [pc, #260]	; (8006cfc <xTaskIncrementTick+0x150>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	4b41      	ldr	r3, [pc, #260]	; (8006d00 <xTaskIncrementTick+0x154>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a3f      	ldr	r2, [pc, #252]	; (8006cfc <xTaskIncrementTick+0x150>)
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	4a3f      	ldr	r2, [pc, #252]	; (8006d00 <xTaskIncrementTick+0x154>)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	4b3e      	ldr	r3, [pc, #248]	; (8006d04 <xTaskIncrementTick+0x158>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	4a3d      	ldr	r2, [pc, #244]	; (8006d04 <xTaskIncrementTick+0x158>)
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	f000 fb79 	bl	8007308 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c16:	4b3c      	ldr	r3, [pc, #240]	; (8006d08 <xTaskIncrementTick+0x15c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d349      	bcc.n	8006cb4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c20:	4b36      	ldr	r3, [pc, #216]	; (8006cfc <xTaskIncrementTick+0x150>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d104      	bne.n	8006c34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c2a:	4b37      	ldr	r3, [pc, #220]	; (8006d08 <xTaskIncrementTick+0x15c>)
 8006c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c30:	601a      	str	r2, [r3, #0]
					break;
 8006c32:	e03f      	b.n	8006cb4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c34:	4b31      	ldr	r3, [pc, #196]	; (8006cfc <xTaskIncrementTick+0x150>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d203      	bcs.n	8006c54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c4c:	4a2e      	ldr	r2, [pc, #184]	; (8006d08 <xTaskIncrementTick+0x15c>)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c52:	e02f      	b.n	8006cb4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fe fce5 	bl	8005628 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d004      	beq.n	8006c70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	3318      	adds	r3, #24
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe fcdc 	bl	8005628 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c74:	4b25      	ldr	r3, [pc, #148]	; (8006d0c <xTaskIncrementTick+0x160>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d903      	bls.n	8006c84 <xTaskIncrementTick+0xd8>
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	4a22      	ldr	r2, [pc, #136]	; (8006d0c <xTaskIncrementTick+0x160>)
 8006c82:	6013      	str	r3, [r2, #0]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4a1f      	ldr	r2, [pc, #124]	; (8006d10 <xTaskIncrementTick+0x164>)
 8006c92:	441a      	add	r2, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	f7fe fc67 	bl	800556e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca4:	4b1b      	ldr	r3, [pc, #108]	; (8006d14 <xTaskIncrementTick+0x168>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d3b8      	bcc.n	8006c20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cb2:	e7b5      	b.n	8006c20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cb4:	4b17      	ldr	r3, [pc, #92]	; (8006d14 <xTaskIncrementTick+0x168>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cba:	4915      	ldr	r1, [pc, #84]	; (8006d10 <xTaskIncrementTick+0x164>)
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d901      	bls.n	8006cd0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006cd0:	4b11      	ldr	r3, [pc, #68]	; (8006d18 <xTaskIncrementTick+0x16c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d007      	beq.n	8006ce8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	e004      	b.n	8006ce8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006cde:	4b0f      	ldr	r3, [pc, #60]	; (8006d1c <xTaskIncrementTick+0x170>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	4a0d      	ldr	r2, [pc, #52]	; (8006d1c <xTaskIncrementTick+0x170>)
 8006ce6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006ce8:	697b      	ldr	r3, [r7, #20]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000d20 	.word	0x20000d20
 8006cf8:	20000cfc 	.word	0x20000cfc
 8006cfc:	20000cb0 	.word	0x20000cb0
 8006d00:	20000cb4 	.word	0x20000cb4
 8006d04:	20000d10 	.word	0x20000d10
 8006d08:	20000d18 	.word	0x20000d18
 8006d0c:	20000d00 	.word	0x20000d00
 8006d10:	20000828 	.word	0x20000828
 8006d14:	20000824 	.word	0x20000824
 8006d18:	20000d0c 	.word	0x20000d0c
 8006d1c:	20000d08 	.word	0x20000d08

08006d20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d26:	4b2a      	ldr	r3, [pc, #168]	; (8006dd0 <vTaskSwitchContext+0xb0>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d2e:	4b29      	ldr	r3, [pc, #164]	; (8006dd4 <vTaskSwitchContext+0xb4>)
 8006d30:	2201      	movs	r2, #1
 8006d32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d34:	e046      	b.n	8006dc4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006d36:	4b27      	ldr	r3, [pc, #156]	; (8006dd4 <vTaskSwitchContext+0xb4>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d3c:	4b26      	ldr	r3, [pc, #152]	; (8006dd8 <vTaskSwitchContext+0xb8>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	e010      	b.n	8006d66 <vTaskSwitchContext+0x46>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10a      	bne.n	8006d60 <vTaskSwitchContext+0x40>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	607b      	str	r3, [r7, #4]
}
 8006d5c:	bf00      	nop
 8006d5e:	e7fe      	b.n	8006d5e <vTaskSwitchContext+0x3e>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	3b01      	subs	r3, #1
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	491d      	ldr	r1, [pc, #116]	; (8006ddc <vTaskSwitchContext+0xbc>)
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0e4      	beq.n	8006d44 <vTaskSwitchContext+0x24>
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4a15      	ldr	r2, [pc, #84]	; (8006ddc <vTaskSwitchContext+0xbc>)
 8006d86:	4413      	add	r3, r2
 8006d88:	60bb      	str	r3, [r7, #8]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	605a      	str	r2, [r3, #4]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d104      	bne.n	8006daa <vTaskSwitchContext+0x8a>
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	605a      	str	r2, [r3, #4]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	4a0b      	ldr	r2, [pc, #44]	; (8006de0 <vTaskSwitchContext+0xc0>)
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	4a08      	ldr	r2, [pc, #32]	; (8006dd8 <vTaskSwitchContext+0xb8>)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006dba:	4b09      	ldr	r3, [pc, #36]	; (8006de0 <vTaskSwitchContext+0xc0>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3354      	adds	r3, #84	; 0x54
 8006dc0:	4a08      	ldr	r2, [pc, #32]	; (8006de4 <vTaskSwitchContext+0xc4>)
 8006dc2:	6013      	str	r3, [r2, #0]
}
 8006dc4:	bf00      	nop
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	20000d20 	.word	0x20000d20
 8006dd4:	20000d0c 	.word	0x20000d0c
 8006dd8:	20000d00 	.word	0x20000d00
 8006ddc:	20000828 	.word	0x20000828
 8006de0:	20000824 	.word	0x20000824
 8006de4:	20000018 	.word	0x20000018

08006de8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	60fb      	str	r3, [r7, #12]
}
 8006e0a:	bf00      	nop
 8006e0c:	e7fe      	b.n	8006e0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e0e:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <vTaskPlaceOnEventList+0x44>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3318      	adds	r3, #24
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7fe fbcd 	bl	80055b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	6838      	ldr	r0, [r7, #0]
 8006e20:	f000 fc44 	bl	80076ac <prvAddCurrentTaskToDelayedList>
}
 8006e24:	bf00      	nop
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	20000824 	.word	0x20000824

08006e30 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10a      	bne.n	8006e58 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	617b      	str	r3, [r7, #20]
}
 8006e54:	bf00      	nop
 8006e56:	e7fe      	b.n	8006e56 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006e58:	4b11      	ldr	r3, [pc, #68]	; (8006ea0 <vTaskPlaceOnUnorderedEventList+0x70>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10a      	bne.n	8006e76 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	613b      	str	r3, [r7, #16]
}
 8006e72:	bf00      	nop
 8006e74:	e7fe      	b.n	8006e74 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006e76:	4b0b      	ldr	r3, [pc, #44]	; (8006ea4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006e80:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e82:	4b08      	ldr	r3, [pc, #32]	; (8006ea4 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	3318      	adds	r3, #24
 8006e88:	4619      	mov	r1, r3
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f7fe fb6f 	bl	800556e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e90:	2101      	movs	r1, #1
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fc0a 	bl	80076ac <prvAddCurrentTaskToDelayedList>
}
 8006e98:	bf00      	nop
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	20000d20 	.word	0x20000d20
 8006ea4:	20000824 	.word	0x20000824

08006ea8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10a      	bne.n	8006ed0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	617b      	str	r3, [r7, #20]
}
 8006ecc:	bf00      	nop
 8006ece:	e7fe      	b.n	8006ece <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ed0:	4b0a      	ldr	r3, [pc, #40]	; (8006efc <vTaskPlaceOnEventListRestricted+0x54>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3318      	adds	r3, #24
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f7fe fb48 	bl	800556e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	68b8      	ldr	r0, [r7, #8]
 8006eee:	f000 fbdd 	bl	80076ac <prvAddCurrentTaskToDelayedList>
	}
 8006ef2:	bf00      	nop
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20000824 	.word	0x20000824

08006f00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10a      	bne.n	8006f2c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	60fb      	str	r3, [r7, #12]
}
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	3318      	adds	r3, #24
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe fb79 	bl	8005628 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f36:	4b1e      	ldr	r3, [pc, #120]	; (8006fb0 <xTaskRemoveFromEventList+0xb0>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d11d      	bne.n	8006f7a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	3304      	adds	r3, #4
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fe fb70 	bl	8005628 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4c:	4b19      	ldr	r3, [pc, #100]	; (8006fb4 <xTaskRemoveFromEventList+0xb4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d903      	bls.n	8006f5c <xTaskRemoveFromEventList+0x5c>
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	4a16      	ldr	r2, [pc, #88]	; (8006fb4 <xTaskRemoveFromEventList+0xb4>)
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4a13      	ldr	r2, [pc, #76]	; (8006fb8 <xTaskRemoveFromEventList+0xb8>)
 8006f6a:	441a      	add	r2, r3
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	3304      	adds	r3, #4
 8006f70:	4619      	mov	r1, r3
 8006f72:	4610      	mov	r0, r2
 8006f74:	f7fe fafb 	bl	800556e <vListInsertEnd>
 8006f78:	e005      	b.n	8006f86 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	3318      	adds	r3, #24
 8006f7e:	4619      	mov	r1, r3
 8006f80:	480e      	ldr	r0, [pc, #56]	; (8006fbc <xTaskRemoveFromEventList+0xbc>)
 8006f82:	f7fe faf4 	bl	800556e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8a:	4b0d      	ldr	r3, [pc, #52]	; (8006fc0 <xTaskRemoveFromEventList+0xc0>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d905      	bls.n	8006fa0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f94:	2301      	movs	r3, #1
 8006f96:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f98:	4b0a      	ldr	r3, [pc, #40]	; (8006fc4 <xTaskRemoveFromEventList+0xc4>)
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	e001      	b.n	8006fa4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006fa4:	697b      	ldr	r3, [r7, #20]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000d20 	.word	0x20000d20
 8006fb4:	20000d00 	.word	0x20000d00
 8006fb8:	20000828 	.word	0x20000828
 8006fbc:	20000cb8 	.word	0x20000cb8
 8006fc0:	20000824 	.word	0x20000824
 8006fc4:	20000d0c 	.word	0x20000d0c

08006fc8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006fd2:	4b29      	ldr	r3, [pc, #164]	; (8007078 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10a      	bne.n	8006ff0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	613b      	str	r3, [r7, #16]
}
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10a      	bne.n	800701c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8007006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	60fb      	str	r3, [r7, #12]
}
 8007018:	bf00      	nop
 800701a:	e7fe      	b.n	800701a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7fe fb03 	bl	8005628 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	3304      	adds	r3, #4
 8007026:	4618      	mov	r0, r3
 8007028:	f7fe fafe 	bl	8005628 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007030:	4b12      	ldr	r3, [pc, #72]	; (800707c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	429a      	cmp	r2, r3
 8007036:	d903      	bls.n	8007040 <vTaskRemoveFromUnorderedEventList+0x78>
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703c:	4a0f      	ldr	r2, [pc, #60]	; (800707c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007044:	4613      	mov	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4a0c      	ldr	r2, [pc, #48]	; (8007080 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800704e:	441a      	add	r2, r3
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	3304      	adds	r3, #4
 8007054:	4619      	mov	r1, r3
 8007056:	4610      	mov	r0, r2
 8007058:	f7fe fa89 	bl	800556e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007060:	4b08      	ldr	r3, [pc, #32]	; (8007084 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007066:	429a      	cmp	r2, r3
 8007068:	d902      	bls.n	8007070 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800706a:	4b07      	ldr	r3, [pc, #28]	; (8007088 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800706c:	2201      	movs	r2, #1
 800706e:	601a      	str	r2, [r3, #0]
	}
}
 8007070:	bf00      	nop
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	20000d20 	.word	0x20000d20
 800707c:	20000d00 	.word	0x20000d00
 8007080:	20000828 	.word	0x20000828
 8007084:	20000824 	.word	0x20000824
 8007088:	20000d0c 	.word	0x20000d0c

0800708c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007094:	4b06      	ldr	r3, [pc, #24]	; (80070b0 <vTaskInternalSetTimeOutState+0x24>)
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800709c:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <vTaskInternalSetTimeOutState+0x28>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	605a      	str	r2, [r3, #4]
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	20000d10 	.word	0x20000d10
 80070b4:	20000cfc 	.word	0x20000cfc

080070b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b088      	sub	sp, #32
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10a      	bne.n	80070de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	613b      	str	r3, [r7, #16]
}
 80070da:	bf00      	nop
 80070dc:	e7fe      	b.n	80070dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10a      	bne.n	80070fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	60fb      	str	r3, [r7, #12]
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80070fa:	f000 ffc3 	bl	8008084 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070fe:	4b1d      	ldr	r3, [pc, #116]	; (8007174 <xTaskCheckForTimeOut+0xbc>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007116:	d102      	bne.n	800711e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007118:	2300      	movs	r3, #0
 800711a:	61fb      	str	r3, [r7, #28]
 800711c:	e023      	b.n	8007166 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	4b15      	ldr	r3, [pc, #84]	; (8007178 <xTaskCheckForTimeOut+0xc0>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d007      	beq.n	800713a <xTaskCheckForTimeOut+0x82>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	429a      	cmp	r2, r3
 8007132:	d302      	bcc.n	800713a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007134:	2301      	movs	r3, #1
 8007136:	61fb      	str	r3, [r7, #28]
 8007138:	e015      	b.n	8007166 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	429a      	cmp	r2, r3
 8007142:	d20b      	bcs.n	800715c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	1ad2      	subs	r2, r2, r3
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff ff9b 	bl	800708c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007156:	2300      	movs	r3, #0
 8007158:	61fb      	str	r3, [r7, #28]
 800715a:	e004      	b.n	8007166 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007162:	2301      	movs	r3, #1
 8007164:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007166:	f000 ffbd 	bl	80080e4 <vPortExitCritical>

	return xReturn;
 800716a:	69fb      	ldr	r3, [r7, #28]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3720      	adds	r7, #32
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20000cfc 	.word	0x20000cfc
 8007178:	20000d10 	.word	0x20000d10

0800717c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007180:	4b03      	ldr	r3, [pc, #12]	; (8007190 <vTaskMissedYield+0x14>)
 8007182:	2201      	movs	r2, #1
 8007184:	601a      	str	r2, [r3, #0]
}
 8007186:	bf00      	nop
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	20000d0c 	.word	0x20000d0c

08007194 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800719c:	f000 f852 	bl	8007244 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071a0:	4b06      	ldr	r3, [pc, #24]	; (80071bc <prvIdleTask+0x28>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d9f9      	bls.n	800719c <prvIdleTask+0x8>
			{
				taskYIELD();
 80071a8:	4b05      	ldr	r3, [pc, #20]	; (80071c0 <prvIdleTask+0x2c>)
 80071aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071b8:	e7f0      	b.n	800719c <prvIdleTask+0x8>
 80071ba:	bf00      	nop
 80071bc:	20000828 	.word	0x20000828
 80071c0:	e000ed04 	.word	0xe000ed04

080071c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071ca:	2300      	movs	r3, #0
 80071cc:	607b      	str	r3, [r7, #4]
 80071ce:	e00c      	b.n	80071ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	4613      	mov	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4a12      	ldr	r2, [pc, #72]	; (8007224 <prvInitialiseTaskLists+0x60>)
 80071dc:	4413      	add	r3, r2
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe f998 	bl	8005514 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3301      	adds	r3, #1
 80071e8:	607b      	str	r3, [r7, #4]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b37      	cmp	r3, #55	; 0x37
 80071ee:	d9ef      	bls.n	80071d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071f0:	480d      	ldr	r0, [pc, #52]	; (8007228 <prvInitialiseTaskLists+0x64>)
 80071f2:	f7fe f98f 	bl	8005514 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071f6:	480d      	ldr	r0, [pc, #52]	; (800722c <prvInitialiseTaskLists+0x68>)
 80071f8:	f7fe f98c 	bl	8005514 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071fc:	480c      	ldr	r0, [pc, #48]	; (8007230 <prvInitialiseTaskLists+0x6c>)
 80071fe:	f7fe f989 	bl	8005514 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007202:	480c      	ldr	r0, [pc, #48]	; (8007234 <prvInitialiseTaskLists+0x70>)
 8007204:	f7fe f986 	bl	8005514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007208:	480b      	ldr	r0, [pc, #44]	; (8007238 <prvInitialiseTaskLists+0x74>)
 800720a:	f7fe f983 	bl	8005514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800720e:	4b0b      	ldr	r3, [pc, #44]	; (800723c <prvInitialiseTaskLists+0x78>)
 8007210:	4a05      	ldr	r2, [pc, #20]	; (8007228 <prvInitialiseTaskLists+0x64>)
 8007212:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007214:	4b0a      	ldr	r3, [pc, #40]	; (8007240 <prvInitialiseTaskLists+0x7c>)
 8007216:	4a05      	ldr	r2, [pc, #20]	; (800722c <prvInitialiseTaskLists+0x68>)
 8007218:	601a      	str	r2, [r3, #0]
}
 800721a:	bf00      	nop
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20000828 	.word	0x20000828
 8007228:	20000c88 	.word	0x20000c88
 800722c:	20000c9c 	.word	0x20000c9c
 8007230:	20000cb8 	.word	0x20000cb8
 8007234:	20000ccc 	.word	0x20000ccc
 8007238:	20000ce4 	.word	0x20000ce4
 800723c:	20000cb0 	.word	0x20000cb0
 8007240:	20000cb4 	.word	0x20000cb4

08007244 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800724a:	e019      	b.n	8007280 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800724c:	f000 ff1a 	bl	8008084 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007250:	4b10      	ldr	r3, [pc, #64]	; (8007294 <prvCheckTasksWaitingTermination+0x50>)
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3304      	adds	r3, #4
 800725c:	4618      	mov	r0, r3
 800725e:	f7fe f9e3 	bl	8005628 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007262:	4b0d      	ldr	r3, [pc, #52]	; (8007298 <prvCheckTasksWaitingTermination+0x54>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3b01      	subs	r3, #1
 8007268:	4a0b      	ldr	r2, [pc, #44]	; (8007298 <prvCheckTasksWaitingTermination+0x54>)
 800726a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800726c:	4b0b      	ldr	r3, [pc, #44]	; (800729c <prvCheckTasksWaitingTermination+0x58>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3b01      	subs	r3, #1
 8007272:	4a0a      	ldr	r2, [pc, #40]	; (800729c <prvCheckTasksWaitingTermination+0x58>)
 8007274:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007276:	f000 ff35 	bl	80080e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f810 	bl	80072a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007280:	4b06      	ldr	r3, [pc, #24]	; (800729c <prvCheckTasksWaitingTermination+0x58>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e1      	bne.n	800724c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007288:	bf00      	nop
 800728a:	bf00      	nop
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20000ccc 	.word	0x20000ccc
 8007298:	20000cf8 	.word	0x20000cf8
 800729c:	20000ce0 	.word	0x20000ce0

080072a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3354      	adds	r3, #84	; 0x54
 80072ac:	4618      	mov	r0, r3
 80072ae:	f001 fbd7 	bl	8008a60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d108      	bne.n	80072ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c0:	4618      	mov	r0, r3
 80072c2:	f001 f8cd 	bl	8008460 <vPortFree>
				vPortFree( pxTCB );
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f001 f8ca 	bl	8008460 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072cc:	e018      	b.n	8007300 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d103      	bne.n	80072e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f001 f8c1 	bl	8008460 <vPortFree>
	}
 80072de:	e00f      	b.n	8007300 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d00a      	beq.n	8007300 <prvDeleteTCB+0x60>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	60fb      	str	r3, [r7, #12]
}
 80072fc:	bf00      	nop
 80072fe:	e7fe      	b.n	80072fe <prvDeleteTCB+0x5e>
	}
 8007300:	bf00      	nop
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800730e:	4b0c      	ldr	r3, [pc, #48]	; (8007340 <prvResetNextTaskUnblockTime+0x38>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d104      	bne.n	8007322 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007318:	4b0a      	ldr	r3, [pc, #40]	; (8007344 <prvResetNextTaskUnblockTime+0x3c>)
 800731a:	f04f 32ff 	mov.w	r2, #4294967295
 800731e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007320:	e008      	b.n	8007334 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007322:	4b07      	ldr	r3, [pc, #28]	; (8007340 <prvResetNextTaskUnblockTime+0x38>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	4a04      	ldr	r2, [pc, #16]	; (8007344 <prvResetNextTaskUnblockTime+0x3c>)
 8007332:	6013      	str	r3, [r2, #0]
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	20000cb0 	.word	0x20000cb0
 8007344:	20000d18 	.word	0x20000d18

08007348 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800734e:	4b05      	ldr	r3, [pc, #20]	; (8007364 <xTaskGetCurrentTaskHandle+0x1c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007354:	687b      	ldr	r3, [r7, #4]
	}
 8007356:	4618      	mov	r0, r3
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	20000824 	.word	0x20000824

08007368 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800736e:	4b0b      	ldr	r3, [pc, #44]	; (800739c <xTaskGetSchedulerState+0x34>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d102      	bne.n	800737c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007376:	2301      	movs	r3, #1
 8007378:	607b      	str	r3, [r7, #4]
 800737a:	e008      	b.n	800738e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800737c:	4b08      	ldr	r3, [pc, #32]	; (80073a0 <xTaskGetSchedulerState+0x38>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d102      	bne.n	800738a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007384:	2302      	movs	r3, #2
 8007386:	607b      	str	r3, [r7, #4]
 8007388:	e001      	b.n	800738e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800738a:	2300      	movs	r3, #0
 800738c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800738e:	687b      	ldr	r3, [r7, #4]
	}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	20000d04 	.word	0x20000d04
 80073a0:	20000d20 	.word	0x20000d20

080073a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80073b0:	2300      	movs	r3, #0
 80073b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d051      	beq.n	800745e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073be:	4b2a      	ldr	r3, [pc, #168]	; (8007468 <xTaskPriorityInherit+0xc4>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d241      	bcs.n	800744c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	db06      	blt.n	80073de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073d0:	4b25      	ldr	r3, [pc, #148]	; (8007468 <xTaskPriorityInherit+0xc4>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	6959      	ldr	r1, [r3, #20]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4a1f      	ldr	r2, [pc, #124]	; (800746c <xTaskPriorityInherit+0xc8>)
 80073f0:	4413      	add	r3, r2
 80073f2:	4299      	cmp	r1, r3
 80073f4:	d122      	bne.n	800743c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	3304      	adds	r3, #4
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe f914 	bl	8005628 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007400:	4b19      	ldr	r3, [pc, #100]	; (8007468 <xTaskPriorityInherit+0xc4>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740e:	4b18      	ldr	r3, [pc, #96]	; (8007470 <xTaskPriorityInherit+0xcc>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	429a      	cmp	r2, r3
 8007414:	d903      	bls.n	800741e <xTaskPriorityInherit+0x7a>
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741a:	4a15      	ldr	r2, [pc, #84]	; (8007470 <xTaskPriorityInherit+0xcc>)
 800741c:	6013      	str	r3, [r2, #0]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007422:	4613      	mov	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4a10      	ldr	r2, [pc, #64]	; (800746c <xTaskPriorityInherit+0xc8>)
 800742c:	441a      	add	r2, r3
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	3304      	adds	r3, #4
 8007432:	4619      	mov	r1, r3
 8007434:	4610      	mov	r0, r2
 8007436:	f7fe f89a 	bl	800556e <vListInsertEnd>
 800743a:	e004      	b.n	8007446 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800743c:	4b0a      	ldr	r3, [pc, #40]	; (8007468 <xTaskPriorityInherit+0xc4>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007446:	2301      	movs	r3, #1
 8007448:	60fb      	str	r3, [r7, #12]
 800744a:	e008      	b.n	800745e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007450:	4b05      	ldr	r3, [pc, #20]	; (8007468 <xTaskPriorityInherit+0xc4>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007456:	429a      	cmp	r2, r3
 8007458:	d201      	bcs.n	800745e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800745a:	2301      	movs	r3, #1
 800745c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800745e:	68fb      	ldr	r3, [r7, #12]
	}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	20000824 	.word	0x20000824
 800746c:	20000828 	.word	0x20000828
 8007470:	20000d00 	.word	0x20000d00

08007474 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007480:	2300      	movs	r3, #0
 8007482:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d056      	beq.n	8007538 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800748a:	4b2e      	ldr	r3, [pc, #184]	; (8007544 <xTaskPriorityDisinherit+0xd0>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	429a      	cmp	r2, r3
 8007492:	d00a      	beq.n	80074aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	60fb      	str	r3, [r7, #12]
}
 80074a6:	bf00      	nop
 80074a8:	e7fe      	b.n	80074a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10a      	bne.n	80074c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	60bb      	str	r3, [r7, #8]
}
 80074c4:	bf00      	nop
 80074c6:	e7fe      	b.n	80074c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074cc:	1e5a      	subs	r2, r3, #1
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074da:	429a      	cmp	r2, r3
 80074dc:	d02c      	beq.n	8007538 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d128      	bne.n	8007538 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	3304      	adds	r3, #4
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fe f89c 	bl	8005628 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007508:	4b0f      	ldr	r3, [pc, #60]	; (8007548 <xTaskPriorityDisinherit+0xd4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d903      	bls.n	8007518 <xTaskPriorityDisinherit+0xa4>
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	4a0c      	ldr	r2, [pc, #48]	; (8007548 <xTaskPriorityDisinherit+0xd4>)
 8007516:	6013      	str	r3, [r2, #0]
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4a09      	ldr	r2, [pc, #36]	; (800754c <xTaskPriorityDisinherit+0xd8>)
 8007526:	441a      	add	r2, r3
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	3304      	adds	r3, #4
 800752c:	4619      	mov	r1, r3
 800752e:	4610      	mov	r0, r2
 8007530:	f7fe f81d 	bl	800556e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007534:	2301      	movs	r3, #1
 8007536:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007538:	697b      	ldr	r3, [r7, #20]
	}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20000824 	.word	0x20000824
 8007548:	20000d00 	.word	0x20000d00
 800754c:	20000828 	.word	0x20000828

08007550 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800755e:	2301      	movs	r3, #1
 8007560:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d06a      	beq.n	800763e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10a      	bne.n	8007586 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	60fb      	str	r3, [r7, #12]
}
 8007582:	bf00      	nop
 8007584:	e7fe      	b.n	8007584 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	429a      	cmp	r2, r3
 800758e:	d902      	bls.n	8007596 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	61fb      	str	r3, [r7, #28]
 8007594:	e002      	b.n	800759c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800759a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	69fa      	ldr	r2, [r7, #28]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d04b      	beq.n	800763e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d146      	bne.n	800763e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80075b0:	4b25      	ldr	r3, [pc, #148]	; (8007648 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d10a      	bne.n	80075d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	60bb      	str	r3, [r7, #8]
}
 80075cc:	bf00      	nop
 80075ce:	e7fe      	b.n	80075ce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	69fa      	ldr	r2, [r7, #28]
 80075da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	db04      	blt.n	80075ee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	6959      	ldr	r1, [r3, #20]
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	4613      	mov	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4a13      	ldr	r2, [pc, #76]	; (800764c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80075fe:	4413      	add	r3, r2
 8007600:	4299      	cmp	r1, r3
 8007602:	d11c      	bne.n	800763e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	3304      	adds	r3, #4
 8007608:	4618      	mov	r0, r3
 800760a:	f7fe f80d 	bl	8005628 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007612:	4b0f      	ldr	r3, [pc, #60]	; (8007650 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d903      	bls.n	8007622 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761e:	4a0c      	ldr	r2, [pc, #48]	; (8007650 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4a07      	ldr	r2, [pc, #28]	; (800764c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007630:	441a      	add	r2, r3
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	3304      	adds	r3, #4
 8007636:	4619      	mov	r1, r3
 8007638:	4610      	mov	r0, r2
 800763a:	f7fd ff98 	bl	800556e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800763e:	bf00      	nop
 8007640:	3720      	adds	r7, #32
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20000824 	.word	0x20000824
 800764c:	20000828 	.word	0x20000828
 8007650:	20000d00 	.word	0x20000d00

08007654 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800765a:	4b09      	ldr	r3, [pc, #36]	; (8007680 <uxTaskResetEventItemValue+0x2c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007662:	4b07      	ldr	r3, [pc, #28]	; (8007680 <uxTaskResetEventItemValue+0x2c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007668:	4b05      	ldr	r3, [pc, #20]	; (8007680 <uxTaskResetEventItemValue+0x2c>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007670:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007672:	687b      	ldr	r3, [r7, #4]
}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	20000824 	.word	0x20000824

08007684 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007688:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d004      	beq.n	800769a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007690:	4b05      	ldr	r3, [pc, #20]	; (80076a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007696:	3201      	adds	r2, #1
 8007698:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800769a:	4b03      	ldr	r3, [pc, #12]	; (80076a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800769c:	681b      	ldr	r3, [r3, #0]
	}
 800769e:	4618      	mov	r0, r3
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	20000824 	.word	0x20000824

080076ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076b6:	4b21      	ldr	r3, [pc, #132]	; (800773c <prvAddCurrentTaskToDelayedList+0x90>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076bc:	4b20      	ldr	r3, [pc, #128]	; (8007740 <prvAddCurrentTaskToDelayedList+0x94>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3304      	adds	r3, #4
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fd ffb0 	bl	8005628 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ce:	d10a      	bne.n	80076e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d007      	beq.n	80076e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076d6:	4b1a      	ldr	r3, [pc, #104]	; (8007740 <prvAddCurrentTaskToDelayedList+0x94>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3304      	adds	r3, #4
 80076dc:	4619      	mov	r1, r3
 80076de:	4819      	ldr	r0, [pc, #100]	; (8007744 <prvAddCurrentTaskToDelayedList+0x98>)
 80076e0:	f7fd ff45 	bl	800556e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076e4:	e026      	b.n	8007734 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4413      	add	r3, r2
 80076ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076ee:	4b14      	ldr	r3, [pc, #80]	; (8007740 <prvAddCurrentTaskToDelayedList+0x94>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d209      	bcs.n	8007712 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076fe:	4b12      	ldr	r3, [pc, #72]	; (8007748 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <prvAddCurrentTaskToDelayedList+0x94>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3304      	adds	r3, #4
 8007708:	4619      	mov	r1, r3
 800770a:	4610      	mov	r0, r2
 800770c:	f7fd ff53 	bl	80055b6 <vListInsert>
}
 8007710:	e010      	b.n	8007734 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007712:	4b0e      	ldr	r3, [pc, #56]	; (800774c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <prvAddCurrentTaskToDelayedList+0x94>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3304      	adds	r3, #4
 800771c:	4619      	mov	r1, r3
 800771e:	4610      	mov	r0, r2
 8007720:	f7fd ff49 	bl	80055b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007724:	4b0a      	ldr	r3, [pc, #40]	; (8007750 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	429a      	cmp	r2, r3
 800772c:	d202      	bcs.n	8007734 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800772e:	4a08      	ldr	r2, [pc, #32]	; (8007750 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	6013      	str	r3, [r2, #0]
}
 8007734:	bf00      	nop
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	20000cfc 	.word	0x20000cfc
 8007740:	20000824 	.word	0x20000824
 8007744:	20000ce4 	.word	0x20000ce4
 8007748:	20000cb4 	.word	0x20000cb4
 800774c:	20000cb0 	.word	0x20000cb0
 8007750:	20000d18 	.word	0x20000d18

08007754 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08a      	sub	sp, #40	; 0x28
 8007758:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800775a:	2300      	movs	r3, #0
 800775c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800775e:	f000 fb07 	bl	8007d70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007762:	4b1c      	ldr	r3, [pc, #112]	; (80077d4 <xTimerCreateTimerTask+0x80>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d021      	beq.n	80077ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800776e:	2300      	movs	r3, #0
 8007770:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007772:	1d3a      	adds	r2, r7, #4
 8007774:	f107 0108 	add.w	r1, r7, #8
 8007778:	f107 030c 	add.w	r3, r7, #12
 800777c:	4618      	mov	r0, r3
 800777e:	f7fd fcc1 	bl	8005104 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	9202      	str	r2, [sp, #8]
 800778a:	9301      	str	r3, [sp, #4]
 800778c:	2302      	movs	r3, #2
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	2300      	movs	r3, #0
 8007792:	460a      	mov	r2, r1
 8007794:	4910      	ldr	r1, [pc, #64]	; (80077d8 <xTimerCreateTimerTask+0x84>)
 8007796:	4811      	ldr	r0, [pc, #68]	; (80077dc <xTimerCreateTimerTask+0x88>)
 8007798:	f7fe fef0 	bl	800657c <xTaskCreateStatic>
 800779c:	4603      	mov	r3, r0
 800779e:	4a10      	ldr	r2, [pc, #64]	; (80077e0 <xTimerCreateTimerTask+0x8c>)
 80077a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80077a2:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <xTimerCreateTimerTask+0x8c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077aa:	2301      	movs	r3, #1
 80077ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10a      	bne.n	80077ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	613b      	str	r3, [r7, #16]
}
 80077c6:	bf00      	nop
 80077c8:	e7fe      	b.n	80077c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80077ca:	697b      	ldr	r3, [r7, #20]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3718      	adds	r7, #24
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	20000d54 	.word	0x20000d54
 80077d8:	08009de8 	.word	0x08009de8
 80077dc:	08007919 	.word	0x08007919
 80077e0:	20000d58 	.word	0x20000d58

080077e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08a      	sub	sp, #40	; 0x28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10a      	bne.n	8007812 <xTimerGenericCommand+0x2e>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	623b      	str	r3, [r7, #32]
}
 800780e:	bf00      	nop
 8007810:	e7fe      	b.n	8007810 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007812:	4b1a      	ldr	r3, [pc, #104]	; (800787c <xTimerGenericCommand+0x98>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d02a      	beq.n	8007870 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b05      	cmp	r3, #5
 800782a:	dc18      	bgt.n	800785e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800782c:	f7ff fd9c 	bl	8007368 <xTaskGetSchedulerState>
 8007830:	4603      	mov	r3, r0
 8007832:	2b02      	cmp	r3, #2
 8007834:	d109      	bne.n	800784a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007836:	4b11      	ldr	r3, [pc, #68]	; (800787c <xTimerGenericCommand+0x98>)
 8007838:	6818      	ldr	r0, [r3, #0]
 800783a:	f107 0110 	add.w	r1, r7, #16
 800783e:	2300      	movs	r3, #0
 8007840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007842:	f7fe f90f 	bl	8005a64 <xQueueGenericSend>
 8007846:	6278      	str	r0, [r7, #36]	; 0x24
 8007848:	e012      	b.n	8007870 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800784a:	4b0c      	ldr	r3, [pc, #48]	; (800787c <xTimerGenericCommand+0x98>)
 800784c:	6818      	ldr	r0, [r3, #0]
 800784e:	f107 0110 	add.w	r1, r7, #16
 8007852:	2300      	movs	r3, #0
 8007854:	2200      	movs	r2, #0
 8007856:	f7fe f905 	bl	8005a64 <xQueueGenericSend>
 800785a:	6278      	str	r0, [r7, #36]	; 0x24
 800785c:	e008      	b.n	8007870 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800785e:	4b07      	ldr	r3, [pc, #28]	; (800787c <xTimerGenericCommand+0x98>)
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	f107 0110 	add.w	r1, r7, #16
 8007866:	2300      	movs	r3, #0
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	f7fe f9f9 	bl	8005c60 <xQueueGenericSendFromISR>
 800786e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007872:	4618      	mov	r0, r3
 8007874:	3728      	adds	r7, #40	; 0x28
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	20000d54 	.word	0x20000d54

08007880 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af02      	add	r7, sp, #8
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800788a:	4b22      	ldr	r3, [pc, #136]	; (8007914 <prvProcessExpiredTimer+0x94>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	3304      	adds	r3, #4
 8007898:	4618      	mov	r0, r3
 800789a:	f7fd fec5 	bl	8005628 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d022      	beq.n	80078f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	699a      	ldr	r2, [r3, #24]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	18d1      	adds	r1, r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	6978      	ldr	r0, [r7, #20]
 80078ba:	f000 f8d1 	bl	8007a60 <prvInsertTimerInActiveList>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d01f      	beq.n	8007904 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078c4:	2300      	movs	r3, #0
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	2300      	movs	r3, #0
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	2100      	movs	r1, #0
 80078ce:	6978      	ldr	r0, [r7, #20]
 80078d0:	f7ff ff88 	bl	80077e4 <xTimerGenericCommand>
 80078d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d113      	bne.n	8007904 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	60fb      	str	r3, [r7, #12]
}
 80078ee:	bf00      	nop
 80078f0:	e7fe      	b.n	80078f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078f8:	f023 0301 	bic.w	r3, r3, #1
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	6a1b      	ldr	r3, [r3, #32]
 8007908:	6978      	ldr	r0, [r7, #20]
 800790a:	4798      	blx	r3
}
 800790c:	bf00      	nop
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	20000d4c 	.word	0x20000d4c

08007918 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007920:	f107 0308 	add.w	r3, r7, #8
 8007924:	4618      	mov	r0, r3
 8007926:	f000 f857 	bl	80079d8 <prvGetNextExpireTime>
 800792a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	4619      	mov	r1, r3
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 f803 	bl	800793c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007936:	f000 f8d5 	bl	8007ae4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800793a:	e7f1      	b.n	8007920 <prvTimerTask+0x8>

0800793c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007946:	f7ff f875 	bl	8006a34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800794a:	f107 0308 	add.w	r3, r7, #8
 800794e:	4618      	mov	r0, r3
 8007950:	f000 f866 	bl	8007a20 <prvSampleTimeNow>
 8007954:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d130      	bne.n	80079be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10a      	bne.n	8007978 <prvProcessTimerOrBlockTask+0x3c>
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	429a      	cmp	r2, r3
 8007968:	d806      	bhi.n	8007978 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800796a:	f7ff f871 	bl	8006a50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800796e:	68f9      	ldr	r1, [r7, #12]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff ff85 	bl	8007880 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007976:	e024      	b.n	80079c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d008      	beq.n	8007990 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800797e:	4b13      	ldr	r3, [pc, #76]	; (80079cc <prvProcessTimerOrBlockTask+0x90>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <prvProcessTimerOrBlockTask+0x50>
 8007988:	2301      	movs	r3, #1
 800798a:	e000      	b.n	800798e <prvProcessTimerOrBlockTask+0x52>
 800798c:	2300      	movs	r3, #0
 800798e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007990:	4b0f      	ldr	r3, [pc, #60]	; (80079d0 <prvProcessTimerOrBlockTask+0x94>)
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	4619      	mov	r1, r3
 800799e:	f7fe fdb9 	bl	8006514 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079a2:	f7ff f855 	bl	8006a50 <xTaskResumeAll>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10a      	bne.n	80079c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80079ac:	4b09      	ldr	r3, [pc, #36]	; (80079d4 <prvProcessTimerOrBlockTask+0x98>)
 80079ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	f3bf 8f6f 	isb	sy
}
 80079bc:	e001      	b.n	80079c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80079be:	f7ff f847 	bl	8006a50 <xTaskResumeAll>
}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20000d50 	.word	0x20000d50
 80079d0:	20000d54 	.word	0x20000d54
 80079d4:	e000ed04 	.word	0xe000ed04

080079d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079e0:	4b0e      	ldr	r3, [pc, #56]	; (8007a1c <prvGetNextExpireTime+0x44>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <prvGetNextExpireTime+0x16>
 80079ea:	2201      	movs	r2, #1
 80079ec:	e000      	b.n	80079f0 <prvGetNextExpireTime+0x18>
 80079ee:	2200      	movs	r2, #0
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d105      	bne.n	8007a08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079fc:	4b07      	ldr	r3, [pc, #28]	; (8007a1c <prvGetNextExpireTime+0x44>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	e001      	b.n	8007a0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	20000d4c 	.word	0x20000d4c

08007a20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a28:	f7ff f8b0 	bl	8006b8c <xTaskGetTickCount>
 8007a2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a2e:	4b0b      	ldr	r3, [pc, #44]	; (8007a5c <prvSampleTimeNow+0x3c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d205      	bcs.n	8007a44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a38:	f000 f936 	bl	8007ca8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	e002      	b.n	8007a4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a4a:	4a04      	ldr	r2, [pc, #16]	; (8007a5c <prvSampleTimeNow+0x3c>)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a50:	68fb      	ldr	r3, [r7, #12]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20000d5c 	.word	0x20000d5c

08007a60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
 8007a6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d812      	bhi.n	8007aac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	1ad2      	subs	r2, r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d302      	bcc.n	8007a9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a94:	2301      	movs	r3, #1
 8007a96:	617b      	str	r3, [r7, #20]
 8007a98:	e01b      	b.n	8007ad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a9a:	4b10      	ldr	r3, [pc, #64]	; (8007adc <prvInsertTimerInActiveList+0x7c>)
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	f7fd fd86 	bl	80055b6 <vListInsert>
 8007aaa:	e012      	b.n	8007ad2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d206      	bcs.n	8007ac2 <prvInsertTimerInActiveList+0x62>
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d302      	bcc.n	8007ac2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007abc:	2301      	movs	r3, #1
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	e007      	b.n	8007ad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ac2:	4b07      	ldr	r3, [pc, #28]	; (8007ae0 <prvInsertTimerInActiveList+0x80>)
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f7fd fd72 	bl	80055b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ad2:	697b      	ldr	r3, [r7, #20]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	20000d50 	.word	0x20000d50
 8007ae0:	20000d4c 	.word	0x20000d4c

08007ae4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b08e      	sub	sp, #56	; 0x38
 8007ae8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007aea:	e0ca      	b.n	8007c82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	da18      	bge.n	8007b24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007af2:	1d3b      	adds	r3, r7, #4
 8007af4:	3304      	adds	r3, #4
 8007af6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10a      	bne.n	8007b14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	61fb      	str	r3, [r7, #28]
}
 8007b10:	bf00      	nop
 8007b12:	e7fe      	b.n	8007b12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b1a:	6850      	ldr	r0, [r2, #4]
 8007b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b1e:	6892      	ldr	r2, [r2, #8]
 8007b20:	4611      	mov	r1, r2
 8007b22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f2c0 80aa 	blt.w	8007c80 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d004      	beq.n	8007b42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fd fd73 	bl	8005628 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b42:	463b      	mov	r3, r7
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7ff ff6b 	bl	8007a20 <prvSampleTimeNow>
 8007b4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b09      	cmp	r3, #9
 8007b50:	f200 8097 	bhi.w	8007c82 <prvProcessReceivedCommands+0x19e>
 8007b54:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <prvProcessReceivedCommands+0x78>)
 8007b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5a:	bf00      	nop
 8007b5c:	08007b85 	.word	0x08007b85
 8007b60:	08007b85 	.word	0x08007b85
 8007b64:	08007b85 	.word	0x08007b85
 8007b68:	08007bf9 	.word	0x08007bf9
 8007b6c:	08007c0d 	.word	0x08007c0d
 8007b70:	08007c57 	.word	0x08007c57
 8007b74:	08007b85 	.word	0x08007b85
 8007b78:	08007b85 	.word	0x08007b85
 8007b7c:	08007bf9 	.word	0x08007bf9
 8007b80:	08007c0d 	.word	0x08007c0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b8a:	f043 0301 	orr.w	r3, r3, #1
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	18d1      	adds	r1, r2, r3
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ba4:	f7ff ff5c 	bl	8007a60 <prvInsertTimerInActiveList>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d069      	beq.n	8007c82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d05e      	beq.n	8007c82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	441a      	add	r2, r3
 8007bcc:	2300      	movs	r3, #0
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bd6:	f7ff fe05 	bl	80077e4 <xTimerGenericCommand>
 8007bda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d14f      	bne.n	8007c82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	61bb      	str	r3, [r7, #24]
}
 8007bf4:	bf00      	nop
 8007bf6:	e7fe      	b.n	8007bf6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bfe:	f023 0301 	bic.w	r3, r3, #1
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007c0a:	e03a      	b.n	8007c82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c12:	f043 0301 	orr.w	r3, r3, #1
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10a      	bne.n	8007c42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	617b      	str	r3, [r7, #20]
}
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c44:	699a      	ldr	r2, [r3, #24]
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	18d1      	adds	r1, r2, r3
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c50:	f7ff ff06 	bl	8007a60 <prvInsertTimerInActiveList>
					break;
 8007c54:	e015      	b.n	8007c82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c5c:	f003 0302 	and.w	r3, r3, #2
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d103      	bne.n	8007c6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c66:	f000 fbfb 	bl	8008460 <vPortFree>
 8007c6a:	e00a      	b.n	8007c82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c72:	f023 0301 	bic.w	r3, r3, #1
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c7e:	e000      	b.n	8007c82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007c80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c82:	4b08      	ldr	r3, [pc, #32]	; (8007ca4 <prvProcessReceivedCommands+0x1c0>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	1d39      	adds	r1, r7, #4
 8007c88:	2200      	movs	r2, #0
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe f884 	bl	8005d98 <xQueueReceive>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f47f af2a 	bne.w	8007aec <prvProcessReceivedCommands+0x8>
	}
}
 8007c98:	bf00      	nop
 8007c9a:	bf00      	nop
 8007c9c:	3730      	adds	r7, #48	; 0x30
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20000d54 	.word	0x20000d54

08007ca8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cae:	e048      	b.n	8007d42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cb0:	4b2d      	ldr	r3, [pc, #180]	; (8007d68 <prvSwitchTimerLists+0xc0>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cba:	4b2b      	ldr	r3, [pc, #172]	; (8007d68 <prvSwitchTimerLists+0xc0>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fd fcad 	bl	8005628 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cdc:	f003 0304 	and.w	r3, r3, #4
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d02e      	beq.n	8007d42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	4413      	add	r3, r2
 8007cec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d90e      	bls.n	8007d14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d02:	4b19      	ldr	r3, [pc, #100]	; (8007d68 <prvSwitchTimerLists+0xc0>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	f7fd fc52 	bl	80055b6 <vListInsert>
 8007d12:	e016      	b.n	8007d42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d14:	2300      	movs	r3, #0
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7ff fd60 	bl	80077e4 <xTimerGenericCommand>
 8007d24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10a      	bne.n	8007d42 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	603b      	str	r3, [r7, #0]
}
 8007d3e:	bf00      	nop
 8007d40:	e7fe      	b.n	8007d40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d42:	4b09      	ldr	r3, [pc, #36]	; (8007d68 <prvSwitchTimerLists+0xc0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1b1      	bne.n	8007cb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d4c:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <prvSwitchTimerLists+0xc0>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d52:	4b06      	ldr	r3, [pc, #24]	; (8007d6c <prvSwitchTimerLists+0xc4>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a04      	ldr	r2, [pc, #16]	; (8007d68 <prvSwitchTimerLists+0xc0>)
 8007d58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d5a:	4a04      	ldr	r2, [pc, #16]	; (8007d6c <prvSwitchTimerLists+0xc4>)
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	6013      	str	r3, [r2, #0]
}
 8007d60:	bf00      	nop
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	20000d4c 	.word	0x20000d4c
 8007d6c:	20000d50 	.word	0x20000d50

08007d70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d76:	f000 f985 	bl	8008084 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d7a:	4b15      	ldr	r3, [pc, #84]	; (8007dd0 <prvCheckForValidListAndQueue+0x60>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d120      	bne.n	8007dc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d82:	4814      	ldr	r0, [pc, #80]	; (8007dd4 <prvCheckForValidListAndQueue+0x64>)
 8007d84:	f7fd fbc6 	bl	8005514 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d88:	4813      	ldr	r0, [pc, #76]	; (8007dd8 <prvCheckForValidListAndQueue+0x68>)
 8007d8a:	f7fd fbc3 	bl	8005514 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d8e:	4b13      	ldr	r3, [pc, #76]	; (8007ddc <prvCheckForValidListAndQueue+0x6c>)
 8007d90:	4a10      	ldr	r2, [pc, #64]	; (8007dd4 <prvCheckForValidListAndQueue+0x64>)
 8007d92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d94:	4b12      	ldr	r3, [pc, #72]	; (8007de0 <prvCheckForValidListAndQueue+0x70>)
 8007d96:	4a10      	ldr	r2, [pc, #64]	; (8007dd8 <prvCheckForValidListAndQueue+0x68>)
 8007d98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	4b11      	ldr	r3, [pc, #68]	; (8007de4 <prvCheckForValidListAndQueue+0x74>)
 8007da0:	4a11      	ldr	r2, [pc, #68]	; (8007de8 <prvCheckForValidListAndQueue+0x78>)
 8007da2:	2110      	movs	r1, #16
 8007da4:	200a      	movs	r0, #10
 8007da6:	f7fd fcd1 	bl	800574c <xQueueGenericCreateStatic>
 8007daa:	4603      	mov	r3, r0
 8007dac:	4a08      	ldr	r2, [pc, #32]	; (8007dd0 <prvCheckForValidListAndQueue+0x60>)
 8007dae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007db0:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <prvCheckForValidListAndQueue+0x60>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d005      	beq.n	8007dc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007db8:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <prvCheckForValidListAndQueue+0x60>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	490b      	ldr	r1, [pc, #44]	; (8007dec <prvCheckForValidListAndQueue+0x7c>)
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe fb7e 	bl	80064c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dc4:	f000 f98e 	bl	80080e4 <vPortExitCritical>
}
 8007dc8:	bf00      	nop
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000d54 	.word	0x20000d54
 8007dd4:	20000d24 	.word	0x20000d24
 8007dd8:	20000d38 	.word	0x20000d38
 8007ddc:	20000d4c 	.word	0x20000d4c
 8007de0:	20000d50 	.word	0x20000d50
 8007de4:	20000e00 	.word	0x20000e00
 8007de8:	20000d60 	.word	0x20000d60
 8007dec:	08009df0 	.word	0x08009df0

08007df0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08a      	sub	sp, #40	; 0x28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007dfe:	f06f 0301 	mvn.w	r3, #1
 8007e02:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e10:	4b06      	ldr	r3, [pc, #24]	; (8007e2c <xTimerPendFunctionCallFromISR+0x3c>)
 8007e12:	6818      	ldr	r0, [r3, #0]
 8007e14:	f107 0114 	add.w	r1, r7, #20
 8007e18:	2300      	movs	r3, #0
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	f7fd ff20 	bl	8005c60 <xQueueGenericSendFromISR>
 8007e20:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3728      	adds	r7, #40	; 0x28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	20000d54 	.word	0x20000d54

08007e30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3b04      	subs	r3, #4
 8007e40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	3b04      	subs	r3, #4
 8007e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f023 0201 	bic.w	r2, r3, #1
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3b04      	subs	r3, #4
 8007e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e60:	4a0c      	ldr	r2, [pc, #48]	; (8007e94 <pxPortInitialiseStack+0x64>)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3b14      	subs	r3, #20
 8007e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3b04      	subs	r3, #4
 8007e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f06f 0202 	mvn.w	r2, #2
 8007e7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3b20      	subs	r3, #32
 8007e84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e86:	68fb      	ldr	r3, [r7, #12]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	08007e99 	.word	0x08007e99

08007e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ea2:	4b12      	ldr	r3, [pc, #72]	; (8007eec <prvTaskExitError+0x54>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eaa:	d00a      	beq.n	8007ec2 <prvTaskExitError+0x2a>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	60fb      	str	r3, [r7, #12]
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <prvTaskExitError+0x28>
	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	60bb      	str	r3, [r7, #8]
}
 8007ed4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ed6:	bf00      	nop
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0fc      	beq.n	8007ed8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ede:	bf00      	nop
 8007ee0:	bf00      	nop
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	20000014 	.word	0x20000014

08007ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ef0:	4b07      	ldr	r3, [pc, #28]	; (8007f10 <pxCurrentTCBConst2>)
 8007ef2:	6819      	ldr	r1, [r3, #0]
 8007ef4:	6808      	ldr	r0, [r1, #0]
 8007ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efa:	f380 8809 	msr	PSP, r0
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f04f 0000 	mov.w	r0, #0
 8007f06:	f380 8811 	msr	BASEPRI, r0
 8007f0a:	4770      	bx	lr
 8007f0c:	f3af 8000 	nop.w

08007f10 <pxCurrentTCBConst2>:
 8007f10:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop

08007f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f18:	4808      	ldr	r0, [pc, #32]	; (8007f3c <prvPortStartFirstTask+0x24>)
 8007f1a:	6800      	ldr	r0, [r0, #0]
 8007f1c:	6800      	ldr	r0, [r0, #0]
 8007f1e:	f380 8808 	msr	MSP, r0
 8007f22:	f04f 0000 	mov.w	r0, #0
 8007f26:	f380 8814 	msr	CONTROL, r0
 8007f2a:	b662      	cpsie	i
 8007f2c:	b661      	cpsie	f
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	df00      	svc	0
 8007f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f3a:	bf00      	nop
 8007f3c:	e000ed08 	.word	0xe000ed08

08007f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f46:	4b46      	ldr	r3, [pc, #280]	; (8008060 <xPortStartScheduler+0x120>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a46      	ldr	r2, [pc, #280]	; (8008064 <xPortStartScheduler+0x124>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d10a      	bne.n	8007f66 <xPortStartScheduler+0x26>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	613b      	str	r3, [r7, #16]
}
 8007f62:	bf00      	nop
 8007f64:	e7fe      	b.n	8007f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f66:	4b3e      	ldr	r3, [pc, #248]	; (8008060 <xPortStartScheduler+0x120>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a3f      	ldr	r2, [pc, #252]	; (8008068 <xPortStartScheduler+0x128>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d10a      	bne.n	8007f86 <xPortStartScheduler+0x46>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	60fb      	str	r3, [r7, #12]
}
 8007f82:	bf00      	nop
 8007f84:	e7fe      	b.n	8007f84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f86:	4b39      	ldr	r3, [pc, #228]	; (800806c <xPortStartScheduler+0x12c>)
 8007f88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	22ff      	movs	r2, #255	; 0xff
 8007f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	4b31      	ldr	r3, [pc, #196]	; (8008070 <xPortStartScheduler+0x130>)
 8007fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fae:	4b31      	ldr	r3, [pc, #196]	; (8008074 <xPortStartScheduler+0x134>)
 8007fb0:	2207      	movs	r2, #7
 8007fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fb4:	e009      	b.n	8007fca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007fb6:	4b2f      	ldr	r3, [pc, #188]	; (8008074 <xPortStartScheduler+0x134>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	4a2d      	ldr	r2, [pc, #180]	; (8008074 <xPortStartScheduler+0x134>)
 8007fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd2:	2b80      	cmp	r3, #128	; 0x80
 8007fd4:	d0ef      	beq.n	8007fb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fd6:	4b27      	ldr	r3, [pc, #156]	; (8008074 <xPortStartScheduler+0x134>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f1c3 0307 	rsb	r3, r3, #7
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	d00a      	beq.n	8007ff8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	60bb      	str	r3, [r7, #8]
}
 8007ff4:	bf00      	nop
 8007ff6:	e7fe      	b.n	8007ff6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ff8:	4b1e      	ldr	r3, [pc, #120]	; (8008074 <xPortStartScheduler+0x134>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	021b      	lsls	r3, r3, #8
 8007ffe:	4a1d      	ldr	r2, [pc, #116]	; (8008074 <xPortStartScheduler+0x134>)
 8008000:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008002:	4b1c      	ldr	r3, [pc, #112]	; (8008074 <xPortStartScheduler+0x134>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800800a:	4a1a      	ldr	r2, [pc, #104]	; (8008074 <xPortStartScheduler+0x134>)
 800800c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	b2da      	uxtb	r2, r3
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008016:	4b18      	ldr	r3, [pc, #96]	; (8008078 <xPortStartScheduler+0x138>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a17      	ldr	r2, [pc, #92]	; (8008078 <xPortStartScheduler+0x138>)
 800801c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008022:	4b15      	ldr	r3, [pc, #84]	; (8008078 <xPortStartScheduler+0x138>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a14      	ldr	r2, [pc, #80]	; (8008078 <xPortStartScheduler+0x138>)
 8008028:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800802c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800802e:	f000 f8dd 	bl	80081ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008032:	4b12      	ldr	r3, [pc, #72]	; (800807c <xPortStartScheduler+0x13c>)
 8008034:	2200      	movs	r2, #0
 8008036:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008038:	f000 f8fc 	bl	8008234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800803c:	4b10      	ldr	r3, [pc, #64]	; (8008080 <xPortStartScheduler+0x140>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a0f      	ldr	r2, [pc, #60]	; (8008080 <xPortStartScheduler+0x140>)
 8008042:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008046:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008048:	f7ff ff66 	bl	8007f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800804c:	f7fe fe68 	bl	8006d20 <vTaskSwitchContext>
	prvTaskExitError();
 8008050:	f7ff ff22 	bl	8007e98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	e000ed00 	.word	0xe000ed00
 8008064:	410fc271 	.word	0x410fc271
 8008068:	410fc270 	.word	0x410fc270
 800806c:	e000e400 	.word	0xe000e400
 8008070:	20000e50 	.word	0x20000e50
 8008074:	20000e54 	.word	0x20000e54
 8008078:	e000ed20 	.word	0xe000ed20
 800807c:	20000014 	.word	0x20000014
 8008080:	e000ef34 	.word	0xe000ef34

08008084 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	607b      	str	r3, [r7, #4]
}
 800809c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800809e:	4b0f      	ldr	r3, [pc, #60]	; (80080dc <vPortEnterCritical+0x58>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3301      	adds	r3, #1
 80080a4:	4a0d      	ldr	r2, [pc, #52]	; (80080dc <vPortEnterCritical+0x58>)
 80080a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080a8:	4b0c      	ldr	r3, [pc, #48]	; (80080dc <vPortEnterCritical+0x58>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d10f      	bne.n	80080d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080b0:	4b0b      	ldr	r3, [pc, #44]	; (80080e0 <vPortEnterCritical+0x5c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	603b      	str	r3, [r7, #0]
}
 80080cc:	bf00      	nop
 80080ce:	e7fe      	b.n	80080ce <vPortEnterCritical+0x4a>
	}
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	20000014 	.word	0x20000014
 80080e0:	e000ed04 	.word	0xe000ed04

080080e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080ea:	4b12      	ldr	r3, [pc, #72]	; (8008134 <vPortExitCritical+0x50>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10a      	bne.n	8008108 <vPortExitCritical+0x24>
	__asm volatile
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	607b      	str	r3, [r7, #4]
}
 8008104:	bf00      	nop
 8008106:	e7fe      	b.n	8008106 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008108:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <vPortExitCritical+0x50>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3b01      	subs	r3, #1
 800810e:	4a09      	ldr	r2, [pc, #36]	; (8008134 <vPortExitCritical+0x50>)
 8008110:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008112:	4b08      	ldr	r3, [pc, #32]	; (8008134 <vPortExitCritical+0x50>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d105      	bne.n	8008126 <vPortExitCritical+0x42>
 800811a:	2300      	movs	r3, #0
 800811c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	f383 8811 	msr	BASEPRI, r3
}
 8008124:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008126:	bf00      	nop
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	20000014 	.word	0x20000014
	...

08008140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008140:	f3ef 8009 	mrs	r0, PSP
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	4b15      	ldr	r3, [pc, #84]	; (80081a0 <pxCurrentTCBConst>)
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	f01e 0f10 	tst.w	lr, #16
 8008150:	bf08      	it	eq
 8008152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815a:	6010      	str	r0, [r2, #0]
 800815c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008160:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008164:	f380 8811 	msr	BASEPRI, r0
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f7fe fdd6 	bl	8006d20 <vTaskSwitchContext>
 8008174:	f04f 0000 	mov.w	r0, #0
 8008178:	f380 8811 	msr	BASEPRI, r0
 800817c:	bc09      	pop	{r0, r3}
 800817e:	6819      	ldr	r1, [r3, #0]
 8008180:	6808      	ldr	r0, [r1, #0]
 8008182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008186:	f01e 0f10 	tst.w	lr, #16
 800818a:	bf08      	it	eq
 800818c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008190:	f380 8809 	msr	PSP, r0
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	f3af 8000 	nop.w

080081a0 <pxCurrentTCBConst>:
 80081a0:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop

080081a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	607b      	str	r3, [r7, #4]
}
 80081c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081c2:	f7fe fcf3 	bl	8006bac <xTaskIncrementTick>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081cc:	4b06      	ldr	r3, [pc, #24]	; (80081e8 <xPortSysTickHandler+0x40>)
 80081ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	2300      	movs	r3, #0
 80081d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	f383 8811 	msr	BASEPRI, r3
}
 80081de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	e000ed04 	.word	0xe000ed04

080081ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081ec:	b480      	push	{r7}
 80081ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081f0:	4b0b      	ldr	r3, [pc, #44]	; (8008220 <vPortSetupTimerInterrupt+0x34>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081f6:	4b0b      	ldr	r3, [pc, #44]	; (8008224 <vPortSetupTimerInterrupt+0x38>)
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081fc:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <vPortSetupTimerInterrupt+0x3c>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a0a      	ldr	r2, [pc, #40]	; (800822c <vPortSetupTimerInterrupt+0x40>)
 8008202:	fba2 2303 	umull	r2, r3, r2, r3
 8008206:	099b      	lsrs	r3, r3, #6
 8008208:	4a09      	ldr	r2, [pc, #36]	; (8008230 <vPortSetupTimerInterrupt+0x44>)
 800820a:	3b01      	subs	r3, #1
 800820c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800820e:	4b04      	ldr	r3, [pc, #16]	; (8008220 <vPortSetupTimerInterrupt+0x34>)
 8008210:	2207      	movs	r2, #7
 8008212:	601a      	str	r2, [r3, #0]
}
 8008214:	bf00      	nop
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	e000e010 	.word	0xe000e010
 8008224:	e000e018 	.word	0xe000e018
 8008228:	20000008 	.word	0x20000008
 800822c:	10624dd3 	.word	0x10624dd3
 8008230:	e000e014 	.word	0xe000e014

08008234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008234:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008244 <vPortEnableVFP+0x10>
 8008238:	6801      	ldr	r1, [r0, #0]
 800823a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800823e:	6001      	str	r1, [r0, #0]
 8008240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008242:	bf00      	nop
 8008244:	e000ed88 	.word	0xe000ed88

08008248 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800824e:	f3ef 8305 	mrs	r3, IPSR
 8008252:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b0f      	cmp	r3, #15
 8008258:	d914      	bls.n	8008284 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800825a:	4a17      	ldr	r2, [pc, #92]	; (80082b8 <vPortValidateInterruptPriority+0x70>)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4413      	add	r3, r2
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008264:	4b15      	ldr	r3, [pc, #84]	; (80082bc <vPortValidateInterruptPriority+0x74>)
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	7afa      	ldrb	r2, [r7, #11]
 800826a:	429a      	cmp	r2, r3
 800826c:	d20a      	bcs.n	8008284 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	607b      	str	r3, [r7, #4]
}
 8008280:	bf00      	nop
 8008282:	e7fe      	b.n	8008282 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008284:	4b0e      	ldr	r3, [pc, #56]	; (80082c0 <vPortValidateInterruptPriority+0x78>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800828c:	4b0d      	ldr	r3, [pc, #52]	; (80082c4 <vPortValidateInterruptPriority+0x7c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	429a      	cmp	r2, r3
 8008292:	d90a      	bls.n	80082aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	603b      	str	r3, [r7, #0]
}
 80082a6:	bf00      	nop
 80082a8:	e7fe      	b.n	80082a8 <vPortValidateInterruptPriority+0x60>
	}
 80082aa:	bf00      	nop
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	e000e3f0 	.word	0xe000e3f0
 80082bc:	20000e50 	.word	0x20000e50
 80082c0:	e000ed0c 	.word	0xe000ed0c
 80082c4:	20000e54 	.word	0x20000e54

080082c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08a      	sub	sp, #40	; 0x28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082d0:	2300      	movs	r3, #0
 80082d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082d4:	f7fe fbae 	bl	8006a34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082d8:	4b5b      	ldr	r3, [pc, #364]	; (8008448 <pvPortMalloc+0x180>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082e0:	f000 f920 	bl	8008524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082e4:	4b59      	ldr	r3, [pc, #356]	; (800844c <pvPortMalloc+0x184>)
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4013      	ands	r3, r2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f040 8093 	bne.w	8008418 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d01d      	beq.n	8008334 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80082f8:	2208      	movs	r2, #8
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4413      	add	r3, r2
 80082fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f003 0307 	and.w	r3, r3, #7
 8008306:	2b00      	cmp	r3, #0
 8008308:	d014      	beq.n	8008334 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f023 0307 	bic.w	r3, r3, #7
 8008310:	3308      	adds	r3, #8
 8008312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f003 0307 	and.w	r3, r3, #7
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <pvPortMalloc+0x6c>
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	617b      	str	r3, [r7, #20]
}
 8008330:	bf00      	nop
 8008332:	e7fe      	b.n	8008332 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d06e      	beq.n	8008418 <pvPortMalloc+0x150>
 800833a:	4b45      	ldr	r3, [pc, #276]	; (8008450 <pvPortMalloc+0x188>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	429a      	cmp	r2, r3
 8008342:	d869      	bhi.n	8008418 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008344:	4b43      	ldr	r3, [pc, #268]	; (8008454 <pvPortMalloc+0x18c>)
 8008346:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008348:	4b42      	ldr	r3, [pc, #264]	; (8008454 <pvPortMalloc+0x18c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800834e:	e004      	b.n	800835a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	429a      	cmp	r2, r3
 8008362:	d903      	bls.n	800836c <pvPortMalloc+0xa4>
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1f1      	bne.n	8008350 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800836c:	4b36      	ldr	r3, [pc, #216]	; (8008448 <pvPortMalloc+0x180>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008372:	429a      	cmp	r2, r3
 8008374:	d050      	beq.n	8008418 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2208      	movs	r2, #8
 800837c:	4413      	add	r3, r2
 800837e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	1ad2      	subs	r2, r2, r3
 8008390:	2308      	movs	r3, #8
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	429a      	cmp	r2, r3
 8008396:	d91f      	bls.n	80083d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4413      	add	r3, r2
 800839e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	f003 0307 	and.w	r3, r3, #7
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00a      	beq.n	80083c0 <pvPortMalloc+0xf8>
	__asm volatile
 80083aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	613b      	str	r3, [r7, #16]
}
 80083bc:	bf00      	nop
 80083be:	e7fe      	b.n	80083be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	1ad2      	subs	r2, r2, r3
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083d2:	69b8      	ldr	r0, [r7, #24]
 80083d4:	f000 f908 	bl	80085e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083d8:	4b1d      	ldr	r3, [pc, #116]	; (8008450 <pvPortMalloc+0x188>)
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	4a1b      	ldr	r2, [pc, #108]	; (8008450 <pvPortMalloc+0x188>)
 80083e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083e6:	4b1a      	ldr	r3, [pc, #104]	; (8008450 <pvPortMalloc+0x188>)
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	4b1b      	ldr	r3, [pc, #108]	; (8008458 <pvPortMalloc+0x190>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d203      	bcs.n	80083fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083f2:	4b17      	ldr	r3, [pc, #92]	; (8008450 <pvPortMalloc+0x188>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a18      	ldr	r2, [pc, #96]	; (8008458 <pvPortMalloc+0x190>)
 80083f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	4b13      	ldr	r3, [pc, #76]	; (800844c <pvPortMalloc+0x184>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	431a      	orrs	r2, r3
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	2200      	movs	r2, #0
 800840c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800840e:	4b13      	ldr	r3, [pc, #76]	; (800845c <pvPortMalloc+0x194>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3301      	adds	r3, #1
 8008414:	4a11      	ldr	r2, [pc, #68]	; (800845c <pvPortMalloc+0x194>)
 8008416:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008418:	f7fe fb1a 	bl	8006a50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00a      	beq.n	800843c <pvPortMalloc+0x174>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	60fb      	str	r3, [r7, #12]
}
 8008438:	bf00      	nop
 800843a:	e7fe      	b.n	800843a <pvPortMalloc+0x172>
	return pvReturn;
 800843c:	69fb      	ldr	r3, [r7, #28]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3728      	adds	r7, #40	; 0x28
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20004a60 	.word	0x20004a60
 800844c:	20004a74 	.word	0x20004a74
 8008450:	20004a64 	.word	0x20004a64
 8008454:	20004a58 	.word	0x20004a58
 8008458:	20004a68 	.word	0x20004a68
 800845c:	20004a6c 	.word	0x20004a6c

08008460 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d04d      	beq.n	800850e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008472:	2308      	movs	r3, #8
 8008474:	425b      	negs	r3, r3
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	4413      	add	r3, r2
 800847a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	4b24      	ldr	r3, [pc, #144]	; (8008518 <vPortFree+0xb8>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4013      	ands	r3, r2
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10a      	bne.n	80084a4 <vPortFree+0x44>
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	60fb      	str	r3, [r7, #12]
}
 80084a0:	bf00      	nop
 80084a2:	e7fe      	b.n	80084a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00a      	beq.n	80084c2 <vPortFree+0x62>
	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	60bb      	str	r3, [r7, #8]
}
 80084be:	bf00      	nop
 80084c0:	e7fe      	b.n	80084c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	4b14      	ldr	r3, [pc, #80]	; (8008518 <vPortFree+0xb8>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4013      	ands	r3, r2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d01e      	beq.n	800850e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d11a      	bne.n	800850e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	4b0e      	ldr	r3, [pc, #56]	; (8008518 <vPortFree+0xb8>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	43db      	mvns	r3, r3
 80084e2:	401a      	ands	r2, r3
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084e8:	f7fe faa4 	bl	8006a34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	4b0a      	ldr	r3, [pc, #40]	; (800851c <vPortFree+0xbc>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4413      	add	r3, r2
 80084f6:	4a09      	ldr	r2, [pc, #36]	; (800851c <vPortFree+0xbc>)
 80084f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084fa:	6938      	ldr	r0, [r7, #16]
 80084fc:	f000 f874 	bl	80085e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008500:	4b07      	ldr	r3, [pc, #28]	; (8008520 <vPortFree+0xc0>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3301      	adds	r3, #1
 8008506:	4a06      	ldr	r2, [pc, #24]	; (8008520 <vPortFree+0xc0>)
 8008508:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800850a:	f7fe faa1 	bl	8006a50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800850e:	bf00      	nop
 8008510:	3718      	adds	r7, #24
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20004a74 	.word	0x20004a74
 800851c:	20004a64 	.word	0x20004a64
 8008520:	20004a70 	.word	0x20004a70

08008524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800852a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800852e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008530:	4b27      	ldr	r3, [pc, #156]	; (80085d0 <prvHeapInit+0xac>)
 8008532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f003 0307 	and.w	r3, r3, #7
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00c      	beq.n	8008558 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	3307      	adds	r3, #7
 8008542:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f023 0307 	bic.w	r3, r3, #7
 800854a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	4a1f      	ldr	r2, [pc, #124]	; (80085d0 <prvHeapInit+0xac>)
 8008554:	4413      	add	r3, r2
 8008556:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800855c:	4a1d      	ldr	r2, [pc, #116]	; (80085d4 <prvHeapInit+0xb0>)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008562:	4b1c      	ldr	r3, [pc, #112]	; (80085d4 <prvHeapInit+0xb0>)
 8008564:	2200      	movs	r2, #0
 8008566:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	4413      	add	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008570:	2208      	movs	r2, #8
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 0307 	bic.w	r3, r3, #7
 800857e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	4a15      	ldr	r2, [pc, #84]	; (80085d8 <prvHeapInit+0xb4>)
 8008584:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008586:	4b14      	ldr	r3, [pc, #80]	; (80085d8 <prvHeapInit+0xb4>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2200      	movs	r2, #0
 800858c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800858e:	4b12      	ldr	r3, [pc, #72]	; (80085d8 <prvHeapInit+0xb4>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2200      	movs	r2, #0
 8008594:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	1ad2      	subs	r2, r2, r3
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085a4:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <prvHeapInit+0xb4>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	4a0a      	ldr	r2, [pc, #40]	; (80085dc <prvHeapInit+0xb8>)
 80085b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	4a09      	ldr	r2, [pc, #36]	; (80085e0 <prvHeapInit+0xbc>)
 80085ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085bc:	4b09      	ldr	r3, [pc, #36]	; (80085e4 <prvHeapInit+0xc0>)
 80085be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085c2:	601a      	str	r2, [r3, #0]
}
 80085c4:	bf00      	nop
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	20000e58 	.word	0x20000e58
 80085d4:	20004a58 	.word	0x20004a58
 80085d8:	20004a60 	.word	0x20004a60
 80085dc:	20004a68 	.word	0x20004a68
 80085e0:	20004a64 	.word	0x20004a64
 80085e4:	20004a74 	.word	0x20004a74

080085e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085f0:	4b28      	ldr	r3, [pc, #160]	; (8008694 <prvInsertBlockIntoFreeList+0xac>)
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	e002      	b.n	80085fc <prvInsertBlockIntoFreeList+0x14>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	429a      	cmp	r2, r3
 8008604:	d8f7      	bhi.n	80085f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	4413      	add	r3, r2
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	429a      	cmp	r2, r3
 8008616:	d108      	bne.n	800862a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	441a      	add	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	441a      	add	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	429a      	cmp	r2, r3
 800863c:	d118      	bne.n	8008670 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	4b15      	ldr	r3, [pc, #84]	; (8008698 <prvInsertBlockIntoFreeList+0xb0>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	429a      	cmp	r2, r3
 8008648:	d00d      	beq.n	8008666 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	441a      	add	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	e008      	b.n	8008678 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008666:	4b0c      	ldr	r3, [pc, #48]	; (8008698 <prvInsertBlockIntoFreeList+0xb0>)
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	e003      	b.n	8008678 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	429a      	cmp	r2, r3
 800867e:	d002      	beq.n	8008686 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008686:	bf00      	nop
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	20004a58 	.word	0x20004a58
 8008698:	20004a60 	.word	0x20004a60

0800869c <__errno>:
 800869c:	4b01      	ldr	r3, [pc, #4]	; (80086a4 <__errno+0x8>)
 800869e:	6818      	ldr	r0, [r3, #0]
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	20000018 	.word	0x20000018

080086a8 <std>:
 80086a8:	2300      	movs	r3, #0
 80086aa:	b510      	push	{r4, lr}
 80086ac:	4604      	mov	r4, r0
 80086ae:	e9c0 3300 	strd	r3, r3, [r0]
 80086b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086b6:	6083      	str	r3, [r0, #8]
 80086b8:	8181      	strh	r1, [r0, #12]
 80086ba:	6643      	str	r3, [r0, #100]	; 0x64
 80086bc:	81c2      	strh	r2, [r0, #14]
 80086be:	6183      	str	r3, [r0, #24]
 80086c0:	4619      	mov	r1, r3
 80086c2:	2208      	movs	r2, #8
 80086c4:	305c      	adds	r0, #92	; 0x5c
 80086c6:	f000 f91a 	bl	80088fe <memset>
 80086ca:	4b05      	ldr	r3, [pc, #20]	; (80086e0 <std+0x38>)
 80086cc:	6263      	str	r3, [r4, #36]	; 0x24
 80086ce:	4b05      	ldr	r3, [pc, #20]	; (80086e4 <std+0x3c>)
 80086d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80086d2:	4b05      	ldr	r3, [pc, #20]	; (80086e8 <std+0x40>)
 80086d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086d6:	4b05      	ldr	r3, [pc, #20]	; (80086ec <std+0x44>)
 80086d8:	6224      	str	r4, [r4, #32]
 80086da:	6323      	str	r3, [r4, #48]	; 0x30
 80086dc:	bd10      	pop	{r4, pc}
 80086de:	bf00      	nop
 80086e0:	08008b79 	.word	0x08008b79
 80086e4:	08008b9b 	.word	0x08008b9b
 80086e8:	08008bd3 	.word	0x08008bd3
 80086ec:	08008bf7 	.word	0x08008bf7

080086f0 <_cleanup_r>:
 80086f0:	4901      	ldr	r1, [pc, #4]	; (80086f8 <_cleanup_r+0x8>)
 80086f2:	f000 b8af 	b.w	8008854 <_fwalk_reent>
 80086f6:	bf00      	nop
 80086f8:	08008d8d 	.word	0x08008d8d

080086fc <__sfmoreglue>:
 80086fc:	b570      	push	{r4, r5, r6, lr}
 80086fe:	1e4a      	subs	r2, r1, #1
 8008700:	2568      	movs	r5, #104	; 0x68
 8008702:	4355      	muls	r5, r2
 8008704:	460e      	mov	r6, r1
 8008706:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800870a:	f000 f901 	bl	8008910 <_malloc_r>
 800870e:	4604      	mov	r4, r0
 8008710:	b140      	cbz	r0, 8008724 <__sfmoreglue+0x28>
 8008712:	2100      	movs	r1, #0
 8008714:	e9c0 1600 	strd	r1, r6, [r0]
 8008718:	300c      	adds	r0, #12
 800871a:	60a0      	str	r0, [r4, #8]
 800871c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008720:	f000 f8ed 	bl	80088fe <memset>
 8008724:	4620      	mov	r0, r4
 8008726:	bd70      	pop	{r4, r5, r6, pc}

08008728 <__sfp_lock_acquire>:
 8008728:	4801      	ldr	r0, [pc, #4]	; (8008730 <__sfp_lock_acquire+0x8>)
 800872a:	f000 b8d8 	b.w	80088de <__retarget_lock_acquire_recursive>
 800872e:	bf00      	nop
 8008730:	20004cd0 	.word	0x20004cd0

08008734 <__sfp_lock_release>:
 8008734:	4801      	ldr	r0, [pc, #4]	; (800873c <__sfp_lock_release+0x8>)
 8008736:	f000 b8d3 	b.w	80088e0 <__retarget_lock_release_recursive>
 800873a:	bf00      	nop
 800873c:	20004cd0 	.word	0x20004cd0

08008740 <__sinit_lock_acquire>:
 8008740:	4801      	ldr	r0, [pc, #4]	; (8008748 <__sinit_lock_acquire+0x8>)
 8008742:	f000 b8cc 	b.w	80088de <__retarget_lock_acquire_recursive>
 8008746:	bf00      	nop
 8008748:	20004ccb 	.word	0x20004ccb

0800874c <__sinit_lock_release>:
 800874c:	4801      	ldr	r0, [pc, #4]	; (8008754 <__sinit_lock_release+0x8>)
 800874e:	f000 b8c7 	b.w	80088e0 <__retarget_lock_release_recursive>
 8008752:	bf00      	nop
 8008754:	20004ccb 	.word	0x20004ccb

08008758 <__sinit>:
 8008758:	b510      	push	{r4, lr}
 800875a:	4604      	mov	r4, r0
 800875c:	f7ff fff0 	bl	8008740 <__sinit_lock_acquire>
 8008760:	69a3      	ldr	r3, [r4, #24]
 8008762:	b11b      	cbz	r3, 800876c <__sinit+0x14>
 8008764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008768:	f7ff bff0 	b.w	800874c <__sinit_lock_release>
 800876c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008770:	6523      	str	r3, [r4, #80]	; 0x50
 8008772:	4b13      	ldr	r3, [pc, #76]	; (80087c0 <__sinit+0x68>)
 8008774:	4a13      	ldr	r2, [pc, #76]	; (80087c4 <__sinit+0x6c>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	62a2      	str	r2, [r4, #40]	; 0x28
 800877a:	42a3      	cmp	r3, r4
 800877c:	bf04      	itt	eq
 800877e:	2301      	moveq	r3, #1
 8008780:	61a3      	streq	r3, [r4, #24]
 8008782:	4620      	mov	r0, r4
 8008784:	f000 f820 	bl	80087c8 <__sfp>
 8008788:	6060      	str	r0, [r4, #4]
 800878a:	4620      	mov	r0, r4
 800878c:	f000 f81c 	bl	80087c8 <__sfp>
 8008790:	60a0      	str	r0, [r4, #8]
 8008792:	4620      	mov	r0, r4
 8008794:	f000 f818 	bl	80087c8 <__sfp>
 8008798:	2200      	movs	r2, #0
 800879a:	60e0      	str	r0, [r4, #12]
 800879c:	2104      	movs	r1, #4
 800879e:	6860      	ldr	r0, [r4, #4]
 80087a0:	f7ff ff82 	bl	80086a8 <std>
 80087a4:	68a0      	ldr	r0, [r4, #8]
 80087a6:	2201      	movs	r2, #1
 80087a8:	2109      	movs	r1, #9
 80087aa:	f7ff ff7d 	bl	80086a8 <std>
 80087ae:	68e0      	ldr	r0, [r4, #12]
 80087b0:	2202      	movs	r2, #2
 80087b2:	2112      	movs	r1, #18
 80087b4:	f7ff ff78 	bl	80086a8 <std>
 80087b8:	2301      	movs	r3, #1
 80087ba:	61a3      	str	r3, [r4, #24]
 80087bc:	e7d2      	b.n	8008764 <__sinit+0xc>
 80087be:	bf00      	nop
 80087c0:	08009fb8 	.word	0x08009fb8
 80087c4:	080086f1 	.word	0x080086f1

080087c8 <__sfp>:
 80087c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ca:	4607      	mov	r7, r0
 80087cc:	f7ff ffac 	bl	8008728 <__sfp_lock_acquire>
 80087d0:	4b1e      	ldr	r3, [pc, #120]	; (800884c <__sfp+0x84>)
 80087d2:	681e      	ldr	r6, [r3, #0]
 80087d4:	69b3      	ldr	r3, [r6, #24]
 80087d6:	b913      	cbnz	r3, 80087de <__sfp+0x16>
 80087d8:	4630      	mov	r0, r6
 80087da:	f7ff ffbd 	bl	8008758 <__sinit>
 80087de:	3648      	adds	r6, #72	; 0x48
 80087e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	d503      	bpl.n	80087f0 <__sfp+0x28>
 80087e8:	6833      	ldr	r3, [r6, #0]
 80087ea:	b30b      	cbz	r3, 8008830 <__sfp+0x68>
 80087ec:	6836      	ldr	r6, [r6, #0]
 80087ee:	e7f7      	b.n	80087e0 <__sfp+0x18>
 80087f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087f4:	b9d5      	cbnz	r5, 800882c <__sfp+0x64>
 80087f6:	4b16      	ldr	r3, [pc, #88]	; (8008850 <__sfp+0x88>)
 80087f8:	60e3      	str	r3, [r4, #12]
 80087fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087fe:	6665      	str	r5, [r4, #100]	; 0x64
 8008800:	f000 f86c 	bl	80088dc <__retarget_lock_init_recursive>
 8008804:	f7ff ff96 	bl	8008734 <__sfp_lock_release>
 8008808:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800880c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008810:	6025      	str	r5, [r4, #0]
 8008812:	61a5      	str	r5, [r4, #24]
 8008814:	2208      	movs	r2, #8
 8008816:	4629      	mov	r1, r5
 8008818:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800881c:	f000 f86f 	bl	80088fe <memset>
 8008820:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008824:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008828:	4620      	mov	r0, r4
 800882a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800882c:	3468      	adds	r4, #104	; 0x68
 800882e:	e7d9      	b.n	80087e4 <__sfp+0x1c>
 8008830:	2104      	movs	r1, #4
 8008832:	4638      	mov	r0, r7
 8008834:	f7ff ff62 	bl	80086fc <__sfmoreglue>
 8008838:	4604      	mov	r4, r0
 800883a:	6030      	str	r0, [r6, #0]
 800883c:	2800      	cmp	r0, #0
 800883e:	d1d5      	bne.n	80087ec <__sfp+0x24>
 8008840:	f7ff ff78 	bl	8008734 <__sfp_lock_release>
 8008844:	230c      	movs	r3, #12
 8008846:	603b      	str	r3, [r7, #0]
 8008848:	e7ee      	b.n	8008828 <__sfp+0x60>
 800884a:	bf00      	nop
 800884c:	08009fb8 	.word	0x08009fb8
 8008850:	ffff0001 	.word	0xffff0001

08008854 <_fwalk_reent>:
 8008854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008858:	4606      	mov	r6, r0
 800885a:	4688      	mov	r8, r1
 800885c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008860:	2700      	movs	r7, #0
 8008862:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008866:	f1b9 0901 	subs.w	r9, r9, #1
 800886a:	d505      	bpl.n	8008878 <_fwalk_reent+0x24>
 800886c:	6824      	ldr	r4, [r4, #0]
 800886e:	2c00      	cmp	r4, #0
 8008870:	d1f7      	bne.n	8008862 <_fwalk_reent+0xe>
 8008872:	4638      	mov	r0, r7
 8008874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008878:	89ab      	ldrh	r3, [r5, #12]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d907      	bls.n	800888e <_fwalk_reent+0x3a>
 800887e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008882:	3301      	adds	r3, #1
 8008884:	d003      	beq.n	800888e <_fwalk_reent+0x3a>
 8008886:	4629      	mov	r1, r5
 8008888:	4630      	mov	r0, r6
 800888a:	47c0      	blx	r8
 800888c:	4307      	orrs	r7, r0
 800888e:	3568      	adds	r5, #104	; 0x68
 8008890:	e7e9      	b.n	8008866 <_fwalk_reent+0x12>
	...

08008894 <__libc_init_array>:
 8008894:	b570      	push	{r4, r5, r6, lr}
 8008896:	4d0d      	ldr	r5, [pc, #52]	; (80088cc <__libc_init_array+0x38>)
 8008898:	4c0d      	ldr	r4, [pc, #52]	; (80088d0 <__libc_init_array+0x3c>)
 800889a:	1b64      	subs	r4, r4, r5
 800889c:	10a4      	asrs	r4, r4, #2
 800889e:	2600      	movs	r6, #0
 80088a0:	42a6      	cmp	r6, r4
 80088a2:	d109      	bne.n	80088b8 <__libc_init_array+0x24>
 80088a4:	4d0b      	ldr	r5, [pc, #44]	; (80088d4 <__libc_init_array+0x40>)
 80088a6:	4c0c      	ldr	r4, [pc, #48]	; (80088d8 <__libc_init_array+0x44>)
 80088a8:	f001 f96a 	bl	8009b80 <_init>
 80088ac:	1b64      	subs	r4, r4, r5
 80088ae:	10a4      	asrs	r4, r4, #2
 80088b0:	2600      	movs	r6, #0
 80088b2:	42a6      	cmp	r6, r4
 80088b4:	d105      	bne.n	80088c2 <__libc_init_array+0x2e>
 80088b6:	bd70      	pop	{r4, r5, r6, pc}
 80088b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088bc:	4798      	blx	r3
 80088be:	3601      	adds	r6, #1
 80088c0:	e7ee      	b.n	80088a0 <__libc_init_array+0xc>
 80088c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80088c6:	4798      	blx	r3
 80088c8:	3601      	adds	r6, #1
 80088ca:	e7f2      	b.n	80088b2 <__libc_init_array+0x1e>
 80088cc:	0800a0ac 	.word	0x0800a0ac
 80088d0:	0800a0ac 	.word	0x0800a0ac
 80088d4:	0800a0ac 	.word	0x0800a0ac
 80088d8:	0800a0b0 	.word	0x0800a0b0

080088dc <__retarget_lock_init_recursive>:
 80088dc:	4770      	bx	lr

080088de <__retarget_lock_acquire_recursive>:
 80088de:	4770      	bx	lr

080088e0 <__retarget_lock_release_recursive>:
 80088e0:	4770      	bx	lr

080088e2 <memcpy>:
 80088e2:	440a      	add	r2, r1
 80088e4:	4291      	cmp	r1, r2
 80088e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80088ea:	d100      	bne.n	80088ee <memcpy+0xc>
 80088ec:	4770      	bx	lr
 80088ee:	b510      	push	{r4, lr}
 80088f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088f8:	4291      	cmp	r1, r2
 80088fa:	d1f9      	bne.n	80088f0 <memcpy+0xe>
 80088fc:	bd10      	pop	{r4, pc}

080088fe <memset>:
 80088fe:	4402      	add	r2, r0
 8008900:	4603      	mov	r3, r0
 8008902:	4293      	cmp	r3, r2
 8008904:	d100      	bne.n	8008908 <memset+0xa>
 8008906:	4770      	bx	lr
 8008908:	f803 1b01 	strb.w	r1, [r3], #1
 800890c:	e7f9      	b.n	8008902 <memset+0x4>
	...

08008910 <_malloc_r>:
 8008910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008912:	1ccd      	adds	r5, r1, #3
 8008914:	f025 0503 	bic.w	r5, r5, #3
 8008918:	3508      	adds	r5, #8
 800891a:	2d0c      	cmp	r5, #12
 800891c:	bf38      	it	cc
 800891e:	250c      	movcc	r5, #12
 8008920:	2d00      	cmp	r5, #0
 8008922:	4606      	mov	r6, r0
 8008924:	db01      	blt.n	800892a <_malloc_r+0x1a>
 8008926:	42a9      	cmp	r1, r5
 8008928:	d903      	bls.n	8008932 <_malloc_r+0x22>
 800892a:	230c      	movs	r3, #12
 800892c:	6033      	str	r3, [r6, #0]
 800892e:	2000      	movs	r0, #0
 8008930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008932:	f000 fa93 	bl	8008e5c <__malloc_lock>
 8008936:	4921      	ldr	r1, [pc, #132]	; (80089bc <_malloc_r+0xac>)
 8008938:	680a      	ldr	r2, [r1, #0]
 800893a:	4614      	mov	r4, r2
 800893c:	b99c      	cbnz	r4, 8008966 <_malloc_r+0x56>
 800893e:	4f20      	ldr	r7, [pc, #128]	; (80089c0 <_malloc_r+0xb0>)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	b923      	cbnz	r3, 800894e <_malloc_r+0x3e>
 8008944:	4621      	mov	r1, r4
 8008946:	4630      	mov	r0, r6
 8008948:	f000 f8e6 	bl	8008b18 <_sbrk_r>
 800894c:	6038      	str	r0, [r7, #0]
 800894e:	4629      	mov	r1, r5
 8008950:	4630      	mov	r0, r6
 8008952:	f000 f8e1 	bl	8008b18 <_sbrk_r>
 8008956:	1c43      	adds	r3, r0, #1
 8008958:	d123      	bne.n	80089a2 <_malloc_r+0x92>
 800895a:	230c      	movs	r3, #12
 800895c:	6033      	str	r3, [r6, #0]
 800895e:	4630      	mov	r0, r6
 8008960:	f000 fa82 	bl	8008e68 <__malloc_unlock>
 8008964:	e7e3      	b.n	800892e <_malloc_r+0x1e>
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	1b5b      	subs	r3, r3, r5
 800896a:	d417      	bmi.n	800899c <_malloc_r+0x8c>
 800896c:	2b0b      	cmp	r3, #11
 800896e:	d903      	bls.n	8008978 <_malloc_r+0x68>
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	441c      	add	r4, r3
 8008974:	6025      	str	r5, [r4, #0]
 8008976:	e004      	b.n	8008982 <_malloc_r+0x72>
 8008978:	6863      	ldr	r3, [r4, #4]
 800897a:	42a2      	cmp	r2, r4
 800897c:	bf0c      	ite	eq
 800897e:	600b      	streq	r3, [r1, #0]
 8008980:	6053      	strne	r3, [r2, #4]
 8008982:	4630      	mov	r0, r6
 8008984:	f000 fa70 	bl	8008e68 <__malloc_unlock>
 8008988:	f104 000b 	add.w	r0, r4, #11
 800898c:	1d23      	adds	r3, r4, #4
 800898e:	f020 0007 	bic.w	r0, r0, #7
 8008992:	1ac2      	subs	r2, r0, r3
 8008994:	d0cc      	beq.n	8008930 <_malloc_r+0x20>
 8008996:	1a1b      	subs	r3, r3, r0
 8008998:	50a3      	str	r3, [r4, r2]
 800899a:	e7c9      	b.n	8008930 <_malloc_r+0x20>
 800899c:	4622      	mov	r2, r4
 800899e:	6864      	ldr	r4, [r4, #4]
 80089a0:	e7cc      	b.n	800893c <_malloc_r+0x2c>
 80089a2:	1cc4      	adds	r4, r0, #3
 80089a4:	f024 0403 	bic.w	r4, r4, #3
 80089a8:	42a0      	cmp	r0, r4
 80089aa:	d0e3      	beq.n	8008974 <_malloc_r+0x64>
 80089ac:	1a21      	subs	r1, r4, r0
 80089ae:	4630      	mov	r0, r6
 80089b0:	f000 f8b2 	bl	8008b18 <_sbrk_r>
 80089b4:	3001      	adds	r0, #1
 80089b6:	d1dd      	bne.n	8008974 <_malloc_r+0x64>
 80089b8:	e7cf      	b.n	800895a <_malloc_r+0x4a>
 80089ba:	bf00      	nop
 80089bc:	20004a78 	.word	0x20004a78
 80089c0:	20004a7c 	.word	0x20004a7c

080089c4 <rand>:
 80089c4:	4b17      	ldr	r3, [pc, #92]	; (8008a24 <rand+0x60>)
 80089c6:	b510      	push	{r4, lr}
 80089c8:	681c      	ldr	r4, [r3, #0]
 80089ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80089cc:	b9b3      	cbnz	r3, 80089fc <rand+0x38>
 80089ce:	2018      	movs	r0, #24
 80089d0:	f000 fa3c 	bl	8008e4c <malloc>
 80089d4:	63a0      	str	r0, [r4, #56]	; 0x38
 80089d6:	b928      	cbnz	r0, 80089e4 <rand+0x20>
 80089d8:	4602      	mov	r2, r0
 80089da:	4b13      	ldr	r3, [pc, #76]	; (8008a28 <rand+0x64>)
 80089dc:	4813      	ldr	r0, [pc, #76]	; (8008a2c <rand+0x68>)
 80089de:	214e      	movs	r1, #78	; 0x4e
 80089e0:	f000 f920 	bl	8008c24 <__assert_func>
 80089e4:	4a12      	ldr	r2, [pc, #72]	; (8008a30 <rand+0x6c>)
 80089e6:	4b13      	ldr	r3, [pc, #76]	; (8008a34 <rand+0x70>)
 80089e8:	e9c0 2300 	strd	r2, r3, [r0]
 80089ec:	4b12      	ldr	r3, [pc, #72]	; (8008a38 <rand+0x74>)
 80089ee:	6083      	str	r3, [r0, #8]
 80089f0:	230b      	movs	r3, #11
 80089f2:	8183      	strh	r3, [r0, #12]
 80089f4:	2201      	movs	r2, #1
 80089f6:	2300      	movs	r3, #0
 80089f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80089fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80089fe:	480f      	ldr	r0, [pc, #60]	; (8008a3c <rand+0x78>)
 8008a00:	690a      	ldr	r2, [r1, #16]
 8008a02:	694b      	ldr	r3, [r1, #20]
 8008a04:	4c0e      	ldr	r4, [pc, #56]	; (8008a40 <rand+0x7c>)
 8008a06:	4350      	muls	r0, r2
 8008a08:	fb04 0003 	mla	r0, r4, r3, r0
 8008a0c:	fba2 3404 	umull	r3, r4, r2, r4
 8008a10:	1c5a      	adds	r2, r3, #1
 8008a12:	4404      	add	r4, r0
 8008a14:	f144 0000 	adc.w	r0, r4, #0
 8008a18:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8008a1c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008a20:	bd10      	pop	{r4, pc}
 8008a22:	bf00      	nop
 8008a24:	20000018 	.word	0x20000018
 8008a28:	08009fbc 	.word	0x08009fbc
 8008a2c:	08009fd3 	.word	0x08009fd3
 8008a30:	abcd330e 	.word	0xabcd330e
 8008a34:	e66d1234 	.word	0xe66d1234
 8008a38:	0005deec 	.word	0x0005deec
 8008a3c:	5851f42d 	.word	0x5851f42d
 8008a40:	4c957f2d 	.word	0x4c957f2d

08008a44 <cleanup_glue>:
 8008a44:	b538      	push	{r3, r4, r5, lr}
 8008a46:	460c      	mov	r4, r1
 8008a48:	6809      	ldr	r1, [r1, #0]
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	b109      	cbz	r1, 8008a52 <cleanup_glue+0xe>
 8008a4e:	f7ff fff9 	bl	8008a44 <cleanup_glue>
 8008a52:	4621      	mov	r1, r4
 8008a54:	4628      	mov	r0, r5
 8008a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a5a:	f000 ba0b 	b.w	8008e74 <_free_r>
	...

08008a60 <_reclaim_reent>:
 8008a60:	4b2c      	ldr	r3, [pc, #176]	; (8008b14 <_reclaim_reent+0xb4>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4283      	cmp	r3, r0
 8008a66:	b570      	push	{r4, r5, r6, lr}
 8008a68:	4604      	mov	r4, r0
 8008a6a:	d051      	beq.n	8008b10 <_reclaim_reent+0xb0>
 8008a6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008a6e:	b143      	cbz	r3, 8008a82 <_reclaim_reent+0x22>
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d14a      	bne.n	8008b0c <_reclaim_reent+0xac>
 8008a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a78:	6819      	ldr	r1, [r3, #0]
 8008a7a:	b111      	cbz	r1, 8008a82 <_reclaim_reent+0x22>
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f000 f9f9 	bl	8008e74 <_free_r>
 8008a82:	6961      	ldr	r1, [r4, #20]
 8008a84:	b111      	cbz	r1, 8008a8c <_reclaim_reent+0x2c>
 8008a86:	4620      	mov	r0, r4
 8008a88:	f000 f9f4 	bl	8008e74 <_free_r>
 8008a8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008a8e:	b111      	cbz	r1, 8008a96 <_reclaim_reent+0x36>
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 f9ef 	bl	8008e74 <_free_r>
 8008a96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008a98:	b111      	cbz	r1, 8008aa0 <_reclaim_reent+0x40>
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f000 f9ea 	bl	8008e74 <_free_r>
 8008aa0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008aa2:	b111      	cbz	r1, 8008aaa <_reclaim_reent+0x4a>
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f000 f9e5 	bl	8008e74 <_free_r>
 8008aaa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008aac:	b111      	cbz	r1, 8008ab4 <_reclaim_reent+0x54>
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f000 f9e0 	bl	8008e74 <_free_r>
 8008ab4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008ab6:	b111      	cbz	r1, 8008abe <_reclaim_reent+0x5e>
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f000 f9db 	bl	8008e74 <_free_r>
 8008abe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008ac0:	b111      	cbz	r1, 8008ac8 <_reclaim_reent+0x68>
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f000 f9d6 	bl	8008e74 <_free_r>
 8008ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008aca:	b111      	cbz	r1, 8008ad2 <_reclaim_reent+0x72>
 8008acc:	4620      	mov	r0, r4
 8008ace:	f000 f9d1 	bl	8008e74 <_free_r>
 8008ad2:	69a3      	ldr	r3, [r4, #24]
 8008ad4:	b1e3      	cbz	r3, 8008b10 <_reclaim_reent+0xb0>
 8008ad6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008ad8:	4620      	mov	r0, r4
 8008ada:	4798      	blx	r3
 8008adc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008ade:	b1b9      	cbz	r1, 8008b10 <_reclaim_reent+0xb0>
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ae6:	f7ff bfad 	b.w	8008a44 <cleanup_glue>
 8008aea:	5949      	ldr	r1, [r1, r5]
 8008aec:	b941      	cbnz	r1, 8008b00 <_reclaim_reent+0xa0>
 8008aee:	3504      	adds	r5, #4
 8008af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008af2:	2d80      	cmp	r5, #128	; 0x80
 8008af4:	68d9      	ldr	r1, [r3, #12]
 8008af6:	d1f8      	bne.n	8008aea <_reclaim_reent+0x8a>
 8008af8:	4620      	mov	r0, r4
 8008afa:	f000 f9bb 	bl	8008e74 <_free_r>
 8008afe:	e7ba      	b.n	8008a76 <_reclaim_reent+0x16>
 8008b00:	680e      	ldr	r6, [r1, #0]
 8008b02:	4620      	mov	r0, r4
 8008b04:	f000 f9b6 	bl	8008e74 <_free_r>
 8008b08:	4631      	mov	r1, r6
 8008b0a:	e7ef      	b.n	8008aec <_reclaim_reent+0x8c>
 8008b0c:	2500      	movs	r5, #0
 8008b0e:	e7ef      	b.n	8008af0 <_reclaim_reent+0x90>
 8008b10:	bd70      	pop	{r4, r5, r6, pc}
 8008b12:	bf00      	nop
 8008b14:	20000018 	.word	0x20000018

08008b18 <_sbrk_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4d06      	ldr	r5, [pc, #24]	; (8008b34 <_sbrk_r+0x1c>)
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4604      	mov	r4, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	602b      	str	r3, [r5, #0]
 8008b24:	f7f9 f824 	bl	8001b70 <_sbrk>
 8008b28:	1c43      	adds	r3, r0, #1
 8008b2a:	d102      	bne.n	8008b32 <_sbrk_r+0x1a>
 8008b2c:	682b      	ldr	r3, [r5, #0]
 8008b2e:	b103      	cbz	r3, 8008b32 <_sbrk_r+0x1a>
 8008b30:	6023      	str	r3, [r4, #0]
 8008b32:	bd38      	pop	{r3, r4, r5, pc}
 8008b34:	20004cd4 	.word	0x20004cd4

08008b38 <siprintf>:
 8008b38:	b40e      	push	{r1, r2, r3}
 8008b3a:	b500      	push	{lr}
 8008b3c:	b09c      	sub	sp, #112	; 0x70
 8008b3e:	ab1d      	add	r3, sp, #116	; 0x74
 8008b40:	9002      	str	r0, [sp, #8]
 8008b42:	9006      	str	r0, [sp, #24]
 8008b44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b48:	4809      	ldr	r0, [pc, #36]	; (8008b70 <siprintf+0x38>)
 8008b4a:	9107      	str	r1, [sp, #28]
 8008b4c:	9104      	str	r1, [sp, #16]
 8008b4e:	4909      	ldr	r1, [pc, #36]	; (8008b74 <siprintf+0x3c>)
 8008b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b54:	9105      	str	r1, [sp, #20]
 8008b56:	6800      	ldr	r0, [r0, #0]
 8008b58:	9301      	str	r3, [sp, #4]
 8008b5a:	a902      	add	r1, sp, #8
 8008b5c:	f000 fa36 	bl	8008fcc <_svfiprintf_r>
 8008b60:	9b02      	ldr	r3, [sp, #8]
 8008b62:	2200      	movs	r2, #0
 8008b64:	701a      	strb	r2, [r3, #0]
 8008b66:	b01c      	add	sp, #112	; 0x70
 8008b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b6c:	b003      	add	sp, #12
 8008b6e:	4770      	bx	lr
 8008b70:	20000018 	.word	0x20000018
 8008b74:	ffff0208 	.word	0xffff0208

08008b78 <__sread>:
 8008b78:	b510      	push	{r4, lr}
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b80:	f000 fe12 	bl	80097a8 <_read_r>
 8008b84:	2800      	cmp	r0, #0
 8008b86:	bfab      	itete	ge
 8008b88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b8a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b8c:	181b      	addge	r3, r3, r0
 8008b8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b92:	bfac      	ite	ge
 8008b94:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b96:	81a3      	strhlt	r3, [r4, #12]
 8008b98:	bd10      	pop	{r4, pc}

08008b9a <__swrite>:
 8008b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9e:	461f      	mov	r7, r3
 8008ba0:	898b      	ldrh	r3, [r1, #12]
 8008ba2:	05db      	lsls	r3, r3, #23
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	460c      	mov	r4, r1
 8008ba8:	4616      	mov	r6, r2
 8008baa:	d505      	bpl.n	8008bb8 <__swrite+0x1e>
 8008bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f000 f938 	bl	8008e28 <_lseek_r>
 8008bb8:	89a3      	ldrh	r3, [r4, #12]
 8008bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bc2:	81a3      	strh	r3, [r4, #12]
 8008bc4:	4632      	mov	r2, r6
 8008bc6:	463b      	mov	r3, r7
 8008bc8:	4628      	mov	r0, r5
 8008bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bce:	f000 b817 	b.w	8008c00 <_write_r>

08008bd2 <__sseek>:
 8008bd2:	b510      	push	{r4, lr}
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bda:	f000 f925 	bl	8008e28 <_lseek_r>
 8008bde:	1c43      	adds	r3, r0, #1
 8008be0:	89a3      	ldrh	r3, [r4, #12]
 8008be2:	bf15      	itete	ne
 8008be4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008be6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bee:	81a3      	strheq	r3, [r4, #12]
 8008bf0:	bf18      	it	ne
 8008bf2:	81a3      	strhne	r3, [r4, #12]
 8008bf4:	bd10      	pop	{r4, pc}

08008bf6 <__sclose>:
 8008bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bfa:	f000 b831 	b.w	8008c60 <_close_r>
	...

08008c00 <_write_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4d07      	ldr	r5, [pc, #28]	; (8008c20 <_write_r+0x20>)
 8008c04:	4604      	mov	r4, r0
 8008c06:	4608      	mov	r0, r1
 8008c08:	4611      	mov	r1, r2
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	602a      	str	r2, [r5, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	f7f8 ff5d 	bl	8001ace <_write>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d102      	bne.n	8008c1e <_write_r+0x1e>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	b103      	cbz	r3, 8008c1e <_write_r+0x1e>
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
 8008c20:	20004cd4 	.word	0x20004cd4

08008c24 <__assert_func>:
 8008c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c26:	4614      	mov	r4, r2
 8008c28:	461a      	mov	r2, r3
 8008c2a:	4b09      	ldr	r3, [pc, #36]	; (8008c50 <__assert_func+0x2c>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4605      	mov	r5, r0
 8008c30:	68d8      	ldr	r0, [r3, #12]
 8008c32:	b14c      	cbz	r4, 8008c48 <__assert_func+0x24>
 8008c34:	4b07      	ldr	r3, [pc, #28]	; (8008c54 <__assert_func+0x30>)
 8008c36:	9100      	str	r1, [sp, #0]
 8008c38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c3c:	4906      	ldr	r1, [pc, #24]	; (8008c58 <__assert_func+0x34>)
 8008c3e:	462b      	mov	r3, r5
 8008c40:	f000 f8e0 	bl	8008e04 <fiprintf>
 8008c44:	f000 fe82 	bl	800994c <abort>
 8008c48:	4b04      	ldr	r3, [pc, #16]	; (8008c5c <__assert_func+0x38>)
 8008c4a:	461c      	mov	r4, r3
 8008c4c:	e7f3      	b.n	8008c36 <__assert_func+0x12>
 8008c4e:	bf00      	nop
 8008c50:	20000018 	.word	0x20000018
 8008c54:	0800a032 	.word	0x0800a032
 8008c58:	0800a03f 	.word	0x0800a03f
 8008c5c:	0800a06d 	.word	0x0800a06d

08008c60 <_close_r>:
 8008c60:	b538      	push	{r3, r4, r5, lr}
 8008c62:	4d06      	ldr	r5, [pc, #24]	; (8008c7c <_close_r+0x1c>)
 8008c64:	2300      	movs	r3, #0
 8008c66:	4604      	mov	r4, r0
 8008c68:	4608      	mov	r0, r1
 8008c6a:	602b      	str	r3, [r5, #0]
 8008c6c:	f7f8 ff4b 	bl	8001b06 <_close>
 8008c70:	1c43      	adds	r3, r0, #1
 8008c72:	d102      	bne.n	8008c7a <_close_r+0x1a>
 8008c74:	682b      	ldr	r3, [r5, #0]
 8008c76:	b103      	cbz	r3, 8008c7a <_close_r+0x1a>
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	bd38      	pop	{r3, r4, r5, pc}
 8008c7c:	20004cd4 	.word	0x20004cd4

08008c80 <__sflush_r>:
 8008c80:	898a      	ldrh	r2, [r1, #12]
 8008c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c86:	4605      	mov	r5, r0
 8008c88:	0710      	lsls	r0, r2, #28
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	d458      	bmi.n	8008d40 <__sflush_r+0xc0>
 8008c8e:	684b      	ldr	r3, [r1, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	dc05      	bgt.n	8008ca0 <__sflush_r+0x20>
 8008c94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	dc02      	bgt.n	8008ca0 <__sflush_r+0x20>
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ca2:	2e00      	cmp	r6, #0
 8008ca4:	d0f9      	beq.n	8008c9a <__sflush_r+0x1a>
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008cac:	682f      	ldr	r7, [r5, #0]
 8008cae:	602b      	str	r3, [r5, #0]
 8008cb0:	d032      	beq.n	8008d18 <__sflush_r+0x98>
 8008cb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	075a      	lsls	r2, r3, #29
 8008cb8:	d505      	bpl.n	8008cc6 <__sflush_r+0x46>
 8008cba:	6863      	ldr	r3, [r4, #4]
 8008cbc:	1ac0      	subs	r0, r0, r3
 8008cbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cc0:	b10b      	cbz	r3, 8008cc6 <__sflush_r+0x46>
 8008cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cc4:	1ac0      	subs	r0, r0, r3
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	4602      	mov	r2, r0
 8008cca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ccc:	6a21      	ldr	r1, [r4, #32]
 8008cce:	4628      	mov	r0, r5
 8008cd0:	47b0      	blx	r6
 8008cd2:	1c43      	adds	r3, r0, #1
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	d106      	bne.n	8008ce6 <__sflush_r+0x66>
 8008cd8:	6829      	ldr	r1, [r5, #0]
 8008cda:	291d      	cmp	r1, #29
 8008cdc:	d82c      	bhi.n	8008d38 <__sflush_r+0xb8>
 8008cde:	4a2a      	ldr	r2, [pc, #168]	; (8008d88 <__sflush_r+0x108>)
 8008ce0:	40ca      	lsrs	r2, r1
 8008ce2:	07d6      	lsls	r6, r2, #31
 8008ce4:	d528      	bpl.n	8008d38 <__sflush_r+0xb8>
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	6062      	str	r2, [r4, #4]
 8008cea:	04d9      	lsls	r1, r3, #19
 8008cec:	6922      	ldr	r2, [r4, #16]
 8008cee:	6022      	str	r2, [r4, #0]
 8008cf0:	d504      	bpl.n	8008cfc <__sflush_r+0x7c>
 8008cf2:	1c42      	adds	r2, r0, #1
 8008cf4:	d101      	bne.n	8008cfa <__sflush_r+0x7a>
 8008cf6:	682b      	ldr	r3, [r5, #0]
 8008cf8:	b903      	cbnz	r3, 8008cfc <__sflush_r+0x7c>
 8008cfa:	6560      	str	r0, [r4, #84]	; 0x54
 8008cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cfe:	602f      	str	r7, [r5, #0]
 8008d00:	2900      	cmp	r1, #0
 8008d02:	d0ca      	beq.n	8008c9a <__sflush_r+0x1a>
 8008d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d08:	4299      	cmp	r1, r3
 8008d0a:	d002      	beq.n	8008d12 <__sflush_r+0x92>
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	f000 f8b1 	bl	8008e74 <_free_r>
 8008d12:	2000      	movs	r0, #0
 8008d14:	6360      	str	r0, [r4, #52]	; 0x34
 8008d16:	e7c1      	b.n	8008c9c <__sflush_r+0x1c>
 8008d18:	6a21      	ldr	r1, [r4, #32]
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	47b0      	blx	r6
 8008d20:	1c41      	adds	r1, r0, #1
 8008d22:	d1c7      	bne.n	8008cb4 <__sflush_r+0x34>
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d0c4      	beq.n	8008cb4 <__sflush_r+0x34>
 8008d2a:	2b1d      	cmp	r3, #29
 8008d2c:	d001      	beq.n	8008d32 <__sflush_r+0xb2>
 8008d2e:	2b16      	cmp	r3, #22
 8008d30:	d101      	bne.n	8008d36 <__sflush_r+0xb6>
 8008d32:	602f      	str	r7, [r5, #0]
 8008d34:	e7b1      	b.n	8008c9a <__sflush_r+0x1a>
 8008d36:	89a3      	ldrh	r3, [r4, #12]
 8008d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d3c:	81a3      	strh	r3, [r4, #12]
 8008d3e:	e7ad      	b.n	8008c9c <__sflush_r+0x1c>
 8008d40:	690f      	ldr	r7, [r1, #16]
 8008d42:	2f00      	cmp	r7, #0
 8008d44:	d0a9      	beq.n	8008c9a <__sflush_r+0x1a>
 8008d46:	0793      	lsls	r3, r2, #30
 8008d48:	680e      	ldr	r6, [r1, #0]
 8008d4a:	bf08      	it	eq
 8008d4c:	694b      	ldreq	r3, [r1, #20]
 8008d4e:	600f      	str	r7, [r1, #0]
 8008d50:	bf18      	it	ne
 8008d52:	2300      	movne	r3, #0
 8008d54:	eba6 0807 	sub.w	r8, r6, r7
 8008d58:	608b      	str	r3, [r1, #8]
 8008d5a:	f1b8 0f00 	cmp.w	r8, #0
 8008d5e:	dd9c      	ble.n	8008c9a <__sflush_r+0x1a>
 8008d60:	6a21      	ldr	r1, [r4, #32]
 8008d62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d64:	4643      	mov	r3, r8
 8008d66:	463a      	mov	r2, r7
 8008d68:	4628      	mov	r0, r5
 8008d6a:	47b0      	blx	r6
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	dc06      	bgt.n	8008d7e <__sflush_r+0xfe>
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d76:	81a3      	strh	r3, [r4, #12]
 8008d78:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7c:	e78e      	b.n	8008c9c <__sflush_r+0x1c>
 8008d7e:	4407      	add	r7, r0
 8008d80:	eba8 0800 	sub.w	r8, r8, r0
 8008d84:	e7e9      	b.n	8008d5a <__sflush_r+0xda>
 8008d86:	bf00      	nop
 8008d88:	20400001 	.word	0x20400001

08008d8c <_fflush_r>:
 8008d8c:	b538      	push	{r3, r4, r5, lr}
 8008d8e:	690b      	ldr	r3, [r1, #16]
 8008d90:	4605      	mov	r5, r0
 8008d92:	460c      	mov	r4, r1
 8008d94:	b913      	cbnz	r3, 8008d9c <_fflush_r+0x10>
 8008d96:	2500      	movs	r5, #0
 8008d98:	4628      	mov	r0, r5
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	b118      	cbz	r0, 8008da6 <_fflush_r+0x1a>
 8008d9e:	6983      	ldr	r3, [r0, #24]
 8008da0:	b90b      	cbnz	r3, 8008da6 <_fflush_r+0x1a>
 8008da2:	f7ff fcd9 	bl	8008758 <__sinit>
 8008da6:	4b14      	ldr	r3, [pc, #80]	; (8008df8 <_fflush_r+0x6c>)
 8008da8:	429c      	cmp	r4, r3
 8008daa:	d11b      	bne.n	8008de4 <_fflush_r+0x58>
 8008dac:	686c      	ldr	r4, [r5, #4]
 8008dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0ef      	beq.n	8008d96 <_fflush_r+0xa>
 8008db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008db8:	07d0      	lsls	r0, r2, #31
 8008dba:	d404      	bmi.n	8008dc6 <_fflush_r+0x3a>
 8008dbc:	0599      	lsls	r1, r3, #22
 8008dbe:	d402      	bmi.n	8008dc6 <_fflush_r+0x3a>
 8008dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dc2:	f7ff fd8c 	bl	80088de <__retarget_lock_acquire_recursive>
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	4621      	mov	r1, r4
 8008dca:	f7ff ff59 	bl	8008c80 <__sflush_r>
 8008dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dd0:	07da      	lsls	r2, r3, #31
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	d4e0      	bmi.n	8008d98 <_fflush_r+0xc>
 8008dd6:	89a3      	ldrh	r3, [r4, #12]
 8008dd8:	059b      	lsls	r3, r3, #22
 8008dda:	d4dd      	bmi.n	8008d98 <_fflush_r+0xc>
 8008ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dde:	f7ff fd7f 	bl	80088e0 <__retarget_lock_release_recursive>
 8008de2:	e7d9      	b.n	8008d98 <_fflush_r+0xc>
 8008de4:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <_fflush_r+0x70>)
 8008de6:	429c      	cmp	r4, r3
 8008de8:	d101      	bne.n	8008dee <_fflush_r+0x62>
 8008dea:	68ac      	ldr	r4, [r5, #8]
 8008dec:	e7df      	b.n	8008dae <_fflush_r+0x22>
 8008dee:	4b04      	ldr	r3, [pc, #16]	; (8008e00 <_fflush_r+0x74>)
 8008df0:	429c      	cmp	r4, r3
 8008df2:	bf08      	it	eq
 8008df4:	68ec      	ldreq	r4, [r5, #12]
 8008df6:	e7da      	b.n	8008dae <_fflush_r+0x22>
 8008df8:	08009f78 	.word	0x08009f78
 8008dfc:	08009f98 	.word	0x08009f98
 8008e00:	08009f58 	.word	0x08009f58

08008e04 <fiprintf>:
 8008e04:	b40e      	push	{r1, r2, r3}
 8008e06:	b503      	push	{r0, r1, lr}
 8008e08:	4601      	mov	r1, r0
 8008e0a:	ab03      	add	r3, sp, #12
 8008e0c:	4805      	ldr	r0, [pc, #20]	; (8008e24 <fiprintf+0x20>)
 8008e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e12:	6800      	ldr	r0, [r0, #0]
 8008e14:	9301      	str	r3, [sp, #4]
 8008e16:	f000 fa03 	bl	8009220 <_vfiprintf_r>
 8008e1a:	b002      	add	sp, #8
 8008e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e20:	b003      	add	sp, #12
 8008e22:	4770      	bx	lr
 8008e24:	20000018 	.word	0x20000018

08008e28 <_lseek_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4d07      	ldr	r5, [pc, #28]	; (8008e48 <_lseek_r+0x20>)
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	4608      	mov	r0, r1
 8008e30:	4611      	mov	r1, r2
 8008e32:	2200      	movs	r2, #0
 8008e34:	602a      	str	r2, [r5, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	f7f8 fe8c 	bl	8001b54 <_lseek>
 8008e3c:	1c43      	adds	r3, r0, #1
 8008e3e:	d102      	bne.n	8008e46 <_lseek_r+0x1e>
 8008e40:	682b      	ldr	r3, [r5, #0]
 8008e42:	b103      	cbz	r3, 8008e46 <_lseek_r+0x1e>
 8008e44:	6023      	str	r3, [r4, #0]
 8008e46:	bd38      	pop	{r3, r4, r5, pc}
 8008e48:	20004cd4 	.word	0x20004cd4

08008e4c <malloc>:
 8008e4c:	4b02      	ldr	r3, [pc, #8]	; (8008e58 <malloc+0xc>)
 8008e4e:	4601      	mov	r1, r0
 8008e50:	6818      	ldr	r0, [r3, #0]
 8008e52:	f7ff bd5d 	b.w	8008910 <_malloc_r>
 8008e56:	bf00      	nop
 8008e58:	20000018 	.word	0x20000018

08008e5c <__malloc_lock>:
 8008e5c:	4801      	ldr	r0, [pc, #4]	; (8008e64 <__malloc_lock+0x8>)
 8008e5e:	f7ff bd3e 	b.w	80088de <__retarget_lock_acquire_recursive>
 8008e62:	bf00      	nop
 8008e64:	20004ccc 	.word	0x20004ccc

08008e68 <__malloc_unlock>:
 8008e68:	4801      	ldr	r0, [pc, #4]	; (8008e70 <__malloc_unlock+0x8>)
 8008e6a:	f7ff bd39 	b.w	80088e0 <__retarget_lock_release_recursive>
 8008e6e:	bf00      	nop
 8008e70:	20004ccc 	.word	0x20004ccc

08008e74 <_free_r>:
 8008e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e76:	2900      	cmp	r1, #0
 8008e78:	d048      	beq.n	8008f0c <_free_r+0x98>
 8008e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e7e:	9001      	str	r0, [sp, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f1a1 0404 	sub.w	r4, r1, #4
 8008e86:	bfb8      	it	lt
 8008e88:	18e4      	addlt	r4, r4, r3
 8008e8a:	f7ff ffe7 	bl	8008e5c <__malloc_lock>
 8008e8e:	4a20      	ldr	r2, [pc, #128]	; (8008f10 <_free_r+0x9c>)
 8008e90:	9801      	ldr	r0, [sp, #4]
 8008e92:	6813      	ldr	r3, [r2, #0]
 8008e94:	4615      	mov	r5, r2
 8008e96:	b933      	cbnz	r3, 8008ea6 <_free_r+0x32>
 8008e98:	6063      	str	r3, [r4, #4]
 8008e9a:	6014      	str	r4, [r2, #0]
 8008e9c:	b003      	add	sp, #12
 8008e9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ea2:	f7ff bfe1 	b.w	8008e68 <__malloc_unlock>
 8008ea6:	42a3      	cmp	r3, r4
 8008ea8:	d90b      	bls.n	8008ec2 <_free_r+0x4e>
 8008eaa:	6821      	ldr	r1, [r4, #0]
 8008eac:	1862      	adds	r2, r4, r1
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	bf04      	itt	eq
 8008eb2:	681a      	ldreq	r2, [r3, #0]
 8008eb4:	685b      	ldreq	r3, [r3, #4]
 8008eb6:	6063      	str	r3, [r4, #4]
 8008eb8:	bf04      	itt	eq
 8008eba:	1852      	addeq	r2, r2, r1
 8008ebc:	6022      	streq	r2, [r4, #0]
 8008ebe:	602c      	str	r4, [r5, #0]
 8008ec0:	e7ec      	b.n	8008e9c <_free_r+0x28>
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	b10b      	cbz	r3, 8008ecc <_free_r+0x58>
 8008ec8:	42a3      	cmp	r3, r4
 8008eca:	d9fa      	bls.n	8008ec2 <_free_r+0x4e>
 8008ecc:	6811      	ldr	r1, [r2, #0]
 8008ece:	1855      	adds	r5, r2, r1
 8008ed0:	42a5      	cmp	r5, r4
 8008ed2:	d10b      	bne.n	8008eec <_free_r+0x78>
 8008ed4:	6824      	ldr	r4, [r4, #0]
 8008ed6:	4421      	add	r1, r4
 8008ed8:	1854      	adds	r4, r2, r1
 8008eda:	42a3      	cmp	r3, r4
 8008edc:	6011      	str	r1, [r2, #0]
 8008ede:	d1dd      	bne.n	8008e9c <_free_r+0x28>
 8008ee0:	681c      	ldr	r4, [r3, #0]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	6053      	str	r3, [r2, #4]
 8008ee6:	4421      	add	r1, r4
 8008ee8:	6011      	str	r1, [r2, #0]
 8008eea:	e7d7      	b.n	8008e9c <_free_r+0x28>
 8008eec:	d902      	bls.n	8008ef4 <_free_r+0x80>
 8008eee:	230c      	movs	r3, #12
 8008ef0:	6003      	str	r3, [r0, #0]
 8008ef2:	e7d3      	b.n	8008e9c <_free_r+0x28>
 8008ef4:	6825      	ldr	r5, [r4, #0]
 8008ef6:	1961      	adds	r1, r4, r5
 8008ef8:	428b      	cmp	r3, r1
 8008efa:	bf04      	itt	eq
 8008efc:	6819      	ldreq	r1, [r3, #0]
 8008efe:	685b      	ldreq	r3, [r3, #4]
 8008f00:	6063      	str	r3, [r4, #4]
 8008f02:	bf04      	itt	eq
 8008f04:	1949      	addeq	r1, r1, r5
 8008f06:	6021      	streq	r1, [r4, #0]
 8008f08:	6054      	str	r4, [r2, #4]
 8008f0a:	e7c7      	b.n	8008e9c <_free_r+0x28>
 8008f0c:	b003      	add	sp, #12
 8008f0e:	bd30      	pop	{r4, r5, pc}
 8008f10:	20004a78 	.word	0x20004a78

08008f14 <__ssputs_r>:
 8008f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f18:	688e      	ldr	r6, [r1, #8]
 8008f1a:	429e      	cmp	r6, r3
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	460c      	mov	r4, r1
 8008f20:	4690      	mov	r8, r2
 8008f22:	461f      	mov	r7, r3
 8008f24:	d838      	bhi.n	8008f98 <__ssputs_r+0x84>
 8008f26:	898a      	ldrh	r2, [r1, #12]
 8008f28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f2c:	d032      	beq.n	8008f94 <__ssputs_r+0x80>
 8008f2e:	6825      	ldr	r5, [r4, #0]
 8008f30:	6909      	ldr	r1, [r1, #16]
 8008f32:	eba5 0901 	sub.w	r9, r5, r1
 8008f36:	6965      	ldr	r5, [r4, #20]
 8008f38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f40:	3301      	adds	r3, #1
 8008f42:	444b      	add	r3, r9
 8008f44:	106d      	asrs	r5, r5, #1
 8008f46:	429d      	cmp	r5, r3
 8008f48:	bf38      	it	cc
 8008f4a:	461d      	movcc	r5, r3
 8008f4c:	0553      	lsls	r3, r2, #21
 8008f4e:	d531      	bpl.n	8008fb4 <__ssputs_r+0xa0>
 8008f50:	4629      	mov	r1, r5
 8008f52:	f7ff fcdd 	bl	8008910 <_malloc_r>
 8008f56:	4606      	mov	r6, r0
 8008f58:	b950      	cbnz	r0, 8008f70 <__ssputs_r+0x5c>
 8008f5a:	230c      	movs	r3, #12
 8008f5c:	f8ca 3000 	str.w	r3, [sl]
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f66:	81a3      	strh	r3, [r4, #12]
 8008f68:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f70:	6921      	ldr	r1, [r4, #16]
 8008f72:	464a      	mov	r2, r9
 8008f74:	f7ff fcb5 	bl	80088e2 <memcpy>
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f82:	81a3      	strh	r3, [r4, #12]
 8008f84:	6126      	str	r6, [r4, #16]
 8008f86:	6165      	str	r5, [r4, #20]
 8008f88:	444e      	add	r6, r9
 8008f8a:	eba5 0509 	sub.w	r5, r5, r9
 8008f8e:	6026      	str	r6, [r4, #0]
 8008f90:	60a5      	str	r5, [r4, #8]
 8008f92:	463e      	mov	r6, r7
 8008f94:	42be      	cmp	r6, r7
 8008f96:	d900      	bls.n	8008f9a <__ssputs_r+0x86>
 8008f98:	463e      	mov	r6, r7
 8008f9a:	4632      	mov	r2, r6
 8008f9c:	6820      	ldr	r0, [r4, #0]
 8008f9e:	4641      	mov	r1, r8
 8008fa0:	f000 fd40 	bl	8009a24 <memmove>
 8008fa4:	68a3      	ldr	r3, [r4, #8]
 8008fa6:	6822      	ldr	r2, [r4, #0]
 8008fa8:	1b9b      	subs	r3, r3, r6
 8008faa:	4432      	add	r2, r6
 8008fac:	60a3      	str	r3, [r4, #8]
 8008fae:	6022      	str	r2, [r4, #0]
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	e7db      	b.n	8008f6c <__ssputs_r+0x58>
 8008fb4:	462a      	mov	r2, r5
 8008fb6:	f000 fd4f 	bl	8009a58 <_realloc_r>
 8008fba:	4606      	mov	r6, r0
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d1e1      	bne.n	8008f84 <__ssputs_r+0x70>
 8008fc0:	6921      	ldr	r1, [r4, #16]
 8008fc2:	4650      	mov	r0, sl
 8008fc4:	f7ff ff56 	bl	8008e74 <_free_r>
 8008fc8:	e7c7      	b.n	8008f5a <__ssputs_r+0x46>
	...

08008fcc <_svfiprintf_r>:
 8008fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd0:	4698      	mov	r8, r3
 8008fd2:	898b      	ldrh	r3, [r1, #12]
 8008fd4:	061b      	lsls	r3, r3, #24
 8008fd6:	b09d      	sub	sp, #116	; 0x74
 8008fd8:	4607      	mov	r7, r0
 8008fda:	460d      	mov	r5, r1
 8008fdc:	4614      	mov	r4, r2
 8008fde:	d50e      	bpl.n	8008ffe <_svfiprintf_r+0x32>
 8008fe0:	690b      	ldr	r3, [r1, #16]
 8008fe2:	b963      	cbnz	r3, 8008ffe <_svfiprintf_r+0x32>
 8008fe4:	2140      	movs	r1, #64	; 0x40
 8008fe6:	f7ff fc93 	bl	8008910 <_malloc_r>
 8008fea:	6028      	str	r0, [r5, #0]
 8008fec:	6128      	str	r0, [r5, #16]
 8008fee:	b920      	cbnz	r0, 8008ffa <_svfiprintf_r+0x2e>
 8008ff0:	230c      	movs	r3, #12
 8008ff2:	603b      	str	r3, [r7, #0]
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff8:	e0d1      	b.n	800919e <_svfiprintf_r+0x1d2>
 8008ffa:	2340      	movs	r3, #64	; 0x40
 8008ffc:	616b      	str	r3, [r5, #20]
 8008ffe:	2300      	movs	r3, #0
 8009000:	9309      	str	r3, [sp, #36]	; 0x24
 8009002:	2320      	movs	r3, #32
 8009004:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009008:	f8cd 800c 	str.w	r8, [sp, #12]
 800900c:	2330      	movs	r3, #48	; 0x30
 800900e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091b8 <_svfiprintf_r+0x1ec>
 8009012:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009016:	f04f 0901 	mov.w	r9, #1
 800901a:	4623      	mov	r3, r4
 800901c:	469a      	mov	sl, r3
 800901e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009022:	b10a      	cbz	r2, 8009028 <_svfiprintf_r+0x5c>
 8009024:	2a25      	cmp	r2, #37	; 0x25
 8009026:	d1f9      	bne.n	800901c <_svfiprintf_r+0x50>
 8009028:	ebba 0b04 	subs.w	fp, sl, r4
 800902c:	d00b      	beq.n	8009046 <_svfiprintf_r+0x7a>
 800902e:	465b      	mov	r3, fp
 8009030:	4622      	mov	r2, r4
 8009032:	4629      	mov	r1, r5
 8009034:	4638      	mov	r0, r7
 8009036:	f7ff ff6d 	bl	8008f14 <__ssputs_r>
 800903a:	3001      	adds	r0, #1
 800903c:	f000 80aa 	beq.w	8009194 <_svfiprintf_r+0x1c8>
 8009040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009042:	445a      	add	r2, fp
 8009044:	9209      	str	r2, [sp, #36]	; 0x24
 8009046:	f89a 3000 	ldrb.w	r3, [sl]
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 80a2 	beq.w	8009194 <_svfiprintf_r+0x1c8>
 8009050:	2300      	movs	r3, #0
 8009052:	f04f 32ff 	mov.w	r2, #4294967295
 8009056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800905a:	f10a 0a01 	add.w	sl, sl, #1
 800905e:	9304      	str	r3, [sp, #16]
 8009060:	9307      	str	r3, [sp, #28]
 8009062:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009066:	931a      	str	r3, [sp, #104]	; 0x68
 8009068:	4654      	mov	r4, sl
 800906a:	2205      	movs	r2, #5
 800906c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009070:	4851      	ldr	r0, [pc, #324]	; (80091b8 <_svfiprintf_r+0x1ec>)
 8009072:	f7f7 f8b5 	bl	80001e0 <memchr>
 8009076:	9a04      	ldr	r2, [sp, #16]
 8009078:	b9d8      	cbnz	r0, 80090b2 <_svfiprintf_r+0xe6>
 800907a:	06d0      	lsls	r0, r2, #27
 800907c:	bf44      	itt	mi
 800907e:	2320      	movmi	r3, #32
 8009080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009084:	0711      	lsls	r1, r2, #28
 8009086:	bf44      	itt	mi
 8009088:	232b      	movmi	r3, #43	; 0x2b
 800908a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800908e:	f89a 3000 	ldrb.w	r3, [sl]
 8009092:	2b2a      	cmp	r3, #42	; 0x2a
 8009094:	d015      	beq.n	80090c2 <_svfiprintf_r+0xf6>
 8009096:	9a07      	ldr	r2, [sp, #28]
 8009098:	4654      	mov	r4, sl
 800909a:	2000      	movs	r0, #0
 800909c:	f04f 0c0a 	mov.w	ip, #10
 80090a0:	4621      	mov	r1, r4
 80090a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090a6:	3b30      	subs	r3, #48	; 0x30
 80090a8:	2b09      	cmp	r3, #9
 80090aa:	d94e      	bls.n	800914a <_svfiprintf_r+0x17e>
 80090ac:	b1b0      	cbz	r0, 80090dc <_svfiprintf_r+0x110>
 80090ae:	9207      	str	r2, [sp, #28]
 80090b0:	e014      	b.n	80090dc <_svfiprintf_r+0x110>
 80090b2:	eba0 0308 	sub.w	r3, r0, r8
 80090b6:	fa09 f303 	lsl.w	r3, r9, r3
 80090ba:	4313      	orrs	r3, r2
 80090bc:	9304      	str	r3, [sp, #16]
 80090be:	46a2      	mov	sl, r4
 80090c0:	e7d2      	b.n	8009068 <_svfiprintf_r+0x9c>
 80090c2:	9b03      	ldr	r3, [sp, #12]
 80090c4:	1d19      	adds	r1, r3, #4
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	9103      	str	r1, [sp, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	bfbb      	ittet	lt
 80090ce:	425b      	neglt	r3, r3
 80090d0:	f042 0202 	orrlt.w	r2, r2, #2
 80090d4:	9307      	strge	r3, [sp, #28]
 80090d6:	9307      	strlt	r3, [sp, #28]
 80090d8:	bfb8      	it	lt
 80090da:	9204      	strlt	r2, [sp, #16]
 80090dc:	7823      	ldrb	r3, [r4, #0]
 80090de:	2b2e      	cmp	r3, #46	; 0x2e
 80090e0:	d10c      	bne.n	80090fc <_svfiprintf_r+0x130>
 80090e2:	7863      	ldrb	r3, [r4, #1]
 80090e4:	2b2a      	cmp	r3, #42	; 0x2a
 80090e6:	d135      	bne.n	8009154 <_svfiprintf_r+0x188>
 80090e8:	9b03      	ldr	r3, [sp, #12]
 80090ea:	1d1a      	adds	r2, r3, #4
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	9203      	str	r2, [sp, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	bfb8      	it	lt
 80090f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80090f8:	3402      	adds	r4, #2
 80090fa:	9305      	str	r3, [sp, #20]
 80090fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091c8 <_svfiprintf_r+0x1fc>
 8009100:	7821      	ldrb	r1, [r4, #0]
 8009102:	2203      	movs	r2, #3
 8009104:	4650      	mov	r0, sl
 8009106:	f7f7 f86b 	bl	80001e0 <memchr>
 800910a:	b140      	cbz	r0, 800911e <_svfiprintf_r+0x152>
 800910c:	2340      	movs	r3, #64	; 0x40
 800910e:	eba0 000a 	sub.w	r0, r0, sl
 8009112:	fa03 f000 	lsl.w	r0, r3, r0
 8009116:	9b04      	ldr	r3, [sp, #16]
 8009118:	4303      	orrs	r3, r0
 800911a:	3401      	adds	r4, #1
 800911c:	9304      	str	r3, [sp, #16]
 800911e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009122:	4826      	ldr	r0, [pc, #152]	; (80091bc <_svfiprintf_r+0x1f0>)
 8009124:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009128:	2206      	movs	r2, #6
 800912a:	f7f7 f859 	bl	80001e0 <memchr>
 800912e:	2800      	cmp	r0, #0
 8009130:	d038      	beq.n	80091a4 <_svfiprintf_r+0x1d8>
 8009132:	4b23      	ldr	r3, [pc, #140]	; (80091c0 <_svfiprintf_r+0x1f4>)
 8009134:	bb1b      	cbnz	r3, 800917e <_svfiprintf_r+0x1b2>
 8009136:	9b03      	ldr	r3, [sp, #12]
 8009138:	3307      	adds	r3, #7
 800913a:	f023 0307 	bic.w	r3, r3, #7
 800913e:	3308      	adds	r3, #8
 8009140:	9303      	str	r3, [sp, #12]
 8009142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009144:	4433      	add	r3, r6
 8009146:	9309      	str	r3, [sp, #36]	; 0x24
 8009148:	e767      	b.n	800901a <_svfiprintf_r+0x4e>
 800914a:	fb0c 3202 	mla	r2, ip, r2, r3
 800914e:	460c      	mov	r4, r1
 8009150:	2001      	movs	r0, #1
 8009152:	e7a5      	b.n	80090a0 <_svfiprintf_r+0xd4>
 8009154:	2300      	movs	r3, #0
 8009156:	3401      	adds	r4, #1
 8009158:	9305      	str	r3, [sp, #20]
 800915a:	4619      	mov	r1, r3
 800915c:	f04f 0c0a 	mov.w	ip, #10
 8009160:	4620      	mov	r0, r4
 8009162:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009166:	3a30      	subs	r2, #48	; 0x30
 8009168:	2a09      	cmp	r2, #9
 800916a:	d903      	bls.n	8009174 <_svfiprintf_r+0x1a8>
 800916c:	2b00      	cmp	r3, #0
 800916e:	d0c5      	beq.n	80090fc <_svfiprintf_r+0x130>
 8009170:	9105      	str	r1, [sp, #20]
 8009172:	e7c3      	b.n	80090fc <_svfiprintf_r+0x130>
 8009174:	fb0c 2101 	mla	r1, ip, r1, r2
 8009178:	4604      	mov	r4, r0
 800917a:	2301      	movs	r3, #1
 800917c:	e7f0      	b.n	8009160 <_svfiprintf_r+0x194>
 800917e:	ab03      	add	r3, sp, #12
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	462a      	mov	r2, r5
 8009184:	4b0f      	ldr	r3, [pc, #60]	; (80091c4 <_svfiprintf_r+0x1f8>)
 8009186:	a904      	add	r1, sp, #16
 8009188:	4638      	mov	r0, r7
 800918a:	f3af 8000 	nop.w
 800918e:	1c42      	adds	r2, r0, #1
 8009190:	4606      	mov	r6, r0
 8009192:	d1d6      	bne.n	8009142 <_svfiprintf_r+0x176>
 8009194:	89ab      	ldrh	r3, [r5, #12]
 8009196:	065b      	lsls	r3, r3, #25
 8009198:	f53f af2c 	bmi.w	8008ff4 <_svfiprintf_r+0x28>
 800919c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800919e:	b01d      	add	sp, #116	; 0x74
 80091a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a4:	ab03      	add	r3, sp, #12
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	462a      	mov	r2, r5
 80091aa:	4b06      	ldr	r3, [pc, #24]	; (80091c4 <_svfiprintf_r+0x1f8>)
 80091ac:	a904      	add	r1, sp, #16
 80091ae:	4638      	mov	r0, r7
 80091b0:	f000 f9d4 	bl	800955c <_printf_i>
 80091b4:	e7eb      	b.n	800918e <_svfiprintf_r+0x1c2>
 80091b6:	bf00      	nop
 80091b8:	0800a06e 	.word	0x0800a06e
 80091bc:	0800a078 	.word	0x0800a078
 80091c0:	00000000 	.word	0x00000000
 80091c4:	08008f15 	.word	0x08008f15
 80091c8:	0800a074 	.word	0x0800a074

080091cc <__sfputc_r>:
 80091cc:	6893      	ldr	r3, [r2, #8]
 80091ce:	3b01      	subs	r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	b410      	push	{r4}
 80091d4:	6093      	str	r3, [r2, #8]
 80091d6:	da08      	bge.n	80091ea <__sfputc_r+0x1e>
 80091d8:	6994      	ldr	r4, [r2, #24]
 80091da:	42a3      	cmp	r3, r4
 80091dc:	db01      	blt.n	80091e2 <__sfputc_r+0x16>
 80091de:	290a      	cmp	r1, #10
 80091e0:	d103      	bne.n	80091ea <__sfputc_r+0x1e>
 80091e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091e6:	f000 baf1 	b.w	80097cc <__swbuf_r>
 80091ea:	6813      	ldr	r3, [r2, #0]
 80091ec:	1c58      	adds	r0, r3, #1
 80091ee:	6010      	str	r0, [r2, #0]
 80091f0:	7019      	strb	r1, [r3, #0]
 80091f2:	4608      	mov	r0, r1
 80091f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <__sfputs_r>:
 80091fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fc:	4606      	mov	r6, r0
 80091fe:	460f      	mov	r7, r1
 8009200:	4614      	mov	r4, r2
 8009202:	18d5      	adds	r5, r2, r3
 8009204:	42ac      	cmp	r4, r5
 8009206:	d101      	bne.n	800920c <__sfputs_r+0x12>
 8009208:	2000      	movs	r0, #0
 800920a:	e007      	b.n	800921c <__sfputs_r+0x22>
 800920c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009210:	463a      	mov	r2, r7
 8009212:	4630      	mov	r0, r6
 8009214:	f7ff ffda 	bl	80091cc <__sfputc_r>
 8009218:	1c43      	adds	r3, r0, #1
 800921a:	d1f3      	bne.n	8009204 <__sfputs_r+0xa>
 800921c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009220 <_vfiprintf_r>:
 8009220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009224:	460d      	mov	r5, r1
 8009226:	b09d      	sub	sp, #116	; 0x74
 8009228:	4614      	mov	r4, r2
 800922a:	4698      	mov	r8, r3
 800922c:	4606      	mov	r6, r0
 800922e:	b118      	cbz	r0, 8009238 <_vfiprintf_r+0x18>
 8009230:	6983      	ldr	r3, [r0, #24]
 8009232:	b90b      	cbnz	r3, 8009238 <_vfiprintf_r+0x18>
 8009234:	f7ff fa90 	bl	8008758 <__sinit>
 8009238:	4b89      	ldr	r3, [pc, #548]	; (8009460 <_vfiprintf_r+0x240>)
 800923a:	429d      	cmp	r5, r3
 800923c:	d11b      	bne.n	8009276 <_vfiprintf_r+0x56>
 800923e:	6875      	ldr	r5, [r6, #4]
 8009240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009242:	07d9      	lsls	r1, r3, #31
 8009244:	d405      	bmi.n	8009252 <_vfiprintf_r+0x32>
 8009246:	89ab      	ldrh	r3, [r5, #12]
 8009248:	059a      	lsls	r2, r3, #22
 800924a:	d402      	bmi.n	8009252 <_vfiprintf_r+0x32>
 800924c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800924e:	f7ff fb46 	bl	80088de <__retarget_lock_acquire_recursive>
 8009252:	89ab      	ldrh	r3, [r5, #12]
 8009254:	071b      	lsls	r3, r3, #28
 8009256:	d501      	bpl.n	800925c <_vfiprintf_r+0x3c>
 8009258:	692b      	ldr	r3, [r5, #16]
 800925a:	b9eb      	cbnz	r3, 8009298 <_vfiprintf_r+0x78>
 800925c:	4629      	mov	r1, r5
 800925e:	4630      	mov	r0, r6
 8009260:	f000 fb06 	bl	8009870 <__swsetup_r>
 8009264:	b1c0      	cbz	r0, 8009298 <_vfiprintf_r+0x78>
 8009266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009268:	07dc      	lsls	r4, r3, #31
 800926a:	d50e      	bpl.n	800928a <_vfiprintf_r+0x6a>
 800926c:	f04f 30ff 	mov.w	r0, #4294967295
 8009270:	b01d      	add	sp, #116	; 0x74
 8009272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009276:	4b7b      	ldr	r3, [pc, #492]	; (8009464 <_vfiprintf_r+0x244>)
 8009278:	429d      	cmp	r5, r3
 800927a:	d101      	bne.n	8009280 <_vfiprintf_r+0x60>
 800927c:	68b5      	ldr	r5, [r6, #8]
 800927e:	e7df      	b.n	8009240 <_vfiprintf_r+0x20>
 8009280:	4b79      	ldr	r3, [pc, #484]	; (8009468 <_vfiprintf_r+0x248>)
 8009282:	429d      	cmp	r5, r3
 8009284:	bf08      	it	eq
 8009286:	68f5      	ldreq	r5, [r6, #12]
 8009288:	e7da      	b.n	8009240 <_vfiprintf_r+0x20>
 800928a:	89ab      	ldrh	r3, [r5, #12]
 800928c:	0598      	lsls	r0, r3, #22
 800928e:	d4ed      	bmi.n	800926c <_vfiprintf_r+0x4c>
 8009290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009292:	f7ff fb25 	bl	80088e0 <__retarget_lock_release_recursive>
 8009296:	e7e9      	b.n	800926c <_vfiprintf_r+0x4c>
 8009298:	2300      	movs	r3, #0
 800929a:	9309      	str	r3, [sp, #36]	; 0x24
 800929c:	2320      	movs	r3, #32
 800929e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80092a6:	2330      	movs	r3, #48	; 0x30
 80092a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800946c <_vfiprintf_r+0x24c>
 80092ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092b0:	f04f 0901 	mov.w	r9, #1
 80092b4:	4623      	mov	r3, r4
 80092b6:	469a      	mov	sl, r3
 80092b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092bc:	b10a      	cbz	r2, 80092c2 <_vfiprintf_r+0xa2>
 80092be:	2a25      	cmp	r2, #37	; 0x25
 80092c0:	d1f9      	bne.n	80092b6 <_vfiprintf_r+0x96>
 80092c2:	ebba 0b04 	subs.w	fp, sl, r4
 80092c6:	d00b      	beq.n	80092e0 <_vfiprintf_r+0xc0>
 80092c8:	465b      	mov	r3, fp
 80092ca:	4622      	mov	r2, r4
 80092cc:	4629      	mov	r1, r5
 80092ce:	4630      	mov	r0, r6
 80092d0:	f7ff ff93 	bl	80091fa <__sfputs_r>
 80092d4:	3001      	adds	r0, #1
 80092d6:	f000 80aa 	beq.w	800942e <_vfiprintf_r+0x20e>
 80092da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092dc:	445a      	add	r2, fp
 80092de:	9209      	str	r2, [sp, #36]	; 0x24
 80092e0:	f89a 3000 	ldrb.w	r3, [sl]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f000 80a2 	beq.w	800942e <_vfiprintf_r+0x20e>
 80092ea:	2300      	movs	r3, #0
 80092ec:	f04f 32ff 	mov.w	r2, #4294967295
 80092f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092f4:	f10a 0a01 	add.w	sl, sl, #1
 80092f8:	9304      	str	r3, [sp, #16]
 80092fa:	9307      	str	r3, [sp, #28]
 80092fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009300:	931a      	str	r3, [sp, #104]	; 0x68
 8009302:	4654      	mov	r4, sl
 8009304:	2205      	movs	r2, #5
 8009306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800930a:	4858      	ldr	r0, [pc, #352]	; (800946c <_vfiprintf_r+0x24c>)
 800930c:	f7f6 ff68 	bl	80001e0 <memchr>
 8009310:	9a04      	ldr	r2, [sp, #16]
 8009312:	b9d8      	cbnz	r0, 800934c <_vfiprintf_r+0x12c>
 8009314:	06d1      	lsls	r1, r2, #27
 8009316:	bf44      	itt	mi
 8009318:	2320      	movmi	r3, #32
 800931a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800931e:	0713      	lsls	r3, r2, #28
 8009320:	bf44      	itt	mi
 8009322:	232b      	movmi	r3, #43	; 0x2b
 8009324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009328:	f89a 3000 	ldrb.w	r3, [sl]
 800932c:	2b2a      	cmp	r3, #42	; 0x2a
 800932e:	d015      	beq.n	800935c <_vfiprintf_r+0x13c>
 8009330:	9a07      	ldr	r2, [sp, #28]
 8009332:	4654      	mov	r4, sl
 8009334:	2000      	movs	r0, #0
 8009336:	f04f 0c0a 	mov.w	ip, #10
 800933a:	4621      	mov	r1, r4
 800933c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009340:	3b30      	subs	r3, #48	; 0x30
 8009342:	2b09      	cmp	r3, #9
 8009344:	d94e      	bls.n	80093e4 <_vfiprintf_r+0x1c4>
 8009346:	b1b0      	cbz	r0, 8009376 <_vfiprintf_r+0x156>
 8009348:	9207      	str	r2, [sp, #28]
 800934a:	e014      	b.n	8009376 <_vfiprintf_r+0x156>
 800934c:	eba0 0308 	sub.w	r3, r0, r8
 8009350:	fa09 f303 	lsl.w	r3, r9, r3
 8009354:	4313      	orrs	r3, r2
 8009356:	9304      	str	r3, [sp, #16]
 8009358:	46a2      	mov	sl, r4
 800935a:	e7d2      	b.n	8009302 <_vfiprintf_r+0xe2>
 800935c:	9b03      	ldr	r3, [sp, #12]
 800935e:	1d19      	adds	r1, r3, #4
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	9103      	str	r1, [sp, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	bfbb      	ittet	lt
 8009368:	425b      	neglt	r3, r3
 800936a:	f042 0202 	orrlt.w	r2, r2, #2
 800936e:	9307      	strge	r3, [sp, #28]
 8009370:	9307      	strlt	r3, [sp, #28]
 8009372:	bfb8      	it	lt
 8009374:	9204      	strlt	r2, [sp, #16]
 8009376:	7823      	ldrb	r3, [r4, #0]
 8009378:	2b2e      	cmp	r3, #46	; 0x2e
 800937a:	d10c      	bne.n	8009396 <_vfiprintf_r+0x176>
 800937c:	7863      	ldrb	r3, [r4, #1]
 800937e:	2b2a      	cmp	r3, #42	; 0x2a
 8009380:	d135      	bne.n	80093ee <_vfiprintf_r+0x1ce>
 8009382:	9b03      	ldr	r3, [sp, #12]
 8009384:	1d1a      	adds	r2, r3, #4
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	9203      	str	r2, [sp, #12]
 800938a:	2b00      	cmp	r3, #0
 800938c:	bfb8      	it	lt
 800938e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009392:	3402      	adds	r4, #2
 8009394:	9305      	str	r3, [sp, #20]
 8009396:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800947c <_vfiprintf_r+0x25c>
 800939a:	7821      	ldrb	r1, [r4, #0]
 800939c:	2203      	movs	r2, #3
 800939e:	4650      	mov	r0, sl
 80093a0:	f7f6 ff1e 	bl	80001e0 <memchr>
 80093a4:	b140      	cbz	r0, 80093b8 <_vfiprintf_r+0x198>
 80093a6:	2340      	movs	r3, #64	; 0x40
 80093a8:	eba0 000a 	sub.w	r0, r0, sl
 80093ac:	fa03 f000 	lsl.w	r0, r3, r0
 80093b0:	9b04      	ldr	r3, [sp, #16]
 80093b2:	4303      	orrs	r3, r0
 80093b4:	3401      	adds	r4, #1
 80093b6:	9304      	str	r3, [sp, #16]
 80093b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093bc:	482c      	ldr	r0, [pc, #176]	; (8009470 <_vfiprintf_r+0x250>)
 80093be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093c2:	2206      	movs	r2, #6
 80093c4:	f7f6 ff0c 	bl	80001e0 <memchr>
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d03f      	beq.n	800944c <_vfiprintf_r+0x22c>
 80093cc:	4b29      	ldr	r3, [pc, #164]	; (8009474 <_vfiprintf_r+0x254>)
 80093ce:	bb1b      	cbnz	r3, 8009418 <_vfiprintf_r+0x1f8>
 80093d0:	9b03      	ldr	r3, [sp, #12]
 80093d2:	3307      	adds	r3, #7
 80093d4:	f023 0307 	bic.w	r3, r3, #7
 80093d8:	3308      	adds	r3, #8
 80093da:	9303      	str	r3, [sp, #12]
 80093dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093de:	443b      	add	r3, r7
 80093e0:	9309      	str	r3, [sp, #36]	; 0x24
 80093e2:	e767      	b.n	80092b4 <_vfiprintf_r+0x94>
 80093e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80093e8:	460c      	mov	r4, r1
 80093ea:	2001      	movs	r0, #1
 80093ec:	e7a5      	b.n	800933a <_vfiprintf_r+0x11a>
 80093ee:	2300      	movs	r3, #0
 80093f0:	3401      	adds	r4, #1
 80093f2:	9305      	str	r3, [sp, #20]
 80093f4:	4619      	mov	r1, r3
 80093f6:	f04f 0c0a 	mov.w	ip, #10
 80093fa:	4620      	mov	r0, r4
 80093fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009400:	3a30      	subs	r2, #48	; 0x30
 8009402:	2a09      	cmp	r2, #9
 8009404:	d903      	bls.n	800940e <_vfiprintf_r+0x1ee>
 8009406:	2b00      	cmp	r3, #0
 8009408:	d0c5      	beq.n	8009396 <_vfiprintf_r+0x176>
 800940a:	9105      	str	r1, [sp, #20]
 800940c:	e7c3      	b.n	8009396 <_vfiprintf_r+0x176>
 800940e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009412:	4604      	mov	r4, r0
 8009414:	2301      	movs	r3, #1
 8009416:	e7f0      	b.n	80093fa <_vfiprintf_r+0x1da>
 8009418:	ab03      	add	r3, sp, #12
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	462a      	mov	r2, r5
 800941e:	4b16      	ldr	r3, [pc, #88]	; (8009478 <_vfiprintf_r+0x258>)
 8009420:	a904      	add	r1, sp, #16
 8009422:	4630      	mov	r0, r6
 8009424:	f3af 8000 	nop.w
 8009428:	4607      	mov	r7, r0
 800942a:	1c78      	adds	r0, r7, #1
 800942c:	d1d6      	bne.n	80093dc <_vfiprintf_r+0x1bc>
 800942e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009430:	07d9      	lsls	r1, r3, #31
 8009432:	d405      	bmi.n	8009440 <_vfiprintf_r+0x220>
 8009434:	89ab      	ldrh	r3, [r5, #12]
 8009436:	059a      	lsls	r2, r3, #22
 8009438:	d402      	bmi.n	8009440 <_vfiprintf_r+0x220>
 800943a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800943c:	f7ff fa50 	bl	80088e0 <__retarget_lock_release_recursive>
 8009440:	89ab      	ldrh	r3, [r5, #12]
 8009442:	065b      	lsls	r3, r3, #25
 8009444:	f53f af12 	bmi.w	800926c <_vfiprintf_r+0x4c>
 8009448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800944a:	e711      	b.n	8009270 <_vfiprintf_r+0x50>
 800944c:	ab03      	add	r3, sp, #12
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	462a      	mov	r2, r5
 8009452:	4b09      	ldr	r3, [pc, #36]	; (8009478 <_vfiprintf_r+0x258>)
 8009454:	a904      	add	r1, sp, #16
 8009456:	4630      	mov	r0, r6
 8009458:	f000 f880 	bl	800955c <_printf_i>
 800945c:	e7e4      	b.n	8009428 <_vfiprintf_r+0x208>
 800945e:	bf00      	nop
 8009460:	08009f78 	.word	0x08009f78
 8009464:	08009f98 	.word	0x08009f98
 8009468:	08009f58 	.word	0x08009f58
 800946c:	0800a06e 	.word	0x0800a06e
 8009470:	0800a078 	.word	0x0800a078
 8009474:	00000000 	.word	0x00000000
 8009478:	080091fb 	.word	0x080091fb
 800947c:	0800a074 	.word	0x0800a074

08009480 <_printf_common>:
 8009480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009484:	4616      	mov	r6, r2
 8009486:	4699      	mov	r9, r3
 8009488:	688a      	ldr	r2, [r1, #8]
 800948a:	690b      	ldr	r3, [r1, #16]
 800948c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009490:	4293      	cmp	r3, r2
 8009492:	bfb8      	it	lt
 8009494:	4613      	movlt	r3, r2
 8009496:	6033      	str	r3, [r6, #0]
 8009498:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800949c:	4607      	mov	r7, r0
 800949e:	460c      	mov	r4, r1
 80094a0:	b10a      	cbz	r2, 80094a6 <_printf_common+0x26>
 80094a2:	3301      	adds	r3, #1
 80094a4:	6033      	str	r3, [r6, #0]
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	0699      	lsls	r1, r3, #26
 80094aa:	bf42      	ittt	mi
 80094ac:	6833      	ldrmi	r3, [r6, #0]
 80094ae:	3302      	addmi	r3, #2
 80094b0:	6033      	strmi	r3, [r6, #0]
 80094b2:	6825      	ldr	r5, [r4, #0]
 80094b4:	f015 0506 	ands.w	r5, r5, #6
 80094b8:	d106      	bne.n	80094c8 <_printf_common+0x48>
 80094ba:	f104 0a19 	add.w	sl, r4, #25
 80094be:	68e3      	ldr	r3, [r4, #12]
 80094c0:	6832      	ldr	r2, [r6, #0]
 80094c2:	1a9b      	subs	r3, r3, r2
 80094c4:	42ab      	cmp	r3, r5
 80094c6:	dc26      	bgt.n	8009516 <_printf_common+0x96>
 80094c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094cc:	1e13      	subs	r3, r2, #0
 80094ce:	6822      	ldr	r2, [r4, #0]
 80094d0:	bf18      	it	ne
 80094d2:	2301      	movne	r3, #1
 80094d4:	0692      	lsls	r2, r2, #26
 80094d6:	d42b      	bmi.n	8009530 <_printf_common+0xb0>
 80094d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094dc:	4649      	mov	r1, r9
 80094de:	4638      	mov	r0, r7
 80094e0:	47c0      	blx	r8
 80094e2:	3001      	adds	r0, #1
 80094e4:	d01e      	beq.n	8009524 <_printf_common+0xa4>
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	68e5      	ldr	r5, [r4, #12]
 80094ea:	6832      	ldr	r2, [r6, #0]
 80094ec:	f003 0306 	and.w	r3, r3, #6
 80094f0:	2b04      	cmp	r3, #4
 80094f2:	bf08      	it	eq
 80094f4:	1aad      	subeq	r5, r5, r2
 80094f6:	68a3      	ldr	r3, [r4, #8]
 80094f8:	6922      	ldr	r2, [r4, #16]
 80094fa:	bf0c      	ite	eq
 80094fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009500:	2500      	movne	r5, #0
 8009502:	4293      	cmp	r3, r2
 8009504:	bfc4      	itt	gt
 8009506:	1a9b      	subgt	r3, r3, r2
 8009508:	18ed      	addgt	r5, r5, r3
 800950a:	2600      	movs	r6, #0
 800950c:	341a      	adds	r4, #26
 800950e:	42b5      	cmp	r5, r6
 8009510:	d11a      	bne.n	8009548 <_printf_common+0xc8>
 8009512:	2000      	movs	r0, #0
 8009514:	e008      	b.n	8009528 <_printf_common+0xa8>
 8009516:	2301      	movs	r3, #1
 8009518:	4652      	mov	r2, sl
 800951a:	4649      	mov	r1, r9
 800951c:	4638      	mov	r0, r7
 800951e:	47c0      	blx	r8
 8009520:	3001      	adds	r0, #1
 8009522:	d103      	bne.n	800952c <_printf_common+0xac>
 8009524:	f04f 30ff 	mov.w	r0, #4294967295
 8009528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800952c:	3501      	adds	r5, #1
 800952e:	e7c6      	b.n	80094be <_printf_common+0x3e>
 8009530:	18e1      	adds	r1, r4, r3
 8009532:	1c5a      	adds	r2, r3, #1
 8009534:	2030      	movs	r0, #48	; 0x30
 8009536:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800953a:	4422      	add	r2, r4
 800953c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009540:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009544:	3302      	adds	r3, #2
 8009546:	e7c7      	b.n	80094d8 <_printf_common+0x58>
 8009548:	2301      	movs	r3, #1
 800954a:	4622      	mov	r2, r4
 800954c:	4649      	mov	r1, r9
 800954e:	4638      	mov	r0, r7
 8009550:	47c0      	blx	r8
 8009552:	3001      	adds	r0, #1
 8009554:	d0e6      	beq.n	8009524 <_printf_common+0xa4>
 8009556:	3601      	adds	r6, #1
 8009558:	e7d9      	b.n	800950e <_printf_common+0x8e>
	...

0800955c <_printf_i>:
 800955c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009560:	460c      	mov	r4, r1
 8009562:	4691      	mov	r9, r2
 8009564:	7e27      	ldrb	r7, [r4, #24]
 8009566:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009568:	2f78      	cmp	r7, #120	; 0x78
 800956a:	4680      	mov	r8, r0
 800956c:	469a      	mov	sl, r3
 800956e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009572:	d807      	bhi.n	8009584 <_printf_i+0x28>
 8009574:	2f62      	cmp	r7, #98	; 0x62
 8009576:	d80a      	bhi.n	800958e <_printf_i+0x32>
 8009578:	2f00      	cmp	r7, #0
 800957a:	f000 80d8 	beq.w	800972e <_printf_i+0x1d2>
 800957e:	2f58      	cmp	r7, #88	; 0x58
 8009580:	f000 80a3 	beq.w	80096ca <_printf_i+0x16e>
 8009584:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009588:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800958c:	e03a      	b.n	8009604 <_printf_i+0xa8>
 800958e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009592:	2b15      	cmp	r3, #21
 8009594:	d8f6      	bhi.n	8009584 <_printf_i+0x28>
 8009596:	a001      	add	r0, pc, #4	; (adr r0, 800959c <_printf_i+0x40>)
 8009598:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800959c:	080095f5 	.word	0x080095f5
 80095a0:	08009609 	.word	0x08009609
 80095a4:	08009585 	.word	0x08009585
 80095a8:	08009585 	.word	0x08009585
 80095ac:	08009585 	.word	0x08009585
 80095b0:	08009585 	.word	0x08009585
 80095b4:	08009609 	.word	0x08009609
 80095b8:	08009585 	.word	0x08009585
 80095bc:	08009585 	.word	0x08009585
 80095c0:	08009585 	.word	0x08009585
 80095c4:	08009585 	.word	0x08009585
 80095c8:	08009715 	.word	0x08009715
 80095cc:	08009639 	.word	0x08009639
 80095d0:	080096f7 	.word	0x080096f7
 80095d4:	08009585 	.word	0x08009585
 80095d8:	08009585 	.word	0x08009585
 80095dc:	08009737 	.word	0x08009737
 80095e0:	08009585 	.word	0x08009585
 80095e4:	08009639 	.word	0x08009639
 80095e8:	08009585 	.word	0x08009585
 80095ec:	08009585 	.word	0x08009585
 80095f0:	080096ff 	.word	0x080096ff
 80095f4:	680b      	ldr	r3, [r1, #0]
 80095f6:	1d1a      	adds	r2, r3, #4
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	600a      	str	r2, [r1, #0]
 80095fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009604:	2301      	movs	r3, #1
 8009606:	e0a3      	b.n	8009750 <_printf_i+0x1f4>
 8009608:	6825      	ldr	r5, [r4, #0]
 800960a:	6808      	ldr	r0, [r1, #0]
 800960c:	062e      	lsls	r6, r5, #24
 800960e:	f100 0304 	add.w	r3, r0, #4
 8009612:	d50a      	bpl.n	800962a <_printf_i+0xce>
 8009614:	6805      	ldr	r5, [r0, #0]
 8009616:	600b      	str	r3, [r1, #0]
 8009618:	2d00      	cmp	r5, #0
 800961a:	da03      	bge.n	8009624 <_printf_i+0xc8>
 800961c:	232d      	movs	r3, #45	; 0x2d
 800961e:	426d      	negs	r5, r5
 8009620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009624:	485e      	ldr	r0, [pc, #376]	; (80097a0 <_printf_i+0x244>)
 8009626:	230a      	movs	r3, #10
 8009628:	e019      	b.n	800965e <_printf_i+0x102>
 800962a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800962e:	6805      	ldr	r5, [r0, #0]
 8009630:	600b      	str	r3, [r1, #0]
 8009632:	bf18      	it	ne
 8009634:	b22d      	sxthne	r5, r5
 8009636:	e7ef      	b.n	8009618 <_printf_i+0xbc>
 8009638:	680b      	ldr	r3, [r1, #0]
 800963a:	6825      	ldr	r5, [r4, #0]
 800963c:	1d18      	adds	r0, r3, #4
 800963e:	6008      	str	r0, [r1, #0]
 8009640:	0628      	lsls	r0, r5, #24
 8009642:	d501      	bpl.n	8009648 <_printf_i+0xec>
 8009644:	681d      	ldr	r5, [r3, #0]
 8009646:	e002      	b.n	800964e <_printf_i+0xf2>
 8009648:	0669      	lsls	r1, r5, #25
 800964a:	d5fb      	bpl.n	8009644 <_printf_i+0xe8>
 800964c:	881d      	ldrh	r5, [r3, #0]
 800964e:	4854      	ldr	r0, [pc, #336]	; (80097a0 <_printf_i+0x244>)
 8009650:	2f6f      	cmp	r7, #111	; 0x6f
 8009652:	bf0c      	ite	eq
 8009654:	2308      	moveq	r3, #8
 8009656:	230a      	movne	r3, #10
 8009658:	2100      	movs	r1, #0
 800965a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800965e:	6866      	ldr	r6, [r4, #4]
 8009660:	60a6      	str	r6, [r4, #8]
 8009662:	2e00      	cmp	r6, #0
 8009664:	bfa2      	ittt	ge
 8009666:	6821      	ldrge	r1, [r4, #0]
 8009668:	f021 0104 	bicge.w	r1, r1, #4
 800966c:	6021      	strge	r1, [r4, #0]
 800966e:	b90d      	cbnz	r5, 8009674 <_printf_i+0x118>
 8009670:	2e00      	cmp	r6, #0
 8009672:	d04d      	beq.n	8009710 <_printf_i+0x1b4>
 8009674:	4616      	mov	r6, r2
 8009676:	fbb5 f1f3 	udiv	r1, r5, r3
 800967a:	fb03 5711 	mls	r7, r3, r1, r5
 800967e:	5dc7      	ldrb	r7, [r0, r7]
 8009680:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009684:	462f      	mov	r7, r5
 8009686:	42bb      	cmp	r3, r7
 8009688:	460d      	mov	r5, r1
 800968a:	d9f4      	bls.n	8009676 <_printf_i+0x11a>
 800968c:	2b08      	cmp	r3, #8
 800968e:	d10b      	bne.n	80096a8 <_printf_i+0x14c>
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	07df      	lsls	r7, r3, #31
 8009694:	d508      	bpl.n	80096a8 <_printf_i+0x14c>
 8009696:	6923      	ldr	r3, [r4, #16]
 8009698:	6861      	ldr	r1, [r4, #4]
 800969a:	4299      	cmp	r1, r3
 800969c:	bfde      	ittt	le
 800969e:	2330      	movle	r3, #48	; 0x30
 80096a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096a8:	1b92      	subs	r2, r2, r6
 80096aa:	6122      	str	r2, [r4, #16]
 80096ac:	f8cd a000 	str.w	sl, [sp]
 80096b0:	464b      	mov	r3, r9
 80096b2:	aa03      	add	r2, sp, #12
 80096b4:	4621      	mov	r1, r4
 80096b6:	4640      	mov	r0, r8
 80096b8:	f7ff fee2 	bl	8009480 <_printf_common>
 80096bc:	3001      	adds	r0, #1
 80096be:	d14c      	bne.n	800975a <_printf_i+0x1fe>
 80096c0:	f04f 30ff 	mov.w	r0, #4294967295
 80096c4:	b004      	add	sp, #16
 80096c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ca:	4835      	ldr	r0, [pc, #212]	; (80097a0 <_printf_i+0x244>)
 80096cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	680e      	ldr	r6, [r1, #0]
 80096d4:	061f      	lsls	r7, r3, #24
 80096d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80096da:	600e      	str	r6, [r1, #0]
 80096dc:	d514      	bpl.n	8009708 <_printf_i+0x1ac>
 80096de:	07d9      	lsls	r1, r3, #31
 80096e0:	bf44      	itt	mi
 80096e2:	f043 0320 	orrmi.w	r3, r3, #32
 80096e6:	6023      	strmi	r3, [r4, #0]
 80096e8:	b91d      	cbnz	r5, 80096f2 <_printf_i+0x196>
 80096ea:	6823      	ldr	r3, [r4, #0]
 80096ec:	f023 0320 	bic.w	r3, r3, #32
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	2310      	movs	r3, #16
 80096f4:	e7b0      	b.n	8009658 <_printf_i+0xfc>
 80096f6:	6823      	ldr	r3, [r4, #0]
 80096f8:	f043 0320 	orr.w	r3, r3, #32
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	2378      	movs	r3, #120	; 0x78
 8009700:	4828      	ldr	r0, [pc, #160]	; (80097a4 <_printf_i+0x248>)
 8009702:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009706:	e7e3      	b.n	80096d0 <_printf_i+0x174>
 8009708:	065e      	lsls	r6, r3, #25
 800970a:	bf48      	it	mi
 800970c:	b2ad      	uxthmi	r5, r5
 800970e:	e7e6      	b.n	80096de <_printf_i+0x182>
 8009710:	4616      	mov	r6, r2
 8009712:	e7bb      	b.n	800968c <_printf_i+0x130>
 8009714:	680b      	ldr	r3, [r1, #0]
 8009716:	6826      	ldr	r6, [r4, #0]
 8009718:	6960      	ldr	r0, [r4, #20]
 800971a:	1d1d      	adds	r5, r3, #4
 800971c:	600d      	str	r5, [r1, #0]
 800971e:	0635      	lsls	r5, r6, #24
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	d501      	bpl.n	8009728 <_printf_i+0x1cc>
 8009724:	6018      	str	r0, [r3, #0]
 8009726:	e002      	b.n	800972e <_printf_i+0x1d2>
 8009728:	0671      	lsls	r1, r6, #25
 800972a:	d5fb      	bpl.n	8009724 <_printf_i+0x1c8>
 800972c:	8018      	strh	r0, [r3, #0]
 800972e:	2300      	movs	r3, #0
 8009730:	6123      	str	r3, [r4, #16]
 8009732:	4616      	mov	r6, r2
 8009734:	e7ba      	b.n	80096ac <_printf_i+0x150>
 8009736:	680b      	ldr	r3, [r1, #0]
 8009738:	1d1a      	adds	r2, r3, #4
 800973a:	600a      	str	r2, [r1, #0]
 800973c:	681e      	ldr	r6, [r3, #0]
 800973e:	6862      	ldr	r2, [r4, #4]
 8009740:	2100      	movs	r1, #0
 8009742:	4630      	mov	r0, r6
 8009744:	f7f6 fd4c 	bl	80001e0 <memchr>
 8009748:	b108      	cbz	r0, 800974e <_printf_i+0x1f2>
 800974a:	1b80      	subs	r0, r0, r6
 800974c:	6060      	str	r0, [r4, #4]
 800974e:	6863      	ldr	r3, [r4, #4]
 8009750:	6123      	str	r3, [r4, #16]
 8009752:	2300      	movs	r3, #0
 8009754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009758:	e7a8      	b.n	80096ac <_printf_i+0x150>
 800975a:	6923      	ldr	r3, [r4, #16]
 800975c:	4632      	mov	r2, r6
 800975e:	4649      	mov	r1, r9
 8009760:	4640      	mov	r0, r8
 8009762:	47d0      	blx	sl
 8009764:	3001      	adds	r0, #1
 8009766:	d0ab      	beq.n	80096c0 <_printf_i+0x164>
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	079b      	lsls	r3, r3, #30
 800976c:	d413      	bmi.n	8009796 <_printf_i+0x23a>
 800976e:	68e0      	ldr	r0, [r4, #12]
 8009770:	9b03      	ldr	r3, [sp, #12]
 8009772:	4298      	cmp	r0, r3
 8009774:	bfb8      	it	lt
 8009776:	4618      	movlt	r0, r3
 8009778:	e7a4      	b.n	80096c4 <_printf_i+0x168>
 800977a:	2301      	movs	r3, #1
 800977c:	4632      	mov	r2, r6
 800977e:	4649      	mov	r1, r9
 8009780:	4640      	mov	r0, r8
 8009782:	47d0      	blx	sl
 8009784:	3001      	adds	r0, #1
 8009786:	d09b      	beq.n	80096c0 <_printf_i+0x164>
 8009788:	3501      	adds	r5, #1
 800978a:	68e3      	ldr	r3, [r4, #12]
 800978c:	9903      	ldr	r1, [sp, #12]
 800978e:	1a5b      	subs	r3, r3, r1
 8009790:	42ab      	cmp	r3, r5
 8009792:	dcf2      	bgt.n	800977a <_printf_i+0x21e>
 8009794:	e7eb      	b.n	800976e <_printf_i+0x212>
 8009796:	2500      	movs	r5, #0
 8009798:	f104 0619 	add.w	r6, r4, #25
 800979c:	e7f5      	b.n	800978a <_printf_i+0x22e>
 800979e:	bf00      	nop
 80097a0:	0800a07f 	.word	0x0800a07f
 80097a4:	0800a090 	.word	0x0800a090

080097a8 <_read_r>:
 80097a8:	b538      	push	{r3, r4, r5, lr}
 80097aa:	4d07      	ldr	r5, [pc, #28]	; (80097c8 <_read_r+0x20>)
 80097ac:	4604      	mov	r4, r0
 80097ae:	4608      	mov	r0, r1
 80097b0:	4611      	mov	r1, r2
 80097b2:	2200      	movs	r2, #0
 80097b4:	602a      	str	r2, [r5, #0]
 80097b6:	461a      	mov	r2, r3
 80097b8:	f7f8 f96c 	bl	8001a94 <_read>
 80097bc:	1c43      	adds	r3, r0, #1
 80097be:	d102      	bne.n	80097c6 <_read_r+0x1e>
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	b103      	cbz	r3, 80097c6 <_read_r+0x1e>
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	bd38      	pop	{r3, r4, r5, pc}
 80097c8:	20004cd4 	.word	0x20004cd4

080097cc <__swbuf_r>:
 80097cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ce:	460e      	mov	r6, r1
 80097d0:	4614      	mov	r4, r2
 80097d2:	4605      	mov	r5, r0
 80097d4:	b118      	cbz	r0, 80097de <__swbuf_r+0x12>
 80097d6:	6983      	ldr	r3, [r0, #24]
 80097d8:	b90b      	cbnz	r3, 80097de <__swbuf_r+0x12>
 80097da:	f7fe ffbd 	bl	8008758 <__sinit>
 80097de:	4b21      	ldr	r3, [pc, #132]	; (8009864 <__swbuf_r+0x98>)
 80097e0:	429c      	cmp	r4, r3
 80097e2:	d12b      	bne.n	800983c <__swbuf_r+0x70>
 80097e4:	686c      	ldr	r4, [r5, #4]
 80097e6:	69a3      	ldr	r3, [r4, #24]
 80097e8:	60a3      	str	r3, [r4, #8]
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	071a      	lsls	r2, r3, #28
 80097ee:	d52f      	bpl.n	8009850 <__swbuf_r+0x84>
 80097f0:	6923      	ldr	r3, [r4, #16]
 80097f2:	b36b      	cbz	r3, 8009850 <__swbuf_r+0x84>
 80097f4:	6923      	ldr	r3, [r4, #16]
 80097f6:	6820      	ldr	r0, [r4, #0]
 80097f8:	1ac0      	subs	r0, r0, r3
 80097fa:	6963      	ldr	r3, [r4, #20]
 80097fc:	b2f6      	uxtb	r6, r6
 80097fe:	4283      	cmp	r3, r0
 8009800:	4637      	mov	r7, r6
 8009802:	dc04      	bgt.n	800980e <__swbuf_r+0x42>
 8009804:	4621      	mov	r1, r4
 8009806:	4628      	mov	r0, r5
 8009808:	f7ff fac0 	bl	8008d8c <_fflush_r>
 800980c:	bb30      	cbnz	r0, 800985c <__swbuf_r+0x90>
 800980e:	68a3      	ldr	r3, [r4, #8]
 8009810:	3b01      	subs	r3, #1
 8009812:	60a3      	str	r3, [r4, #8]
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	1c5a      	adds	r2, r3, #1
 8009818:	6022      	str	r2, [r4, #0]
 800981a:	701e      	strb	r6, [r3, #0]
 800981c:	6963      	ldr	r3, [r4, #20]
 800981e:	3001      	adds	r0, #1
 8009820:	4283      	cmp	r3, r0
 8009822:	d004      	beq.n	800982e <__swbuf_r+0x62>
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	07db      	lsls	r3, r3, #31
 8009828:	d506      	bpl.n	8009838 <__swbuf_r+0x6c>
 800982a:	2e0a      	cmp	r6, #10
 800982c:	d104      	bne.n	8009838 <__swbuf_r+0x6c>
 800982e:	4621      	mov	r1, r4
 8009830:	4628      	mov	r0, r5
 8009832:	f7ff faab 	bl	8008d8c <_fflush_r>
 8009836:	b988      	cbnz	r0, 800985c <__swbuf_r+0x90>
 8009838:	4638      	mov	r0, r7
 800983a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800983c:	4b0a      	ldr	r3, [pc, #40]	; (8009868 <__swbuf_r+0x9c>)
 800983e:	429c      	cmp	r4, r3
 8009840:	d101      	bne.n	8009846 <__swbuf_r+0x7a>
 8009842:	68ac      	ldr	r4, [r5, #8]
 8009844:	e7cf      	b.n	80097e6 <__swbuf_r+0x1a>
 8009846:	4b09      	ldr	r3, [pc, #36]	; (800986c <__swbuf_r+0xa0>)
 8009848:	429c      	cmp	r4, r3
 800984a:	bf08      	it	eq
 800984c:	68ec      	ldreq	r4, [r5, #12]
 800984e:	e7ca      	b.n	80097e6 <__swbuf_r+0x1a>
 8009850:	4621      	mov	r1, r4
 8009852:	4628      	mov	r0, r5
 8009854:	f000 f80c 	bl	8009870 <__swsetup_r>
 8009858:	2800      	cmp	r0, #0
 800985a:	d0cb      	beq.n	80097f4 <__swbuf_r+0x28>
 800985c:	f04f 37ff 	mov.w	r7, #4294967295
 8009860:	e7ea      	b.n	8009838 <__swbuf_r+0x6c>
 8009862:	bf00      	nop
 8009864:	08009f78 	.word	0x08009f78
 8009868:	08009f98 	.word	0x08009f98
 800986c:	08009f58 	.word	0x08009f58

08009870 <__swsetup_r>:
 8009870:	4b32      	ldr	r3, [pc, #200]	; (800993c <__swsetup_r+0xcc>)
 8009872:	b570      	push	{r4, r5, r6, lr}
 8009874:	681d      	ldr	r5, [r3, #0]
 8009876:	4606      	mov	r6, r0
 8009878:	460c      	mov	r4, r1
 800987a:	b125      	cbz	r5, 8009886 <__swsetup_r+0x16>
 800987c:	69ab      	ldr	r3, [r5, #24]
 800987e:	b913      	cbnz	r3, 8009886 <__swsetup_r+0x16>
 8009880:	4628      	mov	r0, r5
 8009882:	f7fe ff69 	bl	8008758 <__sinit>
 8009886:	4b2e      	ldr	r3, [pc, #184]	; (8009940 <__swsetup_r+0xd0>)
 8009888:	429c      	cmp	r4, r3
 800988a:	d10f      	bne.n	80098ac <__swsetup_r+0x3c>
 800988c:	686c      	ldr	r4, [r5, #4]
 800988e:	89a3      	ldrh	r3, [r4, #12]
 8009890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009894:	0719      	lsls	r1, r3, #28
 8009896:	d42c      	bmi.n	80098f2 <__swsetup_r+0x82>
 8009898:	06dd      	lsls	r5, r3, #27
 800989a:	d411      	bmi.n	80098c0 <__swsetup_r+0x50>
 800989c:	2309      	movs	r3, #9
 800989e:	6033      	str	r3, [r6, #0]
 80098a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098a4:	81a3      	strh	r3, [r4, #12]
 80098a6:	f04f 30ff 	mov.w	r0, #4294967295
 80098aa:	e03e      	b.n	800992a <__swsetup_r+0xba>
 80098ac:	4b25      	ldr	r3, [pc, #148]	; (8009944 <__swsetup_r+0xd4>)
 80098ae:	429c      	cmp	r4, r3
 80098b0:	d101      	bne.n	80098b6 <__swsetup_r+0x46>
 80098b2:	68ac      	ldr	r4, [r5, #8]
 80098b4:	e7eb      	b.n	800988e <__swsetup_r+0x1e>
 80098b6:	4b24      	ldr	r3, [pc, #144]	; (8009948 <__swsetup_r+0xd8>)
 80098b8:	429c      	cmp	r4, r3
 80098ba:	bf08      	it	eq
 80098bc:	68ec      	ldreq	r4, [r5, #12]
 80098be:	e7e6      	b.n	800988e <__swsetup_r+0x1e>
 80098c0:	0758      	lsls	r0, r3, #29
 80098c2:	d512      	bpl.n	80098ea <__swsetup_r+0x7a>
 80098c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098c6:	b141      	cbz	r1, 80098da <__swsetup_r+0x6a>
 80098c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098cc:	4299      	cmp	r1, r3
 80098ce:	d002      	beq.n	80098d6 <__swsetup_r+0x66>
 80098d0:	4630      	mov	r0, r6
 80098d2:	f7ff facf 	bl	8008e74 <_free_r>
 80098d6:	2300      	movs	r3, #0
 80098d8:	6363      	str	r3, [r4, #52]	; 0x34
 80098da:	89a3      	ldrh	r3, [r4, #12]
 80098dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098e0:	81a3      	strh	r3, [r4, #12]
 80098e2:	2300      	movs	r3, #0
 80098e4:	6063      	str	r3, [r4, #4]
 80098e6:	6923      	ldr	r3, [r4, #16]
 80098e8:	6023      	str	r3, [r4, #0]
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	f043 0308 	orr.w	r3, r3, #8
 80098f0:	81a3      	strh	r3, [r4, #12]
 80098f2:	6923      	ldr	r3, [r4, #16]
 80098f4:	b94b      	cbnz	r3, 800990a <__swsetup_r+0x9a>
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009900:	d003      	beq.n	800990a <__swsetup_r+0x9a>
 8009902:	4621      	mov	r1, r4
 8009904:	4630      	mov	r0, r6
 8009906:	f000 f84d 	bl	80099a4 <__smakebuf_r>
 800990a:	89a0      	ldrh	r0, [r4, #12]
 800990c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009910:	f010 0301 	ands.w	r3, r0, #1
 8009914:	d00a      	beq.n	800992c <__swsetup_r+0xbc>
 8009916:	2300      	movs	r3, #0
 8009918:	60a3      	str	r3, [r4, #8]
 800991a:	6963      	ldr	r3, [r4, #20]
 800991c:	425b      	negs	r3, r3
 800991e:	61a3      	str	r3, [r4, #24]
 8009920:	6923      	ldr	r3, [r4, #16]
 8009922:	b943      	cbnz	r3, 8009936 <__swsetup_r+0xc6>
 8009924:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009928:	d1ba      	bne.n	80098a0 <__swsetup_r+0x30>
 800992a:	bd70      	pop	{r4, r5, r6, pc}
 800992c:	0781      	lsls	r1, r0, #30
 800992e:	bf58      	it	pl
 8009930:	6963      	ldrpl	r3, [r4, #20]
 8009932:	60a3      	str	r3, [r4, #8]
 8009934:	e7f4      	b.n	8009920 <__swsetup_r+0xb0>
 8009936:	2000      	movs	r0, #0
 8009938:	e7f7      	b.n	800992a <__swsetup_r+0xba>
 800993a:	bf00      	nop
 800993c:	20000018 	.word	0x20000018
 8009940:	08009f78 	.word	0x08009f78
 8009944:	08009f98 	.word	0x08009f98
 8009948:	08009f58 	.word	0x08009f58

0800994c <abort>:
 800994c:	b508      	push	{r3, lr}
 800994e:	2006      	movs	r0, #6
 8009950:	f000 f8d0 	bl	8009af4 <raise>
 8009954:	2001      	movs	r0, #1
 8009956:	f7f8 f893 	bl	8001a80 <_exit>

0800995a <__swhatbuf_r>:
 800995a:	b570      	push	{r4, r5, r6, lr}
 800995c:	460e      	mov	r6, r1
 800995e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009962:	2900      	cmp	r1, #0
 8009964:	b096      	sub	sp, #88	; 0x58
 8009966:	4614      	mov	r4, r2
 8009968:	461d      	mov	r5, r3
 800996a:	da07      	bge.n	800997c <__swhatbuf_r+0x22>
 800996c:	2300      	movs	r3, #0
 800996e:	602b      	str	r3, [r5, #0]
 8009970:	89b3      	ldrh	r3, [r6, #12]
 8009972:	061a      	lsls	r2, r3, #24
 8009974:	d410      	bmi.n	8009998 <__swhatbuf_r+0x3e>
 8009976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800997a:	e00e      	b.n	800999a <__swhatbuf_r+0x40>
 800997c:	466a      	mov	r2, sp
 800997e:	f000 f8d5 	bl	8009b2c <_fstat_r>
 8009982:	2800      	cmp	r0, #0
 8009984:	dbf2      	blt.n	800996c <__swhatbuf_r+0x12>
 8009986:	9a01      	ldr	r2, [sp, #4]
 8009988:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800998c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009990:	425a      	negs	r2, r3
 8009992:	415a      	adcs	r2, r3
 8009994:	602a      	str	r2, [r5, #0]
 8009996:	e7ee      	b.n	8009976 <__swhatbuf_r+0x1c>
 8009998:	2340      	movs	r3, #64	; 0x40
 800999a:	2000      	movs	r0, #0
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	b016      	add	sp, #88	; 0x58
 80099a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080099a4 <__smakebuf_r>:
 80099a4:	898b      	ldrh	r3, [r1, #12]
 80099a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099a8:	079d      	lsls	r5, r3, #30
 80099aa:	4606      	mov	r6, r0
 80099ac:	460c      	mov	r4, r1
 80099ae:	d507      	bpl.n	80099c0 <__smakebuf_r+0x1c>
 80099b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	6123      	str	r3, [r4, #16]
 80099b8:	2301      	movs	r3, #1
 80099ba:	6163      	str	r3, [r4, #20]
 80099bc:	b002      	add	sp, #8
 80099be:	bd70      	pop	{r4, r5, r6, pc}
 80099c0:	ab01      	add	r3, sp, #4
 80099c2:	466a      	mov	r2, sp
 80099c4:	f7ff ffc9 	bl	800995a <__swhatbuf_r>
 80099c8:	9900      	ldr	r1, [sp, #0]
 80099ca:	4605      	mov	r5, r0
 80099cc:	4630      	mov	r0, r6
 80099ce:	f7fe ff9f 	bl	8008910 <_malloc_r>
 80099d2:	b948      	cbnz	r0, 80099e8 <__smakebuf_r+0x44>
 80099d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099d8:	059a      	lsls	r2, r3, #22
 80099da:	d4ef      	bmi.n	80099bc <__smakebuf_r+0x18>
 80099dc:	f023 0303 	bic.w	r3, r3, #3
 80099e0:	f043 0302 	orr.w	r3, r3, #2
 80099e4:	81a3      	strh	r3, [r4, #12]
 80099e6:	e7e3      	b.n	80099b0 <__smakebuf_r+0xc>
 80099e8:	4b0d      	ldr	r3, [pc, #52]	; (8009a20 <__smakebuf_r+0x7c>)
 80099ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80099ec:	89a3      	ldrh	r3, [r4, #12]
 80099ee:	6020      	str	r0, [r4, #0]
 80099f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099f4:	81a3      	strh	r3, [r4, #12]
 80099f6:	9b00      	ldr	r3, [sp, #0]
 80099f8:	6163      	str	r3, [r4, #20]
 80099fa:	9b01      	ldr	r3, [sp, #4]
 80099fc:	6120      	str	r0, [r4, #16]
 80099fe:	b15b      	cbz	r3, 8009a18 <__smakebuf_r+0x74>
 8009a00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a04:	4630      	mov	r0, r6
 8009a06:	f000 f8a3 	bl	8009b50 <_isatty_r>
 8009a0a:	b128      	cbz	r0, 8009a18 <__smakebuf_r+0x74>
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	f023 0303 	bic.w	r3, r3, #3
 8009a12:	f043 0301 	orr.w	r3, r3, #1
 8009a16:	81a3      	strh	r3, [r4, #12]
 8009a18:	89a0      	ldrh	r0, [r4, #12]
 8009a1a:	4305      	orrs	r5, r0
 8009a1c:	81a5      	strh	r5, [r4, #12]
 8009a1e:	e7cd      	b.n	80099bc <__smakebuf_r+0x18>
 8009a20:	080086f1 	.word	0x080086f1

08009a24 <memmove>:
 8009a24:	4288      	cmp	r0, r1
 8009a26:	b510      	push	{r4, lr}
 8009a28:	eb01 0402 	add.w	r4, r1, r2
 8009a2c:	d902      	bls.n	8009a34 <memmove+0x10>
 8009a2e:	4284      	cmp	r4, r0
 8009a30:	4623      	mov	r3, r4
 8009a32:	d807      	bhi.n	8009a44 <memmove+0x20>
 8009a34:	1e43      	subs	r3, r0, #1
 8009a36:	42a1      	cmp	r1, r4
 8009a38:	d008      	beq.n	8009a4c <memmove+0x28>
 8009a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a42:	e7f8      	b.n	8009a36 <memmove+0x12>
 8009a44:	4402      	add	r2, r0
 8009a46:	4601      	mov	r1, r0
 8009a48:	428a      	cmp	r2, r1
 8009a4a:	d100      	bne.n	8009a4e <memmove+0x2a>
 8009a4c:	bd10      	pop	{r4, pc}
 8009a4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a56:	e7f7      	b.n	8009a48 <memmove+0x24>

08009a58 <_realloc_r>:
 8009a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5a:	4607      	mov	r7, r0
 8009a5c:	4614      	mov	r4, r2
 8009a5e:	460e      	mov	r6, r1
 8009a60:	b921      	cbnz	r1, 8009a6c <_realloc_r+0x14>
 8009a62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a66:	4611      	mov	r1, r2
 8009a68:	f7fe bf52 	b.w	8008910 <_malloc_r>
 8009a6c:	b922      	cbnz	r2, 8009a78 <_realloc_r+0x20>
 8009a6e:	f7ff fa01 	bl	8008e74 <_free_r>
 8009a72:	4625      	mov	r5, r4
 8009a74:	4628      	mov	r0, r5
 8009a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a78:	f000 f87a 	bl	8009b70 <_malloc_usable_size_r>
 8009a7c:	42a0      	cmp	r0, r4
 8009a7e:	d20f      	bcs.n	8009aa0 <_realloc_r+0x48>
 8009a80:	4621      	mov	r1, r4
 8009a82:	4638      	mov	r0, r7
 8009a84:	f7fe ff44 	bl	8008910 <_malloc_r>
 8009a88:	4605      	mov	r5, r0
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	d0f2      	beq.n	8009a74 <_realloc_r+0x1c>
 8009a8e:	4631      	mov	r1, r6
 8009a90:	4622      	mov	r2, r4
 8009a92:	f7fe ff26 	bl	80088e2 <memcpy>
 8009a96:	4631      	mov	r1, r6
 8009a98:	4638      	mov	r0, r7
 8009a9a:	f7ff f9eb 	bl	8008e74 <_free_r>
 8009a9e:	e7e9      	b.n	8009a74 <_realloc_r+0x1c>
 8009aa0:	4635      	mov	r5, r6
 8009aa2:	e7e7      	b.n	8009a74 <_realloc_r+0x1c>

08009aa4 <_raise_r>:
 8009aa4:	291f      	cmp	r1, #31
 8009aa6:	b538      	push	{r3, r4, r5, lr}
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	460d      	mov	r5, r1
 8009aac:	d904      	bls.n	8009ab8 <_raise_r+0x14>
 8009aae:	2316      	movs	r3, #22
 8009ab0:	6003      	str	r3, [r0, #0]
 8009ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab6:	bd38      	pop	{r3, r4, r5, pc}
 8009ab8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009aba:	b112      	cbz	r2, 8009ac2 <_raise_r+0x1e>
 8009abc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ac0:	b94b      	cbnz	r3, 8009ad6 <_raise_r+0x32>
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 f830 	bl	8009b28 <_getpid_r>
 8009ac8:	462a      	mov	r2, r5
 8009aca:	4601      	mov	r1, r0
 8009acc:	4620      	mov	r0, r4
 8009ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ad2:	f000 b817 	b.w	8009b04 <_kill_r>
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d00a      	beq.n	8009af0 <_raise_r+0x4c>
 8009ada:	1c59      	adds	r1, r3, #1
 8009adc:	d103      	bne.n	8009ae6 <_raise_r+0x42>
 8009ade:	2316      	movs	r3, #22
 8009ae0:	6003      	str	r3, [r0, #0]
 8009ae2:	2001      	movs	r0, #1
 8009ae4:	e7e7      	b.n	8009ab6 <_raise_r+0x12>
 8009ae6:	2400      	movs	r4, #0
 8009ae8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009aec:	4628      	mov	r0, r5
 8009aee:	4798      	blx	r3
 8009af0:	2000      	movs	r0, #0
 8009af2:	e7e0      	b.n	8009ab6 <_raise_r+0x12>

08009af4 <raise>:
 8009af4:	4b02      	ldr	r3, [pc, #8]	; (8009b00 <raise+0xc>)
 8009af6:	4601      	mov	r1, r0
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	f7ff bfd3 	b.w	8009aa4 <_raise_r>
 8009afe:	bf00      	nop
 8009b00:	20000018 	.word	0x20000018

08009b04 <_kill_r>:
 8009b04:	b538      	push	{r3, r4, r5, lr}
 8009b06:	4d07      	ldr	r5, [pc, #28]	; (8009b24 <_kill_r+0x20>)
 8009b08:	2300      	movs	r3, #0
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	4608      	mov	r0, r1
 8009b0e:	4611      	mov	r1, r2
 8009b10:	602b      	str	r3, [r5, #0]
 8009b12:	f7f7 ffa5 	bl	8001a60 <_kill>
 8009b16:	1c43      	adds	r3, r0, #1
 8009b18:	d102      	bne.n	8009b20 <_kill_r+0x1c>
 8009b1a:	682b      	ldr	r3, [r5, #0]
 8009b1c:	b103      	cbz	r3, 8009b20 <_kill_r+0x1c>
 8009b1e:	6023      	str	r3, [r4, #0]
 8009b20:	bd38      	pop	{r3, r4, r5, pc}
 8009b22:	bf00      	nop
 8009b24:	20004cd4 	.word	0x20004cd4

08009b28 <_getpid_r>:
 8009b28:	f7f7 bf92 	b.w	8001a50 <_getpid>

08009b2c <_fstat_r>:
 8009b2c:	b538      	push	{r3, r4, r5, lr}
 8009b2e:	4d07      	ldr	r5, [pc, #28]	; (8009b4c <_fstat_r+0x20>)
 8009b30:	2300      	movs	r3, #0
 8009b32:	4604      	mov	r4, r0
 8009b34:	4608      	mov	r0, r1
 8009b36:	4611      	mov	r1, r2
 8009b38:	602b      	str	r3, [r5, #0]
 8009b3a:	f7f7 fff0 	bl	8001b1e <_fstat>
 8009b3e:	1c43      	adds	r3, r0, #1
 8009b40:	d102      	bne.n	8009b48 <_fstat_r+0x1c>
 8009b42:	682b      	ldr	r3, [r5, #0]
 8009b44:	b103      	cbz	r3, 8009b48 <_fstat_r+0x1c>
 8009b46:	6023      	str	r3, [r4, #0]
 8009b48:	bd38      	pop	{r3, r4, r5, pc}
 8009b4a:	bf00      	nop
 8009b4c:	20004cd4 	.word	0x20004cd4

08009b50 <_isatty_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d06      	ldr	r5, [pc, #24]	; (8009b6c <_isatty_r+0x1c>)
 8009b54:	2300      	movs	r3, #0
 8009b56:	4604      	mov	r4, r0
 8009b58:	4608      	mov	r0, r1
 8009b5a:	602b      	str	r3, [r5, #0]
 8009b5c:	f7f7 ffef 	bl	8001b3e <_isatty>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d102      	bne.n	8009b6a <_isatty_r+0x1a>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	b103      	cbz	r3, 8009b6a <_isatty_r+0x1a>
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	20004cd4 	.word	0x20004cd4

08009b70 <_malloc_usable_size_r>:
 8009b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b74:	1f18      	subs	r0, r3, #4
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	bfbc      	itt	lt
 8009b7a:	580b      	ldrlt	r3, [r1, r0]
 8009b7c:	18c0      	addlt	r0, r0, r3
 8009b7e:	4770      	bx	lr

08009b80 <_init>:
 8009b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b82:	bf00      	nop
 8009b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b86:	bc08      	pop	{r3}
 8009b88:	469e      	mov	lr, r3
 8009b8a:	4770      	bx	lr

08009b8c <_fini>:
 8009b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8e:	bf00      	nop
 8009b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b92:	bc08      	pop	{r3}
 8009b94:	469e      	mov	lr, r3
 8009b96:	4770      	bx	lr
